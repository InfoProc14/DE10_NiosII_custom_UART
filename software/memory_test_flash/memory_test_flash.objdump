
memory_test_flash.elf:     file format elf32-littlenios2
memory_test_flash.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080000

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x0001e948 memsz 0x0001e948 flags r-x
    LOAD off    0x0001f948 vaddr 0x0009e948 paddr 0x000a063c align 2**12
         filesz 0x00001cf4 memsz 0x00001cf4 flags rw-
    LOAD off    0x00022330 vaddr 0x000a2330 paddr 0x000a2330 align 2**12
         filesz 0x00000000 memsz 0x00000168 flags rw-
    LOAD off    0x00022000 vaddr 0x00120000 paddr 0x00120000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00022020 vaddr 0x00120020 paddr 0x00120020 align 2**12
         filesz 0x00000214 memsz 0x00000214 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00120000  00120000  00022000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000214  00120020  00120020  00022020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001d6cc  00080000  00080000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000127c  0009d6cc  0009d6cc  0001e6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cf4  0009e948  000a063c  0001f948  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000168  000a2330  000a2330  00022330  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_flash_data 00000000  000a2498  000a2498  00022234  2**0
                  CONTENTS
  7 .onchip_memory 00000000  00120234  00120234  00022234  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00022234  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001460  00000000  00000000  00022258  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00037edc  00000000  00000000  000236b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000d7e7  00000000  00000000  0005b594  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001265b  00000000  00000000  00068d7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000326c  00000000  00000000  0007b3d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004fb7  00000000  00000000  0007e644  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000260a6  00000000  00000000  000835fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000a96a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002288  00000000  00000000  000a96e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000afcfd  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  000afd00  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000afd03  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000afd04  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000afd05  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000afd09  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000afd0d  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000afd11  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000afd1a  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000afd23  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000c  00000000  00000000  000afd2c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000059  00000000  00000000  000afd38  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008ca77  00000000  00000000  000afd91  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00120000 l    d  .entry	00000000 .entry
00120020 l    d  .exceptions	00000000 .exceptions
00080000 l    d  .text	00000000 .text
0009d6cc l    d  .rodata	00000000 .rodata
0009e948 l    d  .rwdata	00000000 .rwdata
000a2330 l    d  .bss	00000000 .bss
000a2498 l    d  .onchip_flash_data	00000000 .onchip_flash_data
00120234 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/clark/Documents/eie-y2/info-processing-labs/PROJECT_NIOS/software/uart_accel_flash_bsp//obj/HAL/src/crt0.o
00080038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 memtest.c
0008003c l     F .text	0000007c MenuHeader
000800b8 l     F .text	00000058 MenuBegin
00080110 l     F .text	0000004c MenuItem
000801ec l     F .text	00000104 MenuEnd
000a2330 l     O .bss	00000004 entry.3380
000a2334 l     O .bss	00000001 ch.3381
000802f0 l     F .text	00000114 MemGetAddressRange
00080404 l     F .text	00000074 MemTestDataBus
00080478 l     F .text	000001e0 MemTestAddressBus
00080658 l     F .text	00000220 MemTest8_16BitAccess
00080878 l     F .text	000001a4 MemTestDevice
00080a1c l     F .text	000001b4 TestRam
00080bd0 l     F .text	00000150 FlashCheckIfBlockErased
00080d20 l     F .text	00000318 FlashTestBlockWrite
00081038 l     F .text	00000308 FlashTestReadWrite
00081340 l     F .text	000000fc FlashTestBlockErase
0008143c l     F .text	00000138 FlashRunTests
00081574 l     F .text	00000180 GetFlashName
000816f4 l     F .text	00000348 FlashErase
00081a3c l     F .text	00000288 FlashFindErasedBlocks
00081cc4 l     F .text	000001dc TestFlash
00081ea0 l     F .text	00000170 TopMenu
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
0009e948 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfscanf.c
0009e1b6 l     O .rodata	00000022 basefix.4340
00000000 l    df *ABS*	00000000 vfprintf.c
0009e21a l     O .rodata	00000010 zeroes.4404
00086eb4 l     F .text	000000bc __sbprintf
0009e22a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
0009e33b l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00087178 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00088cd0 l     F .text	00000008 __fp_unlock
00088ce4 l     F .text	0000019c __sinit.part.1
00088e80 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
0009f194 l     O .rwdata	00000020 lc_ctype_charset
0009f174 l     O .rwdata	00000020 lc_message_charset
0009f1b4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0009e4d8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
0008bb9c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
0008c078 l     F .text	00000064 sulp
0009e60c l     O .rodata	00000014 fpinan.2773
0009e620 l     O .rodata	00000014 fpi.2737
0009e634 l     O .rodata	00000028 tinytens
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 vfscanf.c
0009e65c l     O .rodata	00000022 basefix.3791
00000000 l    df *ABS*	00000000 vfprintf.c
0009e67e l     O .rodata	00000010 zeroes.4389
0009e68e l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
00091c04 l     F .text	000000fc __sprint_r.part.0
0009e69e l     O .rodata	00000010 zeroes.4349
00093240 l     F .text	000000bc __sbprintf
0009e6ae l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
00093898 l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0009e7be l     O .rodata	00000010 zeroes.4333
0009e7ce l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00099648 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0009975c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00099844 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00099938 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00099a20 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00099b0c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00099ce8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000a0624 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00099f5c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0009a098 l     F .text	00000034 alt_dev_reg
0009f394 l     O .rwdata	00001060 jtag_uart
000a03f4 l     O .rwdata	000000c4 uart
000a04b8 l     O .rwdata	00000100 onchip_flash
000a05b8 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0009a3b8 l     F .text	00000210 altera_avalon_jtag_uart_irq
0009a5c8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0009ac00 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0009aea4 l     F .text	000000a0 altera_avalon_uart_irq
0009af44 l     F .text	000000e4 altera_avalon_uart_rxirq
0009b028 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0009b1c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0009b3dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_onchip_flash.c
0009b5c4 l     F .text	00000034 alt_flash_device_register
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0009c7d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0009ca20 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0009cd00 l     F .text	0000003c alt_get_errno
0009cd3c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000a236c g     O .bss	00000004 alt_instruction_exception_handler
00082da0 g     F .text	00000018 putchar
00080000 g       *ABS*	00000000 __alt_mem_onchip_flash_data
0008b2f8 g     F .text	00000074 _mprec_log10
0008b3e4 g     F .text	0000008c __any_on
00094444 g     F .text	00000054 _isatty_r
0009e4e4 g     O .rodata	00000028 __mprec_tinytens
00099c24 g     F .text	0000007c alt_main
00082db8 g     F .text	000000c0 _puts_r
000a2398 g     O .bss	00000100 alt_irq
00089c10 g     F .text	00000060 _lseek_r
000a063c g       *ABS*	00000000 __flash_rwdata_start
00097e78 g     F .text	00000088 .hidden __eqdf2
000a2498 g       *ABS*	00000000 __alt_heap_start
00082d5c g     F .text	0000003c printf
00095ad8 g     F .text	0000009c _wcrtomb_r
00083134 g     F .text	0000005c __sseek
00089030 g     F .text	00000010 __sinit
000932fc g     F .text	00000140 __swbuf_r
00089b34 g     F .text	0000007c _setlocale_r
00088e88 g     F .text	00000078 __sfmoreglue
00091bec g     F .text	00000018 ungetc
00099cc4 g     F .text	00000024 __malloc_unlock
0008c0dc g     F .text	000015e4 _strtod_r
0008015c g     F .text	00000090 GetInputString
0008e47c g     F .text	00000100 _sfread_r
0008a134 g     F .text	0000015c memmove
00089018 g     F .text	00000018 _cleanup
0008a3b8 g     F .text	000000a8 _Balloc
00097f00 g     F .text	000000dc .hidden __gtdf2
0009d128 g     F .text	00000024 altera_nios2_gen2_irq_init
00120000 g     F .entry	0000000c __reset
00120020 g       *ABS*	00000000 __flash_exceptions_start
0009383c g     F .text	0000005c _fstat_r
000a2344 g     O .bss	00000004 errno
00082f00 g     F .text	00000014 __srget
000830b0 g     F .text	00000008 __seofread
00094738 g     F .text	000013a0 ___svfiprintf_internal_r
000a2358 g     O .bss	00000004 alt_argv
000a85e4 g       *ABS*	00000000 _gp
0009c474 g     F .text	00000090 alt_onchip_flash_poll_for_status_write_passed
0009f214 g     O .rwdata	00000180 alt_fd_list
0008223c g     F .text	00000070 _getc_r
000822ac g     F .text	00000088 getc
00082d98 g     F .text	00000008 _putchar_r
0009c970 g     F .text	00000090 alt_find_dev
00082be4 g     F .text	00000148 memcpy
000941e8 g     F .text	0000025c __hexnan
00088cd8 g     F .text	0000000c _cleanup_r
000992b8 g     F .text	000000dc .hidden __floatsidf
0009cb04 g     F .text	0000007c alt_io_redirect
00097fdc g     F .text	000000f4 .hidden __ltdf2
0009d6cc g       *ABS*	00000000 __DTOR_END__
00082e78 g     F .text	00000014 puts
0009d318 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00089ed8 g     F .text	000000d8 mbrtowc
0008bd8c g     F .text	00000074 __fpclassifyd
0008b254 g     F .text	000000a4 __ratio
00093224 g     F .text	0000001c __vfiprintf_internal
0009a7c0 g     F .text	0000021c altera_avalon_jtag_uart_read
00082334 g     F .text	00000014 malloc
00082d2c g     F .text	00000030 _printf_r
00082158 g     F .text	00000064 .hidden __udivsi3
00099974 g     F .text	000000ac isatty
00089b04 g     F .text	00000030 iswspace
0009c3e4 g     F .text	00000090 alt_onchip_flash_poll_for_status_erase_passed
0009e534 g     O .rodata	000000c8 __mprec_tens
00089bb0 g     F .text	0000000c __locale_charset
00096b34 g     F .text	000000c8 .hidden __lesf2
00095dcc g     F .text	00000074 .hidden __fixunsdfsi
000a2340 g     O .bss	00000004 __malloc_top_pad
000a0628 g     O .rwdata	00000008 altera_onchip_flash_list
0008e40c g     F .text	00000070 __ssrefill_r
0008dfc8 g     F .text	0000001c strtoul
000a05f8 g     O .rwdata	00000004 __mb_cur_max
00089be0 g     F .text	0000000c _localeconv_r
0008dfe4 g     F .text	00000320 _strtoull_r
0008a7ec g     F .text	0000003c __i2b
000894b4 g     F .text	000004c8 __sfvwrite_r
00082f14 g     F .text	00000054 _sbrk_r
0008b5d8 g     F .text	00000060 _read_r
0009c788 g     F .text	00000028 alt_dcache_flush
0009b760 g     F .text	00000168 alt_onchip_flash_erase_block
000a0614 g     O .rwdata	00000004 alt_max_fd
00093530 g     F .text	000000f0 _fclose_r
00088ca0 g     F .text	00000030 fflush
000a233c g     O .bss	00000004 __malloc_max_sbrked_mem
0009cb80 g     F .text	00000180 alt_irq_register
00083230 g     F .text	0000198c __ssvfscanf_r
00096bfc g     F .text	000008ac .hidden __adddf3
00096a00 g     F .text	00000078 .hidden __nesf2
0008affc g     F .text	0000010c __b2d
0009643c g     F .text	000005c4 .hidden __umoddi3
00099b48 g     F .text	000000dc lseek
000a05e4 g     O .rwdata	00000004 _global_impure_ptr
0008b638 g     F .text	00000564 _realloc_r
000a2498 g       *ABS*	00000000 __bss_end
0009d020 g     F .text	00000108 alt_tick
0009e6be g     O .rodata	00000100 __hexdig
00095e40 g     F .text	000005fc .hidden __udivdi3
00093798 g     F .text	00000024 _fputwc_r
0009e50c g     O .rodata	00000028 __mprec_bigtens
0008a5d0 g     F .text	00000104 __s2b
00099394 g     F .text	000000a8 .hidden __floatunsidf
0008ad3c g     F .text	00000060 __mcmp
0009ae00 g     F .text	000000a4 altera_avalon_uart_init
00089050 g     F .text	00000018 __fp_lock_all
0009cf84 g     F .text	0000009c alt_alarm_stop
0008da30 g     F .text	0000001c strtol
000a2360 g     O .bss	00000004 alt_irq_active
001200fc g     F .exceptions	000000d8 alt_irq_handler
0009f1ec g     O .rwdata	00000028 alt_dev_null
0009c7b0 g     F .text	00000020 alt_dcache_flush_all
0008a6d4 g     F .text	00000068 __hi0bits
00099238 g     F .text	00000080 .hidden __fixdfsi
0008d6c0 g     F .text	00000018 strtod
000a063c g       *ABS*	00000000 __ram_rwdata_end
00120000 g       *ABS*	00000000 __alt_mem_onchip_memory
000a060c g     O .rwdata	00000008 alt_dev_list
00099f98 g     F .text	00000100 write
0008b470 g     F .text	000000a0 _putc_r
00096a78 g     F .text	000000bc .hidden __gtsf2
0009e948 g       *ABS*	00000000 __ram_rodata_end
00099880 g     F .text	000000b8 fstat
00097fdc g     F .text	000000f4 .hidden __ledf2
0008aab4 g     F .text	00000140 __pow5mult
00091d18 g     F .text	0000150c ___vfiprintf_internal_r
000a2350 g     O .bss	00000004 __nlocale_changed
000821bc g     F .text	00000058 .hidden __umodsi3
000a2498 g       *ABS*	00000000 end
0009b418 g     F .text	000001ac altera_avalon_uart_write
0009a304 g     F .text	000000b4 altera_avalon_jtag_uart_init
001201d4 g     F .exceptions	00000060 alt_instruction_exception_entry
0009d6cc g       *ABS*	00000000 __CTOR_LIST__
000f0000 g       *ABS*	00000000 __alt_stack_pointer
0009ac7c g     F .text	00000074 alt_avalon_timer_sc_init
0009ad50 g     F .text	00000060 altera_avalon_uart_write_fd
000995e4 g     F .text	00000064 .hidden __clzsi2
0009adb0 g     F .text	00000050 altera_avalon_uart_close_fd
0009a9dc g     F .text	00000224 altera_avalon_jtag_uart_write
00089040 g     F .text	00000004 __sfp_lock_acquire
0008a050 g     F .text	000000e4 memchr
00084bbc g     F .text	000022dc ___vfprintf_internal_r
0008bed8 g     F .text	00000058 _sprintf_r
0009b6c4 g     F .text	0000009c alt_onchip_flash_get_info
000891a4 g     F .text	00000310 _free_r
00089bbc g     F .text	00000010 __locale_mb_cur_max
0009d518 g     F .text	00000180 __call_exitprocs
00082e8c g     F .text	00000074 __srget_r
0008e304 g     F .text	00000108 _sungetc_r
000a234c g     O .bss	00000004 __mlocale_changed
000a05ec g     O .rwdata	00000004 __malloc_sbrk_base
00080000 g     F .text	0000003c _start
000a2364 g     O .bss	00000004 _alt_tick_rate
0008da4c g     F .text	00000304 _strtoll_r
0008abf4 g     F .text	00000148 __lshift
000a2368 g     O .bss	00000004 _alt_nticks
00099d24 g     F .text	00000104 read
0009a104 g     F .text	0000009c alt_sys_init
00094568 g     F .text	000001d0 __ssprint_r
0009d400 g     F .text	00000118 __register_exitproc
00094498 g     F .text	000000d0 strncmp
0008a828 g     F .text	0000028c __multiply
0009a668 g     F .text	00000068 altera_avalon_jtag_uart_close
00082214 g     F .text	00000028 .hidden __mulsi3
0009e948 g       *ABS*	00000000 __ram_rwdata_start
0009d6cc g       *ABS*	00000000 __ram_rodata_start
000a2370 g     O .bss	00000028 __malloc_current_mallinfo
00096a00 g     F .text	00000078 .hidden __eqsf2
0008b108 g     F .text	0000014c __d2b
0009a1a0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0008dd50 g     F .text	00000278 _strtoul_r
0009d254 g     F .text	000000c4 alt_get_fd
0009c630 g     F .text	00000158 alt_busy_sleep
00087124 g     F .text	00000054 _close_r
00082b68 g     F .text	0000007c memcmp
0009a260 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000a2498 g       *ABS*	00000000 __alt_stack_base
0009a2b0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00082f68 g     F .text	0000007c sscanf
00086fd0 g     F .text	00000154 __swsetup_r
000974a8 g     F .text	000009d0 .hidden __divdf3
0009b5f8 g     F .text	000000cc alt_onchip_flash_read
00088f00 g     F .text	00000118 __sfp
0008b36c g     F .text	00000078 __copybits
0009ed6c g     O .rwdata	00000408 __malloc_av_
0008904c g     F .text	00000004 __sinit_lock_release
000980d0 g     F .text	0000086c .hidden __muldf3
0008305c g     F .text	00000054 __sread
0009d14c g     F .text	00000108 alt_find_file
0009c80c g     F .text	000000a4 alt_dev_llist_insert
00099ca0 g     F .text	00000024 __malloc_lock
00099eac g     F .text	000000b0 sbrk
0008f6c8 g     F .text	000022bc ___svfprintf_internal_r
00088c44 g     F .text	0000005c _fflush_r
00093454 g     F .text	000000dc _calloc_r
000a061c g     O .rwdata	00000008 alt_flash_dev_list
000a2330 g       *ABS*	00000000 __bss_start
0008a290 g     F .text	00000128 memset
00082010 g     F .text	00000050 main
000a235c g     O .bss	00000004 alt_envp
000a2338 g     O .bss	00000004 __malloc_max_total_mem
0009a200 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0009343c g     F .text	00000018 __swbuf
00096b34 g     F .text	000000c8 .hidden __ltsf2
00083190 g     F .text	00000008 __sclose
000f0000 g       *ABS*	00000000 __alt_heap_limit
00093620 g     F .text	00000014 fclose
0008d7d8 g     F .text	00000258 _strtol_r
0009943c g     F .text	000001a8 .hidden __truncdfsf2
000873a0 g     F .text	00001688 _dtoa_r
0008235c g     F .text	0000080c _malloc_r
00095c34 g     F .text	00000030 __ascii_wctomb
000a0618 g     O .rwdata	00000004 alt_errno
00091984 g     F .text	000000d4 __submore
0009c354 g     F .text	00000090 alt_onchip_flash_poll_for_status_to_go_idle
0008997c g     F .text	000000c4 _fwalk
00089ff4 g     F .text	0000005c _mbtowc_r
0008b510 g     F .text	000000c8 putc
00082060 g     F .text	00000084 .hidden __divsi3
00089080 g     F .text	00000124 _malloc_trim_r
0009d6cc g       *ABS*	00000000 __CTOR_END__
0009be78 g     F .text	000004dc altera_onchip_flash_init
0008bf9c g     F .text	000000dc strcmp
0009d6cc g       *ABS*	00000000 __flash_rodata_start
0009d6cc g       *ABS*	00000000 __DTOR_LIST__
00097e78 g     F .text	00000088 .hidden __nedf2
0009a0cc g     F .text	00000038 alt_irq_init
00099e28 g     F .text	00000084 alt_release_fd
0008bf30 g     F .text	0000006c sprintf
0009e7de g     O .rodata	00000100 .hidden __clz_tab
000a2348 g     O .bss	00000004 _PathLocale
0008d6d8 g     F .text	00000100 strtof
0009d3b4 g     F .text	00000014 atexit
00096a78 g     F .text	000000bc .hidden __gesf2
00086f70 g     F .text	00000060 _write_r
00089bec g     F .text	00000018 setlocale
0008bed0 g     F .text	00000008 nanf
000a05e8 g     O .rwdata	00000004 _impure_ptr
000a2354 g     O .bss	00000004 alt_argc
00088a28 g     F .text	0000021c __sflush_r
00089e2c g     F .text	000000ac _mbrtowc_r
0009c910 g     F .text	00000060 _do_dtors
00089bd8 g     F .text	00000008 __locale_cjk_lang
0008bbb8 g     F .text	000001d4 __srefill_r
00120020 g       .exceptions	00000000 alt_irq_entry
00089fb0 g     F .text	00000044 __ascii_mbtowc
0008af98 g     F .text	00000064 __ulp
00089068 g     F .text	00000018 __fp_unlock_all
000a0604 g     O .rwdata	00000008 alt_fs_list
0009b8c8 g     F .text	000002d8 alt_onchip_flash_write_block
0008e57c g     F .text	0000114c __ssvfiscanf_r
00120020 g       *ABS*	00000000 __ram_exceptions_start
00089c04 g     F .text	0000000c localeconv
00082fe4 g     F .text	00000078 _sscanf_r
000a063c g       *ABS*	00000000 _edata
0009acf0 g     F .text	00000060 altera_avalon_uart_read_fd
0009bba0 g     F .text	000002d8 alt_onchip_flash_write
000a2498 g       *ABS*	00000000 _end
00099788 g     F .text	00000068 alt_flash_open_dev
00093634 g     F .text	00000164 __fputwc
00120234 g       *ABS*	00000000 __ram_exceptions_end
0009a6d0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000830b8 g     F .text	0000007c __swrite
000a05f0 g     O .rwdata	00000004 __malloc_trim_threshold
00089bcc g     F .text	0000000c __locale_msgcharset
0009d3c8 g     F .text	00000038 exit
00089a40 g     F .text	000000c4 _fwalk_reent
0008ad9c g     F .text	000001fc __mdiff
000997f0 g     F .text	00000054 alt_flash_close_dev
000820e4 g     F .text	00000074 .hidden __modsi3
000a05f4 g     O .rwdata	00000004 __ctype_ptr__
000f0000 g       *ABS*	00000000 __alt_data_end
00120020 g     F .exceptions	00000000 alt_exception
00089044 g     F .text	00000004 __sfp_lock_release
0008be00 g     F .text	000000d0 __sccl
0009e23a g     O .rodata	00000101 _ctype_
000a05fc g     O .rwdata	00000004 __mbtowc
0009b170 g     F .text	00000054 altera_avalon_uart_close
0009d698 g     F .text	00000034 _exit
0009c504 g     F .text	0000012c alt_alarm_start
00095cc0 g     F .text	0000010c .hidden __muldi3
00089c70 g     F .text	000001bc __smakebuf_r
00083198 g     F .text	00000098 strlen
0009ce28 g     F .text	0000015c open
00097f00 g     F .text	000000dc .hidden __gedf2
00093998 g     F .text	00000850 __gethex
000a0600 g     O .rwdata	00000004 __wctomb
00091d00 g     F .text	00000018 __sprint_r
0009ca00 g     F .text	00000020 alt_icache_flush_all
000a0630 g     O .rwdata	00000004 alt_priority_mask
00086e98 g     F .text	0000001c __vfprintf_internal
0009b200 g     F .text	000001dc altera_avalon_uart_read
00095c64 g     F .text	0000005c _wctomb_r
0009893c g     F .text	000008fc .hidden __subdf3
0008a73c g     F .text	000000b0 __lo0bits
000a0634 g     O .rwdata	00000008 alt_alarm_list
00091a58 g     F .text	00000194 _ungetc_r
0009c8b0 g     F .text	00000060 _do_ctors
00095b74 g     F .text	000000c0 wcrtomb
00099684 g     F .text	000000d8 close
00099a88 g     F .text	00000084 alt_load
000937bc g     F .text	00000080 fputwc
00082348 g     F .text	00000014 free
00089048 g     F .text	00000004 __sinit_lock_acquire
0008a488 g     F .text	00000148 __multadd
0008a460 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00120000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  120000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
  120004:	08400014 	ori	at,at,0
    jmp r1
  120008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00120020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  120020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  120024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  120028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  12002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  120030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  120034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  120038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  12003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  120040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  120044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  120048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  12004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  120050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  120054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  120058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  12005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  120060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  120064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  120068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  12006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  120070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  120074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  120078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  12007c:	10000326 	beq	r2,zero,12008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  120080:	20000226 	beq	r4,zero,12008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  120084:	01200fc0 	call	1200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  120088:	00000706 	br	1200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  12008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  120090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  120094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  120098:	01201d40 	call	1201d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  12009c:	1000021e 	bne	r2,zero,1200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  1200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  1200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  1200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  1200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  1200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  1200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  1200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  1200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  1200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  1200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  1200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  1200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  1200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  1200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  1200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  1200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  1200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  1200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  1200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  1200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  1200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  1200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  1200f8:	ef80083a 	eret

001200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  1200fc:	defff904 	addi	sp,sp,-28
  120100:	dfc00615 	stw	ra,24(sp)
  120104:	df000515 	stw	fp,20(sp)
  120108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  12010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  120110:	0005313a 	rdctl	r2,ipending
  120114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  120118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  12011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  120120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  120124:	00800044 	movi	r2,1
  120128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  12012c:	e0fffb17 	ldw	r3,-20(fp)
  120130:	e0bffc17 	ldw	r2,-16(fp)
  120134:	1884703a 	and	r2,r3,r2
  120138:	10001526 	beq	r2,zero,120190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  12013c:	008002b4 	movhi	r2,10
  120140:	1088e604 	addi	r2,r2,9112
  120144:	e0fffd17 	ldw	r3,-12(fp)
  120148:	180690fa 	slli	r3,r3,3
  12014c:	10c5883a 	add	r2,r2,r3
  120150:	10c00017 	ldw	r3,0(r2)
  120154:	008002b4 	movhi	r2,10
  120158:	1088e604 	addi	r2,r2,9112
  12015c:	e13ffd17 	ldw	r4,-12(fp)
  120160:	200890fa 	slli	r4,r4,3
  120164:	1105883a 	add	r2,r2,r4
  120168:	10800104 	addi	r2,r2,4
  12016c:	10800017 	ldw	r2,0(r2)
  120170:	e17ffd17 	ldw	r5,-12(fp)
  120174:	1009883a 	mov	r4,r2
  120178:	183ee83a 	callr	r3
#endif
        break;
  12017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  120180:	0005313a 	rdctl	r2,ipending
  120184:	e0bfff15 	stw	r2,-4(fp)

  return active;
  120188:	e0bfff17 	ldw	r2,-4(fp)
  12018c:	00000706 	br	1201ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
  120190:	e0bffc17 	ldw	r2,-16(fp)
  120194:	1085883a 	add	r2,r2,r2
  120198:	e0bffc15 	stw	r2,-16(fp)
      i++;
  12019c:	e0bffd17 	ldw	r2,-12(fp)
  1201a0:	10800044 	addi	r2,r2,1
  1201a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  1201a8:	003fe006 	br	12012c <__ram_exceptions_end+0xfffffef8>

    active = alt_irq_pending ();
  1201ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  1201b0:	e0bffb17 	ldw	r2,-20(fp)
  1201b4:	103fda1e 	bne	r2,zero,120120 <__ram_exceptions_end+0xfffffeec>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  1201b8:	0001883a 	nop
}
  1201bc:	0001883a 	nop
  1201c0:	e037883a 	mov	sp,fp
  1201c4:	dfc00117 	ldw	ra,4(sp)
  1201c8:	df000017 	ldw	fp,0(sp)
  1201cc:	dec00204 	addi	sp,sp,8
  1201d0:	f800283a 	ret

001201d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  1201d4:	defffb04 	addi	sp,sp,-20
  1201d8:	dfc00415 	stw	ra,16(sp)
  1201dc:	df000315 	stw	fp,12(sp)
  1201e0:	df000304 	addi	fp,sp,12
  1201e4:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  1201e8:	00bfffc4 	movi	r2,-1
  1201ec:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
  1201f0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  1201f4:	d0a76217 	ldw	r2,-25208(gp)
  1201f8:	10000726 	beq	r2,zero,120218 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  1201fc:	d0a76217 	ldw	r2,-25208(gp)
  120200:	e0fffd17 	ldw	r3,-12(fp)
  120204:	e1bffe17 	ldw	r6,-8(fp)
  120208:	e17fff17 	ldw	r5,-4(fp)
  12020c:	1809883a 	mov	r4,r3
  120210:	103ee83a 	callr	r2
  120214:	00000206 	br	120220 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  120218:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  12021c:	0005883a 	mov	r2,zero
}
  120220:	e037883a 	mov	sp,fp
  120224:	dfc00117 	ldw	ra,4(sp)
  120228:	df000017 	ldw	fp,0(sp)
  12022c:	dec00204 	addi	sp,sp,8
  120230:	f800283a 	ret

Disassembly of section .text:

00080000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80000:	06c003f4 	movhi	sp,15
    ori sp, sp, %lo(__alt_stack_pointer)
   80004:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   80008:	068002b4 	movhi	gp,10
    ori gp, gp, %lo(_gp)
   8000c:	d6a17914 	ori	gp,gp,34276
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80010:	008002b4 	movhi	r2,10
    ori r2, r2, %lo(__bss_start)
   80014:	1088cc14 	ori	r2,r2,9008

    movhi r3, %hi(__bss_end)
   80018:	00c002b4 	movhi	r3,10
    ori r3, r3, %lo(__bss_end)
   8001c:	18c92614 	ori	r3,r3,9368

    beq r2, r3, 1f
   80020:	10c00326 	beq	r2,r3,80030 <_start+0x30>

0:
    stw zero, (r2)
   80024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   80028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   8002c:	10fffd36 	bltu	r2,r3,80024 <__ram_exceptions_end+0xfff5fdf0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80030:	0099a880 	call	99a88 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80034:	0099c240 	call	99c24 <alt_main>

00080038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   80038:	003fff06 	br	80038 <__ram_exceptions_end+0xfff5fe04>

0008003c <MenuHeader>:
*
*  Purpose: Prints the menu header.
*
******************************************************************/
static void MenuHeader(void)
{
   8003c:	defffe04 	addi	sp,sp,-8
   80040:	dfc00115 	stw	ra,4(sp)
   80044:	df000015 	stw	fp,0(sp)
   80048:	d839883a 	mov	fp,sp
  printf("\n\n");
   8004c:	010002b4 	movhi	r4,10
   80050:	2135b304 	addi	r4,r4,-10548
   80054:	0082e780 	call	82e78 <puts>
  printf("             <---->   Nios II Memory Test.   <---->\n");
   80058:	010002b4 	movhi	r4,10
   8005c:	2135b404 	addi	r4,r4,-10544
   80060:	0082e780 	call	82e78 <puts>
  printf("This software example tests the memory in your system to assure it\n");
   80064:	010002b4 	movhi	r4,10
   80068:	2135c104 	addi	r4,r4,-10492
   8006c:	0082e780 	call	82e78 <puts>
  printf("is working properly.  This test is destructive to the contents of\n");
   80070:	010002b4 	movhi	r4,10
   80074:	2135d204 	addi	r4,r4,-10424
   80078:	0082e780 	call	82e78 <puts>
  printf("the memory it tests. Assure the memory being tested does not contain\n");
   8007c:	010002b4 	movhi	r4,10
   80080:	2135e304 	addi	r4,r4,-10356
   80084:	0082e780 	call	82e78 <puts>
  printf("the executable or data sections of this code or the exception address\n");
   80088:	010002b4 	movhi	r4,10
   8008c:	2135f504 	addi	r4,r4,-10284
   80090:	0082e780 	call	82e78 <puts>
  printf("of the system.\n");
   80094:	010002b4 	movhi	r4,10
   80098:	21360704 	addi	r4,r4,-10212
   8009c:	0082e780 	call	82e78 <puts>
}
   800a0:	0001883a 	nop
   800a4:	e037883a 	mov	sp,fp
   800a8:	dfc00117 	ldw	ra,4(sp)
   800ac:	df000017 	ldw	fp,0(sp)
   800b0:	dec00204 	addi	sp,sp,8
   800b4:	f800283a 	ret

000800b8 <MenuBegin>:
*
*  Purpose: Prints the top portion of the menu.
*
******************************************************************/
static void MenuBegin( char *title )
{
   800b8:	defffd04 	addi	sp,sp,-12
   800bc:	dfc00215 	stw	ra,8(sp)
   800c0:	df000115 	stw	fp,4(sp)
   800c4:	df000104 	addi	fp,sp,4
   800c8:	e13fff15 	stw	r4,-4(fp)
  printf("\n\n");
   800cc:	010002b4 	movhi	r4,10
   800d0:	2135b304 	addi	r4,r4,-10548
   800d4:	0082e780 	call	82e78 <puts>
  printf("----------------------------------\n");
   800d8:	010002b4 	movhi	r4,10
   800dc:	21360b04 	addi	r4,r4,-10196
   800e0:	0082e780 	call	82e78 <puts>
  printf("%s\n",title);
   800e4:	e13fff17 	ldw	r4,-4(fp)
   800e8:	0082e780 	call	82e78 <puts>
  printf("----------------------------------\n");
   800ec:	010002b4 	movhi	r4,10
   800f0:	21360b04 	addi	r4,r4,-10196
   800f4:	0082e780 	call	82e78 <puts>
}
   800f8:	0001883a 	nop
   800fc:	e037883a 	mov	sp,fp
   80100:	dfc00117 	ldw	ra,4(sp)
   80104:	df000017 	ldw	fp,0(sp)
   80108:	dec00204 	addi	sp,sp,8
   8010c:	f800283a 	ret

00080110 <MenuItem>:
*  Purpose: Prints selection items in the menu, enumerated by the 
*           specified letter.
*
******************************************************************/
static void MenuItem( char letter, char *name )
{
   80110:	defffc04 	addi	sp,sp,-16
   80114:	dfc00315 	stw	ra,12(sp)
   80118:	df000215 	stw	fp,8(sp)
   8011c:	df000204 	addi	fp,sp,8
   80120:	2005883a 	mov	r2,r4
   80124:	e17fff15 	stw	r5,-4(fp)
   80128:	e0bffe05 	stb	r2,-8(fp)
  printf("     %c:  %s\n" ,letter, name);
   8012c:	e0bffe07 	ldb	r2,-8(fp)
   80130:	e1bfff17 	ldw	r6,-4(fp)
   80134:	100b883a 	mov	r5,r2
   80138:	010002b4 	movhi	r4,10
   8013c:	21361404 	addi	r4,r4,-10160
   80140:	0082d5c0 	call	82d5c <printf>
}
   80144:	0001883a 	nop
   80148:	e037883a 	mov	sp,fp
   8014c:	dfc00117 	ldw	ra,4(sp)
   80150:	df000017 	ldw	fp,0(sp)
   80154:	dec00204 	addi	sp,sp,8
   80158:	f800283a 	ret

0008015c <GetInputString>:
*           returns the string, minus any '\r' characters it 
*           encounters.
*
******************************************************************/
void GetInputString( char* entry, int size, FILE * stream )
{
   8015c:	defff904 	addi	sp,sp,-28
   80160:	dfc00615 	stw	ra,24(sp)
   80164:	df000515 	stw	fp,20(sp)
   80168:	df000504 	addi	fp,sp,20
   8016c:	e13ffd15 	stw	r4,-12(fp)
   80170:	e17ffe15 	stw	r5,-8(fp)
   80174:	e1bfff15 	stw	r6,-4(fp)
  int i;
  int ch = 0;
   80178:	e03ffc15 	stw	zero,-16(fp)
  
  for(i = 0; (ch != '\n') && (i < size); )
   8017c:	e03ffb15 	stw	zero,-20(fp)
   80180:	00000e06 	br	801bc <GetInputString+0x60>
  {
    if( (ch = getc(stream)) != '\r')
   80184:	e13fff17 	ldw	r4,-4(fp)
   80188:	00822ac0 	call	822ac <getc>
   8018c:	e0bffc15 	stw	r2,-16(fp)
   80190:	e0bffc17 	ldw	r2,-16(fp)
   80194:	10800360 	cmpeqi	r2,r2,13
   80198:	1000081e 	bne	r2,zero,801bc <GetInputString+0x60>
    {
      entry[i] = ch;
   8019c:	e0bffb17 	ldw	r2,-20(fp)
   801a0:	e0fffd17 	ldw	r3,-12(fp)
   801a4:	1885883a 	add	r2,r3,r2
   801a8:	e0fffc17 	ldw	r3,-16(fp)
   801ac:	10c00005 	stb	r3,0(r2)
      i++;
   801b0:	e0bffb17 	ldw	r2,-20(fp)
   801b4:	10800044 	addi	r2,r2,1
   801b8:	e0bffb15 	stw	r2,-20(fp)
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;
  
  for(i = 0; (ch != '\n') && (i < size); )
   801bc:	e0bffc17 	ldw	r2,-16(fp)
   801c0:	108002a0 	cmpeqi	r2,r2,10
   801c4:	1000031e 	bne	r2,zero,801d4 <GetInputString+0x78>
   801c8:	e0fffb17 	ldw	r3,-20(fp)
   801cc:	e0bffe17 	ldw	r2,-8(fp)
   801d0:	18bfec16 	blt	r3,r2,80184 <__ram_exceptions_end+0xfff5ff50>
    {
      entry[i] = ch;
      i++;
    }
  }
}
   801d4:	0001883a 	nop
   801d8:	e037883a 	mov	sp,fp
   801dc:	dfc00117 	ldw	ra,4(sp)
   801e0:	df000017 	ldw	fp,0(sp)
   801e4:	dec00204 	addi	sp,sp,8
   801e8:	f800283a 	ret

000801ec <MenuEnd>:
*  Purpose: Prints the end of the menu, then captures and returns
*           the user's selection.
*
******************************************************************/
static int MenuEnd( char lowLetter, char highLetter )
{
   801ec:	defffc04 	addi	sp,sp,-16
   801f0:	dfc00315 	stw	ra,12(sp)
   801f4:	df000215 	stw	fp,8(sp)
   801f8:	df000204 	addi	fp,sp,8
   801fc:	2007883a 	mov	r3,r4
   80200:	2805883a 	mov	r2,r5
   80204:	e0fffe05 	stb	r3,-8(fp)
   80208:	e0bfff05 	stb	r2,-4(fp)
  static char entry[4];
  static char ch;

  printf("     q:  Exit\n");
   8020c:	010002b4 	movhi	r4,10
   80210:	21361804 	addi	r4,r4,-10144
   80214:	0082e780 	call	82e78 <puts>
  printf("----------------------------------\n");
   80218:	010002b4 	movhi	r4,10
   8021c:	21360b04 	addi	r4,r4,-10196
   80220:	0082e780 	call	82e78 <puts>
  printf("\nSelect Choice (%c-%c): [Followed by <enter>]",lowLetter,highLetter);
   80224:	e0bffe07 	ldb	r2,-8(fp)
   80228:	e0ffff07 	ldb	r3,-4(fp)
   8022c:	180d883a 	mov	r6,r3
   80230:	100b883a 	mov	r5,r2
   80234:	010002b4 	movhi	r4,10
   80238:	21361c04 	addi	r4,r4,-10128
   8023c:	0082d5c0 	call	82d5c <printf>

  GetInputString( entry, sizeof(entry), stdin );
   80240:	d0a00117 	ldw	r2,-32764(gp)
   80244:	10800117 	ldw	r2,4(r2)
   80248:	100d883a 	mov	r6,r2
   8024c:	01400104 	movi	r5,4
   80250:	d1275304 	addi	r4,gp,-25268
   80254:	008015c0 	call	8015c <GetInputString>
  if(sscanf(entry, "%c\n", &ch))
   80258:	d1a75404 	addi	r6,gp,-25264
   8025c:	014002b4 	movhi	r5,10
   80260:	29762804 	addi	r5,r5,-10080
   80264:	d1275304 	addi	r4,gp,-25268
   80268:	0082f680 	call	82f68 <sscanf>
   8026c:	10001726 	beq	r2,zero,802cc <MenuEnd+0xe0>
  {
    if( ch >= 'A' && ch <= 'Z' )
   80270:	d0a75403 	ldbu	r2,-25264(gp)
   80274:	10803fcc 	andi	r2,r2,255
   80278:	1080201c 	xori	r2,r2,128
   8027c:	10bfe004 	addi	r2,r2,-128
   80280:	10801050 	cmplti	r2,r2,65
   80284:	1000091e 	bne	r2,zero,802ac <MenuEnd+0xc0>
   80288:	d0a75403 	ldbu	r2,-25264(gp)
   8028c:	10803fcc 	andi	r2,r2,255
   80290:	1080201c 	xori	r2,r2,128
   80294:	10bfe004 	addi	r2,r2,-128
   80298:	108016c8 	cmpgei	r2,r2,91
   8029c:	1000031e 	bne	r2,zero,802ac <MenuEnd+0xc0>
      ch += 'a' - 'A';
   802a0:	d0a75403 	ldbu	r2,-25264(gp)
   802a4:	10800804 	addi	r2,r2,32
   802a8:	d0a75405 	stb	r2,-25264(gp)
    if( ch == 27 )
   802ac:	d0a75403 	ldbu	r2,-25264(gp)
   802b0:	10803fcc 	andi	r2,r2,255
   802b4:	1080201c 	xori	r2,r2,128
   802b8:	10bfe004 	addi	r2,r2,-128
   802bc:	108006d8 	cmpnei	r2,r2,27
   802c0:	1000021e 	bne	r2,zero,802cc <MenuEnd+0xe0>
      ch = 'q';
   802c4:	00801c44 	movi	r2,113
   802c8:	d0a75405 	stb	r2,-25264(gp)
  }
  return ch;
   802cc:	d0a75403 	ldbu	r2,-25264(gp)
   802d0:	10803fcc 	andi	r2,r2,255
   802d4:	1080201c 	xori	r2,r2,128
   802d8:	10bfe004 	addi	r2,r2,-128
}
   802dc:	e037883a 	mov	sp,fp
   802e0:	dfc00117 	ldw	ra,4(sp)
   802e4:	df000017 	ldw	fp,0(sp)
   802e8:	dec00204 	addi	sp,sp,8
   802ec:	f800283a 	ret

000802f0 <MemGetAddressRange>:
*
*  Purpose: Gathers a range of memory from the user.
*
******************************************************************/
static int MemGetAddressRange(int* base_address, int* end_address)
{
   802f0:	defff904 	addi	sp,sp,-28
   802f4:	dfc00615 	stw	ra,24(sp)
   802f8:	df000515 	stw	fp,20(sp)
   802fc:	df000504 	addi	fp,sp,20
   80300:	e13ffe15 	stw	r4,-8(fp)
   80304:	e17fff15 	stw	r5,-4(fp)
  char line[12];

  while(1)
  {
    /* Get the base address */
    printf("Base address to start memory test: (i.e. 0x800000)\n");
   80308:	010002b4 	movhi	r4,10
   8030c:	21362904 	addi	r4,r4,-10076
   80310:	0082e780 	call	82e78 <puts>
    printf(">");
   80314:	01000f84 	movi	r4,62
   80318:	0082da00 	call	82da0 <putchar>

    GetInputString( line, sizeof(line), stdin );
   8031c:	d0a00117 	ldw	r2,-32764(gp)
   80320:	10800117 	ldw	r2,4(r2)
   80324:	100d883a 	mov	r6,r2
   80328:	01400304 	movi	r5,12
   8032c:	e13ffb04 	addi	r4,fp,-20
   80330:	008015c0 	call	8015c <GetInputString>
   
    /* Check the format to make sure it was entered as hex */
    if(sscanf(line, "0x%X", base_address) != 1)
   80334:	e1bffe17 	ldw	r6,-8(fp)
   80338:	014002b4 	movhi	r5,10
   8033c:	29763604 	addi	r5,r5,-10024
   80340:	e13ffb04 	addi	r4,fp,-20
   80344:	0082f680 	call	82f68 <sscanf>
   80348:	10800060 	cmpeqi	r2,r2,1
   8034c:	1000061e 	bne	r2,zero,80368 <MemGetAddressRange+0x78>
    {
      printf("%s\n", line);
   80350:	e13ffb04 	addi	r4,fp,-20
   80354:	0082e780 	call	82e78 <puts>
      printf(" -ERROR: Invalid base address entered.  Address must be in the form '0x800000'\n\n");
   80358:	010002b4 	movhi	r4,10
   8035c:	21363804 	addi	r4,r4,-10016
   80360:	0082e780 	call	82e78 <puts>
      continue;
   80364:	00001f06 	br	803e4 <MemGetAddressRange+0xf4>
    }
    
    /* Get the end address */
    printf("End Address:\n");
   80368:	010002b4 	movhi	r4,10
   8036c:	21364c04 	addi	r4,r4,-9936
   80370:	0082e780 	call	82e78 <puts>
    printf(">");
   80374:	01000f84 	movi	r4,62
   80378:	0082da00 	call	82da0 <putchar>

    GetInputString( line, sizeof(line), stdin );
   8037c:	d0a00117 	ldw	r2,-32764(gp)
   80380:	10800117 	ldw	r2,4(r2)
   80384:	100d883a 	mov	r6,r2
   80388:	01400304 	movi	r5,12
   8038c:	e13ffb04 	addi	r4,fp,-20
   80390:	008015c0 	call	8015c <GetInputString>
    
    /* Check the format to make sure it was entered as hex */
    if(sscanf(line, "0x%X", end_address) != 1)
   80394:	e1bfff17 	ldw	r6,-4(fp)
   80398:	014002b4 	movhi	r5,10
   8039c:	29763604 	addi	r5,r5,-10024
   803a0:	e13ffb04 	addi	r4,fp,-20
   803a4:	0082f680 	call	82f68 <sscanf>
   803a8:	10800060 	cmpeqi	r2,r2,1
   803ac:	1000041e 	bne	r2,zero,803c0 <MemGetAddressRange+0xd0>
    {
      printf(" -ERROR: Invalid end address entered.  Address must be in the form '0x8FFFFF'\n\n");
   803b0:	010002b4 	movhi	r4,10
   803b4:	21365004 	addi	r4,r4,-9920
   803b8:	0082e780 	call	82e78 <puts>
      continue;
   803bc:	00000906 	br	803e4 <MemGetAddressRange+0xf4>
    }
    
    /* Make sure end address is greater than base address. */
    if (*end_address <= *base_address)
   803c0:	e0bfff17 	ldw	r2,-4(fp)
   803c4:	10800017 	ldw	r2,0(r2)
   803c8:	e0fffe17 	ldw	r3,-8(fp)
   803cc:	18c00017 	ldw	r3,0(r3)
   803d0:	18800516 	blt	r3,r2,803e8 <MemGetAddressRange+0xf8>
    {
      printf(" -ERROR: End address must be greater than the start address\n\n");
   803d4:	010002b4 	movhi	r4,10
   803d8:	21366404 	addi	r4,r4,-9840
   803dc:	0082e780 	call	82e78 <puts>

      continue;
   803e0:	0001883a 	nop
    }
    break;
  }
   803e4:	003fc806 	br	80308 <__ram_exceptions_end+0xfff600d4>
    {
      printf(" -ERROR: End address must be greater than the start address\n\n");

      continue;
    }
    break;
   803e8:	0001883a 	nop
  }

  return(0);
   803ec:	0005883a 	mov	r2,zero
}
   803f0:	e037883a 	mov	sp,fp
   803f4:	dfc00117 	ldw	ra,4(sp)
   803f8:	df000017 	ldw	fp,0(sp)
   803fc:	dec00204 	addi	sp,sp,8
   80400:	f800283a 	ret

00080404 <MemTestDataBus>:
*  Purpose: Tests that the data bus is connected with no 
*           stuck-at's, shorts, or open circuits.
*
******************************************************************/
static int MemTestDataBus(unsigned int address)
{
   80404:	defffc04 	addi	sp,sp,-16
   80408:	df000315 	stw	fp,12(sp)
   8040c:	df000304 	addi	fp,sp,12
   80410:	e13fff15 	stw	r4,-4(fp)
  unsigned int pattern;
  unsigned int ret_code = 0x0;
   80414:	e03ffe15 	stw	zero,-8(fp)

  /* Perform a walking 1's test at the given address. */
  for (pattern = 1; pattern != 0; pattern <<= 1)
   80418:	00800044 	movi	r2,1
   8041c:	e0bffd15 	stw	r2,-12(fp)
   80420:	00000e06 	br	8045c <MemTestDataBus+0x58>
  {
    /* Write the test pattern. */
    IOWR_32DIRECT(address, 0, pattern);
   80424:	e0bfff17 	ldw	r2,-4(fp)
   80428:	e0fffd17 	ldw	r3,-12(fp)
   8042c:	10c00035 	stwio	r3,0(r2)

    /* Read it back (immediately is okay for this test). */
    if (IORD_32DIRECT(address, 0) != pattern)
   80430:	e0bfff17 	ldw	r2,-4(fp)
   80434:	10800037 	ldwio	r2,0(r2)
   80438:	1007883a 	mov	r3,r2
   8043c:	e0bffd17 	ldw	r2,-12(fp)
   80440:	18800326 	beq	r3,r2,80450 <MemTestDataBus+0x4c>
    {
      ret_code = pattern;
   80444:	e0bffd17 	ldw	r2,-12(fp)
   80448:	e0bffe15 	stw	r2,-8(fp)
      break;
   8044c:	00000506 	br	80464 <MemTestDataBus+0x60>
{
  unsigned int pattern;
  unsigned int ret_code = 0x0;

  /* Perform a walking 1's test at the given address. */
  for (pattern = 1; pattern != 0; pattern <<= 1)
   80450:	e0bffd17 	ldw	r2,-12(fp)
   80454:	1085883a 	add	r2,r2,r2
   80458:	e0bffd15 	stw	r2,-12(fp)
   8045c:	e0bffd17 	ldw	r2,-12(fp)
   80460:	103ff01e 	bne	r2,zero,80424 <__ram_exceptions_end+0xfff601f0>
    {
      ret_code = pattern;
      break;
    }
  }
  return ret_code;
   80464:	e0bffe17 	ldw	r2,-8(fp)
}
   80468:	e037883a 	mov	sp,fp
   8046c:	df000017 	ldw	fp,0(sp)
   80470:	dec00104 	addi	sp,sp,4
   80474:	f800283a 	ret

00080478 <MemTestAddressBus>:
*  Purpose: Tests that the address bus is connected with no 
*           stuck-at's, shorts, or open circuits.
*
******************************************************************/
static int MemTestAddressBus(unsigned int memory_base, unsigned int nBytes)
{
   80478:	defff704 	addi	sp,sp,-36
   8047c:	df000815 	stw	fp,32(sp)
   80480:	df000804 	addi	fp,sp,32
   80484:	e13ffe15 	stw	r4,-8(fp)
   80488:	e17fff15 	stw	r5,-4(fp)
  unsigned int address_mask = (nBytes - 1);
   8048c:	e0bfff17 	ldw	r2,-4(fp)
   80490:	10bfffc4 	addi	r2,r2,-1
   80494:	e0bffb15 	stw	r2,-20(fp)
  unsigned int offset;
  unsigned int test_offset;

  unsigned int pattern     = 0xAAAAAAAA;
   80498:	00aaaaf4 	movhi	r2,43691
   8049c:	10aaaa84 	addi	r2,r2,-21846
   804a0:	e0bffc15 	stw	r2,-16(fp)
  unsigned int antipattern  = 0x55555555;
   804a4:	00955574 	movhi	r2,21845
   804a8:	10955544 	addi	r2,r2,21845
   804ac:	e0bffd15 	stw	r2,-12(fp)

  unsigned int ret_code = 0x0;
   804b0:	e03ffa15 	stw	zero,-24(fp)

  /* Write the default pattern at each of the power-of-two offsets. */
  for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
   804b4:	00800104 	movi	r2,4
   804b8:	e0bff815 	stw	r2,-32(fp)
   804bc:	00000906 	br	804e4 <MemTestAddressBus+0x6c>
  {
    IOWR_32DIRECT(memory_base, offset, pattern);
   804c0:	e0fff817 	ldw	r3,-32(fp)
   804c4:	e0bffe17 	ldw	r2,-8(fp)
   804c8:	1885883a 	add	r2,r3,r2
   804cc:	1007883a 	mov	r3,r2
   804d0:	e0bffc17 	ldw	r2,-16(fp)
   804d4:	18800035 	stwio	r2,0(r3)
  unsigned int antipattern  = 0x55555555;

  unsigned int ret_code = 0x0;

  /* Write the default pattern at each of the power-of-two offsets. */
  for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
   804d8:	e0bff817 	ldw	r2,-32(fp)
   804dc:	1085883a 	add	r2,r2,r2
   804e0:	e0bff815 	stw	r2,-32(fp)
   804e4:	e0fff817 	ldw	r3,-32(fp)
   804e8:	e0bffb17 	ldw	r2,-20(fp)
   804ec:	1884703a 	and	r2,r3,r2
   804f0:	103ff31e 	bne	r2,zero,804c0 <__ram_exceptions_end+0xfff6028c>
  {
    IOWR_32DIRECT(memory_base, offset, pattern);
  }

  /* Check for address bits stuck high. */
  test_offset = 0;
   804f4:	e03ff915 	stw	zero,-28(fp)
  IOWR_32DIRECT(memory_base, test_offset, antipattern);
   804f8:	e0fff917 	ldw	r3,-28(fp)
   804fc:	e0bffe17 	ldw	r2,-8(fp)
   80500:	1885883a 	add	r2,r3,r2
   80504:	1007883a 	mov	r3,r2
   80508:	e0bffd17 	ldw	r2,-12(fp)
   8050c:	18800035 	stwio	r2,0(r3)
  for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
   80510:	00800104 	movi	r2,4
   80514:	e0bff815 	stw	r2,-32(fp)
   80518:	00000f06 	br	80558 <MemTestAddressBus+0xe0>
  {
     if (IORD_32DIRECT(memory_base, offset) != pattern)
   8051c:	e0fff817 	ldw	r3,-32(fp)
   80520:	e0bffe17 	ldw	r2,-8(fp)
   80524:	1885883a 	add	r2,r3,r2
   80528:	10800037 	ldwio	r2,0(r2)
   8052c:	1007883a 	mov	r3,r2
   80530:	e0bffc17 	ldw	r2,-16(fp)
   80534:	18800526 	beq	r3,r2,8054c <MemTestAddressBus+0xd4>
     {
        ret_code = (memory_base+offset);
   80538:	e0fffe17 	ldw	r3,-8(fp)
   8053c:	e0bff817 	ldw	r2,-32(fp)
   80540:	1885883a 	add	r2,r3,r2
   80544:	e0bffa15 	stw	r2,-24(fp)
        break;
   80548:	00000706 	br	80568 <MemTestAddressBus+0xf0>
  }

  /* Check for address bits stuck high. */
  test_offset = 0;
  IOWR_32DIRECT(memory_base, test_offset, antipattern);
  for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
   8054c:	e0bff817 	ldw	r2,-32(fp)
   80550:	1085883a 	add	r2,r2,r2
   80554:	e0bff815 	stw	r2,-32(fp)
   80558:	e0fff817 	ldw	r3,-32(fp)
   8055c:	e0bffb17 	ldw	r2,-20(fp)
   80560:	1884703a 	and	r2,r3,r2
   80564:	103fed1e 	bne	r2,zero,8051c <__ram_exceptions_end+0xfff602e8>
        break;
     }
  }

  /* Check for address bits stuck low or shorted. */
  IOWR_32DIRECT(memory_base, test_offset, pattern);
   80568:	e0fff917 	ldw	r3,-28(fp)
   8056c:	e0bffe17 	ldw	r2,-8(fp)
   80570:	1885883a 	add	r2,r3,r2
   80574:	1007883a 	mov	r3,r2
   80578:	e0bffc17 	ldw	r2,-16(fp)
   8057c:	18800035 	stwio	r2,0(r3)
  for (test_offset = sizeof(unsigned int); (test_offset & address_mask) != 0; test_offset <<= 1)
   80580:	00800104 	movi	r2,4
   80584:	e0bff915 	stw	r2,-28(fp)
   80588:	00002a06 	br	80634 <MemTestAddressBus+0x1bc>
  {
    if (!ret_code)
   8058c:	e0bffa17 	ldw	r2,-24(fp)
   80590:	1000251e 	bne	r2,zero,80628 <MemTestAddressBus+0x1b0>
    {
      IOWR_32DIRECT(memory_base, test_offset, antipattern);
   80594:	e0fff917 	ldw	r3,-28(fp)
   80598:	e0bffe17 	ldw	r2,-8(fp)
   8059c:	1885883a 	add	r2,r3,r2
   805a0:	1007883a 	mov	r3,r2
   805a4:	e0bffd17 	ldw	r2,-12(fp)
   805a8:	18800035 	stwio	r2,0(r3)
      for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
   805ac:	00800104 	movi	r2,4
   805b0:	e0bff815 	stw	r2,-32(fp)
   805b4:	00001206 	br	80600 <MemTestAddressBus+0x188>
      {
        if ((IORD_32DIRECT(memory_base, offset) != pattern) && (offset != test_offset))
   805b8:	e0fff817 	ldw	r3,-32(fp)
   805bc:	e0bffe17 	ldw	r2,-8(fp)
   805c0:	1885883a 	add	r2,r3,r2
   805c4:	10800037 	ldwio	r2,0(r2)
   805c8:	1007883a 	mov	r3,r2
   805cc:	e0bffc17 	ldw	r2,-16(fp)
   805d0:	18800826 	beq	r3,r2,805f4 <MemTestAddressBus+0x17c>
   805d4:	e0fff817 	ldw	r3,-32(fp)
   805d8:	e0bff917 	ldw	r2,-28(fp)
   805dc:	18800526 	beq	r3,r2,805f4 <MemTestAddressBus+0x17c>
        {
          ret_code = (memory_base + test_offset);
   805e0:	e0fffe17 	ldw	r3,-8(fp)
   805e4:	e0bff917 	ldw	r2,-28(fp)
   805e8:	1885883a 	add	r2,r3,r2
   805ec:	e0bffa15 	stw	r2,-24(fp)
          break;
   805f0:	00000706 	br	80610 <MemTestAddressBus+0x198>
  for (test_offset = sizeof(unsigned int); (test_offset & address_mask) != 0; test_offset <<= 1)
  {
    if (!ret_code)
    {
      IOWR_32DIRECT(memory_base, test_offset, antipattern);
      for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
   805f4:	e0bff817 	ldw	r2,-32(fp)
   805f8:	1085883a 	add	r2,r2,r2
   805fc:	e0bff815 	stw	r2,-32(fp)
   80600:	e0fff817 	ldw	r3,-32(fp)
   80604:	e0bffb17 	ldw	r2,-20(fp)
   80608:	1884703a 	and	r2,r3,r2
   8060c:	103fea1e 	bne	r2,zero,805b8 <__ram_exceptions_end+0xfff60384>
        {
          ret_code = (memory_base + test_offset);
          break;
        }
      }
      IOWR_32DIRECT(memory_base, test_offset, pattern);
   80610:	e0fff917 	ldw	r3,-28(fp)
   80614:	e0bffe17 	ldw	r2,-8(fp)
   80618:	1885883a 	add	r2,r3,r2
   8061c:	1007883a 	mov	r3,r2
   80620:	e0bffc17 	ldw	r2,-16(fp)
   80624:	18800035 	stwio	r2,0(r3)
     }
  }

  /* Check for address bits stuck low or shorted. */
  IOWR_32DIRECT(memory_base, test_offset, pattern);
  for (test_offset = sizeof(unsigned int); (test_offset & address_mask) != 0; test_offset <<= 1)
   80628:	e0bff917 	ldw	r2,-28(fp)
   8062c:	1085883a 	add	r2,r2,r2
   80630:	e0bff915 	stw	r2,-28(fp)
   80634:	e0fff917 	ldw	r3,-28(fp)
   80638:	e0bffb17 	ldw	r2,-20(fp)
   8063c:	1884703a 	and	r2,r3,r2
   80640:	103fd21e 	bne	r2,zero,8058c <__ram_exceptions_end+0xfff60358>
      }
      IOWR_32DIRECT(memory_base, test_offset, pattern);
    }
  }

  return ret_code;
   80644:	e0bffa17 	ldw	r2,-24(fp)
}
   80648:	e037883a 	mov	sp,fp
   8064c:	df000017 	ldw	fp,0(sp)
   80650:	dec00104 	addi	sp,sp,4
   80654:	f800283a 	ret

00080658 <MemTest8_16BitAccess>:
*           can be read and written in both byte and half-word 
*           modes.
*
******************************************************************/
static int MemTest8_16BitAccess(unsigned int memory_base)
{
   80658:	defffd04 	addi	sp,sp,-12
   8065c:	df000215 	stw	fp,8(sp)
   80660:	df000204 	addi	fp,sp,8
   80664:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0x0;
   80668:	e03ffe15 	stw	zero,-8(fp)

  /* Write 4 bytes */
  IOWR_8DIRECT(memory_base, 0, 0x0A);
   8066c:	e0bfff17 	ldw	r2,-4(fp)
   80670:	00c00284 	movi	r3,10
   80674:	10c00025 	stbio	r3,0(r2)
  IOWR_8DIRECT(memory_base, 1, 0x05);
   80678:	e0bfff17 	ldw	r2,-4(fp)
   8067c:	10800044 	addi	r2,r2,1
   80680:	1007883a 	mov	r3,r2
   80684:	00800144 	movi	r2,5
   80688:	18800025 	stbio	r2,0(r3)
  IOWR_8DIRECT(memory_base, 2, 0xA0);
   8068c:	e0bfff17 	ldw	r2,-4(fp)
   80690:	10800084 	addi	r2,r2,2
   80694:	1007883a 	mov	r3,r2
   80698:	00bfe804 	movi	r2,-96
   8069c:	18800025 	stbio	r2,0(r3)
  IOWR_8DIRECT(memory_base, 3, 0x50);
   806a0:	e0bfff17 	ldw	r2,-4(fp)
   806a4:	108000c4 	addi	r2,r2,3
   806a8:	1007883a 	mov	r3,r2
   806ac:	00801404 	movi	r2,80
   806b0:	18800025 	stbio	r2,0(r3)

  /* Read it back as one word */
  if(IORD_32DIRECT(memory_base, 0) != 0x50A0050A)
   806b4:	e0bfff17 	ldw	r2,-4(fp)
   806b8:	10c00037 	ldwio	r3,0(r2)
   806bc:	00942834 	movhi	r2,20640
   806c0:	10814284 	addi	r2,r2,1290
   806c4:	18800226 	beq	r3,r2,806d0 <MemTest8_16BitAccess+0x78>
  {
    ret_code = memory_base;
   806c8:	e0bfff17 	ldw	r2,-4(fp)
   806cc:	e0bffe15 	stw	r2,-8(fp)
  }

  /* Read it back as two half-words */
  if (!ret_code)
   806d0:	e0bffe17 	ldw	r2,-8(fp)
   806d4:	10000d1e 	bne	r2,zero,8070c <MemTest8_16BitAccess+0xb4>
  {
    if ((IORD_16DIRECT(memory_base, 2) != 0x50A0) ||
   806d8:	e0bfff17 	ldw	r2,-4(fp)
   806dc:	10800084 	addi	r2,r2,2
   806e0:	1080002b 	ldhuio	r2,0(r2)
   806e4:	10bfffcc 	andi	r2,r2,65535
   806e8:	10942818 	cmpnei	r2,r2,20640
   806ec:	1000051e 	bne	r2,zero,80704 <MemTest8_16BitAccess+0xac>
        (IORD_16DIRECT(memory_base, 0) != 0x050A))
   806f0:	e0bfff17 	ldw	r2,-4(fp)
   806f4:	1080002b 	ldhuio	r2,0(r2)
   806f8:	10bfffcc 	andi	r2,r2,65535
  }

  /* Read it back as two half-words */
  if (!ret_code)
  {
    if ((IORD_16DIRECT(memory_base, 2) != 0x50A0) ||
   806fc:	108142a0 	cmpeqi	r2,r2,1290
   80700:	1000021e 	bne	r2,zero,8070c <MemTest8_16BitAccess+0xb4>
        (IORD_16DIRECT(memory_base, 0) != 0x050A))
    {
      ret_code = memory_base;
   80704:	e0bfff17 	ldw	r2,-4(fp)
   80708:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  /* Read it back as 4 bytes */
  if (!ret_code)
   8070c:	e0bffe17 	ldw	r2,-8(fp)
   80710:	1000191e 	bne	r2,zero,80778 <MemTest8_16BitAccess+0x120>
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x50) ||
   80714:	e0bfff17 	ldw	r2,-4(fp)
   80718:	108000c4 	addi	r2,r2,3
   8071c:	10800023 	ldbuio	r2,0(r2)
   80720:	10803fcc 	andi	r2,r2,255
   80724:	10801418 	cmpnei	r2,r2,80
   80728:	1000111e 	bne	r2,zero,80770 <MemTest8_16BitAccess+0x118>
        (IORD_8DIRECT(memory_base, 2) != 0xA0) ||
   8072c:	e0bfff17 	ldw	r2,-4(fp)
   80730:	10800084 	addi	r2,r2,2
   80734:	10800023 	ldbuio	r2,0(r2)
   80738:	10803fcc 	andi	r2,r2,255
  }

  /* Read it back as 4 bytes */
  if (!ret_code)
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x50) ||
   8073c:	10802818 	cmpnei	r2,r2,160
   80740:	10000b1e 	bne	r2,zero,80770 <MemTest8_16BitAccess+0x118>
        (IORD_8DIRECT(memory_base, 2) != 0xA0) ||
        (IORD_8DIRECT(memory_base, 1) != 0x05) ||
   80744:	e0bfff17 	ldw	r2,-4(fp)
   80748:	10800044 	addi	r2,r2,1
   8074c:	10800023 	ldbuio	r2,0(r2)
   80750:	10803fcc 	andi	r2,r2,255

  /* Read it back as 4 bytes */
  if (!ret_code)
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x50) ||
        (IORD_8DIRECT(memory_base, 2) != 0xA0) ||
   80754:	10800158 	cmpnei	r2,r2,5
   80758:	1000051e 	bne	r2,zero,80770 <MemTest8_16BitAccess+0x118>
        (IORD_8DIRECT(memory_base, 1) != 0x05) ||
        (IORD_8DIRECT(memory_base, 0) != 0x0A))
   8075c:	e0bfff17 	ldw	r2,-4(fp)
   80760:	10800023 	ldbuio	r2,0(r2)
   80764:	10803fcc 	andi	r2,r2,255
  /* Read it back as 4 bytes */
  if (!ret_code)
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x50) ||
        (IORD_8DIRECT(memory_base, 2) != 0xA0) ||
        (IORD_8DIRECT(memory_base, 1) != 0x05) ||
   80768:	108002a0 	cmpeqi	r2,r2,10
   8076c:	1000021e 	bne	r2,zero,80778 <MemTest8_16BitAccess+0x120>
        (IORD_8DIRECT(memory_base, 0) != 0x0A))
    {
    ret_code = memory_base;
   80770:	e0bfff17 	ldw	r2,-4(fp)
   80774:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  /* Write 2 half-words */
  if (!ret_code)
   80778:	e0bffe17 	ldw	r2,-8(fp)
   8077c:	10000f1e 	bne	r2,zero,807bc <MemTest8_16BitAccess+0x164>
  {
    IOWR_16DIRECT(memory_base, 0, 0x50A0);
   80780:	e0bfff17 	ldw	r2,-4(fp)
   80784:	00d42804 	movi	r3,20640
   80788:	10c0002d 	sthio	r3,0(r2)
    IOWR_16DIRECT(memory_base, 2, 0x050A);
   8078c:	e0bfff17 	ldw	r2,-4(fp)
   80790:	10800084 	addi	r2,r2,2
   80794:	1007883a 	mov	r3,r2
   80798:	00814284 	movi	r2,1290
   8079c:	1880002d 	sthio	r2,0(r3)

    /* Read it back as one word */
    if(IORD_32DIRECT(memory_base, 0) != 0x050A50A0)
   807a0:	e0bfff17 	ldw	r2,-4(fp)
   807a4:	10c00037 	ldwio	r3,0(r2)
   807a8:	008142b4 	movhi	r2,1290
   807ac:	10942804 	addi	r2,r2,20640
   807b0:	18800226 	beq	r3,r2,807bc <MemTest8_16BitAccess+0x164>
    {
      ret_code = memory_base;
   807b4:	e0bfff17 	ldw	r2,-4(fp)
   807b8:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  /* Read it back as two half-words */
  if (!ret_code)
   807bc:	e0bffe17 	ldw	r2,-8(fp)
   807c0:	10000d1e 	bne	r2,zero,807f8 <MemTest8_16BitAccess+0x1a0>
  {
    if ((IORD_16DIRECT(memory_base, 2) != 0x050A) ||
   807c4:	e0bfff17 	ldw	r2,-4(fp)
   807c8:	10800084 	addi	r2,r2,2
   807cc:	1080002b 	ldhuio	r2,0(r2)
   807d0:	10bfffcc 	andi	r2,r2,65535
   807d4:	10814298 	cmpnei	r2,r2,1290
   807d8:	1000051e 	bne	r2,zero,807f0 <MemTest8_16BitAccess+0x198>
        (IORD_16DIRECT(memory_base, 0) != 0x50A0))
   807dc:	e0bfff17 	ldw	r2,-4(fp)
   807e0:	1080002b 	ldhuio	r2,0(r2)
   807e4:	10bfffcc 	andi	r2,r2,65535
  }

  /* Read it back as two half-words */
  if (!ret_code)
  {
    if ((IORD_16DIRECT(memory_base, 2) != 0x050A) ||
   807e8:	10942820 	cmpeqi	r2,r2,20640
   807ec:	1000021e 	bne	r2,zero,807f8 <MemTest8_16BitAccess+0x1a0>
        (IORD_16DIRECT(memory_base, 0) != 0x50A0))
    {
      ret_code = memory_base;
   807f0:	e0bfff17 	ldw	r2,-4(fp)
   807f4:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  /* Read it back as 4 bytes */
  if (!ret_code)
   807f8:	e0bffe17 	ldw	r2,-8(fp)
   807fc:	1000191e 	bne	r2,zero,80864 <MemTest8_16BitAccess+0x20c>
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x05) ||
   80800:	e0bfff17 	ldw	r2,-4(fp)
   80804:	108000c4 	addi	r2,r2,3
   80808:	10800023 	ldbuio	r2,0(r2)
   8080c:	10803fcc 	andi	r2,r2,255
   80810:	10800158 	cmpnei	r2,r2,5
   80814:	1000111e 	bne	r2,zero,8085c <MemTest8_16BitAccess+0x204>
        (IORD_8DIRECT(memory_base, 2) != 0x0A) ||
   80818:	e0bfff17 	ldw	r2,-4(fp)
   8081c:	10800084 	addi	r2,r2,2
   80820:	10800023 	ldbuio	r2,0(r2)
   80824:	10803fcc 	andi	r2,r2,255
  }

  /* Read it back as 4 bytes */
  if (!ret_code)
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x05) ||
   80828:	10800298 	cmpnei	r2,r2,10
   8082c:	10000b1e 	bne	r2,zero,8085c <MemTest8_16BitAccess+0x204>
        (IORD_8DIRECT(memory_base, 2) != 0x0A) ||
        (IORD_8DIRECT(memory_base, 1) != 0x50) ||
   80830:	e0bfff17 	ldw	r2,-4(fp)
   80834:	10800044 	addi	r2,r2,1
   80838:	10800023 	ldbuio	r2,0(r2)
   8083c:	10803fcc 	andi	r2,r2,255

  /* Read it back as 4 bytes */
  if (!ret_code)
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x05) ||
        (IORD_8DIRECT(memory_base, 2) != 0x0A) ||
   80840:	10801418 	cmpnei	r2,r2,80
   80844:	1000051e 	bne	r2,zero,8085c <MemTest8_16BitAccess+0x204>
        (IORD_8DIRECT(memory_base, 1) != 0x50) ||
        (IORD_8DIRECT(memory_base, 0) != 0xA0))
   80848:	e0bfff17 	ldw	r2,-4(fp)
   8084c:	10800023 	ldbuio	r2,0(r2)
   80850:	10803fcc 	andi	r2,r2,255
  /* Read it back as 4 bytes */
  if (!ret_code)
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x05) ||
        (IORD_8DIRECT(memory_base, 2) != 0x0A) ||
        (IORD_8DIRECT(memory_base, 1) != 0x50) ||
   80854:	10802820 	cmpeqi	r2,r2,160
   80858:	1000021e 	bne	r2,zero,80864 <MemTest8_16BitAccess+0x20c>
        (IORD_8DIRECT(memory_base, 0) != 0xA0))
    {
      ret_code = memory_base;
   8085c:	e0bfff17 	ldw	r2,-4(fp)
   80860:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  return(ret_code);
   80864:	e0bffe17 	ldw	r2,-8(fp)
}
   80868:	e037883a 	mov	sp,fp
   8086c:	df000017 	ldw	fp,0(sp)
   80870:	dec00104 	addi	sp,sp,4
   80874:	f800283a 	ret

00080878 <MemTestDevice>:
*  Purpose: Tests that every bit in the memory device within the 
*           specified address range can store both a '1' and a '0'.
*
******************************************************************/
static int MemTestDevice(unsigned int memory_base, unsigned int nBytes)
{
   80878:	defff804 	addi	sp,sp,-32
   8087c:	dfc00715 	stw	ra,28(sp)
   80880:	df000615 	stw	fp,24(sp)
   80884:	df000604 	addi	fp,sp,24
   80888:	e13ffe15 	stw	r4,-8(fp)
   8088c:	e17fff15 	stw	r5,-4(fp)
  unsigned int offset;
  unsigned int pattern;
  unsigned int antipattern;
  unsigned int ret_code = 0x0;
   80890:	e03ffc15 	stw	zero,-16(fp)

  /* Fill memory with a known pattern. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
   80894:	00800044 	movi	r2,1
   80898:	e0bffb15 	stw	r2,-20(fp)
   8089c:	e03ffa15 	stw	zero,-24(fp)
   808a0:	00000c06 	br	808d4 <MemTestDevice+0x5c>
  {
    IOWR_32DIRECT(memory_base, offset, pattern);
   808a4:	e0fffa17 	ldw	r3,-24(fp)
   808a8:	e0bffe17 	ldw	r2,-8(fp)
   808ac:	1885883a 	add	r2,r3,r2
   808b0:	1007883a 	mov	r3,r2
   808b4:	e0bffb17 	ldw	r2,-20(fp)
   808b8:	18800035 	stwio	r2,0(r3)
  unsigned int pattern;
  unsigned int antipattern;
  unsigned int ret_code = 0x0;

  /* Fill memory with a known pattern. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
   808bc:	e0bffb17 	ldw	r2,-20(fp)
   808c0:	10800044 	addi	r2,r2,1
   808c4:	e0bffb15 	stw	r2,-20(fp)
   808c8:	e0bffa17 	ldw	r2,-24(fp)
   808cc:	10800104 	addi	r2,r2,4
   808d0:	e0bffa15 	stw	r2,-24(fp)
   808d4:	e0fffa17 	ldw	r3,-24(fp)
   808d8:	e0bfff17 	ldw	r2,-4(fp)
   808dc:	18bff136 	bltu	r3,r2,808a4 <__ram_exceptions_end+0xfff60670>
  {
    IOWR_32DIRECT(memory_base, offset, pattern);
  }

  printf(" .");
   808e0:	010002b4 	movhi	r4,10
   808e4:	21367404 	addi	r4,r4,-9776
   808e8:	0082d5c0 	call	82d5c <printf>

  /* Check each location and invert it for the second pass. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
   808ec:	00800044 	movi	r2,1
   808f0:	e0bffb15 	stw	r2,-20(fp)
   808f4:	e03ffa15 	stw	zero,-24(fp)
   808f8:	00001b06 	br	80968 <MemTestDevice+0xf0>
  {
    if (IORD_32DIRECT(memory_base, offset) != pattern)
   808fc:	e0fffa17 	ldw	r3,-24(fp)
   80900:	e0bffe17 	ldw	r2,-8(fp)
   80904:	1885883a 	add	r2,r3,r2
   80908:	10800037 	ldwio	r2,0(r2)
   8090c:	1007883a 	mov	r3,r2
   80910:	e0bffb17 	ldw	r2,-20(fp)
   80914:	18800526 	beq	r3,r2,8092c <MemTestDevice+0xb4>
    {
      ret_code = (memory_base + offset);
   80918:	e0fffe17 	ldw	r3,-8(fp)
   8091c:	e0bffa17 	ldw	r2,-24(fp)
   80920:	1885883a 	add	r2,r3,r2
   80924:	e0bffc15 	stw	r2,-16(fp)
      break;
   80928:	00001206 	br	80974 <MemTestDevice+0xfc>
    }
    antipattern = ~pattern;
   8092c:	e0bffb17 	ldw	r2,-20(fp)
   80930:	0084303a 	nor	r2,zero,r2
   80934:	e0bffd15 	stw	r2,-12(fp)
    IOWR_32DIRECT(memory_base, offset, antipattern);
   80938:	e0fffa17 	ldw	r3,-24(fp)
   8093c:	e0bffe17 	ldw	r2,-8(fp)
   80940:	1885883a 	add	r2,r3,r2
   80944:	1007883a 	mov	r3,r2
   80948:	e0bffd17 	ldw	r2,-12(fp)
   8094c:	18800035 	stwio	r2,0(r3)
  }

  printf(" .");

  /* Check each location and invert it for the second pass. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
   80950:	e0bffb17 	ldw	r2,-20(fp)
   80954:	10800044 	addi	r2,r2,1
   80958:	e0bffb15 	stw	r2,-20(fp)
   8095c:	e0bffa17 	ldw	r2,-24(fp)
   80960:	10800104 	addi	r2,r2,4
   80964:	e0bffa15 	stw	r2,-24(fp)
   80968:	e0fffa17 	ldw	r3,-24(fp)
   8096c:	e0bfff17 	ldw	r2,-4(fp)
   80970:	18bfe236 	bltu	r3,r2,808fc <__ram_exceptions_end+0xfff606c8>
    }
    antipattern = ~pattern;
    IOWR_32DIRECT(memory_base, offset, antipattern);
  }

  printf(" .");
   80974:	010002b4 	movhi	r4,10
   80978:	21367404 	addi	r4,r4,-9776
   8097c:	0082d5c0 	call	82d5c <printf>

  /* Check each location for the inverted pattern and zero it. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
   80980:	00800044 	movi	r2,1
   80984:	e0bffb15 	stw	r2,-20(fp)
   80988:	e03ffa15 	stw	zero,-24(fp)
   8098c:	00001a06 	br	809f8 <MemTestDevice+0x180>
  {
    antipattern = ~pattern;
   80990:	e0bffb17 	ldw	r2,-20(fp)
   80994:	0084303a 	nor	r2,zero,r2
   80998:	e0bffd15 	stw	r2,-12(fp)
    if (IORD_32DIRECT(memory_base, offset) != antipattern)
   8099c:	e0fffa17 	ldw	r3,-24(fp)
   809a0:	e0bffe17 	ldw	r2,-8(fp)
   809a4:	1885883a 	add	r2,r3,r2
   809a8:	10800037 	ldwio	r2,0(r2)
   809ac:	1007883a 	mov	r3,r2
   809b0:	e0bffd17 	ldw	r2,-12(fp)
   809b4:	18800526 	beq	r3,r2,809cc <MemTestDevice+0x154>
    {
      ret_code = (memory_base + offset);
   809b8:	e0fffe17 	ldw	r3,-8(fp)
   809bc:	e0bffa17 	ldw	r2,-24(fp)
   809c0:	1885883a 	add	r2,r3,r2
   809c4:	e0bffc15 	stw	r2,-16(fp)
      break;
   809c8:	00000e06 	br	80a04 <MemTestDevice+0x18c>
    }
    IOWR_32DIRECT(memory_base, offset, 0x0);
   809cc:	e0fffa17 	ldw	r3,-24(fp)
   809d0:	e0bffe17 	ldw	r2,-8(fp)
   809d4:	1885883a 	add	r2,r3,r2
   809d8:	0007883a 	mov	r3,zero
   809dc:	10c00035 	stwio	r3,0(r2)
  }

  printf(" .");

  /* Check each location for the inverted pattern and zero it. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
   809e0:	e0bffb17 	ldw	r2,-20(fp)
   809e4:	10800044 	addi	r2,r2,1
   809e8:	e0bffb15 	stw	r2,-20(fp)
   809ec:	e0bffa17 	ldw	r2,-24(fp)
   809f0:	10800104 	addi	r2,r2,4
   809f4:	e0bffa15 	stw	r2,-24(fp)
   809f8:	e0fffa17 	ldw	r3,-24(fp)
   809fc:	e0bfff17 	ldw	r2,-4(fp)
   80a00:	18bfe336 	bltu	r3,r2,80990 <__ram_exceptions_end+0xfff6075c>
      ret_code = (memory_base + offset);
      break;
    }
    IOWR_32DIRECT(memory_base, offset, 0x0);
  }
  return ret_code;
   80a04:	e0bffc17 	ldw	r2,-16(fp)
}
   80a08:	e037883a 	mov	sp,fp
   80a0c:	dfc00117 	ldw	ra,4(sp)
   80a10:	df000017 	ldw	fp,0(sp)
   80a14:	dec00204 	addi	sp,sp,8
   80a18:	f800283a 	ret

00080a1c <TestRam>:
*             - MemTestDevice
*             - MemDMATest
*
******************************************************************/
static void TestRam(void)
{
   80a1c:	defffa04 	addi	sp,sp,-24
   80a20:	dfc00515 	stw	ra,20(sp)
   80a24:	df000415 	stw	fp,16(sp)
   80a28:	df000404 	addi	fp,sp,16
  
  int memory_base, memory_end, memory_size;
  int ret_code = 0x0;
   80a2c:	e03ffc15 	stw	zero,-16(fp)

  /* Find out what range of memory we are testing */
  MemGetAddressRange(&memory_base, &memory_end);
   80a30:	e0ffff04 	addi	r3,fp,-4
   80a34:	e0bffe04 	addi	r2,fp,-8
   80a38:	180b883a 	mov	r5,r3
   80a3c:	1009883a 	mov	r4,r2
   80a40:	00802f00 	call	802f0 <MemGetAddressRange>
  memory_size = (memory_end - memory_base);
   80a44:	e0ffff17 	ldw	r3,-4(fp)
   80a48:	e0bffe17 	ldw	r2,-8(fp)
   80a4c:	1885c83a 	sub	r2,r3,r2
   80a50:	e0bffd15 	stw	r2,-12(fp)

  printf("\n");
   80a54:	01000284 	movi	r4,10
   80a58:	0082da00 	call	82da0 <putchar>
  printf("Testing RAM from 0x%X to 0x%X\n", memory_base, (memory_base + memory_size));
   80a5c:	e13ffe17 	ldw	r4,-8(fp)
   80a60:	e0fffe17 	ldw	r3,-8(fp)
   80a64:	e0bffd17 	ldw	r2,-12(fp)
   80a68:	1885883a 	add	r2,r3,r2
   80a6c:	100d883a 	mov	r6,r2
   80a70:	200b883a 	mov	r5,r4
   80a74:	010002b4 	movhi	r4,10
   80a78:	21367504 	addi	r4,r4,-9772
   80a7c:	0082d5c0 	call	82d5c <printf>

  /* Test Data Bus. */
  ret_code = MemTestDataBus(memory_base);
   80a80:	e0bffe17 	ldw	r2,-8(fp)
   80a84:	1009883a 	mov	r4,r2
   80a88:	00804040 	call	80404 <MemTestDataBus>
   80a8c:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code)
   80a90:	e0bffc17 	ldw	r2,-16(fp)
   80a94:	10000526 	beq	r2,zero,80aac <TestRam+0x90>
   printf(" -Data bus test failed at bit 0x%X", (int)ret_code);
   80a98:	e17ffc17 	ldw	r5,-16(fp)
   80a9c:	010002b4 	movhi	r4,10
   80aa0:	21367d04 	addi	r4,r4,-9740
   80aa4:	0082d5c0 	call	82d5c <printf>
   80aa8:	00000306 	br	80ab8 <TestRam+0x9c>
  else
    printf(" -Data bus test passed\n");
   80aac:	010002b4 	movhi	r4,10
   80ab0:	21368604 	addi	r4,r4,-9704
   80ab4:	0082e780 	call	82e78 <puts>

  /* Test Address Bus. */
  if (!ret_code)
   80ab8:	e0bffc17 	ldw	r2,-16(fp)
   80abc:	1000111e 	bne	r2,zero,80b04 <TestRam+0xe8>
  {
    ret_code  = MemTestAddressBus(memory_base, memory_size);
   80ac0:	e0bffe17 	ldw	r2,-8(fp)
   80ac4:	1007883a 	mov	r3,r2
   80ac8:	e0bffd17 	ldw	r2,-12(fp)
   80acc:	100b883a 	mov	r5,r2
   80ad0:	1809883a 	mov	r4,r3
   80ad4:	00804780 	call	80478 <MemTestAddressBus>
   80ad8:	e0bffc15 	stw	r2,-16(fp)
    if  (ret_code)
   80adc:	e0bffc17 	ldw	r2,-16(fp)
   80ae0:	10000526 	beq	r2,zero,80af8 <TestRam+0xdc>
      printf(" -Address bus test failed at address 0x%X", (int)ret_code);
   80ae4:	e17ffc17 	ldw	r5,-16(fp)
   80ae8:	010002b4 	movhi	r4,10
   80aec:	21368c04 	addi	r4,r4,-9680
   80af0:	0082d5c0 	call	82d5c <printf>
   80af4:	00000306 	br	80b04 <TestRam+0xe8>
    else
      printf(" -Address bus test passed\n");
   80af8:	010002b4 	movhi	r4,10
   80afc:	21369704 	addi	r4,r4,-9636
   80b00:	0082e780 	call	82e78 <puts>
  }

  /* Test byte and half-word access. */
  if (!ret_code)
   80b04:	e0bffc17 	ldw	r2,-16(fp)
   80b08:	10000e1e 	bne	r2,zero,80b44 <TestRam+0x128>
  {
    ret_code = MemTest8_16BitAccess(memory_base);
   80b0c:	e0bffe17 	ldw	r2,-8(fp)
   80b10:	1009883a 	mov	r4,r2
   80b14:	00806580 	call	80658 <MemTest8_16BitAccess>
   80b18:	e0bffc15 	stw	r2,-16(fp)
    if  (ret_code)
   80b1c:	e0bffc17 	ldw	r2,-16(fp)
   80b20:	10000526 	beq	r2,zero,80b38 <TestRam+0x11c>
      printf(" -Byte and half-word access test failed at address 0x%X", (int)ret_code);
   80b24:	e17ffc17 	ldw	r5,-16(fp)
   80b28:	010002b4 	movhi	r4,10
   80b2c:	21369e04 	addi	r4,r4,-9608
   80b30:	0082d5c0 	call	82d5c <printf>
   80b34:	00000306 	br	80b44 <TestRam+0x128>
    else
      printf(" -Byte and half-word access test passed\n");
   80b38:	010002b4 	movhi	r4,10
   80b3c:	2136ac04 	addi	r4,r4,-9552
   80b40:	0082e780 	call	82e78 <puts>
  }

  /* Test that each bit in the device can store both 1 and 0. */
  if (!ret_code)
   80b44:	e0bffc17 	ldw	r2,-16(fp)
   80b48:	1000141e 	bne	r2,zero,80b9c <TestRam+0x180>
  {
    printf(" -Testing each bit in memory device.");
   80b4c:	010002b4 	movhi	r4,10
   80b50:	2136b604 	addi	r4,r4,-9512
   80b54:	0082d5c0 	call	82d5c <printf>
    ret_code = MemTestDevice(memory_base, memory_size);
   80b58:	e0bffe17 	ldw	r2,-8(fp)
   80b5c:	1007883a 	mov	r3,r2
   80b60:	e0bffd17 	ldw	r2,-12(fp)
   80b64:	100b883a 	mov	r5,r2
   80b68:	1809883a 	mov	r4,r3
   80b6c:	00808780 	call	80878 <MemTestDevice>
   80b70:	e0bffc15 	stw	r2,-16(fp)
    if  (ret_code)
   80b74:	e0bffc17 	ldw	r2,-16(fp)
   80b78:	10000526 	beq	r2,zero,80b90 <TestRam+0x174>
      printf("  failed at address 0x%X", (int)ret_code);
   80b7c:	e17ffc17 	ldw	r5,-16(fp)
   80b80:	010002b4 	movhi	r4,10
   80b84:	2136c004 	addi	r4,r4,-9472
   80b88:	0082d5c0 	call	82d5c <printf>
   80b8c:	00000306 	br	80b9c <TestRam+0x180>
    else
      printf("  passed\n");
   80b90:	010002b4 	movhi	r4,10
   80b94:	2136c704 	addi	r4,r4,-9444
   80b98:	0082e780 	call	82e78 <puts>
    else
      printf("  passed\n");
  }
#endif /* DMA_NAME */
      
  if (!ret_code)
   80b9c:	e0bffc17 	ldw	r2,-16(fp)
   80ba0:	1000051e 	bne	r2,zero,80bb8 <TestRam+0x19c>
    printf("Memory at 0x%X Okay\n", memory_base);
   80ba4:	e0bffe17 	ldw	r2,-8(fp)
   80ba8:	100b883a 	mov	r5,r2
   80bac:	010002b4 	movhi	r4,10
   80bb0:	2136ca04 	addi	r4,r4,-9432
   80bb4:	0082d5c0 	call	82d5c <printf>
}
   80bb8:	0001883a 	nop
   80bbc:	e037883a 	mov	sp,fp
   80bc0:	dfc00117 	ldw	ra,4(sp)
   80bc4:	df000017 	ldw	fp,0(sp)
   80bc8:	dec00204 	addi	sp,sp,8
   80bcc:	f800283a 	ret

00080bd0 <FlashCheckIfBlockErased>:
*  Purpose: Checks the specified flash block to see if it is 
*           completely erased (all 0xFFFFFFFF).
*
******************************************************************/
static int FlashCheckIfBlockErased(alt_flash_fd* fd, int block, flash_region* regions)
{
   80bd0:	defff204 	addi	sp,sp,-56
   80bd4:	dfc00d15 	stw	ra,52(sp)
   80bd8:	df000c15 	stw	fp,48(sp)
   80bdc:	df000c04 	addi	fp,sp,48
   80be0:	e13ffd15 	stw	r4,-12(fp)
   80be4:	e17ffe15 	stw	r5,-8(fp)
   80be8:	e1bfff15 	stw	r6,-4(fp)
  int i, j;
  int ret_code = 0x0;
   80bec:	e03ff615 	stw	zero,-40(fp)
  char block_is_erased = 0x1;
   80bf0:	00800044 	movi	r2,1
   80bf4:	e0bff705 	stb	r2,-36(fp)
  alt_u8 *data_read;
 
  /* Get a buffer */
  data_read = malloc(64);
   80bf8:	01001004 	movi	r4,64
   80bfc:	00823340 	call	82334 <malloc>
   80c00:	e0bff815 	stw	r2,-32(fp)
  
  /* Initialize the flag */
  block_is_erased = 0x1;
   80c04:	00800044 	movi	r2,1
   80c08:	e0bff705 	stb	r2,-36(fp)

  for(i = 0; i < regions->block_size; i += 64)
   80c0c:	e03ff415 	stw	zero,-48(fp)
   80c10:	00002d06 	br	80cc8 <FlashCheckIfBlockErased+0xf8>
  {
    ret_code = alt_read_flash(fd, ((block * regions->block_size) + i), data_read, 64);
   80c14:	e0bfff17 	ldw	r2,-4(fp)
   80c18:	10800317 	ldw	r2,12(r2)
   80c1c:	e17ffe17 	ldw	r5,-8(fp)
   80c20:	1009883a 	mov	r4,r2
   80c24:	00822140 	call	82214 <__mulsi3>
   80c28:	1007883a 	mov	r3,r2
   80c2c:	e0bff417 	ldw	r2,-48(fp)
   80c30:	1885883a 	add	r2,r3,r2
   80c34:	e0fffd17 	ldw	r3,-12(fp)
   80c38:	e0fff915 	stw	r3,-28(fp)
   80c3c:	e0bffa15 	stw	r2,-24(fp)
   80c40:	e0bff817 	ldw	r2,-32(fp)
   80c44:	e0bffb15 	stw	r2,-20(fp)
   80c48:	00801004 	movi	r2,64
   80c4c:	e0bffc15 	stw	r2,-16(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
   80c50:	e0bff917 	ldw	r2,-28(fp)
   80c54:	10800617 	ldw	r2,24(r2)
   80c58:	e1fffc17 	ldw	r7,-16(fp)
   80c5c:	e1bffb17 	ldw	r6,-20(fp)
   80c60:	e17ffa17 	ldw	r5,-24(fp)
   80c64:	e13ff917 	ldw	r4,-28(fp)
   80c68:	103ee83a 	callr	r2
   80c6c:	e0bff615 	stw	r2,-40(fp)

    for(j=0; j < 64; j+=1)
   80c70:	e03ff515 	stw	zero,-44(fp)
   80c74:	00000c06 	br	80ca8 <FlashCheckIfBlockErased+0xd8>
    {
      if(*(data_read+j) != 0xFF)
   80c78:	e0bff517 	ldw	r2,-44(fp)
   80c7c:	e0fff817 	ldw	r3,-32(fp)
   80c80:	1885883a 	add	r2,r3,r2
   80c84:	10800003 	ldbu	r2,0(r2)
   80c88:	10803fcc 	andi	r2,r2,255
   80c8c:	10803fe0 	cmpeqi	r2,r2,255
   80c90:	1000021e 	bne	r2,zero,80c9c <FlashCheckIfBlockErased+0xcc>
      {
        /* If this byte isn't erased, then neither is the block */
        block_is_erased = 0x0;
   80c94:	e03ff705 	stb	zero,-36(fp)
        break;
   80c98:	00000606 	br	80cb4 <FlashCheckIfBlockErased+0xe4>

  for(i = 0; i < regions->block_size; i += 64)
  {
    ret_code = alt_read_flash(fd, ((block * regions->block_size) + i), data_read, 64);

    for(j=0; j < 64; j+=1)
   80c9c:	e0bff517 	ldw	r2,-44(fp)
   80ca0:	10800044 	addi	r2,r2,1
   80ca4:	e0bff515 	stw	r2,-44(fp)
   80ca8:	e0bff517 	ldw	r2,-44(fp)
   80cac:	10801010 	cmplti	r2,r2,64
   80cb0:	103ff11e 	bne	r2,zero,80c78 <__ram_exceptions_end+0xfff60a44>
        /* If this byte isn't erased, then neither is the block */
        block_is_erased = 0x0;
        break;
      }
    }
    if (block_is_erased == 0x0)
   80cb4:	e0bff707 	ldb	r2,-36(fp)
   80cb8:	10000826 	beq	r2,zero,80cdc <FlashCheckIfBlockErased+0x10c>
  data_read = malloc(64);
  
  /* Initialize the flag */
  block_is_erased = 0x1;

  for(i = 0; i < regions->block_size; i += 64)
   80cbc:	e0bff417 	ldw	r2,-48(fp)
   80cc0:	10801004 	addi	r2,r2,64
   80cc4:	e0bff415 	stw	r2,-48(fp)
   80cc8:	e0bfff17 	ldw	r2,-4(fp)
   80ccc:	10800317 	ldw	r2,12(r2)
   80cd0:	e0fff417 	ldw	r3,-48(fp)
   80cd4:	18bfcf16 	blt	r3,r2,80c14 <__ram_exceptions_end+0xfff609e0>
   80cd8:	00000106 	br	80ce0 <FlashCheckIfBlockErased+0x110>
        block_is_erased = 0x0;
        break;
      }
    }
    if (block_is_erased == 0x0)
      break;
   80cdc:	0001883a 	nop
  }
  /* Block is erased if we indexed through all block locations */
  if(i == regions->block_size)
   80ce0:	e0bfff17 	ldw	r2,-4(fp)
   80ce4:	10c00317 	ldw	r3,12(r2)
   80ce8:	e0bff417 	ldw	r2,-48(fp)
   80cec:	1880031e 	bne	r3,r2,80cfc <FlashCheckIfBlockErased+0x12c>
    ret_code = 1;
   80cf0:	00800044 	movi	r2,1
   80cf4:	e0bff615 	stw	r2,-40(fp)
   80cf8:	00000106 	br	80d00 <FlashCheckIfBlockErased+0x130>
  else
    ret_code = 0;
   80cfc:	e03ff615 	stw	zero,-40(fp)
  
  free(data_read);
   80d00:	e13ff817 	ldw	r4,-32(fp)
   80d04:	00823480 	call	82348 <free>
 
  return ret_code;
   80d08:	e0bff617 	ldw	r2,-40(fp)
}
   80d0c:	e037883a 	mov	sp,fp
   80d10:	dfc00117 	ldw	ra,4(sp)
   80d14:	df000017 	ldw	fp,0(sp)
   80d18:	dec00204 	addi	sp,sp,8
   80d1c:	f800283a 	ret

00080d20 <FlashTestBlockWrite>:
*  Purpose: Tests that the function alt_write_flash_block is
*           is working properly.
*
******************************************************************/
static int FlashTestBlockWrite(int block, int *error, alt_flash_fd* fd, flash_region* regions)
{
   80d20:	deffdb04 	addi	sp,sp,-148
   80d24:	dfc02415 	stw	ra,144(sp)
   80d28:	df002315 	stw	fp,140(sp)
   80d2c:	dc002215 	stw	r16,136(sp)
   80d30:	df002304 	addi	fp,sp,140
   80d34:	e13ffb15 	stw	r4,-20(fp)
   80d38:	e17ffc15 	stw	r5,-16(fp)
   80d3c:	e1bffd15 	stw	r6,-12(fp)
   80d40:	e1fffe15 	stw	r7,-8(fp)
  int i;
  int ret_code = 0x0;
   80d44:	e03fdf15 	stw	zero,-132(fp)
  alt_u8 *data_written;
  alt_u8 *data_read;


  /* Get a couple buffers for the test */
  data_written = malloc(100);
   80d48:	01001904 	movi	r4,100
   80d4c:	00823340 	call	82334 <malloc>
   80d50:	e0bfe015 	stw	r2,-128(fp)
  data_read = malloc(100);
   80d54:	01001904 	movi	r4,100
   80d58:	00823340 	call	82334 <malloc>
   80d5c:	e0bfe115 	stw	r2,-124(fp)

  test_offset = (regions->offset + (block * regions->block_size));
   80d60:	e0bffe17 	ldw	r2,-8(fp)
   80d64:	14000017 	ldw	r16,0(r2)
   80d68:	e0bffe17 	ldw	r2,-8(fp)
   80d6c:	10800317 	ldw	r2,12(r2)
   80d70:	e17ffb17 	ldw	r5,-20(fp)
   80d74:	1009883a 	mov	r4,r2
   80d78:	00822140 	call	82214 <__mulsi3>
   80d7c:	8085883a 	add	r2,r16,r2
   80d80:	e0bfe215 	stw	r2,-120(fp)

  /* Fill write buffer with 100 values (incremented by 3) */
  for(i=0; i < 100; i++)
   80d84:	e03fde15 	stw	zero,-136(fp)
   80d88:	00000c06 	br	80dbc <FlashTestBlockWrite+0x9c>
    *(data_written + i) = (i * 3);
   80d8c:	e0bfde17 	ldw	r2,-136(fp)
   80d90:	e0ffe017 	ldw	r3,-128(fp)
   80d94:	1887883a 	add	r3,r3,r2
   80d98:	e0bfde17 	ldw	r2,-136(fp)
   80d9c:	1009883a 	mov	r4,r2
   80da0:	2005883a 	mov	r2,r4
   80da4:	1085883a 	add	r2,r2,r2
   80da8:	1105883a 	add	r2,r2,r4
   80dac:	18800005 	stb	r2,0(r3)
  data_read = malloc(100);

  test_offset = (regions->offset + (block * regions->block_size));

  /* Fill write buffer with 100 values (incremented by 3) */
  for(i=0; i < 100; i++)
   80db0:	e0bfde17 	ldw	r2,-136(fp)
   80db4:	10800044 	addi	r2,r2,1
   80db8:	e0bfde15 	stw	r2,-136(fp)
   80dbc:	e0bfde17 	ldw	r2,-136(fp)
   80dc0:	10801910 	cmplti	r2,r2,100
   80dc4:	103ff11e 	bne	r2,zero,80d8c <__ram_exceptions_end+0xfff60b58>
    *(data_written + i) = (i * 3);

  /* Write the buffer to flash starting 0x40 bytes from the beginning of the block. */
  printf(" -Testing \"alt_write_flash_block\".");
   80dc8:	010002b4 	movhi	r4,10
   80dcc:	2136d004 	addi	r4,r4,-9408
   80dd0:	0082d5c0 	call	82d5c <printf>
  ret_code = alt_write_flash_block(fd, test_offset, (test_offset + 0x40), data_written, 100);
   80dd4:	e0bfe217 	ldw	r2,-120(fp)
   80dd8:	10801004 	addi	r2,r2,64
   80ddc:	e0fffd17 	ldw	r3,-12(fp)
   80de0:	e0ffe715 	stw	r3,-100(fp)
   80de4:	e0ffe217 	ldw	r3,-120(fp)
   80de8:	e0ffe815 	stw	r3,-96(fp)
   80dec:	e0bfe915 	stw	r2,-92(fp)
   80df0:	e0bfe017 	ldw	r2,-128(fp)
   80df4:	e0bfea15 	stw	r2,-88(fp)
   80df8:	00801904 	movi	r2,100
   80dfc:	e0bfeb15 	stw	r2,-84(fp)
                                      int data_offset,
                                      const void *data, int length)
{

  int ret_code;
  ret_code = fd->write_block( fd, block_offset, data_offset, data, length );
   80e00:	e0bfe717 	ldw	r2,-100(fp)
   80e04:	10800917 	ldw	r2,36(r2)
   80e08:	e0ffeb17 	ldw	r3,-84(fp)
   80e0c:	d8c00015 	stw	r3,0(sp)
   80e10:	e1ffea17 	ldw	r7,-88(fp)
   80e14:	e1bfe917 	ldw	r6,-92(fp)
   80e18:	e17fe817 	ldw	r5,-96(fp)
   80e1c:	e13fe717 	ldw	r4,-100(fp)
   80e20:	103ee83a 	callr	r2
   80e24:	e0bfec15 	stw	r2,-80(fp)

/* remove dcache_flush call for FB330552  
  if(!ret_code)
      alt_dcache_flush((alt_u8*)fd->base_addr + data_offset, length);
*/
  return ret_code;
   80e28:	e0bfec17 	ldw	r2,-80(fp)
   80e2c:	e0bfdf15 	stw	r2,-132(fp)
  if (!ret_code)
   80e30:	e0bfdf17 	ldw	r2,-132(fp)
   80e34:	1000241e 	bne	r2,zero,80ec8 <FlashTestBlockWrite+0x1a8>
  {
    /* Now read it back into the read_buffer */
    ret_code = alt_read_flash(fd, (test_offset + 0x40), data_read, 100);
   80e38:	e0bfe217 	ldw	r2,-120(fp)
   80e3c:	10801004 	addi	r2,r2,64
   80e40:	e0fffd17 	ldw	r3,-12(fp)
   80e44:	e0ffe315 	stw	r3,-116(fp)
   80e48:	e0bfed15 	stw	r2,-76(fp)
   80e4c:	e0bfe117 	ldw	r2,-124(fp)
   80e50:	e0bfee15 	stw	r2,-72(fp)
   80e54:	00801904 	movi	r2,100
   80e58:	e0bfef15 	stw	r2,-68(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
   80e5c:	e0bfe317 	ldw	r2,-116(fp)
   80e60:	10800617 	ldw	r2,24(r2)
   80e64:	e1ffef17 	ldw	r7,-68(fp)
   80e68:	e1bfee17 	ldw	r6,-72(fp)
   80e6c:	e17fed17 	ldw	r5,-76(fp)
   80e70:	e13fe317 	ldw	r4,-116(fp)
   80e74:	103ee83a 	callr	r2
   80e78:	e0bfdf15 	stw	r2,-132(fp)
    if(!ret_code)
   80e7c:	e0bfdf17 	ldw	r2,-132(fp)
   80e80:	1000111e 	bne	r2,zero,80ec8 <FlashTestBlockWrite+0x1a8>
    {
      /* See if they match */
      if (memcmp(data_written, data_read, 100))
   80e84:	01801904 	movi	r6,100
   80e88:	e17fe117 	ldw	r5,-124(fp)
   80e8c:	e13fe017 	ldw	r4,-128(fp)
   80e90:	0082b680 	call	82b68 <memcmp>
   80e94:	10000926 	beq	r2,zero,80ebc <FlashTestBlockWrite+0x19c>
      {
        printf("  FAILED.\n");
   80e98:	010002b4 	movhi	r4,10
   80e9c:	2136d904 	addi	r4,r4,-9372
   80ea0:	0082e780 	call	82e78 <puts>
        (*error)++;
   80ea4:	e0bffc17 	ldw	r2,-16(fp)
   80ea8:	10800017 	ldw	r2,0(r2)
   80eac:	10c00044 	addi	r3,r2,1
   80eb0:	e0bffc17 	ldw	r2,-16(fp)
   80eb4:	10c00015 	stw	r3,0(r2)
   80eb8:	00000306 	br	80ec8 <FlashTestBlockWrite+0x1a8>
      }
      else
        printf("  passed.\n");
   80ebc:	010002b4 	movhi	r4,10
   80ec0:	2136dc04 	addi	r4,r4,-9360
   80ec4:	0082e780 	call	82e78 <puts>
    }
  }

  /* Test unaligned writes */
  if(!ret_code)
   80ec8:	e0bfdf17 	ldw	r2,-132(fp)
   80ecc:	10004f1e 	bne	r2,zero,8100c <FlashTestBlockWrite+0x2ec>
  {
    /* Erase the block */
    ret_code = alt_erase_flash_block(fd, test_offset, regions->block_size);
   80ed0:	e0bffe17 	ldw	r2,-8(fp)
   80ed4:	10800317 	ldw	r2,12(r2)
   80ed8:	e0fffd17 	ldw	r3,-12(fp)
   80edc:	e0ffe615 	stw	r3,-104(fp)
   80ee0:	e0ffe217 	ldw	r3,-120(fp)
   80ee4:	e0fff515 	stw	r3,-44(fp)
   80ee8:	e0bff615 	stw	r2,-40(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
   80eec:	e0bfe617 	ldw	r2,-104(fp)
   80ef0:	10800817 	ldw	r2,32(r2)
   80ef4:	e17ff517 	ldw	r5,-44(fp)
   80ef8:	e13fe617 	ldw	r4,-104(fp)
   80efc:	103ee83a 	callr	r2
   80f00:	e0bff715 	stw	r2,-36(fp)
  
/* remove dcache_flush call for FB330552  
  if(!ret_code)
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
*/
  return ret_code;
   80f04:	e0bff717 	ldw	r2,-36(fp)
   80f08:	e0bfdf15 	stw	r2,-132(fp)
  
    /* Write the buffer to flash on an unaligned address. */
    printf(" -Testing unaligned writes.");
   80f0c:	010002b4 	movhi	r4,10
   80f10:	2136df04 	addi	r4,r4,-9348
   80f14:	0082d5c0 	call	82d5c <printf>
    ret_code = alt_write_flash_block(fd, test_offset, (test_offset + 0x43), data_written, 100);
   80f18:	e0bfe217 	ldw	r2,-120(fp)
   80f1c:	108010c4 	addi	r2,r2,67
   80f20:	e0fffd17 	ldw	r3,-12(fp)
   80f24:	e0ffe415 	stw	r3,-112(fp)
   80f28:	e0ffe217 	ldw	r3,-120(fp)
   80f2c:	e0fff015 	stw	r3,-64(fp)
   80f30:	e0bff115 	stw	r2,-60(fp)
   80f34:	e0bfe017 	ldw	r2,-128(fp)
   80f38:	e0bff215 	stw	r2,-56(fp)
   80f3c:	00801904 	movi	r2,100
   80f40:	e0bff315 	stw	r2,-52(fp)
                                      int data_offset,
                                      const void *data, int length)
{

  int ret_code;
  ret_code = fd->write_block( fd, block_offset, data_offset, data, length );
   80f44:	e0bfe417 	ldw	r2,-112(fp)
   80f48:	10800917 	ldw	r2,36(r2)
   80f4c:	e0fff317 	ldw	r3,-52(fp)
   80f50:	d8c00015 	stw	r3,0(sp)
   80f54:	e1fff217 	ldw	r7,-56(fp)
   80f58:	e1bff117 	ldw	r6,-60(fp)
   80f5c:	e17ff017 	ldw	r5,-64(fp)
   80f60:	e13fe417 	ldw	r4,-112(fp)
   80f64:	103ee83a 	callr	r2
   80f68:	e0bff415 	stw	r2,-48(fp)

/* remove dcache_flush call for FB330552  
  if(!ret_code)
      alt_dcache_flush((alt_u8*)fd->base_addr + data_offset, length);
*/
  return ret_code;
   80f6c:	e0bff417 	ldw	r2,-48(fp)
   80f70:	e0bfdf15 	stw	r2,-132(fp)
    if (!ret_code)
   80f74:	e0bfdf17 	ldw	r2,-132(fp)
   80f78:	1000241e 	bne	r2,zero,8100c <FlashTestBlockWrite+0x2ec>
    {
      /* Now read it back into the read_buffer */
      ret_code = alt_read_flash(fd, (test_offset + 0x43), data_read, 100);
   80f7c:	e0bfe217 	ldw	r2,-120(fp)
   80f80:	108010c4 	addi	r2,r2,67
   80f84:	e0fffd17 	ldw	r3,-12(fp)
   80f88:	e0ffe515 	stw	r3,-108(fp)
   80f8c:	e0bff815 	stw	r2,-32(fp)
   80f90:	e0bfe117 	ldw	r2,-124(fp)
   80f94:	e0bff915 	stw	r2,-28(fp)
   80f98:	00801904 	movi	r2,100
   80f9c:	e0bffa15 	stw	r2,-24(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
   80fa0:	e0bfe517 	ldw	r2,-108(fp)
   80fa4:	10800617 	ldw	r2,24(r2)
   80fa8:	e1fffa17 	ldw	r7,-24(fp)
   80fac:	e1bff917 	ldw	r6,-28(fp)
   80fb0:	e17ff817 	ldw	r5,-32(fp)
   80fb4:	e13fe517 	ldw	r4,-108(fp)
   80fb8:	103ee83a 	callr	r2
   80fbc:	e0bfdf15 	stw	r2,-132(fp)
      if(!ret_code)
   80fc0:	e0bfdf17 	ldw	r2,-132(fp)
   80fc4:	1000111e 	bne	r2,zero,8100c <FlashTestBlockWrite+0x2ec>
      {
        /* See if they match */
        if (memcmp(data_written, data_read, 100))
   80fc8:	01801904 	movi	r6,100
   80fcc:	e17fe117 	ldw	r5,-124(fp)
   80fd0:	e13fe017 	ldw	r4,-128(fp)
   80fd4:	0082b680 	call	82b68 <memcmp>
   80fd8:	10000926 	beq	r2,zero,81000 <FlashTestBlockWrite+0x2e0>
        {
          printf("  FAILED.\n");
   80fdc:	010002b4 	movhi	r4,10
   80fe0:	2136d904 	addi	r4,r4,-9372
   80fe4:	0082e780 	call	82e78 <puts>
          (*error)++;
   80fe8:	e0bffc17 	ldw	r2,-16(fp)
   80fec:	10800017 	ldw	r2,0(r2)
   80ff0:	10c00044 	addi	r3,r2,1
   80ff4:	e0bffc17 	ldw	r2,-16(fp)
   80ff8:	10c00015 	stw	r3,0(r2)
   80ffc:	00000306 	br	8100c <FlashTestBlockWrite+0x2ec>
        }
        else
          printf("  passed.\n");
   81000:	010002b4 	movhi	r4,10
   81004:	2136dc04 	addi	r4,r4,-9360
   81008:	0082e780 	call	82e78 <puts>
      }
    }
  }

  /* Free up the buffers we allocated. */
  free(data_written);
   8100c:	e13fe017 	ldw	r4,-128(fp)
   81010:	00823480 	call	82348 <free>
  free(data_read);
   81014:	e13fe117 	ldw	r4,-124(fp)
   81018:	00823480 	call	82348 <free>
  
  return ret_code;
   8101c:	e0bfdf17 	ldw	r2,-132(fp)
}
   81020:	e6ffff04 	addi	sp,fp,-4
   81024:	dfc00217 	ldw	ra,8(sp)
   81028:	df000117 	ldw	fp,4(sp)
   8102c:	dc000017 	ldw	r16,0(sp)
   81030:	dec00304 	addi	sp,sp,12
   81034:	f800283a 	ret

00081038 <FlashTestReadWrite>:
*           that every bit in the specified block can store both
*           a '1' and '0'.
*
******************************************************************/
static int FlashTestReadWrite(int block, int *error, alt_flash_fd* fd, flash_region* regions)
{
   81038:	deffe404 	addi	sp,sp,-112
   8103c:	dfc01b15 	stw	ra,108(sp)
   81040:	df001a15 	stw	fp,104(sp)
   81044:	dc001915 	stw	r16,100(sp)
   81048:	df001a04 	addi	fp,sp,104
   8104c:	e13ffb15 	stw	r4,-20(fp)
   81050:	e17ffc15 	stw	r5,-16(fp)
   81054:	e1bffd15 	stw	r6,-12(fp)
   81058:	e1fffe15 	stw	r7,-8(fp)
  int i;
  int ret_code = 0x0;
   8105c:	e03fe715 	stw	zero,-100(fp)
  alt_u8 *data_written;
  alt_u8 *data_read;
 

  /* Get a couple buffers for the tests */
  data_written = malloc(regions->block_size);
   81060:	e0bffe17 	ldw	r2,-8(fp)
   81064:	10800317 	ldw	r2,12(r2)
   81068:	1009883a 	mov	r4,r2
   8106c:	00823340 	call	82334 <malloc>
   81070:	e0bfe815 	stw	r2,-96(fp)
  data_read = malloc(regions->block_size);
   81074:	e0bffe17 	ldw	r2,-8(fp)
   81078:	10800317 	ldw	r2,12(r2)
   8107c:	1009883a 	mov	r4,r2
   81080:	00823340 	call	82334 <malloc>
   81084:	e0bfe915 	stw	r2,-92(fp)
 
  /* Calculate the offset at which the block lives */
  test_offset = (regions->offset + (block * regions->block_size));
   81088:	e0bffe17 	ldw	r2,-8(fp)
   8108c:	14000017 	ldw	r16,0(r2)
   81090:	e0bffe17 	ldw	r2,-8(fp)
   81094:	10800317 	ldw	r2,12(r2)
   81098:	e17ffb17 	ldw	r5,-20(fp)
   8109c:	1009883a 	mov	r4,r2
   810a0:	00822140 	call	82214 <__mulsi3>
   810a4:	8085883a 	add	r2,r16,r2
   810a8:	e0bfea15 	stw	r2,-88(fp)

  printf("\n -Starting Flash Test.\n");
   810ac:	010002b4 	movhi	r4,10
   810b0:	2136e604 	addi	r4,r4,-9320
   810b4:	0082e780 	call	82e78 <puts>
 
  printf(" -Testing \"alt_write_flash\" and \"alt_read_flash\".\n");
   810b8:	010002b4 	movhi	r4,10
   810bc:	2136ec04 	addi	r4,r4,-9296
   810c0:	0082e780 	call	82e78 <puts>
  /* Fill buffer with incrementing values */
  for(i=0; i < regions->block_size; i++)
   810c4:	e03fe615 	stw	zero,-104(fp)
   810c8:	00000806 	br	810ec <FlashTestReadWrite+0xb4>
    *(data_written + i) = i;
   810cc:	e0bfe617 	ldw	r2,-104(fp)
   810d0:	e0ffe817 	ldw	r3,-96(fp)
   810d4:	1885883a 	add	r2,r3,r2
   810d8:	e0ffe617 	ldw	r3,-104(fp)
   810dc:	10c00005 	stb	r3,0(r2)

  printf("\n -Starting Flash Test.\n");
 
  printf(" -Testing \"alt_write_flash\" and \"alt_read_flash\".\n");
  /* Fill buffer with incrementing values */
  for(i=0; i < regions->block_size; i++)
   810e0:	e0bfe617 	ldw	r2,-104(fp)
   810e4:	10800044 	addi	r2,r2,1
   810e8:	e0bfe615 	stw	r2,-104(fp)
   810ec:	e0bffe17 	ldw	r2,-8(fp)
   810f0:	10800317 	ldw	r2,12(r2)
   810f4:	e0ffe617 	ldw	r3,-104(fp)
   810f8:	18bff416 	blt	r3,r2,810cc <__ram_exceptions_end+0xfff60e98>
    *(data_written + i) = i;

  /* Write the buffer to flash block */
  ret_code = alt_write_flash(fd, test_offset, data_written, regions->block_size);
   810fc:	e0bffe17 	ldw	r2,-8(fp)
   81100:	10800317 	ldw	r2,12(r2)
   81104:	e0fffd17 	ldw	r3,-12(fp)
   81108:	e0ffee15 	stw	r3,-72(fp)
   8110c:	e0ffea17 	ldw	r3,-88(fp)
   81110:	e0ffef15 	stw	r3,-68(fp)
   81114:	e0ffe817 	ldw	r3,-96(fp)
   81118:	e0fff015 	stw	r3,-64(fp)
   8111c:	e0bff115 	stw	r2,-60(fp)
                                                           alt_flash_fd* fd, 
                                                           int offset, 
                                                           const void* src_addr, 
                                                           int length )
{
  return fd->write( fd, offset, src_addr, length );
   81120:	e0bfee17 	ldw	r2,-72(fp)
   81124:	10800517 	ldw	r2,20(r2)
   81128:	e1fff117 	ldw	r7,-60(fp)
   8112c:	e1bff017 	ldw	r6,-64(fp)
   81130:	e17fef17 	ldw	r5,-68(fp)
   81134:	e13fee17 	ldw	r4,-72(fp)
   81138:	103ee83a 	callr	r2
   8113c:	e0bfe715 	stw	r2,-100(fp)
     
  if (!ret_code)
   81140:	e0bfe717 	ldw	r2,-100(fp)
   81144:	1000731e 	bne	r2,zero,81314 <FlashTestReadWrite+0x2dc>
  {
    /* Read flash block into read buffer */
    ret_code = alt_read_flash(fd, test_offset, data_read, regions->block_size);
   81148:	e0bffe17 	ldw	r2,-8(fp)
   8114c:	10800317 	ldw	r2,12(r2)
   81150:	e0fffd17 	ldw	r3,-12(fp)
   81154:	e0ffeb15 	stw	r3,-84(fp)
   81158:	e0ffea17 	ldw	r3,-88(fp)
   8115c:	e0fff215 	stw	r3,-56(fp)
   81160:	e0ffe917 	ldw	r3,-92(fp)
   81164:	e0fff315 	stw	r3,-52(fp)
   81168:	e0bff415 	stw	r2,-48(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
   8116c:	e0bfeb17 	ldw	r2,-84(fp)
   81170:	10800617 	ldw	r2,24(r2)
   81174:	e1fff417 	ldw	r7,-48(fp)
   81178:	e1bff317 	ldw	r6,-52(fp)
   8117c:	e17ff217 	ldw	r5,-56(fp)
   81180:	e13feb17 	ldw	r4,-84(fp)
   81184:	103ee83a 	callr	r2
   81188:	e0bfe715 	stw	r2,-100(fp)
    if(!ret_code)
   8118c:	e0bfe717 	ldw	r2,-100(fp)
   81190:	1000131e 	bne	r2,zero,811e0 <FlashTestReadWrite+0x1a8>
    {
      /* See if they match */
      if (memcmp(data_written, data_read, regions->block_size))
   81194:	e0bffe17 	ldw	r2,-8(fp)
   81198:	10800317 	ldw	r2,12(r2)
   8119c:	100d883a 	mov	r6,r2
   811a0:	e17fe917 	ldw	r5,-92(fp)
   811a4:	e13fe817 	ldw	r4,-96(fp)
   811a8:	0082b680 	call	82b68 <memcmp>
   811ac:	10000926 	beq	r2,zero,811d4 <FlashTestReadWrite+0x19c>
      {
        printf("    pass 1 - FAILED.\n");
   811b0:	010002b4 	movhi	r4,10
   811b4:	2136f904 	addi	r4,r4,-9244
   811b8:	0082e780 	call	82e78 <puts>
        (*error)++;
   811bc:	e0bffc17 	ldw	r2,-16(fp)
   811c0:	10800017 	ldw	r2,0(r2)
   811c4:	10c00044 	addi	r3,r2,1
   811c8:	e0bffc17 	ldw	r2,-16(fp)
   811cc:	10c00015 	stw	r3,0(r2)
   811d0:	00000306 	br	811e0 <FlashTestReadWrite+0x1a8>
      }
      else
        printf("    pass 1 - passed.\n");
   811d4:	010002b4 	movhi	r4,10
   811d8:	2136ff04 	addi	r4,r4,-9220
   811dc:	0082e780 	call	82e78 <puts>
    }
  
    /* Now fill the buffer with decrementing values (invert the incrementing ones) */
    for(i=0; i < regions->block_size; i++)
   811e0:	e03fe615 	stw	zero,-104(fp)
   811e4:	00000906 	br	8120c <FlashTestReadWrite+0x1d4>
      *(data_written + i) = ~((alt_u8)(i));
   811e8:	e0bfe617 	ldw	r2,-104(fp)
   811ec:	e0ffe817 	ldw	r3,-96(fp)
   811f0:	1885883a 	add	r2,r3,r2
   811f4:	e0ffe617 	ldw	r3,-104(fp)
   811f8:	00c6303a 	nor	r3,zero,r3
   811fc:	10c00005 	stb	r3,0(r2)
      else
        printf("    pass 1 - passed.\n");
    }
  
    /* Now fill the buffer with decrementing values (invert the incrementing ones) */
    for(i=0; i < regions->block_size; i++)
   81200:	e0bfe617 	ldw	r2,-104(fp)
   81204:	10800044 	addi	r2,r2,1
   81208:	e0bfe615 	stw	r2,-104(fp)
   8120c:	e0bffe17 	ldw	r2,-8(fp)
   81210:	10800317 	ldw	r2,12(r2)
   81214:	e0ffe617 	ldw	r3,-104(fp)
   81218:	18bff316 	blt	r3,r2,811e8 <__ram_exceptions_end+0xfff60fb4>
      *(data_written + i) = ~((alt_u8)(i));
 
    /* Write the buffer to flash block */
    ret_code = alt_write_flash(fd, test_offset, data_written, regions->block_size);
   8121c:	e0bffe17 	ldw	r2,-8(fp)
   81220:	10800317 	ldw	r2,12(r2)
   81224:	e0fffd17 	ldw	r3,-12(fp)
   81228:	e0ffec15 	stw	r3,-80(fp)
   8122c:	e0ffea17 	ldw	r3,-88(fp)
   81230:	e0fff515 	stw	r3,-44(fp)
   81234:	e0ffe817 	ldw	r3,-96(fp)
   81238:	e0fff615 	stw	r3,-40(fp)
   8123c:	e0bff715 	stw	r2,-36(fp)
                                                           alt_flash_fd* fd, 
                                                           int offset, 
                                                           const void* src_addr, 
                                                           int length )
{
  return fd->write( fd, offset, src_addr, length );
   81240:	e0bfec17 	ldw	r2,-80(fp)
   81244:	10800517 	ldw	r2,20(r2)
   81248:	e1fff717 	ldw	r7,-36(fp)
   8124c:	e1bff617 	ldw	r6,-40(fp)
   81250:	e17ff517 	ldw	r5,-44(fp)
   81254:	e13fec17 	ldw	r4,-80(fp)
   81258:	103ee83a 	callr	r2
   8125c:	e0bfe715 	stw	r2,-100(fp)
    
    if (!ret_code)
   81260:	e0bfe717 	ldw	r2,-100(fp)
   81264:	1000261e 	bne	r2,zero,81300 <FlashTestReadWrite+0x2c8>
    {
      /* Read flash block into read buffer */
      ret_code = alt_read_flash(fd, test_offset, data_read, regions->block_size);
   81268:	e0bffe17 	ldw	r2,-8(fp)
   8126c:	10800317 	ldw	r2,12(r2)
   81270:	e0fffd17 	ldw	r3,-12(fp)
   81274:	e0ffed15 	stw	r3,-76(fp)
   81278:	e0ffea17 	ldw	r3,-88(fp)
   8127c:	e0fff815 	stw	r3,-32(fp)
   81280:	e0ffe917 	ldw	r3,-92(fp)
   81284:	e0fff915 	stw	r3,-28(fp)
   81288:	e0bffa15 	stw	r2,-24(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
   8128c:	e0bfed17 	ldw	r2,-76(fp)
   81290:	10800617 	ldw	r2,24(r2)
   81294:	e1fffa17 	ldw	r7,-24(fp)
   81298:	e1bff917 	ldw	r6,-28(fp)
   8129c:	e17ff817 	ldw	r5,-32(fp)
   812a0:	e13fed17 	ldw	r4,-76(fp)
   812a4:	103ee83a 	callr	r2
   812a8:	e0bfe715 	stw	r2,-100(fp)
      if(!ret_code)
   812ac:	e0bfe717 	ldw	r2,-100(fp)
   812b0:	1000131e 	bne	r2,zero,81300 <FlashTestReadWrite+0x2c8>
      {
        /* See if they match */
        if (memcmp(data_written, data_read, regions->block_size))
   812b4:	e0bffe17 	ldw	r2,-8(fp)
   812b8:	10800317 	ldw	r2,12(r2)
   812bc:	100d883a 	mov	r6,r2
   812c0:	e17fe917 	ldw	r5,-92(fp)
   812c4:	e13fe817 	ldw	r4,-96(fp)
   812c8:	0082b680 	call	82b68 <memcmp>
   812cc:	10000926 	beq	r2,zero,812f4 <FlashTestReadWrite+0x2bc>
        {
          printf("    pass 2 - FAILED.\n");
   812d0:	010002b4 	movhi	r4,10
   812d4:	21370504 	addi	r4,r4,-9196
   812d8:	0082e780 	call	82e78 <puts>
          (*error)++;
   812dc:	e0bffc17 	ldw	r2,-16(fp)
   812e0:	10800017 	ldw	r2,0(r2)
   812e4:	10c00044 	addi	r3,r2,1
   812e8:	e0bffc17 	ldw	r2,-16(fp)
   812ec:	10c00015 	stw	r3,0(r2)
   812f0:	00000306 	br	81300 <FlashTestReadWrite+0x2c8>
        }
        else
          printf("    pass 2 - passed.\n");
   812f4:	010002b4 	movhi	r4,10
   812f8:	21370b04 	addi	r4,r4,-9172
   812fc:	0082e780 	call	82e78 <puts>
      }
    }
    if (*error)
   81300:	e0bffc17 	ldw	r2,-16(fp)
   81304:	10800017 	ldw	r2,0(r2)
   81308:	10000226 	beq	r2,zero,81314 <FlashTestReadWrite+0x2dc>
      ret_code = 1;
   8130c:	00800044 	movi	r2,1
   81310:	e0bfe715 	stw	r2,-100(fp)
  }

  /* Free up the buffers we allocated */
  free(data_written);
   81314:	e13fe817 	ldw	r4,-96(fp)
   81318:	00823480 	call	82348 <free>
  free(data_read);
   8131c:	e13fe917 	ldw	r4,-92(fp)
   81320:	00823480 	call	82348 <free>
  
  return ret_code;
   81324:	e0bfe717 	ldw	r2,-100(fp)
}
   81328:	e6ffff04 	addi	sp,fp,-4
   8132c:	dfc00217 	ldw	ra,8(sp)
   81330:	df000117 	ldw	fp,4(sp)
   81334:	dc000017 	ldw	r16,0(sp)
   81338:	dec00304 	addi	sp,sp,12
   8133c:	f800283a 	ret

00081340 <FlashTestBlockErase>:
*           flash block contains some non-0xFFFFFFFF data before
*           this function is called.
*
******************************************************************/
static int FlashTestBlockErase(int block, int *error, alt_flash_fd* fd, flash_region* regions)
{
   81340:	defff304 	addi	sp,sp,-52
   81344:	dfc00c15 	stw	ra,48(sp)
   81348:	df000b15 	stw	fp,44(sp)
   8134c:	dc000a15 	stw	r16,40(sp)
   81350:	df000b04 	addi	fp,sp,44
   81354:	e13ffb15 	stw	r4,-20(fp)
   81358:	e17ffc15 	stw	r5,-16(fp)
   8135c:	e1bffd15 	stw	r6,-12(fp)
   81360:	e1fffe15 	stw	r7,-8(fp)

  int ret_code = 0x0;
   81364:	e03ff515 	stw	zero,-44(fp)
  int test_offset;

  /* Calculate the offset of the block */
  test_offset = (regions->offset + (block * regions->block_size));
   81368:	e0bffe17 	ldw	r2,-8(fp)
   8136c:	14000017 	ldw	r16,0(r2)
   81370:	e0bffe17 	ldw	r2,-8(fp)
   81374:	10800317 	ldw	r2,12(r2)
   81378:	e17ffb17 	ldw	r5,-20(fp)
   8137c:	1009883a 	mov	r4,r2
   81380:	00822140 	call	82214 <__mulsi3>
   81384:	8085883a 	add	r2,r16,r2
   81388:	e0bff615 	stw	r2,-40(fp)

  printf(" -Testing \"alt_erase_flash_block\".");
   8138c:	010002b4 	movhi	r4,10
   81390:	21371104 	addi	r4,r4,-9148
   81394:	0082d5c0 	call	82d5c <printf>
  ret_code = alt_erase_flash_block(fd, test_offset, regions->block_size);
   81398:	e0bffe17 	ldw	r2,-8(fp)
   8139c:	10800317 	ldw	r2,12(r2)
   813a0:	e0fffd17 	ldw	r3,-12(fp)
   813a4:	e0fff715 	stw	r3,-36(fp)
   813a8:	e0fff617 	ldw	r3,-40(fp)
   813ac:	e0fff815 	stw	r3,-32(fp)
   813b0:	e0bff915 	stw	r2,-28(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
   813b4:	e0bff717 	ldw	r2,-36(fp)
   813b8:	10800817 	ldw	r2,32(r2)
   813bc:	e17ff817 	ldw	r5,-32(fp)
   813c0:	e13ff717 	ldw	r4,-36(fp)
   813c4:	103ee83a 	callr	r2
   813c8:	e0bffa15 	stw	r2,-24(fp)
  
/* remove dcache_flush call for FB330552  
  if(!ret_code)
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
*/
  return ret_code;
   813cc:	e0bffa17 	ldw	r2,-24(fp)
   813d0:	e0bff515 	stw	r2,-44(fp)
  /* Check that the erase was successful. */
  if (!ret_code)
   813d4:	e0bff517 	ldw	r2,-44(fp)
   813d8:	1000111e 	bne	r2,zero,81420 <FlashTestBlockErase+0xe0>
  {
    if(FlashCheckIfBlockErased(fd, block, regions))
   813dc:	e1bffe17 	ldw	r6,-8(fp)
   813e0:	e17ffb17 	ldw	r5,-20(fp)
   813e4:	e13ffd17 	ldw	r4,-12(fp)
   813e8:	0080bd00 	call	80bd0 <FlashCheckIfBlockErased>
   813ec:	10000426 	beq	r2,zero,81400 <FlashTestBlockErase+0xc0>
      printf("  passed.\n");
   813f0:	010002b4 	movhi	r4,10
   813f4:	2136dc04 	addi	r4,r4,-9360
   813f8:	0082e780 	call	82e78 <puts>
   813fc:	00000806 	br	81420 <FlashTestBlockErase+0xe0>
    else
    {
      printf("  FAILED\n");  
   81400:	010002b4 	movhi	r4,10
   81404:	21371a04 	addi	r4,r4,-9112
   81408:	0082e780 	call	82e78 <puts>
      (*error)++;
   8140c:	e0bffc17 	ldw	r2,-16(fp)
   81410:	10800017 	ldw	r2,0(r2)
   81414:	10c00044 	addi	r3,r2,1
   81418:	e0bffc17 	ldw	r2,-16(fp)
   8141c:	10c00015 	stw	r3,0(r2)
    }
  }
  
  return ret_code;
   81420:	e0bff517 	ldw	r2,-44(fp)
}
   81424:	e6ffff04 	addi	sp,fp,-4
   81428:	dfc00217 	ldw	ra,8(sp)
   8142c:	df000117 	ldw	fp,4(sp)
   81430:	dc000017 	ldw	r16,0(sp)
   81434:	dec00304 	addi	sp,sp,12
   81438:	f800283a 	ret

0008143c <FlashRunTests>:
*             - alt_erase_flash_block
*             - alt_write_flash_block
* 
******************************************************************/
static void FlashRunTests(alt_flash_fd* fd, int block, flash_region* regions)
{
   8143c:	defff304 	addi	sp,sp,-52
   81440:	dfc00c15 	stw	ra,48(sp)
   81444:	df000b15 	stw	fp,44(sp)
   81448:	dc000a15 	stw	r16,40(sp)
   8144c:	df000b04 	addi	fp,sp,44
   81450:	e13ffc15 	stw	r4,-16(fp)
   81454:	e17ffd15 	stw	r5,-12(fp)
   81458:	e1bffe15 	stw	r6,-8(fp)
  int ret_code = 0x0;
   8145c:	e03ff515 	stw	zero,-44(fp)
  int error = 0x0;
   81460:	e03ffb15 	stw	zero,-20(fp)
  int test_offset;

  /* Calculate the offset of the block */
  test_offset = (regions->offset + (block * regions->block_size));
   81464:	e0bffe17 	ldw	r2,-8(fp)
   81468:	14000017 	ldw	r16,0(r2)
   8146c:	e0bffe17 	ldw	r2,-8(fp)
   81470:	10800317 	ldw	r2,12(r2)
   81474:	e17ffd17 	ldw	r5,-12(fp)
   81478:	1009883a 	mov	r4,r2
   8147c:	00822140 	call	82214 <__mulsi3>
   81480:	8085883a 	add	r2,r16,r2
   81484:	e0bff615 	stw	r2,-40(fp)
  
  /* Test reading and writing functions */
  ret_code = FlashTestReadWrite(block, &error, fd, regions);
   81488:	e0bffb04 	addi	r2,fp,-20
   8148c:	e1fffe17 	ldw	r7,-8(fp)
   81490:	e1bffc17 	ldw	r6,-16(fp)
   81494:	100b883a 	mov	r5,r2
   81498:	e13ffd17 	ldw	r4,-12(fp)
   8149c:	00810380 	call	81038 <FlashTestReadWrite>
   814a0:	e0bff515 	stw	r2,-44(fp)
 
  /* Test the erase function */
  if (!ret_code)
   814a4:	e0bff517 	ldw	r2,-44(fp)
   814a8:	1000071e 	bne	r2,zero,814c8 <FlashRunTests+0x8c>
  {
    ret_code = FlashTestBlockErase(block, &error, fd, regions);
   814ac:	e0bffb04 	addi	r2,fp,-20
   814b0:	e1fffe17 	ldw	r7,-8(fp)
   814b4:	e1bffc17 	ldw	r6,-16(fp)
   814b8:	100b883a 	mov	r5,r2
   814bc:	e13ffd17 	ldw	r4,-12(fp)
   814c0:	00813400 	call	81340 <FlashTestBlockErase>
   814c4:	e0bff515 	stw	r2,-44(fp)
  }
  /* Test the block write function */
  if (!ret_code)
   814c8:	e0bff517 	ldw	r2,-44(fp)
   814cc:	1000071e 	bne	r2,zero,814ec <FlashRunTests+0xb0>
  {
    ret_code = FlashTestBlockWrite(block, &error, fd, regions);
   814d0:	e0bffb04 	addi	r2,fp,-20
   814d4:	e1fffe17 	ldw	r7,-8(fp)
   814d8:	e1bffc17 	ldw	r6,-16(fp)
   814dc:	100b883a 	mov	r5,r2
   814e0:	e13ffd17 	ldw	r4,-12(fp)
   814e4:	0080d200 	call	80d20 <FlashTestBlockWrite>
   814e8:	e0bff515 	stw	r2,-44(fp)
  }

  /* Erase the block so we dont fill one up each time we run the test */
  printf(" -Returning block %d to its erased state.\n", block);
   814ec:	e17ffd17 	ldw	r5,-12(fp)
   814f0:	010002b4 	movhi	r4,10
   814f4:	21371d04 	addi	r4,r4,-9100
   814f8:	0082d5c0 	call	82d5c <printf>
  alt_erase_flash_block(fd, test_offset, regions->block_size);
   814fc:	e0bffe17 	ldw	r2,-8(fp)
   81500:	10800317 	ldw	r2,12(r2)
   81504:	e0fffc17 	ldw	r3,-16(fp)
   81508:	e0fff715 	stw	r3,-36(fp)
   8150c:	e0fff617 	ldw	r3,-40(fp)
   81510:	e0fff815 	stw	r3,-32(fp)
   81514:	e0bff915 	stw	r2,-28(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
   81518:	e0bff717 	ldw	r2,-36(fp)
   8151c:	10800817 	ldw	r2,32(r2)
   81520:	e17ff817 	ldw	r5,-32(fp)
   81524:	e13ff717 	ldw	r4,-36(fp)
   81528:	103ee83a 	callr	r2
   8152c:	e0bffa15 	stw	r2,-24(fp)
 
  printf(" -Flash tests complete.\n");
   81530:	010002b4 	movhi	r4,10
   81534:	21372804 	addi	r4,r4,-9056
   81538:	0082e780 	call	82e78 <puts>
  if(ret_code || error)
   8153c:	e0bff517 	ldw	r2,-44(fp)
   81540:	1000021e 	bne	r2,zero,8154c <FlashRunTests+0x110>
   81544:	e0bffb17 	ldw	r2,-20(fp)
   81548:	10000326 	beq	r2,zero,81558 <FlashRunTests+0x11c>
  {
    printf(" -At least one test failed.\n\n");
   8154c:	010002b4 	movhi	r4,10
   81550:	21372e04 	addi	r4,r4,-9032
   81554:	0082e780 	call	82e78 <puts>
  }
}
   81558:	0001883a 	nop
   8155c:	e6ffff04 	addi	sp,fp,-4
   81560:	dfc00217 	ldw	ra,8(sp)
   81564:	df000117 	ldw	fp,4(sp)
   81568:	dc000017 	ldw	r16,0(sp)
   8156c:	dec00304 	addi	sp,sp,12
   81570:	f800283a 	ret

00081574 <GetFlashName>:
*           Defaults to "/dev/ext_flash", the name of the flash
*           component in the Nios II example designs.
* 
******************************************************************/
static int GetFlashName(char line[30], int flash_type)
{
   81574:	defffa04 	addi	sp,sp,-24
   81578:	dfc00515 	stw	ra,20(sp)
   8157c:	df000415 	stw	fp,16(sp)
   81580:	df000404 	addi	fp,sp,16
   81584:	e13ffe15 	stw	r4,-8(fp)
   81588:	e17fff15 	stw	r5,-4(fp)

  char ch = 0x0;
   8158c:	e03ffc05 	stb	zero,-16(fp)
  int i;

  if (flash_type == CFI)
   81590:	e0bfff17 	ldw	r2,-4(fp)
   81594:	108000d8 	cmpnei	r2,r2,3
   81598:	1000091e 	bne	r2,zero,815c0 <GetFlashName+0x4c>
  { 
    printf("\nEnter the name of the CFI flash device to be opened,\n");
   8159c:	010002b4 	movhi	r4,10
   815a0:	21373604 	addi	r4,r4,-9000
   815a4:	0082e780 	call	82e78 <puts>
    printf("or just press <enter> to open \"/dev/ext_flash\"\n");
   815a8:	010002b4 	movhi	r4,10
   815ac:	21374404 	addi	r4,r4,-8944
   815b0:	0082e780 	call	82e78 <puts>
    printf(">");
   815b4:	01000f84 	movi	r4,62
   815b8:	0082da00 	call	82da0 <putchar>
   815bc:	00000b06 	br	815ec <GetFlashName+0x78>
  }
  else if (flash_type == EPCS)
   815c0:	e0bfff17 	ldw	r2,-4(fp)
   815c4:	10800118 	cmpnei	r2,r2,4
   815c8:	1000081e 	bne	r2,zero,815ec <GetFlashName+0x78>
  {
    printf("\nEnter the name of the EPCS flash device to be opened,\n");
   815cc:	010002b4 	movhi	r4,10
   815d0:	21375004 	addi	r4,r4,-8896
   815d4:	0082e780 	call	82e78 <puts>
    printf("or just press <enter> to open \"/dev/epcs_controller\"\n");
   815d8:	010002b4 	movhi	r4,10
   815dc:	21375e04 	addi	r4,r4,-8840
   815e0:	0082e780 	call	82e78 <puts>
    printf(">");
   815e4:	01000f84 	movi	r4,62
   815e8:	0082da00 	call	82da0 <putchar>
  }
 
  for(i = 0; ch != '\n'; i++)
   815ec:	e03ffd15 	stw	zero,-12(fp)
   815f0:	00003706 	br	816d0 <GetFlashName+0x15c>
  {
    ch = getc(stdin);
   815f4:	d0a00117 	ldw	r2,-32764(gp)
   815f8:	10800117 	ldw	r2,4(r2)
   815fc:	1009883a 	mov	r4,r2
   81600:	00822ac0 	call	822ac <getc>
   81604:	e0bffc05 	stb	r2,-16(fp)
    if(ch == '\r' || ch == '\n')
   81608:	e0bffc07 	ldb	r2,-16(fp)
   8160c:	10800360 	cmpeqi	r2,r2,13
   81610:	1000031e 	bne	r2,zero,81620 <GetFlashName+0xac>
   81614:	e0bffc07 	ldb	r2,-16(fp)
   81618:	10800298 	cmpnei	r2,r2,10
   8161c:	1000221e 	bne	r2,zero,816a8 <GetFlashName+0x134>
    {
      /* Hitting <enter> defaults to the standard component name */
      if( i <= 1 )
   81620:	e0bffd17 	ldw	r2,-12(fp)
   81624:	10800088 	cmpgei	r2,r2,2
   81628:	10001a1e 	bne	r2,zero,81694 <GetFlashName+0x120>
      {
        if (flash_type == CFI)
   8162c:	e0bfff17 	ldw	r2,-4(fp)
   81630:	108000d8 	cmpnei	r2,r2,3
   81634:	10000a1e 	bne	r2,zero,81660 <GetFlashName+0xec>
          strcpy(line, "/dev/ext_flash\0");
   81638:	e0fffe17 	ldw	r3,-8(fp)
   8163c:	008002b4 	movhi	r2,10
   81640:	10b76c04 	addi	r2,r2,-8784
   81644:	1009883a 	mov	r4,r2
   81648:	008003c4 	movi	r2,15
   8164c:	100d883a 	mov	r6,r2
   81650:	200b883a 	mov	r5,r4
   81654:	1809883a 	mov	r4,r3
   81658:	0082be40 	call	82be4 <memcpy>
  {
    ch = getc(stdin);
    if(ch == '\r' || ch == '\n')
    {
      /* Hitting <enter> defaults to the standard component name */
      if( i <= 1 )
   8165c:	00001806 	br	816c0 <GetFlashName+0x14c>
      {
        if (flash_type == CFI)
          strcpy(line, "/dev/ext_flash\0");
        else if (flash_type == EPCS)
   81660:	e0bfff17 	ldw	r2,-4(fp)
   81664:	10800118 	cmpnei	r2,r2,4
   81668:	1000151e 	bne	r2,zero,816c0 <GetFlashName+0x14c>
          strcpy(line, "/dev/epcs_controller\0");
   8166c:	e0fffe17 	ldw	r3,-8(fp)
   81670:	008002b4 	movhi	r2,10
   81674:	10b77004 	addi	r2,r2,-8768
   81678:	1009883a 	mov	r4,r2
   8167c:	00800544 	movi	r2,21
   81680:	100d883a 	mov	r6,r2
   81684:	200b883a 	mov	r5,r4
   81688:	1809883a 	mov	r4,r3
   8168c:	0082be40 	call	82be4 <memcpy>
  {
    ch = getc(stdin);
    if(ch == '\r' || ch == '\n')
    {
      /* Hitting <enter> defaults to the standard component name */
      if( i <= 1 )
   81690:	00000b06 	br	816c0 <GetFlashName+0x14c>
          strcpy(line, "/dev/epcs_controller\0");
      }
         
      else
        /* Properly terminate the string. */
        line[i] = '\0';
   81694:	e0bffd17 	ldw	r2,-12(fp)
   81698:	e0fffe17 	ldw	r3,-8(fp)
   8169c:	1885883a 	add	r2,r3,r2
   816a0:	10000005 	stb	zero,0(r2)
  {
    ch = getc(stdin);
    if(ch == '\r' || ch == '\n')
    {
      /* Hitting <enter> defaults to the standard component name */
      if( i <= 1 )
   816a4:	00000606 	br	816c0 <GetFlashName+0x14c>
      else
        /* Properly terminate the string. */
        line[i] = '\0';
    }
    else
     line[i] = ch;
   816a8:	e0bffd17 	ldw	r2,-12(fp)
   816ac:	e0fffe17 	ldw	r3,-8(fp)
   816b0:	1885883a 	add	r2,r3,r2
   816b4:	e0fffc03 	ldbu	r3,-16(fp)
   816b8:	10c00005 	stb	r3,0(r2)
   816bc:	00000106 	br	816c4 <GetFlashName+0x150>
  {
    ch = getc(stdin);
    if(ch == '\r' || ch == '\n')
    {
      /* Hitting <enter> defaults to the standard component name */
      if( i <= 1 )
   816c0:	0001883a 	nop
    printf("\nEnter the name of the EPCS flash device to be opened,\n");
    printf("or just press <enter> to open \"/dev/epcs_controller\"\n");
    printf(">");
  }
 
  for(i = 0; ch != '\n'; i++)
   816c4:	e0bffd17 	ldw	r2,-12(fp)
   816c8:	10800044 	addi	r2,r2,1
   816cc:	e0bffd15 	stw	r2,-12(fp)
   816d0:	e0bffc07 	ldb	r2,-16(fp)
   816d4:	10800298 	cmpnei	r2,r2,10
   816d8:	103fc61e 	bne	r2,zero,815f4 <__ram_exceptions_end+0xfff613c0>
    }
    else
     line[i] = ch;
  }
 
  return 0;
   816dc:	0005883a 	mov	r2,zero
}
   816e0:	e037883a 	mov	sp,fp
   816e4:	dfc00117 	ldw	ra,4(sp)
   816e8:	df000017 	ldw	fp,0(sp)
   816ec:	dec00204 	addi	sp,sp,8
   816f0:	f800283a 	ret

000816f4 <FlashErase>:
*
*  Purpose: Erases 1 or all blocks in the specified flash device.
* 
******************************************************************/
static void FlashErase(int flash_type)
{
   816f4:	deffe204 	addi	sp,sp,-120
   816f8:	dfc01d15 	stw	ra,116(sp)
   816fc:	df001c15 	stw	fp,112(sp)
   81700:	dc001b15 	stw	r16,108(sp)
   81704:	df001c04 	addi	fp,sp,112
   81708:	e13ffe15 	stw	r4,-8(fp)
  char entry[4];
  char flashname[30];
  unsigned int block;
 
  /* Get the name of the flash we are erasing */
  ret_code = GetFlashName(flashname, flash_type);
   8170c:	e0bff504 	addi	r2,fp,-44
   81710:	e17ffe17 	ldw	r5,-8(fp)
   81714:	1009883a 	mov	r4,r2
   81718:	00815740 	call	81574 <GetFlashName>
   8171c:	e0bfe415 	stw	r2,-112(fp)
 
  fd = alt_flash_open_dev(flashname);
   81720:	e0bff504 	addi	r2,fp,-44
   81724:	1009883a 	mov	r4,r2
   81728:	00997880 	call	99788 <alt_flash_open_dev>
   8172c:	e0bfe515 	stw	r2,-108(fp)
  if (fd)
   81730:	e0bfe517 	ldw	r2,-108(fp)
   81734:	1000ba26 	beq	r2,zero,81a20 <FlashErase+0x32c>
   81738:	e0bfe517 	ldw	r2,-108(fp)
   8173c:	e0bfe915 	stw	r2,-92(fp)
   81740:	e0bff204 	addi	r2,fp,-56
   81744:	e0bfea15 	stw	r2,-88(fp)
   81748:	e0bff304 	addi	r2,fp,-52
   8174c:	e0bfeb15 	stw	r2,-84(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_get_flash_info( 
                                      alt_flash_fd* fd, flash_region** info, 
                                      int* number_of_regions)
{
  return fd->get_info( fd, info, number_of_regions);
   81750:	e0bfe917 	ldw	r2,-92(fp)
   81754:	10800717 	ldw	r2,28(r2)
   81758:	e1bfeb17 	ldw	r6,-84(fp)
   8175c:	e17fea17 	ldw	r5,-88(fp)
   81760:	e13fe917 	ldw	r4,-92(fp)
   81764:	103ee83a 	callr	r2
  {
    /* Find out some useful stuff about the flash */
    ret_code = alt_get_flash_info(fd, &regions, &number_of_regions);
   81768:	e0bfe415 	stw	r2,-112(fp)
    if (!ret_code)
   8176c:	e0bfe417 	ldw	r2,-112(fp)
   81770:	1000a41e 	bne	r2,zero,81a04 <FlashErase+0x310>
    {
      printf(" -Region has %d blocks.\n", regions->number_of_blocks);
   81774:	e0bff217 	ldw	r2,-56(fp)
   81778:	10800217 	ldw	r2,8(r2)
   8177c:	100b883a 	mov	r5,r2
   81780:	010002b4 	movhi	r4,10
   81784:	21377604 	addi	r4,r4,-8744
   81788:	0082d5c0 	call	82d5c <printf>
      printf(" -Which block would you like to erase?\n");
   8178c:	010002b4 	movhi	r4,10
   81790:	21377d04 	addi	r4,r4,-8716
   81794:	0082e780 	call	82e78 <puts>
      printf(" -> ");
   81798:	010002b4 	movhi	r4,10
   8179c:	21378704 	addi	r4,r4,-8676
   817a0:	0082d5c0 	call	82d5c <printf>
      
      GetInputString( entry, sizeof(entry), stdin );
   817a4:	d0a00117 	ldw	r2,-32764(gp)
   817a8:	10c00117 	ldw	r3,4(r2)
   817ac:	e0bff404 	addi	r2,fp,-48
   817b0:	180d883a 	mov	r6,r3
   817b4:	01400104 	movi	r5,4
   817b8:	1009883a 	mov	r4,r2
   817bc:	008015c0 	call	8015c <GetInputString>

      if(entry[0] == 'a')
   817c0:	e0bff403 	ldbu	r2,-48(fp)
   817c4:	10803fcc 	andi	r2,r2,255
   817c8:	1080201c 	xori	r2,r2,128
   817cc:	10bfe004 	addi	r2,r2,-128
   817d0:	10801858 	cmpnei	r2,r2,97
   817d4:	1000521e 	bne	r2,zero,81920 <FlashErase+0x22c>
      {
        printf(" -Erase ALL blocks? (y/n) ");
   817d8:	010002b4 	movhi	r4,10
   817dc:	21378904 	addi	r4,r4,-8668
   817e0:	0082d5c0 	call	82d5c <printf>

        GetInputString( entry, sizeof(entry), stdin );
   817e4:	d0a00117 	ldw	r2,-32764(gp)
   817e8:	10c00117 	ldw	r3,4(r2)
   817ec:	e0bff404 	addi	r2,fp,-48
   817f0:	180d883a 	mov	r6,r3
   817f4:	01400104 	movi	r5,4
   817f8:	1009883a 	mov	r4,r2
   817fc:	008015c0 	call	8015c <GetInputString>
        
        if(entry[0] == 'y')
   81800:	e0bff403 	ldbu	r2,-48(fp)
   81804:	10803fcc 	andi	r2,r2,255
   81808:	1080201c 	xori	r2,r2,128
   8180c:	10bfe004 	addi	r2,r2,-128
   81810:	10801e58 	cmpnei	r2,r2,121
   81814:	10003f1e 	bne	r2,zero,81914 <FlashErase+0x220>
        {
          /* Erase all blocks */
          printf(" -Erasing %d blocks.  Please Wait.\n", (regions->number_of_blocks));
   81818:	e0bff217 	ldw	r2,-56(fp)
   8181c:	10800217 	ldw	r2,8(r2)
   81820:	100b883a 	mov	r5,r2
   81824:	010002b4 	movhi	r4,10
   81828:	21379004 	addi	r4,r4,-8640
   8182c:	0082d5c0 	call	82d5c <printf>
          for(block = 0; block < regions->number_of_blocks; block++)
   81830:	e03ffd15 	stw	zero,-12(fp)
   81834:	00002e06 	br	818f0 <FlashErase+0x1fc>
          {
            /* Dont erase it if it's already erased silly. */
            if ((FlashCheckIfBlockErased(fd, block, regions)) == 0)
   81838:	e0bffd17 	ldw	r2,-12(fp)
   8183c:	1007883a 	mov	r3,r2
   81840:	e0bff217 	ldw	r2,-56(fp)
   81844:	100d883a 	mov	r6,r2
   81848:	180b883a 	mov	r5,r3
   8184c:	e13fe517 	ldw	r4,-108(fp)
   81850:	0080bd00 	call	80bd0 <FlashCheckIfBlockErased>
   81854:	1000191e 	bne	r2,zero,818bc <FlashErase+0x1c8>
            {
              test_offset = (regions->offset + (block * regions->block_size));
   81858:	e0bff217 	ldw	r2,-56(fp)
   8185c:	10800017 	ldw	r2,0(r2)
   81860:	1021883a 	mov	r16,r2
   81864:	e0bff217 	ldw	r2,-56(fp)
   81868:	10800317 	ldw	r2,12(r2)
   8186c:	1007883a 	mov	r3,r2
   81870:	e0bffd17 	ldw	r2,-12(fp)
   81874:	100b883a 	mov	r5,r2
   81878:	1809883a 	mov	r4,r3
   8187c:	00822140 	call	82214 <__mulsi3>
   81880:	8085883a 	add	r2,r16,r2
   81884:	e0bfe715 	stw	r2,-100(fp)
              alt_erase_flash_block(fd, test_offset, regions->block_size);
   81888:	e0bff217 	ldw	r2,-56(fp)
   8188c:	10800317 	ldw	r2,12(r2)
   81890:	e0ffe517 	ldw	r3,-108(fp)
   81894:	e0ffe615 	stw	r3,-104(fp)
   81898:	e0ffe717 	ldw	r3,-100(fp)
   8189c:	e0ffec15 	stw	r3,-80(fp)
   818a0:	e0bfed15 	stw	r2,-76(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
   818a4:	e0bfe617 	ldw	r2,-104(fp)
   818a8:	10800817 	ldw	r2,32(r2)
   818ac:	e17fec17 	ldw	r5,-80(fp)
   818b0:	e13fe617 	ldw	r4,-104(fp)
   818b4:	103ee83a 	callr	r2
   818b8:	e0bfee15 	stw	r2,-72(fp)
            }
            /* Just a simple progress meter so we dont get bored waiting for the flash to erase. */
            printf(".");
   818bc:	01000b84 	movi	r4,46
   818c0:	0082da00 	call	82da0 <putchar>
            if(((block + 1) % 80) == 0)
   818c4:	e0bffd17 	ldw	r2,-12(fp)
   818c8:	10800044 	addi	r2,r2,1
   818cc:	01401404 	movi	r5,80
   818d0:	1009883a 	mov	r4,r2
   818d4:	00821bc0 	call	821bc <__umodsi3>
   818d8:	1000021e 	bne	r2,zero,818e4 <FlashErase+0x1f0>
            {
              printf("\n");
   818dc:	01000284 	movi	r4,10
   818e0:	0082da00 	call	82da0 <putchar>
        
        if(entry[0] == 'y')
        {
          /* Erase all blocks */
          printf(" -Erasing %d blocks.  Please Wait.\n", (regions->number_of_blocks));
          for(block = 0; block < regions->number_of_blocks; block++)
   818e4:	e0bffd17 	ldw	r2,-12(fp)
   818e8:	10800044 	addi	r2,r2,1
   818ec:	e0bffd15 	stw	r2,-12(fp)
   818f0:	e0bff217 	ldw	r2,-56(fp)
   818f4:	10800217 	ldw	r2,8(r2)
   818f8:	1007883a 	mov	r3,r2
   818fc:	e0bffd17 	ldw	r2,-12(fp)
   81900:	10ffcd36 	bltu	r2,r3,81838 <__ram_exceptions_end+0xfff61604>
            if(((block + 1) % 80) == 0)
            {
              printf("\n");
            }
          }
          printf("\n -All Blocks Erased.\n");
   81904:	010002b4 	movhi	r4,10
   81908:	21379904 	addi	r4,r4,-8604
   8190c:	0082e780 	call	82e78 <puts>
   81910:	00000306 	br	81920 <FlashErase+0x22c>
        }
        else
        {
          printf("Erased zero blocks.\n");
   81914:	010002b4 	movhi	r4,10
   81918:	21379f04 	addi	r4,r4,-8580
   8191c:	0082e780 	call	82e78 <puts>
        }
      }
      /* Just erase one block */
      if(sscanf(entry, "%d\n", &block))
   81920:	e0fffd04 	addi	r3,fp,-12
   81924:	e0bff404 	addi	r2,fp,-48
   81928:	180d883a 	mov	r6,r3
   8192c:	014002b4 	movhi	r5,10
   81930:	2977a404 	addi	r5,r5,-8560
   81934:	1009883a 	mov	r4,r2
   81938:	0082f680 	call	82f68 <sscanf>
   8193c:	10003126 	beq	r2,zero,81a04 <FlashErase+0x310>
      {
        if ((block >= 0) && (block <= (regions->number_of_blocks - 1)))
   81940:	e0bff217 	ldw	r2,-56(fp)
   81944:	10800217 	ldw	r2,8(r2)
   81948:	10bfffc4 	addi	r2,r2,-1
   8194c:	1007883a 	mov	r3,r2
   81950:	e0bffd17 	ldw	r2,-12(fp)
   81954:	18801f36 	bltu	r3,r2,819d4 <FlashErase+0x2e0>
        {
          test_offset = (regions->offset + (block * regions->block_size));
   81958:	e0bff217 	ldw	r2,-56(fp)
   8195c:	10800017 	ldw	r2,0(r2)
   81960:	1021883a 	mov	r16,r2
   81964:	e0bff217 	ldw	r2,-56(fp)
   81968:	10800317 	ldw	r2,12(r2)
   8196c:	1007883a 	mov	r3,r2
   81970:	e0bffd17 	ldw	r2,-12(fp)
   81974:	100b883a 	mov	r5,r2
   81978:	1809883a 	mov	r4,r3
   8197c:	00822140 	call	82214 <__mulsi3>
   81980:	8085883a 	add	r2,r16,r2
   81984:	e0bfe715 	stw	r2,-100(fp)
          alt_erase_flash_block(fd, test_offset, regions->block_size);
   81988:	e0bff217 	ldw	r2,-56(fp)
   8198c:	10800317 	ldw	r2,12(r2)
   81990:	e0ffe517 	ldw	r3,-108(fp)
   81994:	e0ffe815 	stw	r3,-96(fp)
   81998:	e0ffe717 	ldw	r3,-100(fp)
   8199c:	e0ffef15 	stw	r3,-68(fp)
   819a0:	e0bff015 	stw	r2,-64(fp)
   819a4:	e0bfe817 	ldw	r2,-96(fp)
   819a8:	10800817 	ldw	r2,32(r2)
   819ac:	e17fef17 	ldw	r5,-68(fp)
   819b0:	e13fe817 	ldw	r4,-96(fp)
   819b4:	103ee83a 	callr	r2
   819b8:	e0bff115 	stw	r2,-60(fp)
          printf(" -Block %d erased.\n", block);
   819bc:	e0bffd17 	ldw	r2,-12(fp)
   819c0:	100b883a 	mov	r5,r2
   819c4:	010002b4 	movhi	r4,10
   819c8:	2137a504 	addi	r4,r4,-8556
   819cc:	0082d5c0 	call	82d5c <printf>
   819d0:	00000c06 	br	81a04 <FlashErase+0x310>
        }
        else
        {
          printf(" -Block number entered is %d\n", block);
   819d4:	e0bffd17 	ldw	r2,-12(fp)
   819d8:	100b883a 	mov	r5,r2
   819dc:	010002b4 	movhi	r4,10
   819e0:	2137aa04 	addi	r4,r4,-8536
   819e4:	0082d5c0 	call	82d5c <printf>
          printf(" -Block number must be between 0 and %d.\n", (regions->number_of_blocks - 1));
   819e8:	e0bff217 	ldw	r2,-56(fp)
   819ec:	10800217 	ldw	r2,8(r2)
   819f0:	10bfffc4 	addi	r2,r2,-1
   819f4:	100b883a 	mov	r5,r2
   819f8:	010002b4 	movhi	r4,10
   819fc:	2137b204 	addi	r4,r4,-8504
   81a00:	0082d5c0 	call	82d5c <printf>
        }
      }
    }
    printf(" -Closing flash \"%s\".\n", flashname);
   81a04:	e0bff504 	addi	r2,fp,-44
   81a08:	100b883a 	mov	r5,r2
   81a0c:	010002b4 	movhi	r4,10
   81a10:	2137bd04 	addi	r4,r4,-8460
   81a14:	0082d5c0 	call	82d5c <printf>
    alt_flash_close_dev(fd);
   81a18:	e13fe517 	ldw	r4,-108(fp)
   81a1c:	00997f00 	call	997f0 <alt_flash_close_dev>
  }
}
   81a20:	0001883a 	nop
   81a24:	e6ffff04 	addi	sp,fp,-4
   81a28:	dfc00217 	ldw	ra,8(sp)
   81a2c:	df000117 	ldw	fp,4(sp)
   81a30:	dc000017 	ldw	r16,0(sp)
   81a34:	dec00304 	addi	sp,sp,12
   81a38:	f800283a 	ret

00081a3c <FlashFindErasedBlocks>:
*           parameter is SHOWMAP, the function prints a list of 
*           all blocks, indicating which ones are erased.
* 
******************************************************************/
static int FlashFindErasedBlocks(alt_flash_fd* fd, flash_region* regions, int number_of_regions, int mode)
{ 
   81a3c:	defff304 	addi	sp,sp,-52
   81a40:	dfc00c15 	stw	ra,48(sp)
   81a44:	df000b15 	stw	fp,44(sp)
   81a48:	dc000a15 	stw	r16,40(sp)
   81a4c:	df000b04 	addi	fp,sp,44
   81a50:	e13ffb15 	stw	r4,-20(fp)
   81a54:	e17ffc15 	stw	r5,-16(fp)
   81a58:	e1bffd15 	stw	r6,-12(fp)
   81a5c:	e1fffe15 	stw	r7,-8(fp)
  int region_index, block_index;
  int block_erased = 0x0;
   81a60:	e03ff715 	stw	zero,-36(fp)
  char entry[5];
  unsigned int block;

  /* Currently only supports flashes with 1 region, but region loop is left here for possible */
  /* future implementation */
  for(region_index = 0; region_index < number_of_regions; region_index++)
   81a64:	e03ff515 	stw	zero,-44(fp)
   81a68:	00008a06 	br	81c94 <FlashFindErasedBlocks+0x258>
  {
    printf(" -Checking Region %d for erased blocks.\n", region_index);
   81a6c:	e17ff517 	ldw	r5,-44(fp)
   81a70:	010002b4 	movhi	r4,10
   81a74:	2137c304 	addi	r4,r4,-8436
   81a78:	0082d5c0 	call	82d5c <printf>
    /* SHOWMAP mode has a legend reminding us what little plus and minus signs mean */
    if(mode == SHOWMAP)
   81a7c:	e0bffe17 	ldw	r2,-8(fp)
   81a80:	10800098 	cmpnei	r2,r2,2
   81a84:	1000061e 	bne	r2,zero,81aa0 <FlashFindErasedBlocks+0x64>
    {
      printf("            erased block = '-'\n");     
   81a88:	010002b4 	movhi	r4,10
   81a8c:	2137ce04 	addi	r4,r4,-8392
   81a90:	0082e780 	call	82e78 <puts>
      printf("          unerased block = '+'\n\n");     
   81a94:	010002b4 	movhi	r4,10
   81a98:	2137d604 	addi	r4,r4,-8360
   81a9c:	0082e780 	call	82e78 <puts>
    }
    /* Check those blocks. */
    for(block_index = 0; block_index < (regions->number_of_blocks); block_index++)
   81aa0:	e03ff615 	stw	zero,-40(fp)
   81aa4:	00003206 	br	81b70 <FlashFindErasedBlocks+0x134>
    {
      block_erased = FlashCheckIfBlockErased(fd, block_index, regions);
   81aa8:	e1bffc17 	ldw	r6,-16(fp)
   81aac:	e17ff617 	ldw	r5,-40(fp)
   81ab0:	e13ffb17 	ldw	r4,-20(fp)
   81ab4:	0080bd00 	call	80bd0 <FlashCheckIfBlockErased>
   81ab8:	e0bff715 	stw	r2,-36(fp)
      /* If it's erased and were running in TEST mode, we're done */
      if(block_erased && (mode == TEST))
   81abc:	e0bff717 	ldw	r2,-36(fp)
   81ac0:	10000326 	beq	r2,zero,81ad0 <FlashFindErasedBlocks+0x94>
   81ac4:	e0bffe17 	ldw	r2,-8(fp)
   81ac8:	10800060 	cmpeqi	r2,r2,1
   81acc:	10002c1e 	bne	r2,zero,81b80 <FlashFindErasedBlocks+0x144>
        break;
      /* If in SHOWMAP mode, mark block as either erased or not-erased. */
      else if(block_erased && (mode == SHOWMAP))
   81ad0:	e0bff717 	ldw	r2,-36(fp)
   81ad4:	10001126 	beq	r2,zero,81b1c <FlashFindErasedBlocks+0xe0>
   81ad8:	e0bffe17 	ldw	r2,-8(fp)
   81adc:	10800098 	cmpnei	r2,r2,2
   81ae0:	10000e1e 	bne	r2,zero,81b1c <FlashFindErasedBlocks+0xe0>
        printf("  Block %3d @ 0x%8.8X:\t-\n", block_index, (regions->offset + (block_index * regions->block_size)));           
   81ae4:	e0bffc17 	ldw	r2,-16(fp)
   81ae8:	14000017 	ldw	r16,0(r2)
   81aec:	e0bffc17 	ldw	r2,-16(fp)
   81af0:	10800317 	ldw	r2,12(r2)
   81af4:	e17ff617 	ldw	r5,-40(fp)
   81af8:	1009883a 	mov	r4,r2
   81afc:	00822140 	call	82214 <__mulsi3>
   81b00:	8085883a 	add	r2,r16,r2
   81b04:	100d883a 	mov	r6,r2
   81b08:	e17ff617 	ldw	r5,-40(fp)
   81b0c:	010002b4 	movhi	r4,10
   81b10:	2137de04 	addi	r4,r4,-8328
   81b14:	0082d5c0 	call	82d5c <printf>
   81b18:	00001206 	br	81b64 <FlashFindErasedBlocks+0x128>
      else if(!block_erased && (mode == SHOWMAP))
   81b1c:	e0bff717 	ldw	r2,-36(fp)
   81b20:	1000101e 	bne	r2,zero,81b64 <FlashFindErasedBlocks+0x128>
   81b24:	e0bffe17 	ldw	r2,-8(fp)
   81b28:	10800098 	cmpnei	r2,r2,2
   81b2c:	10000d1e 	bne	r2,zero,81b64 <FlashFindErasedBlocks+0x128>
        printf("  Block %3d @ 0x%8.8X:\t+\n", block_index, (regions->offset + (block_index * regions->block_size)));           
   81b30:	e0bffc17 	ldw	r2,-16(fp)
   81b34:	14000017 	ldw	r16,0(r2)
   81b38:	e0bffc17 	ldw	r2,-16(fp)
   81b3c:	10800317 	ldw	r2,12(r2)
   81b40:	e17ff617 	ldw	r5,-40(fp)
   81b44:	1009883a 	mov	r4,r2
   81b48:	00822140 	call	82214 <__mulsi3>
   81b4c:	8085883a 	add	r2,r16,r2
   81b50:	100d883a 	mov	r6,r2
   81b54:	e17ff617 	ldw	r5,-40(fp)
   81b58:	010002b4 	movhi	r4,10
   81b5c:	2137e504 	addi	r4,r4,-8300
   81b60:	0082d5c0 	call	82d5c <printf>
    {
      printf("            erased block = '-'\n");     
      printf("          unerased block = '+'\n\n");     
    }
    /* Check those blocks. */
    for(block_index = 0; block_index < (regions->number_of_blocks); block_index++)
   81b64:	e0bff617 	ldw	r2,-40(fp)
   81b68:	10800044 	addi	r2,r2,1
   81b6c:	e0bff615 	stw	r2,-40(fp)
   81b70:	e0bffc17 	ldw	r2,-16(fp)
   81b74:	10800217 	ldw	r2,8(r2)
   81b78:	e0fff617 	ldw	r3,-40(fp)
   81b7c:	18bfca16 	blt	r3,r2,81aa8 <__ram_exceptions_end+0xfff61874>
        printf("  Block %3d @ 0x%8.8X:\t-\n", block_index, (regions->offset + (block_index * regions->block_size)));           
      else if(!block_erased && (mode == SHOWMAP))
        printf("  Block %3d @ 0x%8.8X:\t+\n", block_index, (regions->offset + (block_index * regions->block_size)));           
    }
    /* Special case if no blocks are erased (TEST mode only)*/
    if(( block_index == ( regions->number_of_blocks )) && ( mode == TEST ))
   81b80:	e0bffc17 	ldw	r2,-16(fp)
   81b84:	10c00217 	ldw	r3,8(r2)
   81b88:	e0bff617 	ldw	r2,-40(fp)
   81b8c:	1880391e 	bne	r3,r2,81c74 <FlashFindErasedBlocks+0x238>
   81b90:	e0bffe17 	ldw	r2,-8(fp)
   81b94:	10800058 	cmpnei	r2,r2,1
   81b98:	1000361e 	bne	r2,zero,81c74 <FlashFindErasedBlocks+0x238>
    {
      printf(" -Found no erased blocks.  Please enter the number of the block\n");
   81b9c:	010002b4 	movhi	r4,10
   81ba0:	2137ec04 	addi	r4,r4,-8272
   81ba4:	0082e780 	call	82e78 <puts>
      printf("  you would like to test.  Enter 'q' to quit without testing flash.\n");
   81ba8:	010002b4 	movhi	r4,10
   81bac:	2137fc04 	addi	r4,r4,-8208
   81bb0:	0082e780 	call	82e78 <puts>
      printf(" -> ");
   81bb4:	010002b4 	movhi	r4,10
   81bb8:	21378704 	addi	r4,r4,-8676
   81bbc:	0082d5c0 	call	82d5c <printf>

      GetInputString( entry, sizeof(entry), stdin );
   81bc0:	d0a00117 	ldw	r2,-32764(gp)
   81bc4:	10c00117 	ldw	r3,4(r2)
   81bc8:	e0bff804 	addi	r2,fp,-32
   81bcc:	180d883a 	mov	r6,r3
   81bd0:	01400144 	movi	r5,5
   81bd4:	1009883a 	mov	r4,r2
   81bd8:	008015c0 	call	8015c <GetInputString>

      if(entry[0] == 'q')
   81bdc:	e0bff803 	ldbu	r2,-32(fp)
   81be0:	10803fcc 	andi	r2,r2,255
   81be4:	1080201c 	xori	r2,r2,128
   81be8:	10bfe004 	addi	r2,r2,-128
   81bec:	10801c58 	cmpnei	r2,r2,113
   81bf0:	1000031e 	bne	r2,zero,81c00 <FlashFindErasedBlocks+0x1c4>
      {
    		block_index = QUIT_WITHOUT_TESTING;
   81bf4:	00bfffc4 	movi	r2,-1
   81bf8:	e0bff615 	stw	r2,-40(fp)
    		break;
   81bfc:	00002a06 	br	81ca8 <FlashFindErasedBlocks+0x26c>
    	}
      else if(sscanf(entry, "%d\n", &block))
   81c00:	e0fffa04 	addi	r3,fp,-24
   81c04:	e0bff804 	addi	r2,fp,-32
   81c08:	180d883a 	mov	r6,r3
   81c0c:	014002b4 	movhi	r5,10
   81c10:	2977a404 	addi	r5,r5,-8560
   81c14:	1009883a 	mov	r4,r2
   81c18:	0082f680 	call	82f68 <sscanf>
   81c1c:	10001526 	beq	r2,zero,81c74 <FlashFindErasedBlocks+0x238>
      {
        if ((block >= 0) && (block <= (regions->number_of_blocks - 1)))
   81c20:	e0bffc17 	ldw	r2,-16(fp)
   81c24:	10800217 	ldw	r2,8(r2)
   81c28:	10bfffc4 	addi	r2,r2,-1
   81c2c:	1007883a 	mov	r3,r2
   81c30:	e0bffa17 	ldw	r2,-24(fp)
   81c34:	18800336 	bltu	r3,r2,81c44 <FlashFindErasedBlocks+0x208>
        {
        	block_index = block;
   81c38:	e0bffa17 	ldw	r2,-24(fp)
   81c3c:	e0bff615 	stw	r2,-40(fp)
        	break;
   81c40:	00001906 	br	81ca8 <FlashFindErasedBlocks+0x26c>
        }
        else 
        {
          printf(" -Block number entered is %d\n", block);
   81c44:	e0bffa17 	ldw	r2,-24(fp)
   81c48:	100b883a 	mov	r5,r2
   81c4c:	010002b4 	movhi	r4,10
   81c50:	2137aa04 	addi	r4,r4,-8536
   81c54:	0082d5c0 	call	82d5c <printf>
          printf(" -Block number must be between 0 and %d.\n", (regions->number_of_blocks - 1));
   81c58:	e0bffc17 	ldw	r2,-16(fp)
   81c5c:	10800217 	ldw	r2,8(r2)
   81c60:	10bfffc4 	addi	r2,r2,-1
   81c64:	100b883a 	mov	r5,r2
   81c68:	010002b4 	movhi	r4,10
   81c6c:	2137b204 	addi	r4,r4,-8504
   81c70:	0082d5c0 	call	82d5c <printf>
        }
      }    	
    }
    /* Break out of the region loop if we've found an erased block to test. */
    if(block_erased && (mode == TEST))
   81c74:	e0bff717 	ldw	r2,-36(fp)
   81c78:	10000326 	beq	r2,zero,81c88 <FlashFindErasedBlocks+0x24c>
   81c7c:	e0bffe17 	ldw	r2,-8(fp)
   81c80:	10800058 	cmpnei	r2,r2,1
   81c84:	10000726 	beq	r2,zero,81ca4 <FlashFindErasedBlocks+0x268>
  char entry[5];
  unsigned int block;

  /* Currently only supports flashes with 1 region, but region loop is left here for possible */
  /* future implementation */
  for(region_index = 0; region_index < number_of_regions; region_index++)
   81c88:	e0bff517 	ldw	r2,-44(fp)
   81c8c:	10800044 	addi	r2,r2,1
   81c90:	e0bff515 	stw	r2,-44(fp)
   81c94:	e0fff517 	ldw	r3,-44(fp)
   81c98:	e0bffd17 	ldw	r2,-12(fp)
   81c9c:	18bf7316 	blt	r3,r2,81a6c <__ram_exceptions_end+0xfff61838>
   81ca0:	00000106 	br	81ca8 <FlashFindErasedBlocks+0x26c>
        }
      }    	
    }
    /* Break out of the region loop if we've found an erased block to test. */
    if(block_erased && (mode == TEST))
      break;
   81ca4:	0001883a 	nop
  }

  return block_index;
   81ca8:	e0bff617 	ldw	r2,-40(fp)
}
   81cac:	e6ffff04 	addi	sp,fp,-4
   81cb0:	dfc00217 	ldw	ra,8(sp)
   81cb4:	df000117 	ldw	fp,4(sp)
   81cb8:	dc000017 	ldw	r16,0(sp)
   81cbc:	dec00304 	addi	sp,sp,12
   81cc0:	f800283a 	ret

00081cc4 <TestFlash>:
*           indicates which ones are erased.  The flash is closed
*           at the end of the function.
* 
******************************************************************/
static void TestFlash(int mode, int flash_type)
{
   81cc4:	deffea04 	addi	sp,sp,-88
   81cc8:	dfc01515 	stw	ra,84(sp)
   81ccc:	df001415 	stw	fp,80(sp)
   81cd0:	dc001315 	stw	r16,76(sp)
   81cd4:	df001404 	addi	fp,sp,80
   81cd8:	e13ffd15 	stw	r4,-12(fp)
   81cdc:	e17ffe15 	stw	r5,-8(fp)
  alt_flash_fd* fd;
  int number_of_regions;
  int block;
  flash_region* regions;
  int ret_code = 0x0;
   81ce0:	e03fec15 	stw	zero,-80(fp)
  char entry[4];
  char flashname[30];
  
  ret_code = GetFlashName(flashname, flash_type);
   81ce4:	e0bff504 	addi	r2,fp,-44
   81ce8:	e17ffe17 	ldw	r5,-8(fp)
   81cec:	1009883a 	mov	r4,r2
   81cf0:	00815740 	call	81574 <GetFlashName>
   81cf4:	e0bfec15 	stw	r2,-80(fp)

  fd = alt_flash_open_dev(flashname);
   81cf8:	e0bff504 	addi	r2,fp,-44
   81cfc:	1009883a 	mov	r4,r2
   81d00:	00997880 	call	99788 <alt_flash_open_dev>
   81d04:	e0bfed15 	stw	r2,-76(fp)
  if (fd)
   81d08:	e0bfed17 	ldw	r2,-76(fp)
   81d0c:	10005826 	beq	r2,zero,81e70 <TestFlash+0x1ac>
  {
    printf(" -Successfully opened %s\n", flashname);
   81d10:	e0bff504 	addi	r2,fp,-44
   81d14:	100b883a 	mov	r5,r2
   81d18:	010002b4 	movhi	r4,10
   81d1c:	21380d04 	addi	r4,r4,-8140
   81d20:	0082d5c0 	call	82d5c <printf>
   81d24:	e0bfed17 	ldw	r2,-76(fp)
   81d28:	e0bfef15 	stw	r2,-68(fp)
   81d2c:	e0bff304 	addi	r2,fp,-52
   81d30:	e0bff015 	stw	r2,-64(fp)
   81d34:	e0bff204 	addi	r2,fp,-56
   81d38:	e0bff115 	stw	r2,-60(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_get_flash_info( 
                                      alt_flash_fd* fd, flash_region** info, 
                                      int* number_of_regions)
{
  return fd->get_info( fd, info, number_of_regions);
   81d3c:	e0bfef17 	ldw	r2,-68(fp)
   81d40:	10800717 	ldw	r2,28(r2)
   81d44:	e1bff117 	ldw	r6,-60(fp)
   81d48:	e17ff017 	ldw	r5,-64(fp)
   81d4c:	e13fef17 	ldw	r4,-68(fp)
   81d50:	103ee83a 	callr	r2
    
    /* Get some useful info about the flash */
    ret_code = alt_get_flash_info(fd, &regions, &number_of_regions);
   81d54:	e0bfec15 	stw	r2,-80(fp)
      
    if (!ret_code)
   81d58:	e0bfec17 	ldw	r2,-80(fp)
   81d5c:	1000491e 	bne	r2,zero,81e84 <TestFlash+0x1c0>
    {
      printf(" -Region 0 contains %d blocks.\n", regions->number_of_blocks);
   81d60:	e0bff317 	ldw	r2,-52(fp)
   81d64:	10800217 	ldw	r2,8(r2)
   81d68:	100b883a 	mov	r5,r2
   81d6c:	010002b4 	movhi	r4,10
   81d70:	21381404 	addi	r4,r4,-8112
   81d74:	0082d5c0 	call	82d5c <printf>
      
      block = FlashFindErasedBlocks(fd, regions, number_of_regions, mode);
   81d78:	e0bff317 	ldw	r2,-52(fp)
   81d7c:	e0fff217 	ldw	r3,-56(fp)
   81d80:	e1fffd17 	ldw	r7,-12(fp)
   81d84:	180d883a 	mov	r6,r3
   81d88:	100b883a 	mov	r5,r2
   81d8c:	e13fed17 	ldw	r4,-76(fp)
   81d90:	0081a3c0 	call	81a3c <FlashFindErasedBlocks>
   81d94:	e0bfee15 	stw	r2,-72(fp)

      /* If we're in TEST mode, ask if this block is okay to test. */
      if(( mode == TEST ) && ( block != QUIT_WITHOUT_TESTING ))
   81d98:	e0bffd17 	ldw	r2,-12(fp)
   81d9c:	10800058 	cmpnei	r2,r2,1
   81da0:	1000381e 	bne	r2,zero,81e84 <TestFlash+0x1c0>
   81da4:	e0bfee17 	ldw	r2,-72(fp)
   81da8:	10bfffe0 	cmpeqi	r2,r2,-1
   81dac:	1000351e 	bne	r2,zero,81e84 <TestFlash+0x1c0>
      {
        printf(" -Block %d, at address 0x%X identified.\n", block, (regions->offset + (block * regions->block_size)));
   81db0:	e0bff317 	ldw	r2,-52(fp)
   81db4:	14000017 	ldw	r16,0(r2)
   81db8:	e0bff317 	ldw	r2,-52(fp)
   81dbc:	10800317 	ldw	r2,12(r2)
   81dc0:	e17fee17 	ldw	r5,-72(fp)
   81dc4:	1009883a 	mov	r4,r2
   81dc8:	00822140 	call	82214 <__mulsi3>
   81dcc:	8085883a 	add	r2,r16,r2
   81dd0:	100d883a 	mov	r6,r2
   81dd4:	e17fee17 	ldw	r5,-72(fp)
   81dd8:	010002b4 	movhi	r4,10
   81ddc:	21381c04 	addi	r4,r4,-8080
   81de0:	0082d5c0 	call	82d5c <printf>
        printf(" -Would you like to test this block? (y/n)");
   81de4:	010002b4 	movhi	r4,10
   81de8:	21382704 	addi	r4,r4,-8036
   81dec:	0082d5c0 	call	82d5c <printf>

        GetInputString(entry, sizeof(entry), stdin);
   81df0:	d0a00117 	ldw	r2,-32764(gp)
   81df4:	10c00117 	ldw	r3,4(r2)
   81df8:	e0bff404 	addi	r2,fp,-48
   81dfc:	180d883a 	mov	r6,r3
   81e00:	01400104 	movi	r5,4
   81e04:	1009883a 	mov	r4,r2
   81e08:	008015c0 	call	8015c <GetInputString>

        if ( entry[0] == 'y' && entry[1] == '\n' )
   81e0c:	e0bff403 	ldbu	r2,-48(fp)
   81e10:	10803fcc 	andi	r2,r2,255
   81e14:	1080201c 	xori	r2,r2,128
   81e18:	10bfe004 	addi	r2,r2,-128
   81e1c:	10801e58 	cmpnei	r2,r2,121
   81e20:	1000181e 	bne	r2,zero,81e84 <TestFlash+0x1c0>
   81e24:	e0bff443 	ldbu	r2,-47(fp)
   81e28:	10803fcc 	andi	r2,r2,255
   81e2c:	1080201c 	xori	r2,r2,128
   81e30:	10bfe004 	addi	r2,r2,-128
   81e34:	10800298 	cmpnei	r2,r2,10
   81e38:	1000121e 	bne	r2,zero,81e84 <TestFlash+0x1c0>
        {
          /* Test that Flash! */
          FlashRunTests(fd, block, regions);
   81e3c:	e0bff317 	ldw	r2,-52(fp)
   81e40:	100d883a 	mov	r6,r2
   81e44:	e17fee17 	ldw	r5,-72(fp)
   81e48:	e13fed17 	ldw	r4,-76(fp)
   81e4c:	008143c0 	call	8143c <FlashRunTests>
          printf(" -Closing flash device \"%s\".\n", flashname);
   81e50:	e0bff504 	addi	r2,fp,-44
   81e54:	100b883a 	mov	r5,r2
   81e58:	010002b4 	movhi	r4,10
   81e5c:	21383204 	addi	r4,r4,-7992
   81e60:	0082d5c0 	call	82d5c <printf>
          alt_flash_close_dev(fd);
   81e64:	e13fed17 	ldw	r4,-76(fp)
   81e68:	00997f00 	call	997f0 <alt_flash_close_dev>
  }
  else
  {
    printf(" -ERROR: Could not open %s\n", flashname);   
  }
}
   81e6c:	00000506 	br	81e84 <TestFlash+0x1c0>
      }
    }
  }
  else
  {
    printf(" -ERROR: Could not open %s\n", flashname);   
   81e70:	e0bff504 	addi	r2,fp,-44
   81e74:	100b883a 	mov	r5,r2
   81e78:	010002b4 	movhi	r4,10
   81e7c:	21383a04 	addi	r4,r4,-7960
   81e80:	0082d5c0 	call	82d5c <printf>
  }
}
   81e84:	0001883a 	nop
   81e88:	e6ffff04 	addi	sp,fp,-4
   81e8c:	dfc00217 	ldw	ra,8(sp)
   81e90:	df000117 	ldw	fp,4(sp)
   81e94:	dc000017 	ldw	r16,0(sp)
   81e98:	dec00304 	addi	sp,sp,12
   81e9c:	f800283a 	ret

00081ea0 <TopMenu>:
*
*  Purpose: Generates the top level menu.
* 
******************************************************************/
static int TopMenu( void )
{
   81ea0:	defffd04 	addi	sp,sp,-12
   81ea4:	dfc00215 	stw	ra,8(sp)
   81ea8:	df000115 	stw	fp,4(sp)
   81eac:	df000104 	addi	fp,sp,4
  char ch;

  /* Print the top-level menu to stdout */
  while (1)
  {
    MenuBegin("      Memory Test Main Menu");
   81eb0:	010002b4 	movhi	r4,10
   81eb4:	21384104 	addi	r4,r4,-7932
   81eb8:	00800b80 	call	800b8 <MenuBegin>
    MenuItem( 'a', "Test RAM" );
   81ebc:	014002b4 	movhi	r5,10
   81ec0:	29784804 	addi	r5,r5,-7904
   81ec4:	01001844 	movi	r4,97
   81ec8:	00801100 	call	80110 <MenuItem>
    MenuItem( 'b', "Test Flash");
   81ecc:	014002b4 	movhi	r5,10
   81ed0:	29784b04 	addi	r5,r5,-7892
   81ed4:	01001884 	movi	r4,98
   81ed8:	00801100 	call	80110 <MenuItem>
#ifdef EPCS_CONTROLLER_NAME    
    MenuItem( 'c', "Test EPCS Serial Flash");
    ch = MenuEnd( 'a', 'c' );    
#else
    ch = MenuEnd( 'a', 'b' );
   81edc:	01401884 	movi	r5,98
   81ee0:	01001844 	movi	r4,97
   81ee4:	00801ec0 	call	801ec <MenuEnd>
   81ee8:	e0bfff05 	stb	r2,-4(fp)
#endif /* EPCS_CONTROLLER_NAME */

    switch(ch)
   81eec:	e0bfff07 	ldb	r2,-4(fp)
   81ef0:	10bfe7c4 	addi	r2,r2,-97
   81ef4:	10c00468 	cmpgeui	r3,r2,17
   81ef8:	1800241e 	bne	r3,zero,81f8c <TopMenu+0xec>
   81efc:	100690ba 	slli	r3,r2,2
   81f00:	00800234 	movhi	r2,8
   81f04:	1087c504 	addi	r2,r2,7956
   81f08:	1885883a 	add	r2,r3,r2
   81f0c:	10800017 	ldw	r2,0(r2)
   81f10:	1000683a 	jmp	r2
   81f14:	00081f58 	cmpnei	zero,zero,8317
   81f18:	00081f60 	cmpeqi	zero,zero,8317
   81f1c:	00081f8c 	andi	zero,zero,8318
   81f20:	00081f8c 	andi	zero,zero,8318
   81f24:	00081f70 	cmpltui	zero,zero,8317
   81f28:	00081f8c 	andi	zero,zero,8318
   81f2c:	00081f8c 	andi	zero,zero,8318
   81f30:	00081f8c 	andi	zero,zero,8318
   81f34:	00081f8c 	andi	zero,zero,8318
   81f38:	00081f8c 	andi	zero,zero,8318
   81f3c:	00081f8c 	andi	zero,zero,8318
   81f40:	00081f8c 	andi	zero,zero,8318
   81f44:	00081f7c 	xorhi	zero,zero,8317
   81f48:	00081f8c 	andi	zero,zero,8318
   81f4c:	00081f8c 	andi	zero,zero,8318
   81f50:	00081f8c 	andi	zero,zero,8318
   81f54:	00081fa4 	muli	zero,zero,8318
    {
      MenuCase('a',TestRam());
   81f58:	0080a1c0 	call	80a1c <TestRam>
   81f5c:	00001206 	br	81fa8 <TopMenu+0x108>
      MenuCase('b',TestFlash(TEST, CFI));
   81f60:	014000c4 	movi	r5,3
   81f64:	01000044 	movi	r4,1
   81f68:	0081cc40 	call	81cc4 <TestFlash>
   81f6c:	00000e06 	br	81fa8 <TopMenu+0x108>
      MenuCase('e',FlashErase(CFI));       /* hidden option */
   81f70:	010000c4 	movi	r4,3
   81f74:	00816f40 	call	816f4 <FlashErase>
   81f78:	00000b06 	br	81fa8 <TopMenu+0x108>
      MenuCase('m',TestFlash(SHOWMAP, CFI)); /* hidden option */
   81f7c:	014000c4 	movi	r5,3
   81f80:	01000084 	movi	r4,2
   81f84:	0081cc40 	call	81cc4 <TestFlash>
   81f88:	00000706 	br	81fa8 <TopMenu+0x108>
      MenuCase('c',TestFlash(TEST, EPCS));
      MenuCase('f',FlashErase(EPCS));       /* hidden option */
      MenuCase('s',TestFlash(SHOWMAP, EPCS)); /* hidden option */
#endif /* EPCS_CONTROLLER_NAME */
      case 'q':	break;
      default:	printf("\n -ERROR: %c is an invalid entry.  Please try again\n", ch); break;
   81f8c:	e0bfff07 	ldb	r2,-4(fp)
   81f90:	100b883a 	mov	r5,r2
   81f94:	010002b4 	movhi	r4,10
   81f98:	21384e04 	addi	r4,r4,-7880
   81f9c:	0082d5c0 	call	82d5c <printf>
   81fa0:	00000106 	br	81fa8 <TopMenu+0x108>
#ifdef EPCS_CONTROLLER_NAME    
      MenuCase('c',TestFlash(TEST, EPCS));
      MenuCase('f',FlashErase(EPCS));       /* hidden option */
      MenuCase('s',TestFlash(SHOWMAP, EPCS)); /* hidden option */
#endif /* EPCS_CONTROLLER_NAME */
      case 'q':	break;
   81fa4:	0001883a 	nop
      default:	printf("\n -ERROR: %c is an invalid entry.  Please try again\n", ch); break;
    }
    if (ch == 'q')
   81fa8:	e0bfff07 	ldb	r2,-4(fp)
   81fac:	10801c58 	cmpnei	r2,r2,113
   81fb0:	10001026 	beq	r2,zero,81ff4 <TopMenu+0x154>
      break;
    printf("\nPress enter to continue...\n");
   81fb4:	010002b4 	movhi	r4,10
   81fb8:	21385c04 	addi	r4,r4,-7824
   81fbc:	0082e780 	call	82e78 <puts>
    while( (( ch = getc(stdin)) != '\n' ) && ( ch != EOF ));
   81fc0:	0001883a 	nop
   81fc4:	d0a00117 	ldw	r2,-32764(gp)
   81fc8:	10800117 	ldw	r2,4(r2)
   81fcc:	1009883a 	mov	r4,r2
   81fd0:	00822ac0 	call	822ac <getc>
   81fd4:	e0bfff05 	stb	r2,-4(fp)
   81fd8:	e0bfff07 	ldb	r2,-4(fp)
   81fdc:	108002a0 	cmpeqi	r2,r2,10
   81fe0:	103fb31e 	bne	r2,zero,81eb0 <__ram_exceptions_end+0xfff61c7c>
   81fe4:	e0bfff07 	ldb	r2,-4(fp)
   81fe8:	10bfffd8 	cmpnei	r2,r2,-1
   81fec:	103ff51e 	bne	r2,zero,81fc4 <__ram_exceptions_end+0xfff61d90>

  }
   81ff0:	003faf06 	br	81eb0 <__ram_exceptions_end+0xfff61c7c>
#endif /* EPCS_CONTROLLER_NAME */
      case 'q':	break;
      default:	printf("\n -ERROR: %c is an invalid entry.  Please try again\n", ch); break;
    }
    if (ch == 'q')
      break;
   81ff4:	0001883a 	nop
    printf("\nPress enter to continue...\n");
    while( (( ch = getc(stdin)) != '\n' ) && ( ch != EOF ));

  }
  return (ch);
   81ff8:	e0bfff07 	ldb	r2,-4(fp)
}
   81ffc:	e037883a 	mov	sp,fp
   82000:	dfc00117 	ldw	ra,4(sp)
   82004:	df000017 	ldw	fp,0(sp)
   82008:	dec00204 	addi	sp,sp,8
   8200c:	f800283a 	ret

00082010 <main>:
*  Purpose: Continually prints the menu and performs the actions
*           requested by the user.
* 
******************************************************************/
int main(void)
{
   82010:	defffd04 	addi	sp,sp,-12
   82014:	dfc00215 	stw	ra,8(sp)
   82018:	df000115 	stw	fp,4(sp)
   8201c:	df000104 	addi	fp,sp,4

  int ch;

  /* Print the Header */
  MenuHeader();
   82020:	008003c0 	call	8003c <MenuHeader>
  /* Print the menu and do what the user requests, until they hit 'q' */
  while (1)
  {
    ch = TopMenu();
   82024:	0081ea00 	call	81ea0 <TopMenu>
   82028:	e0bfff15 	stw	r2,-4(fp)
    if (ch == 'q')
   8202c:	e0bfff17 	ldw	r2,-4(fp)
   82030:	10801c58 	cmpnei	r2,r2,113
   82034:	103ffb1e 	bne	r2,zero,82024 <__ram_exceptions_end+0xfff61df0>
    {
      printf( "\nExiting from Memory Test.\n");
   82038:	010002b4 	movhi	r4,10
   8203c:	21386304 	addi	r4,r4,-7796
   82040:	0082e780 	call	82e78 <puts>
      break;
   82044:	0001883a 	nop
    }
  }
  return (0);
   82048:	0005883a 	mov	r2,zero
}
   8204c:	e037883a 	mov	sp,fp
   82050:	dfc00117 	ldw	ra,4(sp)
   82054:	df000017 	ldw	fp,0(sp)
   82058:	dec00204 	addi	sp,sp,8
   8205c:	f800283a 	ret

00082060 <__divsi3>:
   82060:	20001b16 	blt	r4,zero,820d0 <__divsi3+0x70>
   82064:	000f883a 	mov	r7,zero
   82068:	28001616 	blt	r5,zero,820c4 <__divsi3+0x64>
   8206c:	200d883a 	mov	r6,r4
   82070:	29001a2e 	bgeu	r5,r4,820dc <__divsi3+0x7c>
   82074:	00800804 	movi	r2,32
   82078:	00c00044 	movi	r3,1
   8207c:	00000106 	br	82084 <__divsi3+0x24>
   82080:	10000d26 	beq	r2,zero,820b8 <__divsi3+0x58>
   82084:	294b883a 	add	r5,r5,r5
   82088:	10bfffc4 	addi	r2,r2,-1
   8208c:	18c7883a 	add	r3,r3,r3
   82090:	293ffb36 	bltu	r5,r4,82080 <__ram_exceptions_end+0xfff61e4c>
   82094:	0005883a 	mov	r2,zero
   82098:	18000726 	beq	r3,zero,820b8 <__divsi3+0x58>
   8209c:	0005883a 	mov	r2,zero
   820a0:	31400236 	bltu	r6,r5,820ac <__divsi3+0x4c>
   820a4:	314dc83a 	sub	r6,r6,r5
   820a8:	10c4b03a 	or	r2,r2,r3
   820ac:	1806d07a 	srli	r3,r3,1
   820b0:	280ad07a 	srli	r5,r5,1
   820b4:	183ffa1e 	bne	r3,zero,820a0 <__ram_exceptions_end+0xfff61e6c>
   820b8:	38000126 	beq	r7,zero,820c0 <__divsi3+0x60>
   820bc:	0085c83a 	sub	r2,zero,r2
   820c0:	f800283a 	ret
   820c4:	014bc83a 	sub	r5,zero,r5
   820c8:	39c0005c 	xori	r7,r7,1
   820cc:	003fe706 	br	8206c <__ram_exceptions_end+0xfff61e38>
   820d0:	0109c83a 	sub	r4,zero,r4
   820d4:	01c00044 	movi	r7,1
   820d8:	003fe306 	br	82068 <__ram_exceptions_end+0xfff61e34>
   820dc:	00c00044 	movi	r3,1
   820e0:	003fee06 	br	8209c <__ram_exceptions_end+0xfff61e68>

000820e4 <__modsi3>:
   820e4:	20001716 	blt	r4,zero,82144 <__modsi3+0x60>
   820e8:	000f883a 	mov	r7,zero
   820ec:	2005883a 	mov	r2,r4
   820f0:	28001216 	blt	r5,zero,8213c <__modsi3+0x58>
   820f4:	2900162e 	bgeu	r5,r4,82150 <__modsi3+0x6c>
   820f8:	01800804 	movi	r6,32
   820fc:	00c00044 	movi	r3,1
   82100:	00000106 	br	82108 <__modsi3+0x24>
   82104:	30000a26 	beq	r6,zero,82130 <__modsi3+0x4c>
   82108:	294b883a 	add	r5,r5,r5
   8210c:	31bfffc4 	addi	r6,r6,-1
   82110:	18c7883a 	add	r3,r3,r3
   82114:	293ffb36 	bltu	r5,r4,82104 <__ram_exceptions_end+0xfff61ed0>
   82118:	18000526 	beq	r3,zero,82130 <__modsi3+0x4c>
   8211c:	1806d07a 	srli	r3,r3,1
   82120:	11400136 	bltu	r2,r5,82128 <__modsi3+0x44>
   82124:	1145c83a 	sub	r2,r2,r5
   82128:	280ad07a 	srli	r5,r5,1
   8212c:	183ffb1e 	bne	r3,zero,8211c <__ram_exceptions_end+0xfff61ee8>
   82130:	38000126 	beq	r7,zero,82138 <__modsi3+0x54>
   82134:	0085c83a 	sub	r2,zero,r2
   82138:	f800283a 	ret
   8213c:	014bc83a 	sub	r5,zero,r5
   82140:	003fec06 	br	820f4 <__ram_exceptions_end+0xfff61ec0>
   82144:	0109c83a 	sub	r4,zero,r4
   82148:	01c00044 	movi	r7,1
   8214c:	003fe706 	br	820ec <__ram_exceptions_end+0xfff61eb8>
   82150:	00c00044 	movi	r3,1
   82154:	003ff106 	br	8211c <__ram_exceptions_end+0xfff61ee8>

00082158 <__udivsi3>:
   82158:	200d883a 	mov	r6,r4
   8215c:	2900152e 	bgeu	r5,r4,821b4 <__udivsi3+0x5c>
   82160:	28001416 	blt	r5,zero,821b4 <__udivsi3+0x5c>
   82164:	00800804 	movi	r2,32
   82168:	00c00044 	movi	r3,1
   8216c:	00000206 	br	82178 <__udivsi3+0x20>
   82170:	10000e26 	beq	r2,zero,821ac <__udivsi3+0x54>
   82174:	28000516 	blt	r5,zero,8218c <__udivsi3+0x34>
   82178:	294b883a 	add	r5,r5,r5
   8217c:	10bfffc4 	addi	r2,r2,-1
   82180:	18c7883a 	add	r3,r3,r3
   82184:	293ffa36 	bltu	r5,r4,82170 <__ram_exceptions_end+0xfff61f3c>
   82188:	18000826 	beq	r3,zero,821ac <__udivsi3+0x54>
   8218c:	0005883a 	mov	r2,zero
   82190:	31400236 	bltu	r6,r5,8219c <__udivsi3+0x44>
   82194:	314dc83a 	sub	r6,r6,r5
   82198:	10c4b03a 	or	r2,r2,r3
   8219c:	1806d07a 	srli	r3,r3,1
   821a0:	280ad07a 	srli	r5,r5,1
   821a4:	183ffa1e 	bne	r3,zero,82190 <__ram_exceptions_end+0xfff61f5c>
   821a8:	f800283a 	ret
   821ac:	0005883a 	mov	r2,zero
   821b0:	f800283a 	ret
   821b4:	00c00044 	movi	r3,1
   821b8:	003ff406 	br	8218c <__ram_exceptions_end+0xfff61f58>

000821bc <__umodsi3>:
   821bc:	2005883a 	mov	r2,r4
   821c0:	2900122e 	bgeu	r5,r4,8220c <__umodsi3+0x50>
   821c4:	28001116 	blt	r5,zero,8220c <__umodsi3+0x50>
   821c8:	01800804 	movi	r6,32
   821cc:	00c00044 	movi	r3,1
   821d0:	00000206 	br	821dc <__umodsi3+0x20>
   821d4:	30000c26 	beq	r6,zero,82208 <__umodsi3+0x4c>
   821d8:	28000516 	blt	r5,zero,821f0 <__umodsi3+0x34>
   821dc:	294b883a 	add	r5,r5,r5
   821e0:	31bfffc4 	addi	r6,r6,-1
   821e4:	18c7883a 	add	r3,r3,r3
   821e8:	293ffa36 	bltu	r5,r4,821d4 <__ram_exceptions_end+0xfff61fa0>
   821ec:	18000626 	beq	r3,zero,82208 <__umodsi3+0x4c>
   821f0:	1806d07a 	srli	r3,r3,1
   821f4:	11400136 	bltu	r2,r5,821fc <__umodsi3+0x40>
   821f8:	1145c83a 	sub	r2,r2,r5
   821fc:	280ad07a 	srli	r5,r5,1
   82200:	183ffb1e 	bne	r3,zero,821f0 <__ram_exceptions_end+0xfff61fbc>
   82204:	f800283a 	ret
   82208:	f800283a 	ret
   8220c:	00c00044 	movi	r3,1
   82210:	003ff706 	br	821f0 <__ram_exceptions_end+0xfff61fbc>

00082214 <__mulsi3>:
   82214:	0005883a 	mov	r2,zero
   82218:	20000726 	beq	r4,zero,82238 <__mulsi3+0x24>
   8221c:	20c0004c 	andi	r3,r4,1
   82220:	2008d07a 	srli	r4,r4,1
   82224:	18000126 	beq	r3,zero,8222c <__mulsi3+0x18>
   82228:	1145883a 	add	r2,r2,r5
   8222c:	294b883a 	add	r5,r5,r5
   82230:	203ffa1e 	bne	r4,zero,8221c <__ram_exceptions_end+0xfff61fe8>
   82234:	f800283a 	ret
   82238:	f800283a 	ret

0008223c <_getc_r>:
   8223c:	defffd04 	addi	sp,sp,-12
   82240:	dc000115 	stw	r16,4(sp)
   82244:	dfc00215 	stw	ra,8(sp)
   82248:	2021883a 	mov	r16,r4
   8224c:	20000226 	beq	r4,zero,82258 <_getc_r+0x1c>
   82250:	20800e17 	ldw	r2,56(r4)
   82254:	10000c26 	beq	r2,zero,82288 <_getc_r+0x4c>
   82258:	28800117 	ldw	r2,4(r5)
   8225c:	10bfffc4 	addi	r2,r2,-1
   82260:	28800115 	stw	r2,4(r5)
   82264:	10000c16 	blt	r2,zero,82298 <_getc_r+0x5c>
   82268:	28800017 	ldw	r2,0(r5)
   8226c:	10c00044 	addi	r3,r2,1
   82270:	28c00015 	stw	r3,0(r5)
   82274:	10800003 	ldbu	r2,0(r2)
   82278:	dfc00217 	ldw	ra,8(sp)
   8227c:	dc000117 	ldw	r16,4(sp)
   82280:	dec00304 	addi	sp,sp,12
   82284:	f800283a 	ret
   82288:	d9400015 	stw	r5,0(sp)
   8228c:	00890300 	call	89030 <__sinit>
   82290:	d9400017 	ldw	r5,0(sp)
   82294:	003ff006 	br	82258 <__ram_exceptions_end+0xfff62024>
   82298:	8009883a 	mov	r4,r16
   8229c:	dfc00217 	ldw	ra,8(sp)
   822a0:	dc000117 	ldw	r16,4(sp)
   822a4:	dec00304 	addi	sp,sp,12
   822a8:	0082e8c1 	jmpi	82e8c <__srget_r>

000822ac <getc>:
   822ac:	008002b4 	movhi	r2,10
   822b0:	defffd04 	addi	sp,sp,-12
   822b4:	10817a04 	addi	r2,r2,1512
   822b8:	dc400115 	stw	r17,4(sp)
   822bc:	14400017 	ldw	r17,0(r2)
   822c0:	dc000015 	stw	r16,0(sp)
   822c4:	dfc00215 	stw	ra,8(sp)
   822c8:	2021883a 	mov	r16,r4
   822cc:	88000226 	beq	r17,zero,822d8 <getc+0x2c>
   822d0:	88800e17 	ldw	r2,56(r17)
   822d4:	10000d26 	beq	r2,zero,8230c <getc+0x60>
   822d8:	80800117 	ldw	r2,4(r16)
   822dc:	10bfffc4 	addi	r2,r2,-1
   822e0:	80800115 	stw	r2,4(r16)
   822e4:	10000c16 	blt	r2,zero,82318 <getc+0x6c>
   822e8:	80800017 	ldw	r2,0(r16)
   822ec:	10c00044 	addi	r3,r2,1
   822f0:	80c00015 	stw	r3,0(r16)
   822f4:	10800003 	ldbu	r2,0(r2)
   822f8:	dfc00217 	ldw	ra,8(sp)
   822fc:	dc400117 	ldw	r17,4(sp)
   82300:	dc000017 	ldw	r16,0(sp)
   82304:	dec00304 	addi	sp,sp,12
   82308:	f800283a 	ret
   8230c:	8809883a 	mov	r4,r17
   82310:	00890300 	call	89030 <__sinit>
   82314:	003ff006 	br	822d8 <__ram_exceptions_end+0xfff620a4>
   82318:	800b883a 	mov	r5,r16
   8231c:	8809883a 	mov	r4,r17
   82320:	dfc00217 	ldw	ra,8(sp)
   82324:	dc400117 	ldw	r17,4(sp)
   82328:	dc000017 	ldw	r16,0(sp)
   8232c:	dec00304 	addi	sp,sp,12
   82330:	0082e8c1 	jmpi	82e8c <__srget_r>

00082334 <malloc>:
   82334:	008002b4 	movhi	r2,10
   82338:	10817a04 	addi	r2,r2,1512
   8233c:	200b883a 	mov	r5,r4
   82340:	11000017 	ldw	r4,0(r2)
   82344:	008235c1 	jmpi	8235c <_malloc_r>

00082348 <free>:
   82348:	008002b4 	movhi	r2,10
   8234c:	10817a04 	addi	r2,r2,1512
   82350:	200b883a 	mov	r5,r4
   82354:	11000017 	ldw	r4,0(r2)
   82358:	00891a41 	jmpi	891a4 <_free_r>

0008235c <_malloc_r>:
   8235c:	defff504 	addi	sp,sp,-44
   82360:	dc800315 	stw	r18,12(sp)
   82364:	dfc00a15 	stw	ra,40(sp)
   82368:	df000915 	stw	fp,36(sp)
   8236c:	ddc00815 	stw	r23,32(sp)
   82370:	dd800715 	stw	r22,28(sp)
   82374:	dd400615 	stw	r21,24(sp)
   82378:	dd000515 	stw	r20,20(sp)
   8237c:	dcc00415 	stw	r19,16(sp)
   82380:	dc400215 	stw	r17,8(sp)
   82384:	dc000115 	stw	r16,4(sp)
   82388:	288002c4 	addi	r2,r5,11
   8238c:	00c00584 	movi	r3,22
   82390:	2025883a 	mov	r18,r4
   82394:	18807f2e 	bgeu	r3,r2,82594 <_malloc_r+0x238>
   82398:	047ffe04 	movi	r17,-8
   8239c:	1462703a 	and	r17,r2,r17
   823a0:	8800a316 	blt	r17,zero,82630 <_malloc_r+0x2d4>
   823a4:	8940a236 	bltu	r17,r5,82630 <_malloc_r+0x2d4>
   823a8:	0099ca00 	call	99ca0 <__malloc_lock>
   823ac:	00807dc4 	movi	r2,503
   823b0:	1441e92e 	bgeu	r2,r17,82b58 <_malloc_r+0x7fc>
   823b4:	8804d27a 	srli	r2,r17,9
   823b8:	1000a126 	beq	r2,zero,82640 <_malloc_r+0x2e4>
   823bc:	00c00104 	movi	r3,4
   823c0:	18811e36 	bltu	r3,r2,8283c <_malloc_r+0x4e0>
   823c4:	8804d1ba 	srli	r2,r17,6
   823c8:	12000e44 	addi	r8,r2,57
   823cc:	11c00e04 	addi	r7,r2,56
   823d0:	4209883a 	add	r4,r8,r8
   823d4:	04c002b4 	movhi	r19,10
   823d8:	2109883a 	add	r4,r4,r4
   823dc:	9cfb5b04 	addi	r19,r19,-4756
   823e0:	2109883a 	add	r4,r4,r4
   823e4:	9909883a 	add	r4,r19,r4
   823e8:	24000117 	ldw	r16,4(r4)
   823ec:	213ffe04 	addi	r4,r4,-8
   823f0:	24009726 	beq	r4,r16,82650 <_malloc_r+0x2f4>
   823f4:	80800117 	ldw	r2,4(r16)
   823f8:	01bfff04 	movi	r6,-4
   823fc:	014003c4 	movi	r5,15
   82400:	1184703a 	and	r2,r2,r6
   82404:	1447c83a 	sub	r3,r2,r17
   82408:	28c00716 	blt	r5,r3,82428 <_malloc_r+0xcc>
   8240c:	1800920e 	bge	r3,zero,82658 <_malloc_r+0x2fc>
   82410:	84000317 	ldw	r16,12(r16)
   82414:	24008e26 	beq	r4,r16,82650 <_malloc_r+0x2f4>
   82418:	80800117 	ldw	r2,4(r16)
   8241c:	1184703a 	and	r2,r2,r6
   82420:	1447c83a 	sub	r3,r2,r17
   82424:	28fff90e 	bge	r5,r3,8240c <__ram_exceptions_end+0xfff621d8>
   82428:	3809883a 	mov	r4,r7
   8242c:	018002b4 	movhi	r6,10
   82430:	9c000417 	ldw	r16,16(r19)
   82434:	31bb5b04 	addi	r6,r6,-4756
   82438:	32000204 	addi	r8,r6,8
   8243c:	82013426 	beq	r16,r8,82910 <_malloc_r+0x5b4>
   82440:	80c00117 	ldw	r3,4(r16)
   82444:	00bfff04 	movi	r2,-4
   82448:	188e703a 	and	r7,r3,r2
   8244c:	3c45c83a 	sub	r2,r7,r17
   82450:	00c003c4 	movi	r3,15
   82454:	18811f16 	blt	r3,r2,828d4 <_malloc_r+0x578>
   82458:	32000515 	stw	r8,20(r6)
   8245c:	32000415 	stw	r8,16(r6)
   82460:	10007f0e 	bge	r2,zero,82660 <_malloc_r+0x304>
   82464:	00807fc4 	movi	r2,511
   82468:	11c0fd36 	bltu	r2,r7,82860 <_malloc_r+0x504>
   8246c:	3806d0fa 	srli	r3,r7,3
   82470:	01c00044 	movi	r7,1
   82474:	30800117 	ldw	r2,4(r6)
   82478:	19400044 	addi	r5,r3,1
   8247c:	294b883a 	add	r5,r5,r5
   82480:	1807d0ba 	srai	r3,r3,2
   82484:	294b883a 	add	r5,r5,r5
   82488:	294b883a 	add	r5,r5,r5
   8248c:	298b883a 	add	r5,r5,r6
   82490:	38c6983a 	sll	r3,r7,r3
   82494:	29c00017 	ldw	r7,0(r5)
   82498:	2a7ffe04 	addi	r9,r5,-8
   8249c:	1886b03a 	or	r3,r3,r2
   824a0:	82400315 	stw	r9,12(r16)
   824a4:	81c00215 	stw	r7,8(r16)
   824a8:	30c00115 	stw	r3,4(r6)
   824ac:	2c000015 	stw	r16,0(r5)
   824b0:	3c000315 	stw	r16,12(r7)
   824b4:	2005d0ba 	srai	r2,r4,2
   824b8:	01400044 	movi	r5,1
   824bc:	288a983a 	sll	r5,r5,r2
   824c0:	19406f36 	bltu	r3,r5,82680 <_malloc_r+0x324>
   824c4:	28c4703a 	and	r2,r5,r3
   824c8:	10000a1e 	bne	r2,zero,824f4 <_malloc_r+0x198>
   824cc:	00bfff04 	movi	r2,-4
   824d0:	294b883a 	add	r5,r5,r5
   824d4:	2088703a 	and	r4,r4,r2
   824d8:	28c4703a 	and	r2,r5,r3
   824dc:	21000104 	addi	r4,r4,4
   824e0:	1000041e 	bne	r2,zero,824f4 <_malloc_r+0x198>
   824e4:	294b883a 	add	r5,r5,r5
   824e8:	28c4703a 	and	r2,r5,r3
   824ec:	21000104 	addi	r4,r4,4
   824f0:	103ffc26 	beq	r2,zero,824e4 <__ram_exceptions_end+0xfff622b0>
   824f4:	02bfff04 	movi	r10,-4
   824f8:	024003c4 	movi	r9,15
   824fc:	21800044 	addi	r6,r4,1
   82500:	318d883a 	add	r6,r6,r6
   82504:	318d883a 	add	r6,r6,r6
   82508:	318d883a 	add	r6,r6,r6
   8250c:	998d883a 	add	r6,r19,r6
   82510:	333ffe04 	addi	r12,r6,-8
   82514:	2017883a 	mov	r11,r4
   82518:	31800104 	addi	r6,r6,4
   8251c:	34000017 	ldw	r16,0(r6)
   82520:	31fffd04 	addi	r7,r6,-12
   82524:	81c0041e 	bne	r16,r7,82538 <_malloc_r+0x1dc>
   82528:	0000fb06 	br	82918 <_malloc_r+0x5bc>
   8252c:	1801030e 	bge	r3,zero,8293c <_malloc_r+0x5e0>
   82530:	84000317 	ldw	r16,12(r16)
   82534:	81c0f826 	beq	r16,r7,82918 <_malloc_r+0x5bc>
   82538:	80800117 	ldw	r2,4(r16)
   8253c:	1284703a 	and	r2,r2,r10
   82540:	1447c83a 	sub	r3,r2,r17
   82544:	48fff90e 	bge	r9,r3,8252c <__ram_exceptions_end+0xfff622f8>
   82548:	80800317 	ldw	r2,12(r16)
   8254c:	81000217 	ldw	r4,8(r16)
   82550:	89400054 	ori	r5,r17,1
   82554:	81400115 	stw	r5,4(r16)
   82558:	20800315 	stw	r2,12(r4)
   8255c:	11000215 	stw	r4,8(r2)
   82560:	8463883a 	add	r17,r16,r17
   82564:	9c400515 	stw	r17,20(r19)
   82568:	9c400415 	stw	r17,16(r19)
   8256c:	18800054 	ori	r2,r3,1
   82570:	88800115 	stw	r2,4(r17)
   82574:	8a000315 	stw	r8,12(r17)
   82578:	8a000215 	stw	r8,8(r17)
   8257c:	88e3883a 	add	r17,r17,r3
   82580:	88c00015 	stw	r3,0(r17)
   82584:	9009883a 	mov	r4,r18
   82588:	0099cc40 	call	99cc4 <__malloc_unlock>
   8258c:	80800204 	addi	r2,r16,8
   82590:	00001b06 	br	82600 <_malloc_r+0x2a4>
   82594:	04400404 	movi	r17,16
   82598:	89402536 	bltu	r17,r5,82630 <_malloc_r+0x2d4>
   8259c:	0099ca00 	call	99ca0 <__malloc_lock>
   825a0:	00800184 	movi	r2,6
   825a4:	01000084 	movi	r4,2
   825a8:	04c002b4 	movhi	r19,10
   825ac:	1085883a 	add	r2,r2,r2
   825b0:	9cfb5b04 	addi	r19,r19,-4756
   825b4:	1085883a 	add	r2,r2,r2
   825b8:	9885883a 	add	r2,r19,r2
   825bc:	14000117 	ldw	r16,4(r2)
   825c0:	10fffe04 	addi	r3,r2,-8
   825c4:	80c0d926 	beq	r16,r3,8292c <_malloc_r+0x5d0>
   825c8:	80c00117 	ldw	r3,4(r16)
   825cc:	81000317 	ldw	r4,12(r16)
   825d0:	00bfff04 	movi	r2,-4
   825d4:	1884703a 	and	r2,r3,r2
   825d8:	81400217 	ldw	r5,8(r16)
   825dc:	8085883a 	add	r2,r16,r2
   825e0:	10c00117 	ldw	r3,4(r2)
   825e4:	29000315 	stw	r4,12(r5)
   825e8:	21400215 	stw	r5,8(r4)
   825ec:	18c00054 	ori	r3,r3,1
   825f0:	10c00115 	stw	r3,4(r2)
   825f4:	9009883a 	mov	r4,r18
   825f8:	0099cc40 	call	99cc4 <__malloc_unlock>
   825fc:	80800204 	addi	r2,r16,8
   82600:	dfc00a17 	ldw	ra,40(sp)
   82604:	df000917 	ldw	fp,36(sp)
   82608:	ddc00817 	ldw	r23,32(sp)
   8260c:	dd800717 	ldw	r22,28(sp)
   82610:	dd400617 	ldw	r21,24(sp)
   82614:	dd000517 	ldw	r20,20(sp)
   82618:	dcc00417 	ldw	r19,16(sp)
   8261c:	dc800317 	ldw	r18,12(sp)
   82620:	dc400217 	ldw	r17,8(sp)
   82624:	dc000117 	ldw	r16,4(sp)
   82628:	dec00b04 	addi	sp,sp,44
   8262c:	f800283a 	ret
   82630:	00800304 	movi	r2,12
   82634:	90800015 	stw	r2,0(r18)
   82638:	0005883a 	mov	r2,zero
   8263c:	003ff006 	br	82600 <__ram_exceptions_end+0xfff623cc>
   82640:	01002004 	movi	r4,128
   82644:	02001004 	movi	r8,64
   82648:	01c00fc4 	movi	r7,63
   8264c:	003f6106 	br	823d4 <__ram_exceptions_end+0xfff621a0>
   82650:	4009883a 	mov	r4,r8
   82654:	003f7506 	br	8242c <__ram_exceptions_end+0xfff621f8>
   82658:	81000317 	ldw	r4,12(r16)
   8265c:	003fde06 	br	825d8 <__ram_exceptions_end+0xfff623a4>
   82660:	81c5883a 	add	r2,r16,r7
   82664:	11400117 	ldw	r5,4(r2)
   82668:	9009883a 	mov	r4,r18
   8266c:	29400054 	ori	r5,r5,1
   82670:	11400115 	stw	r5,4(r2)
   82674:	0099cc40 	call	99cc4 <__malloc_unlock>
   82678:	80800204 	addi	r2,r16,8
   8267c:	003fe006 	br	82600 <__ram_exceptions_end+0xfff623cc>
   82680:	9c000217 	ldw	r16,8(r19)
   82684:	00bfff04 	movi	r2,-4
   82688:	85800117 	ldw	r22,4(r16)
   8268c:	b0ac703a 	and	r22,r22,r2
   82690:	b4400336 	bltu	r22,r17,826a0 <_malloc_r+0x344>
   82694:	b445c83a 	sub	r2,r22,r17
   82698:	00c003c4 	movi	r3,15
   8269c:	18805d16 	blt	r3,r2,82814 <_malloc_r+0x4b8>
   826a0:	05c002b4 	movhi	r23,10
   826a4:	008002b4 	movhi	r2,10
   826a8:	1088d004 	addi	r2,r2,9024
   826ac:	bdc17b04 	addi	r23,r23,1516
   826b0:	15400017 	ldw	r21,0(r2)
   826b4:	b8c00017 	ldw	r3,0(r23)
   826b8:	00bfffc4 	movi	r2,-1
   826bc:	858d883a 	add	r6,r16,r22
   826c0:	8d6b883a 	add	r21,r17,r21
   826c4:	1880ea26 	beq	r3,r2,82a70 <_malloc_r+0x714>
   826c8:	ad4403c4 	addi	r21,r21,4111
   826cc:	00bc0004 	movi	r2,-4096
   826d0:	a8aa703a 	and	r21,r21,r2
   826d4:	a80b883a 	mov	r5,r21
   826d8:	9009883a 	mov	r4,r18
   826dc:	d9800015 	stw	r6,0(sp)
   826e0:	0082f140 	call	82f14 <_sbrk_r>
   826e4:	1029883a 	mov	r20,r2
   826e8:	00bfffc4 	movi	r2,-1
   826ec:	d9800017 	ldw	r6,0(sp)
   826f0:	a080e826 	beq	r20,r2,82a94 <_malloc_r+0x738>
   826f4:	a180a636 	bltu	r20,r6,82990 <_malloc_r+0x634>
   826f8:	070002b4 	movhi	fp,10
   826fc:	e708dc04 	addi	fp,fp,9072
   82700:	e0800017 	ldw	r2,0(fp)
   82704:	a887883a 	add	r3,r21,r2
   82708:	e0c00015 	stw	r3,0(fp)
   8270c:	3500e626 	beq	r6,r20,82aa8 <_malloc_r+0x74c>
   82710:	b9000017 	ldw	r4,0(r23)
   82714:	00bfffc4 	movi	r2,-1
   82718:	2080ee26 	beq	r4,r2,82ad4 <_malloc_r+0x778>
   8271c:	a185c83a 	sub	r2,r20,r6
   82720:	10c5883a 	add	r2,r2,r3
   82724:	e0800015 	stw	r2,0(fp)
   82728:	a0c001cc 	andi	r3,r20,7
   8272c:	1800bc26 	beq	r3,zero,82a20 <_malloc_r+0x6c4>
   82730:	a0e9c83a 	sub	r20,r20,r3
   82734:	00840204 	movi	r2,4104
   82738:	a5000204 	addi	r20,r20,8
   8273c:	10c7c83a 	sub	r3,r2,r3
   82740:	a545883a 	add	r2,r20,r21
   82744:	1083ffcc 	andi	r2,r2,4095
   82748:	18abc83a 	sub	r21,r3,r2
   8274c:	a80b883a 	mov	r5,r21
   82750:	9009883a 	mov	r4,r18
   82754:	0082f140 	call	82f14 <_sbrk_r>
   82758:	00ffffc4 	movi	r3,-1
   8275c:	10c0e126 	beq	r2,r3,82ae4 <_malloc_r+0x788>
   82760:	1505c83a 	sub	r2,r2,r20
   82764:	1545883a 	add	r2,r2,r21
   82768:	10800054 	ori	r2,r2,1
   8276c:	e0c00017 	ldw	r3,0(fp)
   82770:	9d000215 	stw	r20,8(r19)
   82774:	a0800115 	stw	r2,4(r20)
   82778:	a8c7883a 	add	r3,r21,r3
   8277c:	e0c00015 	stw	r3,0(fp)
   82780:	84c00e26 	beq	r16,r19,827bc <_malloc_r+0x460>
   82784:	018003c4 	movi	r6,15
   82788:	3580a72e 	bgeu	r6,r22,82a28 <_malloc_r+0x6cc>
   8278c:	81400117 	ldw	r5,4(r16)
   82790:	013ffe04 	movi	r4,-8
   82794:	b0bffd04 	addi	r2,r22,-12
   82798:	1104703a 	and	r2,r2,r4
   8279c:	2900004c 	andi	r4,r5,1
   827a0:	2088b03a 	or	r4,r4,r2
   827a4:	81000115 	stw	r4,4(r16)
   827a8:	01400144 	movi	r5,5
   827ac:	8089883a 	add	r4,r16,r2
   827b0:	21400115 	stw	r5,4(r4)
   827b4:	21400215 	stw	r5,8(r4)
   827b8:	3080cd36 	bltu	r6,r2,82af0 <_malloc_r+0x794>
   827bc:	008002b4 	movhi	r2,10
   827c0:	1088cf04 	addi	r2,r2,9020
   827c4:	11000017 	ldw	r4,0(r2)
   827c8:	20c0012e 	bgeu	r4,r3,827d0 <_malloc_r+0x474>
   827cc:	10c00015 	stw	r3,0(r2)
   827d0:	008002b4 	movhi	r2,10
   827d4:	1088ce04 	addi	r2,r2,9016
   827d8:	11000017 	ldw	r4,0(r2)
   827dc:	9c000217 	ldw	r16,8(r19)
   827e0:	20c0012e 	bgeu	r4,r3,827e8 <_malloc_r+0x48c>
   827e4:	10c00015 	stw	r3,0(r2)
   827e8:	80c00117 	ldw	r3,4(r16)
   827ec:	00bfff04 	movi	r2,-4
   827f0:	1886703a 	and	r3,r3,r2
   827f4:	1c45c83a 	sub	r2,r3,r17
   827f8:	1c400236 	bltu	r3,r17,82804 <_malloc_r+0x4a8>
   827fc:	00c003c4 	movi	r3,15
   82800:	18800416 	blt	r3,r2,82814 <_malloc_r+0x4b8>
   82804:	9009883a 	mov	r4,r18
   82808:	0099cc40 	call	99cc4 <__malloc_unlock>
   8280c:	0005883a 	mov	r2,zero
   82810:	003f7b06 	br	82600 <__ram_exceptions_end+0xfff623cc>
   82814:	88c00054 	ori	r3,r17,1
   82818:	80c00115 	stw	r3,4(r16)
   8281c:	8463883a 	add	r17,r16,r17
   82820:	10800054 	ori	r2,r2,1
   82824:	9c400215 	stw	r17,8(r19)
   82828:	88800115 	stw	r2,4(r17)
   8282c:	9009883a 	mov	r4,r18
   82830:	0099cc40 	call	99cc4 <__malloc_unlock>
   82834:	80800204 	addi	r2,r16,8
   82838:	003f7106 	br	82600 <__ram_exceptions_end+0xfff623cc>
   8283c:	00c00504 	movi	r3,20
   82840:	18804a2e 	bgeu	r3,r2,8296c <_malloc_r+0x610>
   82844:	00c01504 	movi	r3,84
   82848:	18806e36 	bltu	r3,r2,82a04 <_malloc_r+0x6a8>
   8284c:	8804d33a 	srli	r2,r17,12
   82850:	12001bc4 	addi	r8,r2,111
   82854:	11c01b84 	addi	r7,r2,110
   82858:	4209883a 	add	r4,r8,r8
   8285c:	003edd06 	br	823d4 <__ram_exceptions_end+0xfff621a0>
   82860:	3804d27a 	srli	r2,r7,9
   82864:	00c00104 	movi	r3,4
   82868:	1880442e 	bgeu	r3,r2,8297c <_malloc_r+0x620>
   8286c:	00c00504 	movi	r3,20
   82870:	18808136 	bltu	r3,r2,82a78 <_malloc_r+0x71c>
   82874:	11401704 	addi	r5,r2,92
   82878:	10c016c4 	addi	r3,r2,91
   8287c:	294b883a 	add	r5,r5,r5
   82880:	294b883a 	add	r5,r5,r5
   82884:	294b883a 	add	r5,r5,r5
   82888:	994b883a 	add	r5,r19,r5
   8288c:	28800017 	ldw	r2,0(r5)
   82890:	018002b4 	movhi	r6,10
   82894:	297ffe04 	addi	r5,r5,-8
   82898:	31bb5b04 	addi	r6,r6,-4756
   8289c:	28806526 	beq	r5,r2,82a34 <_malloc_r+0x6d8>
   828a0:	01bfff04 	movi	r6,-4
   828a4:	10c00117 	ldw	r3,4(r2)
   828a8:	1986703a 	and	r3,r3,r6
   828ac:	38c0022e 	bgeu	r7,r3,828b8 <_malloc_r+0x55c>
   828b0:	10800217 	ldw	r2,8(r2)
   828b4:	28bffb1e 	bne	r5,r2,828a4 <__ram_exceptions_end+0xfff62670>
   828b8:	11400317 	ldw	r5,12(r2)
   828bc:	98c00117 	ldw	r3,4(r19)
   828c0:	81400315 	stw	r5,12(r16)
   828c4:	80800215 	stw	r2,8(r16)
   828c8:	2c000215 	stw	r16,8(r5)
   828cc:	14000315 	stw	r16,12(r2)
   828d0:	003ef806 	br	824b4 <__ram_exceptions_end+0xfff62280>
   828d4:	88c00054 	ori	r3,r17,1
   828d8:	80c00115 	stw	r3,4(r16)
   828dc:	8463883a 	add	r17,r16,r17
   828e0:	34400515 	stw	r17,20(r6)
   828e4:	34400415 	stw	r17,16(r6)
   828e8:	10c00054 	ori	r3,r2,1
   828ec:	8a000315 	stw	r8,12(r17)
   828f0:	8a000215 	stw	r8,8(r17)
   828f4:	88c00115 	stw	r3,4(r17)
   828f8:	88a3883a 	add	r17,r17,r2
   828fc:	88800015 	stw	r2,0(r17)
   82900:	9009883a 	mov	r4,r18
   82904:	0099cc40 	call	99cc4 <__malloc_unlock>
   82908:	80800204 	addi	r2,r16,8
   8290c:	003f3c06 	br	82600 <__ram_exceptions_end+0xfff623cc>
   82910:	30c00117 	ldw	r3,4(r6)
   82914:	003ee706 	br	824b4 <__ram_exceptions_end+0xfff62280>
   82918:	5ac00044 	addi	r11,r11,1
   8291c:	588000cc 	andi	r2,r11,3
   82920:	31800204 	addi	r6,r6,8
   82924:	103efd1e 	bne	r2,zero,8251c <__ram_exceptions_end+0xfff622e8>
   82928:	00002406 	br	829bc <_malloc_r+0x660>
   8292c:	14000317 	ldw	r16,12(r2)
   82930:	143f251e 	bne	r2,r16,825c8 <__ram_exceptions_end+0xfff62394>
   82934:	21000084 	addi	r4,r4,2
   82938:	003ebc06 	br	8242c <__ram_exceptions_end+0xfff621f8>
   8293c:	8085883a 	add	r2,r16,r2
   82940:	10c00117 	ldw	r3,4(r2)
   82944:	81000317 	ldw	r4,12(r16)
   82948:	81400217 	ldw	r5,8(r16)
   8294c:	18c00054 	ori	r3,r3,1
   82950:	10c00115 	stw	r3,4(r2)
   82954:	29000315 	stw	r4,12(r5)
   82958:	21400215 	stw	r5,8(r4)
   8295c:	9009883a 	mov	r4,r18
   82960:	0099cc40 	call	99cc4 <__malloc_unlock>
   82964:	80800204 	addi	r2,r16,8
   82968:	003f2506 	br	82600 <__ram_exceptions_end+0xfff623cc>
   8296c:	12001704 	addi	r8,r2,92
   82970:	11c016c4 	addi	r7,r2,91
   82974:	4209883a 	add	r4,r8,r8
   82978:	003e9606 	br	823d4 <__ram_exceptions_end+0xfff621a0>
   8297c:	3804d1ba 	srli	r2,r7,6
   82980:	11400e44 	addi	r5,r2,57
   82984:	10c00e04 	addi	r3,r2,56
   82988:	294b883a 	add	r5,r5,r5
   8298c:	003fbc06 	br	82880 <__ram_exceptions_end+0xfff6264c>
   82990:	84ff5926 	beq	r16,r19,826f8 <__ram_exceptions_end+0xfff624c4>
   82994:	008002b4 	movhi	r2,10
   82998:	10bb5b04 	addi	r2,r2,-4756
   8299c:	14000217 	ldw	r16,8(r2)
   829a0:	00bfff04 	movi	r2,-4
   829a4:	80c00117 	ldw	r3,4(r16)
   829a8:	1886703a 	and	r3,r3,r2
   829ac:	003f9106 	br	827f4 <__ram_exceptions_end+0xfff625c0>
   829b0:	60800217 	ldw	r2,8(r12)
   829b4:	213fffc4 	addi	r4,r4,-1
   829b8:	1300651e 	bne	r2,r12,82b50 <_malloc_r+0x7f4>
   829bc:	208000cc 	andi	r2,r4,3
   829c0:	633ffe04 	addi	r12,r12,-8
   829c4:	103ffa1e 	bne	r2,zero,829b0 <__ram_exceptions_end+0xfff6277c>
   829c8:	98800117 	ldw	r2,4(r19)
   829cc:	0146303a 	nor	r3,zero,r5
   829d0:	1884703a 	and	r2,r3,r2
   829d4:	98800115 	stw	r2,4(r19)
   829d8:	294b883a 	add	r5,r5,r5
   829dc:	117f2836 	bltu	r2,r5,82680 <__ram_exceptions_end+0xfff6244c>
   829e0:	283f2726 	beq	r5,zero,82680 <__ram_exceptions_end+0xfff6244c>
   829e4:	2886703a 	and	r3,r5,r2
   829e8:	5809883a 	mov	r4,r11
   829ec:	183ec31e 	bne	r3,zero,824fc <__ram_exceptions_end+0xfff622c8>
   829f0:	294b883a 	add	r5,r5,r5
   829f4:	2886703a 	and	r3,r5,r2
   829f8:	21000104 	addi	r4,r4,4
   829fc:	183ffc26 	beq	r3,zero,829f0 <__ram_exceptions_end+0xfff627bc>
   82a00:	003ebe06 	br	824fc <__ram_exceptions_end+0xfff622c8>
   82a04:	00c05504 	movi	r3,340
   82a08:	18801236 	bltu	r3,r2,82a54 <_malloc_r+0x6f8>
   82a0c:	8804d3fa 	srli	r2,r17,15
   82a10:	12001e04 	addi	r8,r2,120
   82a14:	11c01dc4 	addi	r7,r2,119
   82a18:	4209883a 	add	r4,r8,r8
   82a1c:	003e6d06 	br	823d4 <__ram_exceptions_end+0xfff621a0>
   82a20:	00c40004 	movi	r3,4096
   82a24:	003f4606 	br	82740 <__ram_exceptions_end+0xfff6250c>
   82a28:	00800044 	movi	r2,1
   82a2c:	a0800115 	stw	r2,4(r20)
   82a30:	003f7406 	br	82804 <__ram_exceptions_end+0xfff625d0>
   82a34:	1805d0ba 	srai	r2,r3,2
   82a38:	01c00044 	movi	r7,1
   82a3c:	30c00117 	ldw	r3,4(r6)
   82a40:	388e983a 	sll	r7,r7,r2
   82a44:	2805883a 	mov	r2,r5
   82a48:	38c6b03a 	or	r3,r7,r3
   82a4c:	30c00115 	stw	r3,4(r6)
   82a50:	003f9b06 	br	828c0 <__ram_exceptions_end+0xfff6268c>
   82a54:	00c15504 	movi	r3,1364
   82a58:	18801a36 	bltu	r3,r2,82ac4 <_malloc_r+0x768>
   82a5c:	8804d4ba 	srli	r2,r17,18
   82a60:	12001f44 	addi	r8,r2,125
   82a64:	11c01f04 	addi	r7,r2,124
   82a68:	4209883a 	add	r4,r8,r8
   82a6c:	003e5906 	br	823d4 <__ram_exceptions_end+0xfff621a0>
   82a70:	ad400404 	addi	r21,r21,16
   82a74:	003f1706 	br	826d4 <__ram_exceptions_end+0xfff624a0>
   82a78:	00c01504 	movi	r3,84
   82a7c:	18802336 	bltu	r3,r2,82b0c <_malloc_r+0x7b0>
   82a80:	3804d33a 	srli	r2,r7,12
   82a84:	11401bc4 	addi	r5,r2,111
   82a88:	10c01b84 	addi	r3,r2,110
   82a8c:	294b883a 	add	r5,r5,r5
   82a90:	003f7b06 	br	82880 <__ram_exceptions_end+0xfff6264c>
   82a94:	9c000217 	ldw	r16,8(r19)
   82a98:	00bfff04 	movi	r2,-4
   82a9c:	80c00117 	ldw	r3,4(r16)
   82aa0:	1886703a 	and	r3,r3,r2
   82aa4:	003f5306 	br	827f4 <__ram_exceptions_end+0xfff625c0>
   82aa8:	3083ffcc 	andi	r2,r6,4095
   82aac:	103f181e 	bne	r2,zero,82710 <__ram_exceptions_end+0xfff624dc>
   82ab0:	99000217 	ldw	r4,8(r19)
   82ab4:	b545883a 	add	r2,r22,r21
   82ab8:	10800054 	ori	r2,r2,1
   82abc:	20800115 	stw	r2,4(r4)
   82ac0:	003f3e06 	br	827bc <__ram_exceptions_end+0xfff62588>
   82ac4:	01003f84 	movi	r4,254
   82ac8:	02001fc4 	movi	r8,127
   82acc:	01c01f84 	movi	r7,126
   82ad0:	003e4006 	br	823d4 <__ram_exceptions_end+0xfff621a0>
   82ad4:	008002b4 	movhi	r2,10
   82ad8:	10817b04 	addi	r2,r2,1516
   82adc:	15000015 	stw	r20,0(r2)
   82ae0:	003f1106 	br	82728 <__ram_exceptions_end+0xfff624f4>
   82ae4:	00800044 	movi	r2,1
   82ae8:	002b883a 	mov	r21,zero
   82aec:	003f1f06 	br	8276c <__ram_exceptions_end+0xfff62538>
   82af0:	81400204 	addi	r5,r16,8
   82af4:	9009883a 	mov	r4,r18
   82af8:	00891a40 	call	891a4 <_free_r>
   82afc:	008002b4 	movhi	r2,10
   82b00:	1088dc04 	addi	r2,r2,9072
   82b04:	10c00017 	ldw	r3,0(r2)
   82b08:	003f2c06 	br	827bc <__ram_exceptions_end+0xfff62588>
   82b0c:	00c05504 	movi	r3,340
   82b10:	18800536 	bltu	r3,r2,82b28 <_malloc_r+0x7cc>
   82b14:	3804d3fa 	srli	r2,r7,15
   82b18:	11401e04 	addi	r5,r2,120
   82b1c:	10c01dc4 	addi	r3,r2,119
   82b20:	294b883a 	add	r5,r5,r5
   82b24:	003f5606 	br	82880 <__ram_exceptions_end+0xfff6264c>
   82b28:	00c15504 	movi	r3,1364
   82b2c:	18800536 	bltu	r3,r2,82b44 <_malloc_r+0x7e8>
   82b30:	3804d4ba 	srli	r2,r7,18
   82b34:	11401f44 	addi	r5,r2,125
   82b38:	10c01f04 	addi	r3,r2,124
   82b3c:	294b883a 	add	r5,r5,r5
   82b40:	003f4f06 	br	82880 <__ram_exceptions_end+0xfff6264c>
   82b44:	01403f84 	movi	r5,254
   82b48:	00c01f84 	movi	r3,126
   82b4c:	003f4c06 	br	82880 <__ram_exceptions_end+0xfff6264c>
   82b50:	98800117 	ldw	r2,4(r19)
   82b54:	003fa006 	br	829d8 <__ram_exceptions_end+0xfff627a4>
   82b58:	8808d0fa 	srli	r4,r17,3
   82b5c:	20800044 	addi	r2,r4,1
   82b60:	1085883a 	add	r2,r2,r2
   82b64:	003e9006 	br	825a8 <__ram_exceptions_end+0xfff62374>

00082b68 <memcmp>:
   82b68:	01c000c4 	movi	r7,3
   82b6c:	3980192e 	bgeu	r7,r6,82bd4 <memcmp+0x6c>
   82b70:	2144b03a 	or	r2,r4,r5
   82b74:	11c4703a 	and	r2,r2,r7
   82b78:	10000f26 	beq	r2,zero,82bb8 <memcmp+0x50>
   82b7c:	20800003 	ldbu	r2,0(r4)
   82b80:	28c00003 	ldbu	r3,0(r5)
   82b84:	10c0151e 	bne	r2,r3,82bdc <memcmp+0x74>
   82b88:	31bfff84 	addi	r6,r6,-2
   82b8c:	01ffffc4 	movi	r7,-1
   82b90:	00000406 	br	82ba4 <memcmp+0x3c>
   82b94:	20800003 	ldbu	r2,0(r4)
   82b98:	28c00003 	ldbu	r3,0(r5)
   82b9c:	31bfffc4 	addi	r6,r6,-1
   82ba0:	10c00e1e 	bne	r2,r3,82bdc <memcmp+0x74>
   82ba4:	21000044 	addi	r4,r4,1
   82ba8:	29400044 	addi	r5,r5,1
   82bac:	31fff91e 	bne	r6,r7,82b94 <__ram_exceptions_end+0xfff62960>
   82bb0:	0005883a 	mov	r2,zero
   82bb4:	f800283a 	ret
   82bb8:	20c00017 	ldw	r3,0(r4)
   82bbc:	28800017 	ldw	r2,0(r5)
   82bc0:	18bfee1e 	bne	r3,r2,82b7c <__ram_exceptions_end+0xfff62948>
   82bc4:	31bfff04 	addi	r6,r6,-4
   82bc8:	21000104 	addi	r4,r4,4
   82bcc:	29400104 	addi	r5,r5,4
   82bd0:	39bff936 	bltu	r7,r6,82bb8 <__ram_exceptions_end+0xfff62984>
   82bd4:	303fe91e 	bne	r6,zero,82b7c <__ram_exceptions_end+0xfff62948>
   82bd8:	003ff506 	br	82bb0 <__ram_exceptions_end+0xfff6297c>
   82bdc:	10c5c83a 	sub	r2,r2,r3
   82be0:	f800283a 	ret

00082be4 <memcpy>:
   82be4:	defffd04 	addi	sp,sp,-12
   82be8:	dfc00215 	stw	ra,8(sp)
   82bec:	dc400115 	stw	r17,4(sp)
   82bf0:	dc000015 	stw	r16,0(sp)
   82bf4:	00c003c4 	movi	r3,15
   82bf8:	2005883a 	mov	r2,r4
   82bfc:	1980452e 	bgeu	r3,r6,82d14 <memcpy+0x130>
   82c00:	2906b03a 	or	r3,r5,r4
   82c04:	18c000cc 	andi	r3,r3,3
   82c08:	1800441e 	bne	r3,zero,82d1c <memcpy+0x138>
   82c0c:	347ffc04 	addi	r17,r6,-16
   82c10:	8822d13a 	srli	r17,r17,4
   82c14:	28c00104 	addi	r3,r5,4
   82c18:	23400104 	addi	r13,r4,4
   82c1c:	8820913a 	slli	r16,r17,4
   82c20:	2b000204 	addi	r12,r5,8
   82c24:	22c00204 	addi	r11,r4,8
   82c28:	84000504 	addi	r16,r16,20
   82c2c:	2a800304 	addi	r10,r5,12
   82c30:	22400304 	addi	r9,r4,12
   82c34:	2c21883a 	add	r16,r5,r16
   82c38:	2811883a 	mov	r8,r5
   82c3c:	200f883a 	mov	r7,r4
   82c40:	41000017 	ldw	r4,0(r8)
   82c44:	1fc00017 	ldw	ra,0(r3)
   82c48:	63c00017 	ldw	r15,0(r12)
   82c4c:	39000015 	stw	r4,0(r7)
   82c50:	53800017 	ldw	r14,0(r10)
   82c54:	6fc00015 	stw	ra,0(r13)
   82c58:	5bc00015 	stw	r15,0(r11)
   82c5c:	4b800015 	stw	r14,0(r9)
   82c60:	18c00404 	addi	r3,r3,16
   82c64:	39c00404 	addi	r7,r7,16
   82c68:	42000404 	addi	r8,r8,16
   82c6c:	6b400404 	addi	r13,r13,16
   82c70:	63000404 	addi	r12,r12,16
   82c74:	5ac00404 	addi	r11,r11,16
   82c78:	52800404 	addi	r10,r10,16
   82c7c:	4a400404 	addi	r9,r9,16
   82c80:	1c3fef1e 	bne	r3,r16,82c40 <__ram_exceptions_end+0xfff62a0c>
   82c84:	89c00044 	addi	r7,r17,1
   82c88:	380e913a 	slli	r7,r7,4
   82c8c:	310003cc 	andi	r4,r6,15
   82c90:	02c000c4 	movi	r11,3
   82c94:	11c7883a 	add	r3,r2,r7
   82c98:	29cb883a 	add	r5,r5,r7
   82c9c:	5900212e 	bgeu	r11,r4,82d24 <memcpy+0x140>
   82ca0:	1813883a 	mov	r9,r3
   82ca4:	2811883a 	mov	r8,r5
   82ca8:	200f883a 	mov	r7,r4
   82cac:	42800017 	ldw	r10,0(r8)
   82cb0:	4a400104 	addi	r9,r9,4
   82cb4:	39ffff04 	addi	r7,r7,-4
   82cb8:	4abfff15 	stw	r10,-4(r9)
   82cbc:	42000104 	addi	r8,r8,4
   82cc0:	59fffa36 	bltu	r11,r7,82cac <__ram_exceptions_end+0xfff62a78>
   82cc4:	213fff04 	addi	r4,r4,-4
   82cc8:	2008d0ba 	srli	r4,r4,2
   82ccc:	318000cc 	andi	r6,r6,3
   82cd0:	21000044 	addi	r4,r4,1
   82cd4:	2109883a 	add	r4,r4,r4
   82cd8:	2109883a 	add	r4,r4,r4
   82cdc:	1907883a 	add	r3,r3,r4
   82ce0:	290b883a 	add	r5,r5,r4
   82ce4:	30000626 	beq	r6,zero,82d00 <memcpy+0x11c>
   82ce8:	198d883a 	add	r6,r3,r6
   82cec:	29c00003 	ldbu	r7,0(r5)
   82cf0:	18c00044 	addi	r3,r3,1
   82cf4:	29400044 	addi	r5,r5,1
   82cf8:	19ffffc5 	stb	r7,-1(r3)
   82cfc:	19bffb1e 	bne	r3,r6,82cec <__ram_exceptions_end+0xfff62ab8>
   82d00:	dfc00217 	ldw	ra,8(sp)
   82d04:	dc400117 	ldw	r17,4(sp)
   82d08:	dc000017 	ldw	r16,0(sp)
   82d0c:	dec00304 	addi	sp,sp,12
   82d10:	f800283a 	ret
   82d14:	2007883a 	mov	r3,r4
   82d18:	003ff206 	br	82ce4 <__ram_exceptions_end+0xfff62ab0>
   82d1c:	2007883a 	mov	r3,r4
   82d20:	003ff106 	br	82ce8 <__ram_exceptions_end+0xfff62ab4>
   82d24:	200d883a 	mov	r6,r4
   82d28:	003fee06 	br	82ce4 <__ram_exceptions_end+0xfff62ab0>

00082d2c <_printf_r>:
   82d2c:	defffd04 	addi	sp,sp,-12
   82d30:	2805883a 	mov	r2,r5
   82d34:	dfc00015 	stw	ra,0(sp)
   82d38:	d9800115 	stw	r6,4(sp)
   82d3c:	d9c00215 	stw	r7,8(sp)
   82d40:	21400217 	ldw	r5,8(r4)
   82d44:	d9c00104 	addi	r7,sp,4
   82d48:	100d883a 	mov	r6,r2
   82d4c:	0084bbc0 	call	84bbc <___vfprintf_internal_r>
   82d50:	dfc00017 	ldw	ra,0(sp)
   82d54:	dec00304 	addi	sp,sp,12
   82d58:	f800283a 	ret

00082d5c <printf>:
   82d5c:	defffc04 	addi	sp,sp,-16
   82d60:	dfc00015 	stw	ra,0(sp)
   82d64:	d9400115 	stw	r5,4(sp)
   82d68:	d9800215 	stw	r6,8(sp)
   82d6c:	d9c00315 	stw	r7,12(sp)
   82d70:	008002b4 	movhi	r2,10
   82d74:	10817a04 	addi	r2,r2,1512
   82d78:	10800017 	ldw	r2,0(r2)
   82d7c:	200b883a 	mov	r5,r4
   82d80:	d9800104 	addi	r6,sp,4
   82d84:	11000217 	ldw	r4,8(r2)
   82d88:	0086e980 	call	86e98 <__vfprintf_internal>
   82d8c:	dfc00017 	ldw	ra,0(sp)
   82d90:	dec00404 	addi	sp,sp,16
   82d94:	f800283a 	ret

00082d98 <_putchar_r>:
   82d98:	21800217 	ldw	r6,8(r4)
   82d9c:	008b4701 	jmpi	8b470 <_putc_r>

00082da0 <putchar>:
   82da0:	008002b4 	movhi	r2,10
   82da4:	10817a04 	addi	r2,r2,1512
   82da8:	200b883a 	mov	r5,r4
   82dac:	11000017 	ldw	r4,0(r2)
   82db0:	21800217 	ldw	r6,8(r4)
   82db4:	008b4701 	jmpi	8b470 <_putc_r>

00082db8 <_puts_r>:
   82db8:	defff604 	addi	sp,sp,-40
   82dbc:	dc000715 	stw	r16,28(sp)
   82dc0:	2021883a 	mov	r16,r4
   82dc4:	2809883a 	mov	r4,r5
   82dc8:	dc400815 	stw	r17,32(sp)
   82dcc:	dfc00915 	stw	ra,36(sp)
   82dd0:	2823883a 	mov	r17,r5
   82dd4:	00831980 	call	83198 <strlen>
   82dd8:	10c00044 	addi	r3,r2,1
   82ddc:	d8800115 	stw	r2,4(sp)
   82de0:	008002b4 	movhi	r2,10
   82de4:	10b86b04 	addi	r2,r2,-7764
   82de8:	d8800215 	stw	r2,8(sp)
   82dec:	00800044 	movi	r2,1
   82df0:	d8800315 	stw	r2,12(sp)
   82df4:	00800084 	movi	r2,2
   82df8:	dc400015 	stw	r17,0(sp)
   82dfc:	d8c00615 	stw	r3,24(sp)
   82e00:	dec00415 	stw	sp,16(sp)
   82e04:	d8800515 	stw	r2,20(sp)
   82e08:	80000226 	beq	r16,zero,82e14 <_puts_r+0x5c>
   82e0c:	80800e17 	ldw	r2,56(r16)
   82e10:	10001426 	beq	r2,zero,82e64 <_puts_r+0xac>
   82e14:	81400217 	ldw	r5,8(r16)
   82e18:	2880030b 	ldhu	r2,12(r5)
   82e1c:	10c8000c 	andi	r3,r2,8192
   82e20:	1800061e 	bne	r3,zero,82e3c <_puts_r+0x84>
   82e24:	29001917 	ldw	r4,100(r5)
   82e28:	00f7ffc4 	movi	r3,-8193
   82e2c:	10880014 	ori	r2,r2,8192
   82e30:	20c6703a 	and	r3,r4,r3
   82e34:	2880030d 	sth	r2,12(r5)
   82e38:	28c01915 	stw	r3,100(r5)
   82e3c:	d9800404 	addi	r6,sp,16
   82e40:	8009883a 	mov	r4,r16
   82e44:	00894b40 	call	894b4 <__sfvwrite_r>
   82e48:	1000091e 	bne	r2,zero,82e70 <_puts_r+0xb8>
   82e4c:	00800284 	movi	r2,10
   82e50:	dfc00917 	ldw	ra,36(sp)
   82e54:	dc400817 	ldw	r17,32(sp)
   82e58:	dc000717 	ldw	r16,28(sp)
   82e5c:	dec00a04 	addi	sp,sp,40
   82e60:	f800283a 	ret
   82e64:	8009883a 	mov	r4,r16
   82e68:	00890300 	call	89030 <__sinit>
   82e6c:	003fe906 	br	82e14 <__ram_exceptions_end+0xfff62be0>
   82e70:	00bfffc4 	movi	r2,-1
   82e74:	003ff606 	br	82e50 <__ram_exceptions_end+0xfff62c1c>

00082e78 <puts>:
   82e78:	008002b4 	movhi	r2,10
   82e7c:	10817a04 	addi	r2,r2,1512
   82e80:	200b883a 	mov	r5,r4
   82e84:	11000017 	ldw	r4,0(r2)
   82e88:	0082db81 	jmpi	82db8 <_puts_r>

00082e8c <__srget_r>:
   82e8c:	defffd04 	addi	sp,sp,-12
   82e90:	dc400115 	stw	r17,4(sp)
   82e94:	dc000015 	stw	r16,0(sp)
   82e98:	dfc00215 	stw	ra,8(sp)
   82e9c:	2023883a 	mov	r17,r4
   82ea0:	2821883a 	mov	r16,r5
   82ea4:	20000226 	beq	r4,zero,82eb0 <__srget_r+0x24>
   82ea8:	20800e17 	ldw	r2,56(r4)
   82eac:	10001026 	beq	r2,zero,82ef0 <__srget_r+0x64>
   82eb0:	800b883a 	mov	r5,r16
   82eb4:	8809883a 	mov	r4,r17
   82eb8:	008bbb80 	call	8bbb8 <__srefill_r>
   82ebc:	10000e1e 	bne	r2,zero,82ef8 <__srget_r+0x6c>
   82ec0:	80c00017 	ldw	r3,0(r16)
   82ec4:	80800117 	ldw	r2,4(r16)
   82ec8:	19000044 	addi	r4,r3,1
   82ecc:	10bfffc4 	addi	r2,r2,-1
   82ed0:	80800115 	stw	r2,4(r16)
   82ed4:	81000015 	stw	r4,0(r16)
   82ed8:	18800003 	ldbu	r2,0(r3)
   82edc:	dfc00217 	ldw	ra,8(sp)
   82ee0:	dc400117 	ldw	r17,4(sp)
   82ee4:	dc000017 	ldw	r16,0(sp)
   82ee8:	dec00304 	addi	sp,sp,12
   82eec:	f800283a 	ret
   82ef0:	00890300 	call	89030 <__sinit>
   82ef4:	003fee06 	br	82eb0 <__ram_exceptions_end+0xfff62c7c>
   82ef8:	00bfffc4 	movi	r2,-1
   82efc:	003ff706 	br	82edc <__ram_exceptions_end+0xfff62ca8>

00082f00 <__srget>:
   82f00:	008002b4 	movhi	r2,10
   82f04:	10817a04 	addi	r2,r2,1512
   82f08:	200b883a 	mov	r5,r4
   82f0c:	11000017 	ldw	r4,0(r2)
   82f10:	0082e8c1 	jmpi	82e8c <__srget_r>

00082f14 <_sbrk_r>:
   82f14:	defffd04 	addi	sp,sp,-12
   82f18:	dc000015 	stw	r16,0(sp)
   82f1c:	040002b4 	movhi	r16,10
   82f20:	dc400115 	stw	r17,4(sp)
   82f24:	8408d104 	addi	r16,r16,9028
   82f28:	2023883a 	mov	r17,r4
   82f2c:	2809883a 	mov	r4,r5
   82f30:	dfc00215 	stw	ra,8(sp)
   82f34:	80000015 	stw	zero,0(r16)
   82f38:	0099eac0 	call	99eac <sbrk>
   82f3c:	00ffffc4 	movi	r3,-1
   82f40:	10c00526 	beq	r2,r3,82f58 <_sbrk_r+0x44>
   82f44:	dfc00217 	ldw	ra,8(sp)
   82f48:	dc400117 	ldw	r17,4(sp)
   82f4c:	dc000017 	ldw	r16,0(sp)
   82f50:	dec00304 	addi	sp,sp,12
   82f54:	f800283a 	ret
   82f58:	80c00017 	ldw	r3,0(r16)
   82f5c:	183ff926 	beq	r3,zero,82f44 <__ram_exceptions_end+0xfff62d10>
   82f60:	88c00015 	stw	r3,0(r17)
   82f64:	003ff706 	br	82f44 <__ram_exceptions_end+0xfff62d10>

00082f68 <sscanf>:
   82f68:	deffe204 	addi	sp,sp,-120
   82f6c:	dc001a15 	stw	r16,104(sp)
   82f70:	2821883a 	mov	r16,r5
   82f74:	dfc01b15 	stw	ra,108(sp)
   82f78:	d9801c15 	stw	r6,112(sp)
   82f7c:	d9c01d15 	stw	r7,116(sp)
   82f80:	00c08104 	movi	r3,516
   82f84:	d8c0030d 	sth	r3,12(sp)
   82f88:	d9000015 	stw	r4,0(sp)
   82f8c:	d9000415 	stw	r4,16(sp)
   82f90:	00831980 	call	83198 <strlen>
   82f94:	00c002b4 	movhi	r3,10
   82f98:	18c17a04 	addi	r3,r3,1512
   82f9c:	d8800115 	stw	r2,4(sp)
   82fa0:	d8800515 	stw	r2,20(sp)
   82fa4:	19000017 	ldw	r4,0(r3)
   82fa8:	00800234 	movhi	r2,8
   82fac:	108c2c04 	addi	r2,r2,12464
   82fb0:	d8800815 	stw	r2,32(sp)
   82fb4:	d9c01c04 	addi	r7,sp,112
   82fb8:	800d883a 	mov	r6,r16
   82fbc:	d80b883a 	mov	r5,sp
   82fc0:	00bfffc4 	movi	r2,-1
   82fc4:	d8000c15 	stw	zero,48(sp)
   82fc8:	d8001115 	stw	zero,68(sp)
   82fcc:	d880038d 	sth	r2,14(sp)
   82fd0:	00832300 	call	83230 <__ssvfscanf_r>
   82fd4:	dfc01b17 	ldw	ra,108(sp)
   82fd8:	dc001a17 	ldw	r16,104(sp)
   82fdc:	dec01e04 	addi	sp,sp,120
   82fe0:	f800283a 	ret

00082fe4 <_sscanf_r>:
   82fe4:	deffe204 	addi	sp,sp,-120
   82fe8:	dc001b15 	stw	r16,108(sp)
   82fec:	2021883a 	mov	r16,r4
   82ff0:	dfc01c15 	stw	ra,112(sp)
   82ff4:	d9c01d15 	stw	r7,116(sp)
   82ff8:	00808104 	movi	r2,516
   82ffc:	2809883a 	mov	r4,r5
   83000:	d9400015 	stw	r5,0(sp)
   83004:	d9400415 	stw	r5,16(sp)
   83008:	d9801a15 	stw	r6,104(sp)
   8300c:	d880030d 	sth	r2,12(sp)
   83010:	00831980 	call	83198 <strlen>
   83014:	d8800115 	stw	r2,4(sp)
   83018:	d8800515 	stw	r2,20(sp)
   8301c:	d9801a17 	ldw	r6,104(sp)
   83020:	00800234 	movhi	r2,8
   83024:	108c2c04 	addi	r2,r2,12464
   83028:	d8800815 	stw	r2,32(sp)
   8302c:	d9c01d04 	addi	r7,sp,116
   83030:	d80b883a 	mov	r5,sp
   83034:	8009883a 	mov	r4,r16
   83038:	00bfffc4 	movi	r2,-1
   8303c:	d8000c15 	stw	zero,48(sp)
   83040:	d8001115 	stw	zero,68(sp)
   83044:	d880038d 	sth	r2,14(sp)
   83048:	00832300 	call	83230 <__ssvfscanf_r>
   8304c:	dfc01c17 	ldw	ra,112(sp)
   83050:	dc001b17 	ldw	r16,108(sp)
   83054:	dec01e04 	addi	sp,sp,120
   83058:	f800283a 	ret

0008305c <__sread>:
   8305c:	defffe04 	addi	sp,sp,-8
   83060:	dc000015 	stw	r16,0(sp)
   83064:	2821883a 	mov	r16,r5
   83068:	2940038f 	ldh	r5,14(r5)
   8306c:	dfc00115 	stw	ra,4(sp)
   83070:	008b5d80 	call	8b5d8 <_read_r>
   83074:	10000716 	blt	r2,zero,83094 <__sread+0x38>
   83078:	80c01417 	ldw	r3,80(r16)
   8307c:	1887883a 	add	r3,r3,r2
   83080:	80c01415 	stw	r3,80(r16)
   83084:	dfc00117 	ldw	ra,4(sp)
   83088:	dc000017 	ldw	r16,0(sp)
   8308c:	dec00204 	addi	sp,sp,8
   83090:	f800283a 	ret
   83094:	80c0030b 	ldhu	r3,12(r16)
   83098:	18fbffcc 	andi	r3,r3,61439
   8309c:	80c0030d 	sth	r3,12(r16)
   830a0:	dfc00117 	ldw	ra,4(sp)
   830a4:	dc000017 	ldw	r16,0(sp)
   830a8:	dec00204 	addi	sp,sp,8
   830ac:	f800283a 	ret

000830b0 <__seofread>:
   830b0:	0005883a 	mov	r2,zero
   830b4:	f800283a 	ret

000830b8 <__swrite>:
   830b8:	2880030b 	ldhu	r2,12(r5)
   830bc:	defffb04 	addi	sp,sp,-20
   830c0:	dcc00315 	stw	r19,12(sp)
   830c4:	dc800215 	stw	r18,8(sp)
   830c8:	dc400115 	stw	r17,4(sp)
   830cc:	dc000015 	stw	r16,0(sp)
   830d0:	dfc00415 	stw	ra,16(sp)
   830d4:	10c0400c 	andi	r3,r2,256
   830d8:	2821883a 	mov	r16,r5
   830dc:	2023883a 	mov	r17,r4
   830e0:	3025883a 	mov	r18,r6
   830e4:	3827883a 	mov	r19,r7
   830e8:	18000526 	beq	r3,zero,83100 <__swrite+0x48>
   830ec:	2940038f 	ldh	r5,14(r5)
   830f0:	01c00084 	movi	r7,2
   830f4:	000d883a 	mov	r6,zero
   830f8:	0089c100 	call	89c10 <_lseek_r>
   830fc:	8080030b 	ldhu	r2,12(r16)
   83100:	8140038f 	ldh	r5,14(r16)
   83104:	10bbffcc 	andi	r2,r2,61439
   83108:	980f883a 	mov	r7,r19
   8310c:	900d883a 	mov	r6,r18
   83110:	8809883a 	mov	r4,r17
   83114:	8080030d 	sth	r2,12(r16)
   83118:	dfc00417 	ldw	ra,16(sp)
   8311c:	dcc00317 	ldw	r19,12(sp)
   83120:	dc800217 	ldw	r18,8(sp)
   83124:	dc400117 	ldw	r17,4(sp)
   83128:	dc000017 	ldw	r16,0(sp)
   8312c:	dec00504 	addi	sp,sp,20
   83130:	0086f701 	jmpi	86f70 <_write_r>

00083134 <__sseek>:
   83134:	defffe04 	addi	sp,sp,-8
   83138:	dc000015 	stw	r16,0(sp)
   8313c:	2821883a 	mov	r16,r5
   83140:	2940038f 	ldh	r5,14(r5)
   83144:	dfc00115 	stw	ra,4(sp)
   83148:	0089c100 	call	89c10 <_lseek_r>
   8314c:	00ffffc4 	movi	r3,-1
   83150:	10c00826 	beq	r2,r3,83174 <__sseek+0x40>
   83154:	80c0030b 	ldhu	r3,12(r16)
   83158:	80801415 	stw	r2,80(r16)
   8315c:	18c40014 	ori	r3,r3,4096
   83160:	80c0030d 	sth	r3,12(r16)
   83164:	dfc00117 	ldw	ra,4(sp)
   83168:	dc000017 	ldw	r16,0(sp)
   8316c:	dec00204 	addi	sp,sp,8
   83170:	f800283a 	ret
   83174:	80c0030b 	ldhu	r3,12(r16)
   83178:	18fbffcc 	andi	r3,r3,61439
   8317c:	80c0030d 	sth	r3,12(r16)
   83180:	dfc00117 	ldw	ra,4(sp)
   83184:	dc000017 	ldw	r16,0(sp)
   83188:	dec00204 	addi	sp,sp,8
   8318c:	f800283a 	ret

00083190 <__sclose>:
   83190:	2940038f 	ldh	r5,14(r5)
   83194:	00871241 	jmpi	87124 <_close_r>

00083198 <strlen>:
   83198:	208000cc 	andi	r2,r4,3
   8319c:	10002026 	beq	r2,zero,83220 <strlen+0x88>
   831a0:	20800007 	ldb	r2,0(r4)
   831a4:	10002026 	beq	r2,zero,83228 <strlen+0x90>
   831a8:	2005883a 	mov	r2,r4
   831ac:	00000206 	br	831b8 <strlen+0x20>
   831b0:	10c00007 	ldb	r3,0(r2)
   831b4:	18001826 	beq	r3,zero,83218 <strlen+0x80>
   831b8:	10800044 	addi	r2,r2,1
   831bc:	10c000cc 	andi	r3,r2,3
   831c0:	183ffb1e 	bne	r3,zero,831b0 <__ram_exceptions_end+0xfff62f7c>
   831c4:	10c00017 	ldw	r3,0(r2)
   831c8:	01ffbff4 	movhi	r7,65279
   831cc:	39ffbfc4 	addi	r7,r7,-257
   831d0:	00ca303a 	nor	r5,zero,r3
   831d4:	01a02074 	movhi	r6,32897
   831d8:	19c7883a 	add	r3,r3,r7
   831dc:	31a02004 	addi	r6,r6,-32640
   831e0:	1946703a 	and	r3,r3,r5
   831e4:	1986703a 	and	r3,r3,r6
   831e8:	1800091e 	bne	r3,zero,83210 <strlen+0x78>
   831ec:	10800104 	addi	r2,r2,4
   831f0:	10c00017 	ldw	r3,0(r2)
   831f4:	19cb883a 	add	r5,r3,r7
   831f8:	00c6303a 	nor	r3,zero,r3
   831fc:	28c6703a 	and	r3,r5,r3
   83200:	1986703a 	and	r3,r3,r6
   83204:	183ff926 	beq	r3,zero,831ec <__ram_exceptions_end+0xfff62fb8>
   83208:	00000106 	br	83210 <strlen+0x78>
   8320c:	10800044 	addi	r2,r2,1
   83210:	10c00007 	ldb	r3,0(r2)
   83214:	183ffd1e 	bne	r3,zero,8320c <__ram_exceptions_end+0xfff62fd8>
   83218:	1105c83a 	sub	r2,r2,r4
   8321c:	f800283a 	ret
   83220:	2005883a 	mov	r2,r4
   83224:	003fe706 	br	831c4 <__ram_exceptions_end+0xfff62f90>
   83228:	0005883a 	mov	r2,zero
   8322c:	f800283a 	ret

00083230 <__ssvfscanf_r>:
   83230:	2880030b 	ldhu	r2,12(r5)
   83234:	deff4b04 	addi	sp,sp,-724
   83238:	df00b315 	stw	fp,716(sp)
   8323c:	ddc0b215 	stw	r23,712(sp)
   83240:	dfc0b415 	stw	ra,720(sp)
   83244:	dd80b115 	stw	r22,708(sp)
   83248:	dd40b015 	stw	r21,704(sp)
   8324c:	dd00af15 	stw	r20,700(sp)
   83250:	dcc0ae15 	stw	r19,696(sp)
   83254:	dc80ad15 	stw	r18,692(sp)
   83258:	dc40ac15 	stw	r17,688(sp)
   8325c:	dc00ab15 	stw	r16,684(sp)
   83260:	10c8000c 	andi	r3,r2,8192
   83264:	d9c09c15 	stw	r7,624(sp)
   83268:	2839883a 	mov	fp,r5
   8326c:	202f883a 	mov	r23,r4
   83270:	1800061e 	bne	r3,zero,8328c <__ssvfscanf_r+0x5c>
   83274:	29001917 	ldw	r4,100(r5)
   83278:	00f7ffc4 	movi	r3,-8193
   8327c:	10880014 	ori	r2,r2,8192
   83280:	20c6703a 	and	r3,r4,r3
   83284:	2880030d 	sth	r2,12(r5)
   83288:	28c01915 	stw	r3,100(r5)
   8328c:	30800003 	ldbu	r2,0(r6)
   83290:	0021883a 	mov	r16,zero
   83294:	058002b4 	movhi	r22,10
   83298:	d800a115 	stw	zero,644(sp)
   8329c:	d8009e15 	stw	zero,632(sp)
   832a0:	d800a015 	stw	zero,640(sp)
   832a4:	d8809b15 	stw	r2,620(sp)
   832a8:	b5817d04 	addi	r22,r22,1524
   832ac:	8025883a 	mov	r18,r16
   832b0:	e027883a 	mov	r19,fp
   832b4:	35000044 	addi	r20,r6,1
   832b8:	10001e26 	beq	r2,zero,83334 <__ssvfscanf_r+0x104>
   832bc:	b4000017 	ldw	r16,0(r22)
   832c0:	8087883a 	add	r3,r16,r2
   832c4:	18c00043 	ldbu	r3,1(r3)
   832c8:	18c0020c 	andi	r3,r3,8
   832cc:	18001b26 	beq	r3,zero,8333c <__ssvfscanf_r+0x10c>
   832d0:	98800117 	ldw	r2,4(r19)
   832d4:	00800e0e 	bge	zero,r2,83310 <__ssvfscanf_r+0xe0>
   832d8:	98c00017 	ldw	r3,0(r19)
   832dc:	b1000017 	ldw	r4,0(r22)
   832e0:	18800003 	ldbu	r2,0(r3)
   832e4:	2085883a 	add	r2,r4,r2
   832e8:	10800043 	ldbu	r2,1(r2)
   832ec:	1080020c 	andi	r2,r2,8
   832f0:	10000b26 	beq	r2,zero,83320 <__ssvfscanf_r+0xf0>
   832f4:	98800117 	ldw	r2,4(r19)
   832f8:	18c00044 	addi	r3,r3,1
   832fc:	98c00015 	stw	r3,0(r19)
   83300:	10bfffc4 	addi	r2,r2,-1
   83304:	98800115 	stw	r2,4(r19)
   83308:	94800044 	addi	r18,r18,1
   8330c:	00bff216 	blt	zero,r2,832d8 <__ram_exceptions_end+0xfff630a4>
   83310:	980b883a 	mov	r5,r19
   83314:	b809883a 	mov	r4,r23
   83318:	008e40c0 	call	8e40c <__ssrefill_r>
   8331c:	103fee26 	beq	r2,zero,832d8 <__ram_exceptions_end+0xfff630a4>
   83320:	a00d883a 	mov	r6,r20
   83324:	30800003 	ldbu	r2,0(r6)
   83328:	35000044 	addi	r20,r6,1
   8332c:	d8809b15 	stw	r2,620(sp)
   83330:	103fe21e 	bne	r2,zero,832bc <__ram_exceptions_end+0xfff63088>
   83334:	d880a017 	ldw	r2,640(sp)
   83338:	00009a06 	br	835a4 <__ssvfscanf_r+0x374>
   8333c:	00c00944 	movi	r3,37
   83340:	10c0891e 	bne	r2,r3,83568 <__ssvfscanf_r+0x338>
   83344:	0039883a 	mov	fp,zero
   83348:	35400043 	ldbu	r21,1(r6)
   8334c:	0023883a 	mov	r17,zero
   83350:	01801e04 	movi	r6,120
   83354:	00c01b04 	movi	r3,108
   83358:	e009883a 	mov	r4,fp
   8335c:	a1c00044 	addi	r7,r20,1
   83360:	3540a236 	bltu	r6,r21,835ec <__ssvfscanf_r+0x3bc>
   83364:	a80490ba 	slli	r2,r21,2
   83368:	01400234 	movhi	r5,8
   8336c:	294cdf04 	addi	r5,r5,13180
   83370:	1145883a 	add	r2,r2,r5
   83374:	10800017 	ldw	r2,0(r2)
   83378:	1000683a 	jmp	r2
   8337c:	000835a0 	cmpeqi	zero,zero,8406
   83380:	000835ec 	andhi	zero,zero,8407
   83384:	000835ec 	andhi	zero,zero,8407
   83388:	000835ec 	andhi	zero,zero,8407
   8338c:	000835ec 	andhi	zero,zero,8407
   83390:	000835ec 	andhi	zero,zero,8407
   83394:	000835ec 	andhi	zero,zero,8407
   83398:	000835ec 	andhi	zero,zero,8407
   8339c:	000835ec 	andhi	zero,zero,8407
   833a0:	000835ec 	andhi	zero,zero,8407
   833a4:	000835ec 	andhi	zero,zero,8407
   833a8:	000835ec 	andhi	zero,zero,8407
   833ac:	000835ec 	andhi	zero,zero,8407
   833b0:	000835ec 	andhi	zero,zero,8407
   833b4:	000835ec 	andhi	zero,zero,8407
   833b8:	000835ec 	andhi	zero,zero,8407
   833bc:	000835ec 	andhi	zero,zero,8407
   833c0:	000835ec 	andhi	zero,zero,8407
   833c4:	000835ec 	andhi	zero,zero,8407
   833c8:	000835ec 	andhi	zero,zero,8407
   833cc:	000835ec 	andhi	zero,zero,8407
   833d0:	000835ec 	andhi	zero,zero,8407
   833d4:	000835ec 	andhi	zero,zero,8407
   833d8:	000835ec 	andhi	zero,zero,8407
   833dc:	000835ec 	andhi	zero,zero,8407
   833e0:	000835ec 	andhi	zero,zero,8407
   833e4:	000835ec 	andhi	zero,zero,8407
   833e8:	000835ec 	andhi	zero,zero,8407
   833ec:	000835ec 	andhi	zero,zero,8407
   833f0:	000835ec 	andhi	zero,zero,8407
   833f4:	000835ec 	andhi	zero,zero,8407
   833f8:	000835ec 	andhi	zero,zero,8407
   833fc:	000835ec 	andhi	zero,zero,8407
   83400:	000835ec 	andhi	zero,zero,8407
   83404:	000835ec 	andhi	zero,zero,8407
   83408:	000835ec 	andhi	zero,zero,8407
   8340c:	000835ec 	andhi	zero,zero,8407
   83410:	00083560 	cmpeqi	zero,zero,8405
   83414:	000835ec 	andhi	zero,zero,8407
   83418:	000835ec 	andhi	zero,zero,8407
   8341c:	000835ec 	andhi	zero,zero,8407
   83420:	000835ec 	andhi	zero,zero,8407
   83424:	000835d4 	movui	zero,8407
   83428:	000835ec 	andhi	zero,zero,8407
   8342c:	000835ec 	andhi	zero,zero,8407
   83430:	000835ec 	andhi	zero,zero,8407
   83434:	000835ec 	andhi	zero,zero,8407
   83438:	000835ec 	andhi	zero,zero,8407
   8343c:	00083734 	movhi	zero,8412
   83440:	00083734 	movhi	zero,8412
   83444:	00083734 	movhi	zero,8412
   83448:	00083734 	movhi	zero,8412
   8344c:	00083734 	movhi	zero,8412
   83450:	00083734 	movhi	zero,8412
   83454:	00083734 	movhi	zero,8412
   83458:	00083734 	movhi	zero,8412
   8345c:	00083734 	movhi	zero,8412
   83460:	00083734 	movhi	zero,8412
   83464:	000835ec 	andhi	zero,zero,8407
   83468:	000835ec 	andhi	zero,zero,8407
   8346c:	000835ec 	andhi	zero,zero,8407
   83470:	000835ec 	andhi	zero,zero,8407
   83474:	000835ec 	andhi	zero,zero,8407
   83478:	000835ec 	andhi	zero,zero,8407
   8347c:	000835ec 	andhi	zero,zero,8407
   83480:	000835ec 	andhi	zero,zero,8407
   83484:	000835ec 	andhi	zero,zero,8407
   83488:	000835ec 	andhi	zero,zero,8407
   8348c:	00083704 	movi	zero,8412
   83490:	000837e0 	cmpeqi	zero,zero,8415
   83494:	000835ec 	andhi	zero,zero,8407
   83498:	000837e0 	cmpeqi	zero,zero,8415
   8349c:	000835ec 	andhi	zero,zero,8407
   834a0:	000835ec 	andhi	zero,zero,8407
   834a4:	000835ec 	andhi	zero,zero,8407
   834a8:	000835ec 	andhi	zero,zero,8407
   834ac:	000837cc 	andi	zero,zero,8415
   834b0:	000835ec 	andhi	zero,zero,8407
   834b4:	000835ec 	andhi	zero,zero,8407
   834b8:	0008379c 	xori	zero,zero,8414
   834bc:	000835ec 	andhi	zero,zero,8407
   834c0:	000835ec 	andhi	zero,zero,8407
   834c4:	000835ec 	andhi	zero,zero,8407
   834c8:	000835ec 	andhi	zero,zero,8407
   834cc:	000835ec 	andhi	zero,zero,8407
   834d0:	000835ec 	andhi	zero,zero,8407
   834d4:	000835ec 	andhi	zero,zero,8407
   834d8:	000835ec 	andhi	zero,zero,8407
   834dc:	0008376c 	andhi	zero,zero,8413
   834e0:	000835ec 	andhi	zero,zero,8407
   834e4:	000835ec 	andhi	zero,zero,8407
   834e8:	00083928 	cmpgeui	zero,zero,8420
   834ec:	000835ec 	andhi	zero,zero,8407
   834f0:	000835ec 	andhi	zero,zero,8407
   834f4:	000835ec 	andhi	zero,zero,8407
   834f8:	000835ec 	andhi	zero,zero,8407
   834fc:	000835ec 	andhi	zero,zero,8407
   83500:	000835ec 	andhi	zero,zero,8407
   83504:	000835ec 	andhi	zero,zero,8407
   83508:	000838a8 	cmpgeui	zero,zero,8418
   8350c:	0008387c 	xorhi	zero,zero,8417
   83510:	000837e0 	cmpeqi	zero,zero,8415
   83514:	000837e0 	cmpeqi	zero,zero,8415
   83518:	000837e0 	cmpeqi	zero,zero,8415
   8351c:	00083868 	cmpgeui	zero,zero,8417
   83520:	000839b8 	rdprs	zero,zero,8422
   83524:	000835ec 	andhi	zero,zero,8407
   83528:	000835ec 	andhi	zero,zero,8407
   8352c:	00083854 	movui	zero,8417
   83530:	000835ec 	andhi	zero,zero,8407
   83534:	00083824 	muli	zero,zero,8416
   83538:	000837f8 	rdprs	zero,zero,8415
   8353c:	000836d4 	movui	zero,8411
   83540:	000835ec 	andhi	zero,zero,8407
   83544:	000835ec 	andhi	zero,zero,8407
   83548:	000836bc 	xorhi	zero,zero,8410
   8354c:	000835ec 	andhi	zero,zero,8407
   83550:	00083640 	call	8364 <_start-0x77c9c>
   83554:	000835ec 	andhi	zero,zero,8407
   83558:	000835ec 	andhi	zero,zero,8407
   8355c:	0008376c 	andhi	zero,zero,8413
   83560:	d9c09d15 	stw	r7,628(sp)
   83564:	3829883a 	mov	r20,r7
   83568:	98800117 	ldw	r2,4(r19)
   8356c:	0081c60e 	bge	zero,r2,83c88 <__ssvfscanf_r+0xa58>
   83570:	98800017 	ldw	r2,0(r19)
   83574:	a0ffffc3 	ldbu	r3,-1(r20)
   83578:	11000003 	ldbu	r4,0(r2)
   8357c:	20ff6d1e 	bne	r4,r3,83334 <__ram_exceptions_end+0xfff63100>
   83580:	98c00117 	ldw	r3,4(r19)
   83584:	10800044 	addi	r2,r2,1
   83588:	98800015 	stw	r2,0(r19)
   8358c:	18bfffc4 	addi	r2,r3,-1
   83590:	98800115 	stw	r2,4(r19)
   83594:	94800044 	addi	r18,r18,1
   83598:	a00d883a 	mov	r6,r20
   8359c:	003f6106 	br	83324 <__ram_exceptions_end+0xfff630f0>
   835a0:	00bfffc4 	movi	r2,-1
   835a4:	dfc0b417 	ldw	ra,720(sp)
   835a8:	df00b317 	ldw	fp,716(sp)
   835ac:	ddc0b217 	ldw	r23,712(sp)
   835b0:	dd80b117 	ldw	r22,708(sp)
   835b4:	dd40b017 	ldw	r21,704(sp)
   835b8:	dd00af17 	ldw	r20,700(sp)
   835bc:	dcc0ae17 	ldw	r19,696(sp)
   835c0:	dc80ad17 	ldw	r18,692(sp)
   835c4:	dc40ac17 	ldw	r17,688(sp)
   835c8:	dc00ab17 	ldw	r16,684(sp)
   835cc:	dec0b504 	addi	sp,sp,724
   835d0:	f800283a 	ret
   835d4:	a1400043 	ldbu	r5,1(r20)
   835d8:	3829883a 	mov	r20,r7
   835dc:	8c400414 	ori	r17,r17,16
   835e0:	2d403fcc 	andi	r21,r5,255
   835e4:	a1c00044 	addi	r7,r20,1
   835e8:	357f5e2e 	bgeu	r6,r21,83364 <__ram_exceptions_end+0xfff63130>
   835ec:	856b883a 	add	r21,r16,r21
   835f0:	a8800043 	ldbu	r2,1(r21)
   835f4:	d9c09d15 	stw	r7,628(sp)
   835f8:	00c00044 	movi	r3,1
   835fc:	108000cc 	andi	r2,r2,3
   83600:	2039883a 	mov	fp,r4
   83604:	10c1a526 	beq	r2,r3,83c9c <__ssvfscanf_r+0xa6c>
   83608:	98800117 	ldw	r2,4(r19)
   8360c:	00804216 	blt	zero,r2,83718 <__ssvfscanf_r+0x4e8>
   83610:	980b883a 	mov	r5,r19
   83614:	b809883a 	mov	r4,r23
   83618:	008e40c0 	call	8e40c <__ssrefill_r>
   8361c:	10015e1e 	bne	r2,zero,83b98 <__ssvfscanf_r+0x968>
   83620:	01000274 	movhi	r4,9
   83624:	2135f604 	addi	r4,r4,-10280
   83628:	01400284 	movi	r5,10
   8362c:	b4000017 	ldw	r16,0(r22)
   83630:	d900a115 	stw	r4,644(sp)
   83634:	d9409e15 	stw	r5,632(sp)
   83638:	050000c4 	movi	r20,3
   8363c:	00000a06 	br	83668 <__ssvfscanf_r+0x438>
   83640:	98800117 	ldw	r2,4(r19)
   83644:	d9c09d15 	stw	r7,628(sp)
   83648:	2039883a 	mov	fp,r4
   8364c:	0081e20e 	bge	zero,r2,83dd8 <__ssvfscanf_r+0xba8>
   83650:	00c00274 	movhi	r3,9
   83654:	18f75404 	addi	r3,r3,-8880
   83658:	01000284 	movi	r4,10
   8365c:	d8c0a115 	stw	r3,644(sp)
   83660:	d9009e15 	stw	r4,632(sp)
   83664:	050000c4 	movi	r20,3
   83668:	98c00017 	ldw	r3,0(r19)
   8366c:	00000206 	br	83678 <__ssvfscanf_r+0x448>
   83670:	18c00044 	addi	r3,r3,1
   83674:	98c00015 	stw	r3,0(r19)
   83678:	19000003 	ldbu	r4,0(r3)
   8367c:	20803fcc 	andi	r2,r4,255
   83680:	8085883a 	add	r2,r16,r2
   83684:	10800043 	ldbu	r2,1(r2)
   83688:	1140020c 	andi	r5,r2,8
   8368c:	28020126 	beq	r5,zero,83e94 <__ssvfscanf_r+0xc64>
   83690:	98800117 	ldw	r2,4(r19)
   83694:	94800044 	addi	r18,r18,1
   83698:	10bfffc4 	addi	r2,r2,-1
   8369c:	98800115 	stw	r2,4(r19)
   836a0:	00bff316 	blt	zero,r2,83670 <__ram_exceptions_end+0xfff6343c>
   836a4:	980b883a 	mov	r5,r19
   836a8:	b809883a 	mov	r4,r23
   836ac:	008e40c0 	call	8e40c <__ssrefill_r>
   836b0:	1001391e 	bne	r2,zero,83b98 <__ssvfscanf_r+0x968>
   836b4:	b4000017 	ldw	r16,0(r22)
   836b8:	003feb06 	br	83668 <__ram_exceptions_end+0xfff63434>
   836bc:	98800117 	ldw	r2,4(r19)
   836c0:	d9c09d15 	stw	r7,628(sp)
   836c4:	2039883a 	mov	fp,r4
   836c8:	0081aa0e 	bge	zero,r2,83d74 <__ssvfscanf_r+0xb44>
   836cc:	05000084 	movi	r20,2
   836d0:	003fe506 	br	83668 <__ram_exceptions_end+0xfff63434>
   836d4:	98800117 	ldw	r2,4(r19)
   836d8:	d9c09d15 	stw	r7,628(sp)
   836dc:	2039883a 	mov	fp,r4
   836e0:	8c408814 	ori	r17,r17,544
   836e4:	0081df0e 	bge	zero,r2,83e64 <__ssvfscanf_r+0xc34>
   836e8:	00c00274 	movhi	r3,9
   836ec:	18f75404 	addi	r3,r3,-8880
   836f0:	01000404 	movi	r4,16
   836f4:	d8c0a115 	stw	r3,644(sp)
   836f8:	d9009e15 	stw	r4,632(sp)
   836fc:	050000c4 	movi	r20,3
   83700:	003fd906 	br	83668 <__ram_exceptions_end+0xfff63434>
   83704:	98800117 	ldw	r2,4(r19)
   83708:	d9c09d15 	stw	r7,628(sp)
   8370c:	2039883a 	mov	fp,r4
   83710:	8c400054 	ori	r17,r17,1
   83714:	0081850e 	bge	zero,r2,83d2c <__ssvfscanf_r+0xafc>
   83718:	00c00274 	movhi	r3,9
   8371c:	18f5f604 	addi	r3,r3,-10280
   83720:	01000284 	movi	r4,10
   83724:	d8c0a115 	stw	r3,644(sp)
   83728:	d9009e15 	stw	r4,632(sp)
   8372c:	050000c4 	movi	r20,3
   83730:	003fcd06 	br	83668 <__ram_exceptions_end+0xfff63434>
   83734:	01400284 	movi	r5,10
   83738:	d8c0a615 	stw	r3,664(sp)
   8373c:	d980a915 	stw	r6,676(sp)
   83740:	d9c0aa15 	stw	r7,680(sp)
   83744:	00822140 	call	82214 <__mulsi3>
   83748:	a1400043 	ldbu	r5,1(r20)
   8374c:	d9c0aa17 	ldw	r7,680(sp)
   83750:	1545883a 	add	r2,r2,r21
   83754:	113ff404 	addi	r4,r2,-48
   83758:	3829883a 	mov	r20,r7
   8375c:	2d403fcc 	andi	r21,r5,255
   83760:	d8c0a617 	ldw	r3,664(sp)
   83764:	d980a917 	ldw	r6,676(sp)
   83768:	003efc06 	br	8335c <__ram_exceptions_end+0xfff63128>
   8376c:	98800117 	ldw	r2,4(r19)
   83770:	d9c09d15 	stw	r7,628(sp)
   83774:	2039883a 	mov	fp,r4
   83778:	8c408014 	ori	r17,r17,512
   8377c:	0081710e 	bge	zero,r2,83d44 <__ssvfscanf_r+0xb14>
   83780:	01400274 	movhi	r5,9
   83784:	29775404 	addi	r5,r5,-8880
   83788:	00800404 	movi	r2,16
   8378c:	d940a115 	stw	r5,644(sp)
   83790:	d8809e15 	stw	r2,632(sp)
   83794:	050000c4 	movi	r20,3
   83798:	003fb306 	br	83668 <__ram_exceptions_end+0xfff63434>
   8379c:	98800117 	ldw	r2,4(r19)
   837a0:	d9c09d15 	stw	r7,628(sp)
   837a4:	2039883a 	mov	fp,r4
   837a8:	8c400054 	ori	r17,r17,1
   837ac:	0081840e 	bge	zero,r2,83dc0 <__ssvfscanf_r+0xb90>
   837b0:	01400274 	movhi	r5,9
   837b4:	29775404 	addi	r5,r5,-8880
   837b8:	00800204 	movi	r2,8
   837bc:	d940a115 	stw	r5,644(sp)
   837c0:	d8809e15 	stw	r2,632(sp)
   837c4:	050000c4 	movi	r20,3
   837c8:	003fa706 	br	83668 <__ram_exceptions_end+0xfff63434>
   837cc:	a1400043 	ldbu	r5,1(r20)
   837d0:	8c400094 	ori	r17,r17,2
   837d4:	3829883a 	mov	r20,r7
   837d8:	2d403fcc 	andi	r21,r5,255
   837dc:	003edf06 	br	8335c <__ram_exceptions_end+0xfff63128>
   837e0:	98800117 	ldw	r2,4(r19)
   837e4:	d9c09d15 	stw	r7,628(sp)
   837e8:	2039883a 	mov	fp,r4
   837ec:	00816d0e 	bge	zero,r2,83da4 <__ssvfscanf_r+0xb74>
   837f0:	05000104 	movi	r20,4
   837f4:	003f9c06 	br	83668 <__ram_exceptions_end+0xfff63434>
   837f8:	98800117 	ldw	r2,4(r19)
   837fc:	d9c09d15 	stw	r7,628(sp)
   83800:	2039883a 	mov	fp,r4
   83804:	0081800e 	bge	zero,r2,83e08 <__ssvfscanf_r+0xbd8>
   83808:	01000274 	movhi	r4,9
   8380c:	21375404 	addi	r4,r4,-8880
   83810:	01400204 	movi	r5,8
   83814:	d900a115 	stw	r4,644(sp)
   83818:	d9409e15 	stw	r5,632(sp)
   8381c:	050000c4 	movi	r20,3
   83820:	003f9106 	br	83668 <__ram_exceptions_end+0xfff63434>
   83824:	d9c09d15 	stw	r7,628(sp)
   83828:	8880040c 	andi	r2,r17,16
   8382c:	1000a01e 	bne	r2,zero,83ab0 <__ssvfscanf_r+0x880>
   83830:	8880010c 	andi	r2,r17,4
   83834:	10012826 	beq	r2,zero,83cd8 <__ssvfscanf_r+0xaa8>
   83838:	d9009c17 	ldw	r4,624(sp)
   8383c:	3829883a 	mov	r20,r7
   83840:	20800017 	ldw	r2,0(r4)
   83844:	21000104 	addi	r4,r4,4
   83848:	d9009c15 	stw	r4,624(sp)
   8384c:	1480000d 	sth	r18,0(r2)
   83850:	003eb306 	br	83320 <__ram_exceptions_end+0xfff630ec>
   83854:	a5400043 	ldbu	r21,1(r20)
   83858:	a8c11a26 	beq	r21,r3,83cc4 <__ssvfscanf_r+0xa94>
   8385c:	8c400054 	ori	r17,r17,1
   83860:	3829883a 	mov	r20,r7
   83864:	003ebd06 	br	8335c <__ram_exceptions_end+0xfff63128>
   83868:	a1400043 	ldbu	r5,1(r20)
   8386c:	8c400114 	ori	r17,r17,4
   83870:	3829883a 	mov	r20,r7
   83874:	2d403fcc 	andi	r21,r5,255
   83878:	003eb806 	br	8335c <__ram_exceptions_end+0xfff63128>
   8387c:	98800117 	ldw	r2,4(r19)
   83880:	d9c09d15 	stw	r7,628(sp)
   83884:	2039883a 	mov	fp,r4
   83888:	00bf610e 	bge	zero,r2,83610 <__ram_exceptions_end+0xfff633dc>
   8388c:	00800274 	movhi	r2,9
   83890:	10b5f604 	addi	r2,r2,-10280
   83894:	00c00284 	movi	r3,10
   83898:	d880a115 	stw	r2,644(sp)
   8389c:	d8c09e15 	stw	r3,632(sp)
   838a0:	050000c4 	movi	r20,3
   838a4:	003f7006 	br	83668 <__ram_exceptions_end+0xfff63434>
   838a8:	98800117 	ldw	r2,4(r19)
   838ac:	d9c09d15 	stw	r7,628(sp)
   838b0:	2039883a 	mov	fp,r4
   838b4:	0080c60e 	bge	zero,r2,83bd0 <__ssvfscanf_r+0x9a0>
   838b8:	e000011e 	bne	fp,zero,838c0 <__ssvfscanf_r+0x690>
   838bc:	07000044 	movi	fp,1
   838c0:	8880004c 	andi	r2,r17,1
   838c4:	1000461e 	bne	r2,zero,839e0 <__ssvfscanf_r+0x7b0>
   838c8:	8c40040c 	andi	r17,r17,16
   838cc:	8800dc26 	beq	r17,zero,83c40 <__ssvfscanf_r+0xa10>
   838d0:	0021883a 	mov	r16,zero
   838d4:	00000806 	br	838f8 <__ssvfscanf_r+0x6c8>
   838d8:	1887883a 	add	r3,r3,r2
   838dc:	980b883a 	mov	r5,r19
   838e0:	b809883a 	mov	r4,r23
   838e4:	98c00015 	stw	r3,0(r19)
   838e8:	80a1883a 	add	r16,r16,r2
   838ec:	e0b9c83a 	sub	fp,fp,r2
   838f0:	008e40c0 	call	8e40c <__ssrefill_r>
   838f4:	1000cc1e 	bne	r2,zero,83c28 <__ssvfscanf_r+0x9f8>
   838f8:	98800117 	ldw	r2,4(r19)
   838fc:	98c00017 	ldw	r3,0(r19)
   83900:	173ff516 	blt	r2,fp,838d8 <__ram_exceptions_end+0xfff636a4>
   83904:	1705c83a 	sub	r2,r2,fp
   83908:	1f15883a 	add	r10,r3,fp
   8390c:	8721883a 	add	r16,r16,fp
   83910:	98800115 	stw	r2,4(r19)
   83914:	9a800015 	stw	r10,0(r19)
   83918:	dd009d17 	ldw	r20,628(sp)
   8391c:	9425883a 	add	r18,r18,r16
   83920:	a00d883a 	mov	r6,r20
   83924:	003e7f06 	br	83324 <__ram_exceptions_end+0xfff630f0>
   83928:	2039883a 	mov	fp,r4
   8392c:	380b883a 	mov	r5,r7
   83930:	d9005884 	addi	r4,sp,354
   83934:	d9c09d15 	stw	r7,628(sp)
   83938:	008be000 	call	8be00 <__sccl>
   8393c:	1029883a 	mov	r20,r2
   83940:	98800117 	ldw	r2,4(r19)
   83944:	0081120e 	bge	zero,r2,83d90 <__ssvfscanf_r+0xb60>
   83948:	99000017 	ldw	r4,0(r19)
   8394c:	20800003 	ldbu	r2,0(r4)
   83950:	e0005a26 	beq	fp,zero,83abc <__ssvfscanf_r+0x88c>
   83954:	8c40040c 	andi	r17,r17,16
   83958:	88005b26 	beq	r17,zero,83ac8 <__ssvfscanf_r+0x898>
   8395c:	e023883a 	mov	r17,fp
   83960:	0021883a 	mov	r16,zero
   83964:	00000106 	br	8396c <__ssvfscanf_r+0x73c>
   83968:	20800003 	ldbu	r2,0(r4)
   8396c:	10803fcc 	andi	r2,r2,255
   83970:	d8c05884 	addi	r3,sp,354
   83974:	1885883a 	add	r2,r3,r2
   83978:	10800007 	ldb	r2,0(r2)
   8397c:	1000ae26 	beq	r2,zero,83c38 <__ssvfscanf_r+0xa08>
   83980:	98800117 	ldw	r2,4(r19)
   83984:	21000044 	addi	r4,r4,1
   83988:	84000044 	addi	r16,r16,1
   8398c:	10bfffc4 	addi	r2,r2,-1
   83990:	98800115 	stw	r2,4(r19)
   83994:	99000015 	stw	r4,0(r19)
   83998:	8700a126 	beq	r16,fp,83c20 <__ssvfscanf_r+0x9f0>
   8399c:	00bff216 	blt	zero,r2,83968 <__ram_exceptions_end+0xfff63734>
   839a0:	980b883a 	mov	r5,r19
   839a4:	b809883a 	mov	r4,r23
   839a8:	008e40c0 	call	8e40c <__ssrefill_r>
   839ac:	10009b1e 	bne	r2,zero,83c1c <__ssvfscanf_r+0x9ec>
   839b0:	99000017 	ldw	r4,0(r19)
   839b4:	003fec06 	br	83968 <__ram_exceptions_end+0xfff63734>
   839b8:	98800117 	ldw	r2,4(r19)
   839bc:	d9c09d15 	stw	r7,628(sp)
   839c0:	2039883a 	mov	fp,r4
   839c4:	00811c0e 	bge	zero,r2,83e38 <__ssvfscanf_r+0xc08>
   839c8:	01400274 	movhi	r5,9
   839cc:	2975f604 	addi	r5,r5,-10280
   839d0:	d940a115 	stw	r5,644(sp)
   839d4:	d8009e15 	stw	zero,632(sp)
   839d8:	050000c4 	movi	r20,3
   839dc:	003f2206 	br	83668 <__ram_exceptions_end+0xfff63434>
   839e0:	dd409904 	addi	r21,sp,612
   839e4:	8c40040c 	andi	r17,r17,16
   839e8:	01800204 	movi	r6,8
   839ec:	000b883a 	mov	r5,zero
   839f0:	a809883a 	mov	r4,r21
   839f4:	dc409f15 	stw	r17,636(sp)
   839f8:	008a2900 	call	8a290 <memset>
   839fc:	dc409f17 	ldw	r17,636(sp)
   83a00:	88006e26 	beq	r17,zero,83bbc <__ssvfscanf_r+0x98c>
   83a04:	0029883a 	mov	r20,zero
   83a08:	0023883a 	mov	r17,zero
   83a0c:	0089bbc0 	call	89bbc <__locale_mb_cur_max>
   83a10:	14406126 	beq	r2,r17,83b98 <__ssvfscanf_r+0x968>
   83a14:	98800017 	ldw	r2,0(r19)
   83a18:	98c00117 	ldw	r3,4(r19)
   83a1c:	d9000104 	addi	r4,sp,4
   83a20:	12000003 	ldbu	r8,0(r2)
   83a24:	18ffffc4 	addi	r3,r3,-1
   83a28:	10800044 	addi	r2,r2,1
   83a2c:	98c00115 	stw	r3,4(r19)
   83a30:	98800015 	stw	r2,0(r19)
   83a34:	8c000044 	addi	r16,r17,1
   83a38:	dd400015 	stw	r21,0(sp)
   83a3c:	2463883a 	add	r17,r4,r17
   83a40:	200d883a 	mov	r6,r4
   83a44:	a00b883a 	mov	r5,r20
   83a48:	800f883a 	mov	r7,r16
   83a4c:	b809883a 	mov	r4,r23
   83a50:	8a000005 	stb	r8,0(r17)
   83a54:	0089e2c0 	call	89e2c <_mbrtowc_r>
   83a58:	017fffc4 	movi	r5,-1
   83a5c:	11404e26 	beq	r2,r5,83b98 <__ssvfscanf_r+0x968>
   83a60:	1000601e 	bne	r2,zero,83be4 <__ssvfscanf_r+0x9b4>
   83a64:	d8c09f17 	ldw	r3,636(sp)
   83a68:	1800641e 	bne	r3,zero,83bfc <__ssvfscanf_r+0x9cc>
   83a6c:	a0000015 	stw	zero,0(r20)
   83a70:	9425883a 	add	r18,r18,r16
   83a74:	e179883a 	add	fp,fp,r5
   83a78:	a5000104 	addi	r20,r20,4
   83a7c:	98800117 	ldw	r2,4(r19)
   83a80:	0023883a 	mov	r17,zero
   83a84:	00804b16 	blt	zero,r2,83bb4 <__ssvfscanf_r+0x984>
   83a88:	980b883a 	mov	r5,r19
   83a8c:	b809883a 	mov	r4,r23
   83a90:	008e40c0 	call	8e40c <__ssrefill_r>
   83a94:	10004726 	beq	r2,zero,83bb4 <__ssvfscanf_r+0x984>
   83a98:	88003f1e 	bne	r17,zero,83b98 <__ssvfscanf_r+0x968>
   83a9c:	d8c09f17 	ldw	r3,636(sp)
   83aa0:	1800031e 	bne	r3,zero,83ab0 <__ssvfscanf_r+0x880>
   83aa4:	d900a017 	ldw	r4,640(sp)
   83aa8:	21000044 	addi	r4,r4,1
   83aac:	d900a015 	stw	r4,640(sp)
   83ab0:	dd009d17 	ldw	r20,628(sp)
   83ab4:	a00d883a 	mov	r6,r20
   83ab8:	003e1a06 	br	83324 <__ram_exceptions_end+0xfff630f0>
   83abc:	8c40040c 	andi	r17,r17,16
   83ac0:	073fffc4 	movi	fp,-1
   83ac4:	883fa51e 	bne	r17,zero,8395c <__ram_exceptions_end+0xfff63728>
   83ac8:	d9409c17 	ldw	r5,624(sp)
   83acc:	e2bfffc4 	addi	r10,fp,-1
   83ad0:	2c000017 	ldw	r16,0(r5)
   83ad4:	2c400104 	addi	r17,r5,4
   83ad8:	8007883a 	mov	r3,r16
   83adc:	82ab883a 	add	r21,r16,r10
   83ae0:	00000306 	br	83af0 <__ssvfscanf_r+0x8c0>
   83ae4:	99000017 	ldw	r4,0(r19)
   83ae8:	e007883a 	mov	r3,fp
   83aec:	20800003 	ldbu	r2,0(r4)
   83af0:	10803fcc 	andi	r2,r2,255
   83af4:	d9405884 	addi	r5,sp,354
   83af8:	2885883a 	add	r2,r5,r2
   83afc:	10800007 	ldb	r2,0(r2)
   83b00:	10004b26 	beq	r2,zero,83c30 <__ssvfscanf_r+0xa00>
   83b04:	98800117 	ldw	r2,4(r19)
   83b08:	21400044 	addi	r5,r4,1
   83b0c:	99400015 	stw	r5,0(r19)
   83b10:	10bfffc4 	addi	r2,r2,-1
   83b14:	98800115 	stw	r2,4(r19)
   83b18:	20800003 	ldbu	r2,0(r4)
   83b1c:	1f000044 	addi	fp,r3,1
   83b20:	18800005 	stb	r2,0(r3)
   83b24:	1d400726 	beq	r3,r21,83b44 <__ssvfscanf_r+0x914>
   83b28:	98800117 	ldw	r2,4(r19)
   83b2c:	00bfed16 	blt	zero,r2,83ae4 <__ram_exceptions_end+0xfff638b0>
   83b30:	980b883a 	mov	r5,r19
   83b34:	b809883a 	mov	r4,r23
   83b38:	008e40c0 	call	8e40c <__ssrefill_r>
   83b3c:	103fe926 	beq	r2,zero,83ae4 <__ram_exceptions_end+0xfff638b0>
   83b40:	87001526 	beq	r16,fp,83b98 <__ssvfscanf_r+0x968>
   83b44:	e421c83a 	sub	r16,fp,r16
   83b48:	803dfa26 	beq	r16,zero,83334 <__ram_exceptions_end+0xfff63100>
   83b4c:	d880a017 	ldw	r2,640(sp)
   83b50:	e0000005 	stb	zero,0(fp)
   83b54:	dc409c15 	stw	r17,624(sp)
   83b58:	10800044 	addi	r2,r2,1
   83b5c:	d880a015 	stw	r2,640(sp)
   83b60:	9425883a 	add	r18,r18,r16
   83b64:	a00d883a 	mov	r6,r20
   83b68:	003dee06 	br	83324 <__ram_exceptions_end+0xfff630f0>
   83b6c:	013fff84 	movi	r4,-2
   83b70:	1103ed1e 	bne	r2,r4,84b28 <__ssvfscanf_r+0x18f8>
   83b74:	8821883a 	mov	r16,r17
   83b78:	98800117 	ldw	r2,4(r19)
   83b7c:	00834116 	blt	zero,r2,84884 <__ssvfscanf_r+0x1654>
   83b80:	980b883a 	mov	r5,r19
   83b84:	b809883a 	mov	r4,r23
   83b88:	008e40c0 	call	8e40c <__ssrefill_r>
   83b8c:	10033d26 	beq	r2,zero,84884 <__ssvfscanf_r+0x1654>
   83b90:	dc409f17 	ldw	r17,636(sp)
   83b94:	80034426 	beq	r16,zero,848a8 <__ssvfscanf_r+0x1678>
   83b98:	d900a017 	ldw	r4,640(sp)
   83b9c:	203e8026 	beq	r4,zero,835a0 <__ram_exceptions_end+0xfff6336c>
   83ba0:	9880030b 	ldhu	r2,12(r19)
   83ba4:	1080100c 	andi	r2,r2,64
   83ba8:	103e7d1e 	bne	r2,zero,835a0 <__ram_exceptions_end+0xfff6336c>
   83bac:	2005883a 	mov	r2,r4
   83bb0:	003e7c06 	br	835a4 <__ram_exceptions_end+0xfff63370>
   83bb4:	e03f951e 	bne	fp,zero,83a0c <__ram_exceptions_end+0xfff637d8>
   83bb8:	003fb806 	br	83a9c <__ram_exceptions_end+0xfff63868>
   83bbc:	d8809c17 	ldw	r2,624(sp)
   83bc0:	15000017 	ldw	r20,0(r2)
   83bc4:	10800104 	addi	r2,r2,4
   83bc8:	d8809c15 	stw	r2,624(sp)
   83bcc:	003f8e06 	br	83a08 <__ram_exceptions_end+0xfff637d4>
   83bd0:	980b883a 	mov	r5,r19
   83bd4:	b809883a 	mov	r4,r23
   83bd8:	008e40c0 	call	8e40c <__ssrefill_r>
   83bdc:	103f3626 	beq	r2,zero,838b8 <__ram_exceptions_end+0xfff63684>
   83be0:	003fed06 	br	83b98 <__ram_exceptions_end+0xfff63964>
   83be4:	013fff84 	movi	r4,-2
   83be8:	1100071e 	bne	r2,r4,83c08 <__ssvfscanf_r+0x9d8>
   83bec:	98800117 	ldw	r2,4(r19)
   83bf0:	8023883a 	mov	r17,r16
   83bf4:	00bf8516 	blt	zero,r2,83a0c <__ram_exceptions_end+0xfff637d8>
   83bf8:	003fa306 	br	83a88 <__ram_exceptions_end+0xfff63854>
   83bfc:	9425883a 	add	r18,r18,r16
   83c00:	e73fffc4 	addi	fp,fp,-1
   83c04:	003f9d06 	br	83a7c <__ram_exceptions_end+0xfff63848>
   83c08:	d8c09f17 	ldw	r3,636(sp)
   83c0c:	9425883a 	add	r18,r18,r16
   83c10:	e73fffc4 	addi	fp,fp,-1
   83c14:	183f9826 	beq	r3,zero,83a78 <__ram_exceptions_end+0xfff63844>
   83c18:	003f9806 	br	83a7c <__ram_exceptions_end+0xfff63848>
   83c1c:	8023883a 	mov	r17,r16
   83c20:	8821883a 	mov	r16,r17
   83c24:	003fce06 	br	83b60 <__ram_exceptions_end+0xfff6392c>
   83c28:	803f3b1e 	bne	r16,zero,83918 <__ram_exceptions_end+0xfff636e4>
   83c2c:	003fda06 	br	83b98 <__ram_exceptions_end+0xfff63964>
   83c30:	1839883a 	mov	fp,r3
   83c34:	003fc306 	br	83b44 <__ram_exceptions_end+0xfff63910>
   83c38:	803fc91e 	bne	r16,zero,83b60 <__ram_exceptions_end+0xfff6392c>
   83c3c:	003dbd06 	br	83334 <__ram_exceptions_end+0xfff63100>
   83c40:	d8809c17 	ldw	r2,624(sp)
   83c44:	dcc00015 	stw	r19,0(sp)
   83c48:	b809883a 	mov	r4,r23
   83c4c:	11400017 	ldw	r5,0(r2)
   83c50:	e00f883a 	mov	r7,fp
   83c54:	01800044 	movi	r6,1
   83c58:	008e47c0 	call	8e47c <_sfread_r>
   83c5c:	d9009c17 	ldw	r4,624(sp)
   83c60:	20c00104 	addi	r3,r4,4
   83c64:	103fcc26 	beq	r2,zero,83b98 <__ram_exceptions_end+0xfff63964>
   83c68:	d940a017 	ldw	r5,640(sp)
   83c6c:	dd009d17 	ldw	r20,628(sp)
   83c70:	90a5883a 	add	r18,r18,r2
   83c74:	29400044 	addi	r5,r5,1
   83c78:	d940a015 	stw	r5,640(sp)
   83c7c:	d8c09c15 	stw	r3,624(sp)
   83c80:	a00d883a 	mov	r6,r20
   83c84:	003da706 	br	83324 <__ram_exceptions_end+0xfff630f0>
   83c88:	980b883a 	mov	r5,r19
   83c8c:	b809883a 	mov	r4,r23
   83c90:	008e40c0 	call	8e40c <__ssrefill_r>
   83c94:	103e3626 	beq	r2,zero,83570 <__ram_exceptions_end+0xfff6333c>
   83c98:	003fbf06 	br	83b98 <__ram_exceptions_end+0xfff63964>
   83c9c:	98800117 	ldw	r2,4(r19)
   83ca0:	88e2b03a 	or	r17,r17,r3
   83ca4:	0080210e 	bge	zero,r2,83d2c <__ssvfscanf_r+0xafc>
   83ca8:	01400274 	movhi	r5,9
   83cac:	2975f604 	addi	r5,r5,-10280
   83cb0:	00800284 	movi	r2,10
   83cb4:	d940a115 	stw	r5,644(sp)
   83cb8:	d8809e15 	stw	r2,632(sp)
   83cbc:	050000c4 	movi	r20,3
   83cc0:	003e6906 	br	83668 <__ram_exceptions_end+0xfff63434>
   83cc4:	a1400083 	ldbu	r5,2(r20)
   83cc8:	8c400094 	ori	r17,r17,2
   83ccc:	a5000084 	addi	r20,r20,2
   83cd0:	2d403fcc 	andi	r21,r5,255
   83cd4:	003da106 	br	8335c <__ram_exceptions_end+0xfff63128>
   83cd8:	8880004c 	andi	r2,r17,1
   83cdc:	10000c1e 	bne	r2,zero,83d10 <__ssvfscanf_r+0xae0>
   83ce0:	8c40008c 	andi	r17,r17,2
   83ce4:	88000a26 	beq	r17,zero,83d10 <__ssvfscanf_r+0xae0>
   83ce8:	d8c09c17 	ldw	r3,624(sp)
   83cec:	d9009c17 	ldw	r4,624(sp)
   83cf0:	dd009d17 	ldw	r20,628(sp)
   83cf4:	18800017 	ldw	r2,0(r3)
   83cf8:	9007d7fa 	srai	r3,r18,31
   83cfc:	21000104 	addi	r4,r4,4
   83d00:	14800015 	stw	r18,0(r2)
   83d04:	10c00115 	stw	r3,4(r2)
   83d08:	d9009c15 	stw	r4,624(sp)
   83d0c:	003d8406 	br	83320 <__ram_exceptions_end+0xfff630ec>
   83d10:	d9409c17 	ldw	r5,624(sp)
   83d14:	dd009d17 	ldw	r20,628(sp)
   83d18:	28800017 	ldw	r2,0(r5)
   83d1c:	29400104 	addi	r5,r5,4
   83d20:	d9409c15 	stw	r5,624(sp)
   83d24:	14800015 	stw	r18,0(r2)
   83d28:	003d7d06 	br	83320 <__ram_exceptions_end+0xfff630ec>
   83d2c:	980b883a 	mov	r5,r19
   83d30:	b809883a 	mov	r4,r23
   83d34:	008e40c0 	call	8e40c <__ssrefill_r>
   83d38:	103f971e 	bne	r2,zero,83b98 <__ram_exceptions_end+0xfff63964>
   83d3c:	b4000017 	ldw	r16,0(r22)
   83d40:	003ed206 	br	8388c <__ram_exceptions_end+0xfff63658>
   83d44:	980b883a 	mov	r5,r19
   83d48:	b809883a 	mov	r4,r23
   83d4c:	008e40c0 	call	8e40c <__ssrefill_r>
   83d50:	103f911e 	bne	r2,zero,83b98 <__ram_exceptions_end+0xfff63964>
   83d54:	01000274 	movhi	r4,9
   83d58:	21375404 	addi	r4,r4,-8880
   83d5c:	01400404 	movi	r5,16
   83d60:	b4000017 	ldw	r16,0(r22)
   83d64:	d900a115 	stw	r4,644(sp)
   83d68:	d9409e15 	stw	r5,632(sp)
   83d6c:	050000c4 	movi	r20,3
   83d70:	003e3d06 	br	83668 <__ram_exceptions_end+0xfff63434>
   83d74:	980b883a 	mov	r5,r19
   83d78:	b809883a 	mov	r4,r23
   83d7c:	008e40c0 	call	8e40c <__ssrefill_r>
   83d80:	103f851e 	bne	r2,zero,83b98 <__ram_exceptions_end+0xfff63964>
   83d84:	b4000017 	ldw	r16,0(r22)
   83d88:	05000084 	movi	r20,2
   83d8c:	003e3606 	br	83668 <__ram_exceptions_end+0xfff63434>
   83d90:	980b883a 	mov	r5,r19
   83d94:	b809883a 	mov	r4,r23
   83d98:	008e40c0 	call	8e40c <__ssrefill_r>
   83d9c:	103eea26 	beq	r2,zero,83948 <__ram_exceptions_end+0xfff63714>
   83da0:	003f7d06 	br	83b98 <__ram_exceptions_end+0xfff63964>
   83da4:	980b883a 	mov	r5,r19
   83da8:	b809883a 	mov	r4,r23
   83dac:	008e40c0 	call	8e40c <__ssrefill_r>
   83db0:	103f791e 	bne	r2,zero,83b98 <__ram_exceptions_end+0xfff63964>
   83db4:	b4000017 	ldw	r16,0(r22)
   83db8:	05000104 	movi	r20,4
   83dbc:	003e2a06 	br	83668 <__ram_exceptions_end+0xfff63434>
   83dc0:	980b883a 	mov	r5,r19
   83dc4:	b809883a 	mov	r4,r23
   83dc8:	008e40c0 	call	8e40c <__ssrefill_r>
   83dcc:	103f721e 	bne	r2,zero,83b98 <__ram_exceptions_end+0xfff63964>
   83dd0:	b4000017 	ldw	r16,0(r22)
   83dd4:	003e8c06 	br	83808 <__ram_exceptions_end+0xfff635d4>
   83dd8:	980b883a 	mov	r5,r19
   83ddc:	b809883a 	mov	r4,r23
   83de0:	008e40c0 	call	8e40c <__ssrefill_r>
   83de4:	103f6c1e 	bne	r2,zero,83b98 <__ram_exceptions_end+0xfff63964>
   83de8:	00800274 	movhi	r2,9
   83dec:	10b75404 	addi	r2,r2,-8880
   83df0:	00c00284 	movi	r3,10
   83df4:	b4000017 	ldw	r16,0(r22)
   83df8:	d880a115 	stw	r2,644(sp)
   83dfc:	d8c09e15 	stw	r3,632(sp)
   83e00:	050000c4 	movi	r20,3
   83e04:	003e1806 	br	83668 <__ram_exceptions_end+0xfff63434>
   83e08:	980b883a 	mov	r5,r19
   83e0c:	b809883a 	mov	r4,r23
   83e10:	008e40c0 	call	8e40c <__ssrefill_r>
   83e14:	103f601e 	bne	r2,zero,83b98 <__ram_exceptions_end+0xfff63964>
   83e18:	00800274 	movhi	r2,9
   83e1c:	10b75404 	addi	r2,r2,-8880
   83e20:	00c00204 	movi	r3,8
   83e24:	b4000017 	ldw	r16,0(r22)
   83e28:	d880a115 	stw	r2,644(sp)
   83e2c:	d8c09e15 	stw	r3,632(sp)
   83e30:	050000c4 	movi	r20,3
   83e34:	003e0c06 	br	83668 <__ram_exceptions_end+0xfff63434>
   83e38:	980b883a 	mov	r5,r19
   83e3c:	b809883a 	mov	r4,r23
   83e40:	008e40c0 	call	8e40c <__ssrefill_r>
   83e44:	103f541e 	bne	r2,zero,83b98 <__ram_exceptions_end+0xfff63964>
   83e48:	00800274 	movhi	r2,9
   83e4c:	10b5f604 	addi	r2,r2,-10280
   83e50:	b4000017 	ldw	r16,0(r22)
   83e54:	d880a115 	stw	r2,644(sp)
   83e58:	d8009e15 	stw	zero,632(sp)
   83e5c:	050000c4 	movi	r20,3
   83e60:	003e0106 	br	83668 <__ram_exceptions_end+0xfff63434>
   83e64:	980b883a 	mov	r5,r19
   83e68:	b809883a 	mov	r4,r23
   83e6c:	008e40c0 	call	8e40c <__ssrefill_r>
   83e70:	103f491e 	bne	r2,zero,83b98 <__ram_exceptions_end+0xfff63964>
   83e74:	00800274 	movhi	r2,9
   83e78:	10b75404 	addi	r2,r2,-8880
   83e7c:	00c00404 	movi	r3,16
   83e80:	b4000017 	ldw	r16,0(r22)
   83e84:	d880a115 	stw	r2,644(sp)
   83e88:	d8c09e15 	stw	r3,632(sp)
   83e8c:	050000c4 	movi	r20,3
   83e90:	003df506 	br	83668 <__ram_exceptions_end+0xfff63434>
   83e94:	014000c4 	movi	r5,3
   83e98:	a1416726 	beq	r20,r5,84438 <__ssvfscanf_r+0x1208>
   83e9c:	01000104 	movi	r4,4
   83ea0:	a101491e 	bne	r20,r4,843c8 <__ssvfscanf_r+0x1198>
   83ea4:	b809883a 	mov	r4,r23
   83ea8:	0089be00 	call	89be0 <_localeconv_r>
   83eac:	10800017 	ldw	r2,0(r2)
   83eb0:	e0ffffc4 	addi	r3,fp,-1
   83eb4:	d880a315 	stw	r2,652(sp)
   83eb8:	00805704 	movi	r2,348
   83ebc:	10c21e2e 	bgeu	r2,r3,84738 <__ssvfscanf_r+0x1508>
   83ec0:	e73fa8c4 	addi	fp,fp,-349
   83ec4:	df00a215 	stw	fp,648(sp)
   83ec8:	07005744 	movi	fp,349
   83ecc:	8d01e014 	ori	r20,r17,1920
   83ed0:	0023883a 	mov	r17,zero
   83ed4:	dc000104 	addi	r16,sp,4
   83ed8:	002b883a 	mov	r21,zero
   83edc:	8805883a 	mov	r2,r17
   83ee0:	0007883a 	mov	r3,zero
   83ee4:	8023883a 	mov	r17,r16
   83ee8:	b80d883a 	mov	r6,r23
   83eec:	e021883a 	mov	r16,fp
   83ef0:	a82f883a 	mov	r23,r21
   83ef4:	d800a515 	stw	zero,660(sp)
   83ef8:	d800a415 	stw	zero,656(sp)
   83efc:	d8009f15 	stw	zero,636(sp)
   83f00:	01c01384 	movi	r7,78
   83f04:	182b883a 	mov	r21,r3
   83f08:	1039883a 	mov	fp,r2
   83f0c:	99000017 	ldw	r4,0(r19)
   83f10:	21400003 	ldbu	r5,0(r4)
   83f14:	28bff544 	addi	r2,r5,-43
   83f18:	10803fcc 	andi	r2,r2,255
   83f1c:	38810e36 	bltu	r7,r2,84358 <__ssvfscanf_r+0x1128>
   83f20:	100490ba 	slli	r2,r2,2
   83f24:	00c00234 	movhi	r3,8
   83f28:	18cfce04 	addi	r3,r3,16184
   83f2c:	10c5883a 	add	r2,r2,r3
   83f30:	10800017 	ldw	r2,0(r2)
   83f34:	1000683a 	jmp	r2
   83f38:	0008422c 	andhi	zero,zero,8456
   83f3c:	00084358 	cmpnei	zero,zero,8461
   83f40:	0008422c 	andhi	zero,zero,8456
   83f44:	00084358 	cmpnei	zero,zero,8461
   83f48:	00084358 	cmpnei	zero,zero,8461
   83f4c:	00084200 	call	8420 <_start-0x77be0>
   83f50:	00084074 	movhi	zero,8449
   83f54:	00084074 	movhi	zero,8449
   83f58:	00084074 	movhi	zero,8449
   83f5c:	00084074 	movhi	zero,8449
   83f60:	00084074 	movhi	zero,8449
   83f64:	00084074 	movhi	zero,8449
   83f68:	00084074 	movhi	zero,8449
   83f6c:	00084074 	movhi	zero,8449
   83f70:	00084074 	movhi	zero,8449
   83f74:	00084358 	cmpnei	zero,zero,8461
   83f78:	00084358 	cmpnei	zero,zero,8461
   83f7c:	00084358 	cmpnei	zero,zero,8461
   83f80:	00084358 	cmpnei	zero,zero,8461
   83f84:	00084358 	cmpnei	zero,zero,8461
   83f88:	00084358 	cmpnei	zero,zero,8461
   83f8c:	00084358 	cmpnei	zero,zero,8461
   83f90:	00084348 	cmpgei	zero,zero,8461
   83f94:	00084358 	cmpnei	zero,zero,8461
   83f98:	00084358 	cmpnei	zero,zero,8461
   83f9c:	00084358 	cmpnei	zero,zero,8461
   83fa0:	00084304 	movi	zero,8460
   83fa4:	000842e8 	cmpgeui	zero,zero,8459
   83fa8:	00084358 	cmpnei	zero,zero,8461
   83fac:	00084358 	cmpnei	zero,zero,8461
   83fb0:	000842b0 	cmpltui	zero,zero,8458
   83fb4:	00084358 	cmpnei	zero,zero,8461
   83fb8:	00084358 	cmpnei	zero,zero,8461
   83fbc:	00084358 	cmpnei	zero,zero,8461
   83fc0:	00084358 	cmpnei	zero,zero,8461
   83fc4:	00084278 	rdprs	zero,zero,8457
   83fc8:	00084358 	cmpnei	zero,zero,8461
   83fcc:	00084358 	cmpnei	zero,zero,8461
   83fd0:	00084358 	cmpnei	zero,zero,8461
   83fd4:	00084358 	cmpnei	zero,zero,8461
   83fd8:	00084358 	cmpnei	zero,zero,8461
   83fdc:	0008425c 	xori	zero,zero,8457
   83fe0:	00084358 	cmpnei	zero,zero,8461
   83fe4:	00084358 	cmpnei	zero,zero,8461
   83fe8:	00084358 	cmpnei	zero,zero,8461
   83fec:	00084358 	cmpnei	zero,zero,8461
   83ff0:	00084240 	call	8424 <_start-0x77bdc>
   83ff4:	00084358 	cmpnei	zero,zero,8461
   83ff8:	00084358 	cmpnei	zero,zero,8461
   83ffc:	00084358 	cmpnei	zero,zero,8461
   84000:	00084358 	cmpnei	zero,zero,8461
   84004:	00084358 	cmpnei	zero,zero,8461
   84008:	00084358 	cmpnei	zero,zero,8461
   8400c:	00084358 	cmpnei	zero,zero,8461
   84010:	00084348 	cmpgei	zero,zero,8461
   84014:	00084358 	cmpnei	zero,zero,8461
   84018:	00084358 	cmpnei	zero,zero,8461
   8401c:	00084358 	cmpnei	zero,zero,8461
   84020:	00084304 	movi	zero,8460
   84024:	000842e8 	cmpgeui	zero,zero,8459
   84028:	00084358 	cmpnei	zero,zero,8461
   8402c:	00084358 	cmpnei	zero,zero,8461
   84030:	000842b0 	cmpltui	zero,zero,8458
   84034:	00084358 	cmpnei	zero,zero,8461
   84038:	00084358 	cmpnei	zero,zero,8461
   8403c:	00084358 	cmpnei	zero,zero,8461
   84040:	00084358 	cmpnei	zero,zero,8461
   84044:	00084278 	rdprs	zero,zero,8457
   84048:	00084358 	cmpnei	zero,zero,8461
   8404c:	00084358 	cmpnei	zero,zero,8461
   84050:	00084358 	cmpnei	zero,zero,8461
   84054:	00084358 	cmpnei	zero,zero,8461
   84058:	00084358 	cmpnei	zero,zero,8461
   8405c:	0008425c 	xori	zero,zero,8457
   84060:	00084358 	cmpnei	zero,zero,8461
   84064:	00084358 	cmpnei	zero,zero,8461
   84068:	00084358 	cmpnei	zero,zero,8461
   8406c:	00084358 	cmpnei	zero,zero,8461
   84070:	00084240 	call	8424 <_start-0x77bdc>
   84074:	a8803fcc 	andi	r2,r21,255
   84078:	1080201c 	xori	r2,r2,128
   8407c:	10bfe004 	addi	r2,r2,-128
   84080:	b885883a 	add	r2,r23,r2
   84084:	10000d1e 	bne	r2,zero,840bc <__ssvfscanf_r+0xe8c>
   84088:	00bf9fc4 	movi	r2,-385
   8408c:	a0a8703a 	and	r20,r20,r2
   84090:	89400005 	stb	r5,0(r17)
   84094:	8c400044 	addi	r17,r17,1
   84098:	98800117 	ldw	r2,4(r19)
   8409c:	843fffc4 	addi	r16,r16,-1
   840a0:	94800044 	addi	r18,r18,1
   840a4:	10bfffc4 	addi	r2,r2,-1
   840a8:	98800115 	stw	r2,4(r19)
   840ac:	0080b40e 	bge	zero,r2,84380 <__ssvfscanf_r+0x1150>
   840b0:	21000044 	addi	r4,r4,1
   840b4:	99000015 	stw	r4,0(r19)
   840b8:	803f941e 	bne	r16,zero,83f0c <__ram_exceptions_end+0xfff63cd8>
   840bc:	8821883a 	mov	r16,r17
   840c0:	a807883a 	mov	r3,r21
   840c4:	e023883a 	mov	r17,fp
   840c8:	b82b883a 	mov	r21,r23
   840cc:	302f883a 	mov	r23,r6
   840d0:	e001961e 	bne	fp,zero,8472c <__ssvfscanf_r+0x14fc>
   840d4:	ab3fffc4 	addi	r12,r21,-1
   840d8:	00800044 	movi	r2,1
   840dc:	1302a22e 	bgeu	r2,r12,84b68 <__ssvfscanf_r+0x1938>
   840e0:	18803fcc 	andi	r2,r3,255
   840e4:	1080201c 	xori	r2,r2,128
   840e8:	10bfe004 	addi	r2,r2,-128
   840ec:	113fffc4 	addi	r4,r2,-1
   840f0:	01400184 	movi	r5,6
   840f4:	29001136 	bltu	r5,r4,8413c <__ssvfscanf_r+0xf0c>
   840f8:	01000084 	movi	r4,2
   840fc:	2082770e 	bge	r4,r2,84adc <__ssvfscanf_r+0x18ac>
   84100:	054000c4 	movi	r21,3
   84104:	1839883a 	mov	fp,r3
   84108:	15400c26 	beq	r2,r21,8413c <__ssvfscanf_r+0xf0c>
   8410c:	9425c83a 	sub	r18,r18,r16
   84110:	843fffc4 	addi	r16,r16,-1
   84114:	81400007 	ldb	r5,0(r16)
   84118:	980d883a 	mov	r6,r19
   8411c:	b809883a 	mov	r4,r23
   84120:	008e3040 	call	8e304 <_sungetc_r>
   84124:	e0bfffc4 	addi	r2,fp,-1
   84128:	10c03fcc 	andi	r3,r2,255
   8412c:	8493883a 	add	r9,r16,r18
   84130:	1039883a 	mov	fp,r2
   84134:	a8fff636 	bltu	r21,r3,84110 <__ram_exceptions_end+0xfff63edc>
   84138:	4825883a 	mov	r18,r9
   8413c:	a080400c 	andi	r2,r20,256
   84140:	10001426 	beq	r2,zero,84194 <__ssvfscanf_r+0xf64>
   84144:	a081000c 	andi	r2,r20,1024
   84148:	10027b1e 	bne	r2,zero,84b38 <__ssvfscanf_r+0x1908>
   8414c:	817fffc7 	ldb	r5,-1(r16)
   84150:	00801944 	movi	r2,101
   84154:	873fffc4 	addi	fp,r16,-1
   84158:	957fffc4 	addi	r21,r18,-1
   8415c:	28800826 	beq	r5,r2,84180 <__ssvfscanf_r+0xf50>
   84160:	00801144 	movi	r2,69
   84164:	28800626 	beq	r5,r2,84180 <__ssvfscanf_r+0xf50>
   84168:	980d883a 	mov	r6,r19
   8416c:	b809883a 	mov	r4,r23
   84170:	008e3040 	call	8e304 <_sungetc_r>
   84174:	817fff87 	ldb	r5,-2(r16)
   84178:	873fff84 	addi	fp,r16,-2
   8417c:	957fff84 	addi	r21,r18,-2
   84180:	980d883a 	mov	r6,r19
   84184:	b809883a 	mov	r4,r23
   84188:	008e3040 	call	8e304 <_sungetc_r>
   8418c:	a825883a 	mov	r18,r21
   84190:	e021883a 	mov	r16,fp
   84194:	a080040c 	andi	r2,r20,16
   84198:	103e451e 	bne	r2,zero,83ab0 <__ram_exceptions_end+0xfff6387c>
   8419c:	80000005 	stb	zero,0(r16)
   841a0:	a081800c 	andi	r2,r20,1536
   841a4:	01010004 	movi	r4,1024
   841a8:	1101ea26 	beq	r2,r4,84954 <__ssvfscanf_r+0x1724>
   841ac:	d8c0a417 	ldw	r3,656(sp)
   841b0:	1801f41e 	bne	r3,zero,84984 <__ssvfscanf_r+0x1754>
   841b4:	000d883a 	mov	r6,zero
   841b8:	d9400104 	addi	r5,sp,4
   841bc:	b809883a 	mov	r4,r23
   841c0:	008c0dc0 	call	8c0dc <_strtod_r>
   841c4:	1021883a 	mov	r16,r2
   841c8:	a080004c 	andi	r2,r20,1
   841cc:	1001b926 	beq	r2,zero,848b4 <__ssvfscanf_r+0x1684>
   841d0:	d9009c17 	ldw	r4,624(sp)
   841d4:	20800017 	ldw	r2,0(r4)
   841d8:	21000104 	addi	r4,r4,4
   841dc:	d9009c15 	stw	r4,624(sp)
   841e0:	14000015 	stw	r16,0(r2)
   841e4:	10c00115 	stw	r3,4(r2)
   841e8:	d8c0a017 	ldw	r3,640(sp)
   841ec:	dd009d17 	ldw	r20,628(sp)
   841f0:	18c00044 	addi	r3,r3,1
   841f4:	d8c0a015 	stw	r3,640(sp)
   841f8:	a00d883a 	mov	r6,r20
   841fc:	003c4906 	br	83324 <__ram_exceptions_end+0xfff630f0>
   84200:	a080400c 	andi	r2,r20,256
   84204:	103f9b26 	beq	r2,zero,84074 <__ram_exceptions_end+0xfff63e40>
   84208:	d8c0a217 	ldw	r3,648(sp)
   8420c:	00bfdfc4 	movi	r2,-129
   84210:	a0a8703a 	and	r20,r20,r2
   84214:	e7000044 	addi	fp,fp,1
   84218:	183f9f26 	beq	r3,zero,84098 <__ram_exceptions_end+0xfff63e64>
   8421c:	18ffffc4 	addi	r3,r3,-1
   84220:	d8c0a215 	stw	r3,648(sp)
   84224:	84000044 	addi	r16,r16,1
   84228:	003f9b06 	br	84098 <__ram_exceptions_end+0xfff63e64>
   8422c:	a080200c 	andi	r2,r20,128
   84230:	103fa226 	beq	r2,zero,840bc <__ram_exceptions_end+0xfff63e88>
   84234:	00bfdfc4 	movi	r2,-129
   84238:	a0a8703a 	and	r20,r20,r2
   8423c:	003f9406 	br	84090 <__ram_exceptions_end+0xfff63e5c>
   84240:	a8803fcc 	andi	r2,r21,255
   84244:	1080201c 	xori	r2,r2,128
   84248:	10bfe004 	addi	r2,r2,-128
   8424c:	00c001c4 	movi	r3,7
   84250:	10ff9a1e 	bne	r2,r3,840bc <__ram_exceptions_end+0xfff63e88>
   84254:	05400204 	movi	r21,8
   84258:	003f8d06 	br	84090 <__ram_exceptions_end+0xfff63e5c>
   8425c:	a8803fcc 	andi	r2,r21,255
   84260:	1080201c 	xori	r2,r2,128
   84264:	10bfe004 	addi	r2,r2,-128
   84268:	02000184 	movi	r8,6
   8426c:	123f931e 	bne	r2,r8,840bc <__ram_exceptions_end+0xfff63e88>
   84270:	054001c4 	movi	r21,7
   84274:	003f8606 	br	84090 <__ram_exceptions_end+0xfff63e5c>
   84278:	b8004f1e 	bne	r23,zero,843b8 <__ssvfscanf_r+0x1188>
   8427c:	e000031e 	bne	fp,zero,8428c <__ssvfscanf_r+0x105c>
   84280:	a081c00c 	andi	r2,r20,1792
   84284:	0201c004 	movi	r8,1792
   84288:	1201a226 	beq	r2,r8,84914 <__ssvfscanf_r+0x16e4>
   8428c:	a8803fcc 	andi	r2,r21,255
   84290:	1080201c 	xori	r2,r2,128
   84294:	10bfe004 	addi	r2,r2,-128
   84298:	02000044 	movi	r8,1
   8429c:	12000226 	beq	r2,r8,842a8 <__ssvfscanf_r+0x1078>
   842a0:	02000104 	movi	r8,4
   842a4:	123f851e 	bne	r2,r8,840bc <__ram_exceptions_end+0xfff63e88>
   842a8:	ad400044 	addi	r21,r21,1
   842ac:	003f7806 	br	84090 <__ram_exceptions_end+0xfff63e5c>
   842b0:	a8803fcc 	andi	r2,r21,255
   842b4:	1080201c 	xori	r2,r2,128
   842b8:	10bfe004 	addi	r2,r2,-128
   842bc:	1000391e 	bne	r2,zero,843a4 <__ssvfscanf_r+0x1174>
   842c0:	e001151e 	bne	fp,zero,84718 <__ssvfscanf_r+0x14e8>
   842c4:	a081c00c 	andi	r2,r20,1792
   842c8:	0201c004 	movi	r8,1792
   842cc:	12019b26 	beq	r2,r8,8493c <__ssvfscanf_r+0x170c>
   842d0:	8821883a 	mov	r16,r17
   842d4:	a807883a 	mov	r3,r21
   842d8:	e023883a 	mov	r17,fp
   842dc:	b82b883a 	mov	r21,r23
   842e0:	302f883a 	mov	r23,r6
   842e4:	003f7b06 	br	840d4 <__ram_exceptions_end+0xfff63ea0>
   842e8:	a8803fcc 	andi	r2,r21,255
   842ec:	1080201c 	xori	r2,r2,128
   842f0:	10bfe004 	addi	r2,r2,-128
   842f4:	02000084 	movi	r8,2
   842f8:	123f701e 	bne	r2,r8,840bc <__ram_exceptions_end+0xfff63e88>
   842fc:	054000c4 	movi	r21,3
   84300:	003f6306 	br	84090 <__ram_exceptions_end+0xfff63e5c>
   84304:	a081400c 	andi	r2,r20,1280
   84308:	00c10004 	movi	r3,1024
   8430c:	10c00326 	beq	r2,r3,8431c <__ssvfscanf_r+0x10ec>
   84310:	a0c4703a 	and	r2,r20,r3
   84314:	103f6926 	beq	r2,zero,840bc <__ram_exceptions_end+0xfff63e88>
   84318:	e03fed26 	beq	fp,zero,842d0 <__ram_exceptions_end+0xfff6409c>
   8431c:	a080800c 	andi	r2,r20,512
   84320:	1000041e 	bne	r2,zero,84334 <__ssvfscanf_r+0x1104>
   84324:	d8c09f17 	ldw	r3,636(sp)
   84328:	dc40a515 	stw	r17,660(sp)
   8432c:	e0f9c83a 	sub	fp,fp,r3
   84330:	df00a415 	stw	fp,656(sp)
   84334:	00be1fc4 	movi	r2,-1921
   84338:	a0a8703a 	and	r20,r20,r2
   8433c:	a5006014 	ori	r20,r20,384
   84340:	0039883a 	mov	fp,zero
   84344:	003f5206 	br	84090 <__ram_exceptions_end+0xfff63e5c>
   84348:	00800044 	movi	r2,1
   8434c:	b8bf5b1e 	bne	r23,r2,840bc <__ram_exceptions_end+0xfff63e88>
   84350:	05c00084 	movi	r23,2
   84354:	003f4e06 	br	84090 <__ram_exceptions_end+0xfff63e5c>
   84358:	d8c0a317 	ldw	r3,652(sp)
   8435c:	2a003fcc 	andi	r8,r5,255
   84360:	18800003 	ldbu	r2,0(r3)
   84364:	40bf551e 	bne	r8,r2,840bc <__ram_exceptions_end+0xfff63e88>
   84368:	a080800c 	andi	r2,r20,512
   8436c:	103f5326 	beq	r2,zero,840bc <__ram_exceptions_end+0xfff63e88>
   84370:	00bf5fc4 	movi	r2,-641
   84374:	a0a8703a 	and	r20,r20,r2
   84378:	df009f15 	stw	fp,636(sp)
   8437c:	003f4406 	br	84090 <__ram_exceptions_end+0xfff63e5c>
   84380:	3009883a 	mov	r4,r6
   84384:	980b883a 	mov	r5,r19
   84388:	d980a915 	stw	r6,676(sp)
   8438c:	d9c0aa15 	stw	r7,680(sp)
   84390:	008e40c0 	call	8e40c <__ssrefill_r>
   84394:	d980a917 	ldw	r6,676(sp)
   84398:	d9c0aa17 	ldw	r7,680(sp)
   8439c:	103f4626 	beq	r2,zero,840b8 <__ram_exceptions_end+0xfff63e84>
   843a0:	003f4606 	br	840bc <__ram_exceptions_end+0xfff63e88>
   843a4:	020000c4 	movi	r8,3
   843a8:	123fbf26 	beq	r2,r8,842a8 <__ram_exceptions_end+0xfff64074>
   843ac:	02000144 	movi	r8,5
   843b0:	123fbd26 	beq	r2,r8,842a8 <__ram_exceptions_end+0xfff64074>
   843b4:	003f4106 	br	840bc <__ram_exceptions_end+0xfff63e88>
   843b8:	00800084 	movi	r2,2
   843bc:	b8bfb31e 	bne	r23,r2,8428c <__ram_exceptions_end+0xfff64058>
   843c0:	05c000c4 	movi	r23,3
   843c4:	003f3206 	br	84090 <__ram_exceptions_end+0xfff63e5c>
   843c8:	e000011e 	bne	fp,zero,843d0 <__ssvfscanf_r+0x11a0>
   843cc:	073fffc4 	movi	fp,-1
   843d0:	8900004c 	andi	r4,r17,1
   843d4:	20011d1e 	bne	r4,zero,8484c <__ssvfscanf_r+0x161c>
   843d8:	8c40040c 	andi	r17,r17,16
   843dc:	8800da26 	beq	r17,zero,84748 <__ssvfscanf_r+0x1518>
   843e0:	0023883a 	mov	r17,zero
   843e4:	00000306 	br	843f4 <__ssvfscanf_r+0x11c4>
   843e8:	18800003 	ldbu	r2,0(r3)
   843ec:	8085883a 	add	r2,r16,r2
   843f0:	10800043 	ldbu	r2,1(r2)
   843f4:	1080020c 	andi	r2,r2,8
   843f8:	1000fc1e 	bne	r2,zero,847ec <__ssvfscanf_r+0x15bc>
   843fc:	98800117 	ldw	r2,4(r19)
   84400:	18c00044 	addi	r3,r3,1
   84404:	8c400044 	addi	r17,r17,1
   84408:	10bfffc4 	addi	r2,r2,-1
   8440c:	98800115 	stw	r2,4(r19)
   84410:	98c00015 	stw	r3,0(r19)
   84414:	8f00f526 	beq	r17,fp,847ec <__ssvfscanf_r+0x15bc>
   84418:	00bff316 	blt	zero,r2,843e8 <__ram_exceptions_end+0xfff641b4>
   8441c:	980b883a 	mov	r5,r19
   84420:	b809883a 	mov	r4,r23
   84424:	008e40c0 	call	8e40c <__ssrefill_r>
   84428:	1000f01e 	bne	r2,zero,847ec <__ssvfscanf_r+0x15bc>
   8442c:	b4000017 	ldw	r16,0(r22)
   84430:	98c00017 	ldw	r3,0(r19)
   84434:	003fec06 	br	843e8 <__ram_exceptions_end+0xfff641b4>
   84438:	e0bfffc4 	addi	r2,fp,-1
   8443c:	01405704 	movi	r5,348
   84440:	2880bf2e 	bgeu	r5,r2,84740 <__ssvfscanf_r+0x1510>
   84444:	e1ffa8c4 	addi	r7,fp,-349
   84448:	07005744 	movi	fp,349
   8444c:	8c436014 	ori	r17,r17,3456
   84450:	9013883a 	mov	r9,r18
   84454:	8825883a 	mov	r18,r17
   84458:	dc409e17 	ldw	r17,632(sp)
   8445c:	0029883a 	mov	r20,zero
   84460:	dc000104 	addi	r16,sp,4
   84464:	05401344 	movi	r21,77
   84468:	02c08004 	movi	r11,512
   8446c:	01bf7fc4 	movi	r6,-513
   84470:	023fdfc4 	movi	r8,-129
   84474:	20bff544 	addi	r2,r4,-43
   84478:	10803fcc 	andi	r2,r2,255
   8447c:	a8807236 	bltu	r21,r2,84648 <__ssvfscanf_r+0x1418>
   84480:	100490ba 	slli	r2,r2,2
   84484:	01400234 	movhi	r5,8
   84488:	29512604 	addi	r5,r5,17560
   8448c:	1145883a 	add	r2,r2,r5
   84490:	10800017 	ldw	r2,0(r2)
   84494:	1000683a 	jmp	r2
   84498:	000846cc 	andi	zero,zero,8475
   8449c:	00084648 	cmpgei	zero,zero,8473
   844a0:	000846cc 	andi	zero,zero,8475
   844a4:	00084648 	cmpgei	zero,zero,8473
   844a8:	00084648 	cmpgei	zero,zero,8473
   844ac:	000846a4 	muli	zero,zero,8474
   844b0:	00084684 	movi	zero,8474
   844b4:	00084684 	movi	zero,8474
   844b8:	00084684 	movi	zero,8474
   844bc:	00084684 	movi	zero,8474
   844c0:	00084684 	movi	zero,8474
   844c4:	00084684 	movi	zero,8474
   844c8:	00084684 	movi	zero,8474
   844cc:	0008462c 	andhi	zero,zero,8472
   844d0:	0008462c 	andhi	zero,zero,8472
   844d4:	00084648 	cmpgei	zero,zero,8473
   844d8:	00084648 	cmpgei	zero,zero,8473
   844dc:	00084648 	cmpgei	zero,zero,8473
   844e0:	00084648 	cmpgei	zero,zero,8473
   844e4:	00084648 	cmpgei	zero,zero,8473
   844e8:	00084648 	cmpgei	zero,zero,8473
   844ec:	00084648 	cmpgei	zero,zero,8473
   844f0:	00084618 	cmpnei	zero,zero,8472
   844f4:	00084618 	cmpnei	zero,zero,8472
   844f8:	00084618 	cmpnei	zero,zero,8472
   844fc:	00084618 	cmpnei	zero,zero,8472
   84500:	00084618 	cmpnei	zero,zero,8472
   84504:	00084618 	cmpnei	zero,zero,8472
   84508:	00084648 	cmpgei	zero,zero,8473
   8450c:	00084648 	cmpgei	zero,zero,8473
   84510:	00084648 	cmpgei	zero,zero,8473
   84514:	00084648 	cmpgei	zero,zero,8473
   84518:	00084648 	cmpgei	zero,zero,8473
   8451c:	00084648 	cmpgei	zero,zero,8473
   84520:	00084648 	cmpgei	zero,zero,8473
   84524:	00084648 	cmpgei	zero,zero,8473
   84528:	00084648 	cmpgei	zero,zero,8473
   8452c:	00084648 	cmpgei	zero,zero,8473
   84530:	00084648 	cmpgei	zero,zero,8473
   84534:	00084648 	cmpgei	zero,zero,8473
   84538:	00084648 	cmpgei	zero,zero,8473
   8453c:	00084648 	cmpgei	zero,zero,8473
   84540:	00084648 	cmpgei	zero,zero,8473
   84544:	00084648 	cmpgei	zero,zero,8473
   84548:	00084648 	cmpgei	zero,zero,8473
   8454c:	000845d0 	cmplti	zero,zero,8471
   84550:	00084648 	cmpgei	zero,zero,8473
   84554:	00084648 	cmpgei	zero,zero,8473
   84558:	00084648 	cmpgei	zero,zero,8473
   8455c:	00084648 	cmpgei	zero,zero,8473
   84560:	00084648 	cmpgei	zero,zero,8473
   84564:	00084648 	cmpgei	zero,zero,8473
   84568:	00084648 	cmpgei	zero,zero,8473
   8456c:	00084648 	cmpgei	zero,zero,8473
   84570:	00084618 	cmpnei	zero,zero,8472
   84574:	00084618 	cmpnei	zero,zero,8472
   84578:	00084618 	cmpnei	zero,zero,8472
   8457c:	00084618 	cmpnei	zero,zero,8472
   84580:	00084618 	cmpnei	zero,zero,8472
   84584:	00084618 	cmpnei	zero,zero,8472
   84588:	00084648 	cmpgei	zero,zero,8473
   8458c:	00084648 	cmpgei	zero,zero,8473
   84590:	00084648 	cmpgei	zero,zero,8473
   84594:	00084648 	cmpgei	zero,zero,8473
   84598:	00084648 	cmpgei	zero,zero,8473
   8459c:	00084648 	cmpgei	zero,zero,8473
   845a0:	00084648 	cmpgei	zero,zero,8473
   845a4:	00084648 	cmpgei	zero,zero,8473
   845a8:	00084648 	cmpgei	zero,zero,8473
   845ac:	00084648 	cmpgei	zero,zero,8473
   845b0:	00084648 	cmpgei	zero,zero,8473
   845b4:	00084648 	cmpgei	zero,zero,8473
   845b8:	00084648 	cmpgei	zero,zero,8473
   845bc:	00084648 	cmpgei	zero,zero,8473
   845c0:	00084648 	cmpgei	zero,zero,8473
   845c4:	00084648 	cmpgei	zero,zero,8473
   845c8:	00084648 	cmpgei	zero,zero,8473
   845cc:	000845d0 	cmplti	zero,zero,8471
   845d0:	9081800c 	andi	r2,r18,1536
   845d4:	12c01c1e 	bne	r2,r11,84648 <__ssvfscanf_r+0x1418>
   845d8:	91a4703a 	and	r18,r18,r6
   845dc:	94814014 	ori	r18,r18,1280
   845e0:	04400404 	movi	r17,16
   845e4:	81000005 	stb	r4,0(r16)
   845e8:	84000044 	addi	r16,r16,1
   845ec:	98800117 	ldw	r2,4(r19)
   845f0:	10bfffc4 	addi	r2,r2,-1
   845f4:	98800115 	stw	r2,4(r19)
   845f8:	0080380e 	bge	zero,r2,846dc <__ssvfscanf_r+0x14ac>
   845fc:	18c00044 	addi	r3,r3,1
   84600:	98c00015 	stw	r3,0(r19)
   84604:	e73fffc4 	addi	fp,fp,-1
   84608:	e0000f26 	beq	fp,zero,84648 <__ssvfscanf_r+0x1418>
   8460c:	98c00017 	ldw	r3,0(r19)
   84610:	19000003 	ldbu	r4,0(r3)
   84614:	003f9706 	br	84474 <__ram_exceptions_end+0xfff64240>
   84618:	00800284 	movi	r2,10
   8461c:	14400a0e 	bge	r2,r17,84648 <__ssvfscanf_r+0x1418>
   84620:	00bd1fc4 	movi	r2,-2945
   84624:	90a4703a 	and	r18,r18,r2
   84628:	003fee06 	br	845e4 <__ram_exceptions_end+0xfff643b0>
   8462c:	014002b4 	movhi	r5,10
   84630:	8c63883a 	add	r17,r17,r17
   84634:	29786d84 	addi	r5,r5,-7754
   84638:	2c45883a 	add	r2,r5,r17
   8463c:	1440000f 	ldh	r17,0(r2)
   84640:	00800204 	movi	r2,8
   84644:	147ff616 	blt	r2,r17,84620 <__ram_exceptions_end+0xfff643ec>
   84648:	dc409e15 	stw	r17,632(sp)
   8464c:	9023883a 	mov	r17,r18
   84650:	8880400c 	andi	r2,r17,256
   84654:	4825883a 	mov	r18,r9
   84658:	10000426 	beq	r2,zero,8466c <__ssvfscanf_r+0x143c>
   8465c:	d8800104 	addi	r2,sp,4
   84660:	1400b036 	bltu	r2,r16,84924 <__ssvfscanf_r+0x16f4>
   84664:	d8c00104 	addi	r3,sp,4
   84668:	1c3b3226 	beq	r3,r16,83334 <__ram_exceptions_end+0xfff63100>
   8466c:	8880040c 	andi	r2,r17,16
   84670:	10006226 	beq	r2,zero,847fc <__ssvfscanf_r+0x15cc>
   84674:	d8800104 	addi	r2,sp,4
   84678:	80a1c83a 	sub	r16,r16,r2
   8467c:	8521883a 	add	r16,r16,r20
   84680:	003ca506 	br	83918 <__ram_exceptions_end+0xfff636e4>
   84684:	014002b4 	movhi	r5,10
   84688:	8c63883a 	add	r17,r17,r17
   8468c:	29786d84 	addi	r5,r5,-7754
   84690:	2c45883a 	add	r2,r5,r17
   84694:	1440000f 	ldh	r17,0(r2)
   84698:	00bd1fc4 	movi	r2,-2945
   8469c:	90a4703a 	and	r18,r18,r2
   846a0:	003fd006 	br	845e4 <__ram_exceptions_end+0xfff643b0>
   846a4:	9082000c 	andi	r2,r18,2048
   846a8:	103fce26 	beq	r2,zero,845e4 <__ram_exceptions_end+0xfff643b0>
   846ac:	8800021e 	bne	r17,zero,846b8 <__ssvfscanf_r+0x1488>
   846b0:	94808014 	ori	r18,r18,512
   846b4:	04400204 	movi	r17,8
   846b8:	9081000c 	andi	r2,r18,1024
   846bc:	10008626 	beq	r2,zero,848d8 <__ssvfscanf_r+0x16a8>
   846c0:	00be9fc4 	movi	r2,-1409
   846c4:	90a4703a 	and	r18,r18,r2
   846c8:	003fc606 	br	845e4 <__ram_exceptions_end+0xfff643b0>
   846cc:	9080200c 	andi	r2,r18,128
   846d0:	103fdd26 	beq	r2,zero,84648 <__ram_exceptions_end+0xfff64414>
   846d4:	9224703a 	and	r18,r18,r8
   846d8:	003fc206 	br	845e4 <__ram_exceptions_end+0xfff643b0>
   846dc:	980b883a 	mov	r5,r19
   846e0:	b809883a 	mov	r4,r23
   846e4:	d980a915 	stw	r6,676(sp)
   846e8:	d9c0aa15 	stw	r7,680(sp)
   846ec:	da00a715 	stw	r8,668(sp)
   846f0:	da40a815 	stw	r9,672(sp)
   846f4:	dac0a615 	stw	r11,664(sp)
   846f8:	008e40c0 	call	8e40c <__ssrefill_r>
   846fc:	d980a917 	ldw	r6,676(sp)
   84700:	d9c0aa17 	ldw	r7,680(sp)
   84704:	da00a717 	ldw	r8,668(sp)
   84708:	da40a817 	ldw	r9,672(sp)
   8470c:	dac0a617 	ldw	r11,664(sp)
   84710:	103fbc26 	beq	r2,zero,84604 <__ram_exceptions_end+0xfff643d0>
   84714:	003fcc06 	br	84648 <__ram_exceptions_end+0xfff64414>
   84718:	8821883a 	mov	r16,r17
   8471c:	a807883a 	mov	r3,r21
   84720:	e023883a 	mov	r17,fp
   84724:	b82b883a 	mov	r21,r23
   84728:	302f883a 	mov	r23,r6
   8472c:	00bfbfc4 	movi	r2,-257
   84730:	a0a8703a 	and	r20,r20,r2
   84734:	003e6706 	br	840d4 <__ram_exceptions_end+0xfff63ea0>
   84738:	d800a215 	stw	zero,648(sp)
   8473c:	003de306 	br	83ecc <__ram_exceptions_end+0xfff63c98>
   84740:	000f883a 	mov	r7,zero
   84744:	003f4106 	br	8444c <__ram_exceptions_end+0xfff64218>
   84748:	d9409c17 	ldw	r5,624(sp)
   8474c:	e2bfffc4 	addi	r10,fp,-1
   84750:	2c400017 	ldw	r17,0(r5)
   84754:	2c000104 	addi	r16,r5,4
   84758:	8aa9883a 	add	r20,r17,r10
   8475c:	880b883a 	mov	r5,r17
   84760:	00000606 	br	8477c <__ssvfscanf_r+0x154c>
   84764:	98c00017 	ldw	r3,0(r19)
   84768:	b1000017 	ldw	r4,0(r22)
   8476c:	a80b883a 	mov	r5,r21
   84770:	18800003 	ldbu	r2,0(r3)
   84774:	2085883a 	add	r2,r4,r2
   84778:	10800043 	ldbu	r2,1(r2)
   8477c:	1080020c 	andi	r2,r2,8
   84780:	1000621e 	bne	r2,zero,8490c <__ssvfscanf_r+0x16dc>
   84784:	98800117 	ldw	r2,4(r19)
   84788:	19000044 	addi	r4,r3,1
   8478c:	99000015 	stw	r4,0(r19)
   84790:	10bfffc4 	addi	r2,r2,-1
   84794:	98800115 	stw	r2,4(r19)
   84798:	18800003 	ldbu	r2,0(r3)
   8479c:	2d400044 	addi	r21,r5,1
   847a0:	a839883a 	mov	fp,r21
   847a4:	28800005 	stb	r2,0(r5)
   847a8:	2d000626 	beq	r5,r20,847c4 <__ssvfscanf_r+0x1594>
   847ac:	98800117 	ldw	r2,4(r19)
   847b0:	00bfec16 	blt	zero,r2,84764 <__ram_exceptions_end+0xfff64530>
   847b4:	980b883a 	mov	r5,r19
   847b8:	b809883a 	mov	r4,r23
   847bc:	008e40c0 	call	8e40c <__ssrefill_r>
   847c0:	103fe826 	beq	r2,zero,84764 <__ram_exceptions_end+0xfff64530>
   847c4:	d880a017 	ldw	r2,640(sp)
   847c8:	dd009d17 	ldw	r20,628(sp)
   847cc:	e463c83a 	sub	r17,fp,r17
   847d0:	10800044 	addi	r2,r2,1
   847d4:	e0000005 	stb	zero,0(fp)
   847d8:	9465883a 	add	r18,r18,r17
   847dc:	d880a015 	stw	r2,640(sp)
   847e0:	dc009c15 	stw	r16,624(sp)
   847e4:	a00d883a 	mov	r6,r20
   847e8:	003ace06 	br	83324 <__ram_exceptions_end+0xfff630f0>
   847ec:	dd009d17 	ldw	r20,628(sp)
   847f0:	9465883a 	add	r18,r18,r17
   847f4:	a00d883a 	mov	r6,r20
   847f8:	003aca06 	br	83324 <__ram_exceptions_end+0xfff630f0>
   847fc:	d8c0a117 	ldw	r3,644(sp)
   84800:	d9c09e17 	ldw	r7,632(sp)
   84804:	000d883a 	mov	r6,zero
   84808:	d9400104 	addi	r5,sp,4
   8480c:	b809883a 	mov	r4,r23
   84810:	80000005 	stb	zero,0(r16)
   84814:	183ee83a 	callr	r3
   84818:	88c0080c 	andi	r3,r17,32
   8481c:	1800351e 	bne	r3,zero,848f4 <__ssvfscanf_r+0x16c4>
   84820:	88c0010c 	andi	r3,r17,4
   84824:	18007026 	beq	r3,zero,849e8 <__ssvfscanf_r+0x17b8>
   84828:	d9409c17 	ldw	r5,624(sp)
   8482c:	28c00017 	ldw	r3,0(r5)
   84830:	29400104 	addi	r5,r5,4
   84834:	d9409c15 	stw	r5,624(sp)
   84838:	1880000d 	sth	r2,0(r3)
   8483c:	d940a017 	ldw	r5,640(sp)
   84840:	29400044 	addi	r5,r5,1
   84844:	d940a015 	stw	r5,640(sp)
   84848:	003f8a06 	br	84674 <__ram_exceptions_end+0xfff64440>
   8484c:	dd409904 	addi	r21,sp,612
   84850:	8c40040c 	andi	r17,r17,16
   84854:	01800204 	movi	r6,8
   84858:	000b883a 	mov	r5,zero
   8485c:	a809883a 	mov	r4,r21
   84860:	008a2900 	call	8a290 <memset>
   84864:	8800391e 	bne	r17,zero,8494c <__ssvfscanf_r+0x171c>
   84868:	d8c09c17 	ldw	r3,624(sp)
   8486c:	1d000017 	ldw	r20,0(r3)
   84870:	18c00104 	addi	r3,r3,4
   84874:	d8c09c15 	stw	r3,624(sp)
   84878:	000d883a 	mov	r6,zero
   8487c:	3021883a 	mov	r16,r6
   84880:	dc409f15 	stw	r17,636(sp)
   84884:	98800017 	ldw	r2,0(r19)
   84888:	b0c00017 	ldw	r3,0(r22)
   8488c:	10800003 	ldbu	r2,0(r2)
   84890:	1885883a 	add	r2,r3,r2
   84894:	10800043 	ldbu	r2,1(r2)
   84898:	1080020c 	andi	r2,r2,8
   8489c:	1000011e 	bne	r2,zero,848a4 <__ssvfscanf_r+0x1674>
   848a0:	e000651e 	bne	fp,zero,84a38 <__ssvfscanf_r+0x1808>
   848a4:	dc409f17 	ldw	r17,636(sp)
   848a8:	883c811e 	bne	r17,zero,83ab0 <__ram_exceptions_end+0xfff6387c>
   848ac:	a0000015 	stw	zero,0(r20)
   848b0:	003c7c06 	br	83aa4 <__ram_exceptions_end+0xfff63870>
   848b4:	a2c0008c 	andi	r11,r20,2
   848b8:	58003c26 	beq	r11,zero,849ac <__ssvfscanf_r+0x177c>
   848bc:	d9409c17 	ldw	r5,624(sp)
   848c0:	28800017 	ldw	r2,0(r5)
   848c4:	29400104 	addi	r5,r5,4
   848c8:	d9409c15 	stw	r5,624(sp)
   848cc:	14000015 	stw	r16,0(r2)
   848d0:	10c00115 	stw	r3,4(r2)
   848d4:	003e4406 	br	841e8 <__ram_exceptions_end+0xfff63fb4>
   848d8:	00bf1fc4 	movi	r2,-897
   848dc:	90a4703a 	and	r18,r18,r2
   848e0:	38000226 	beq	r7,zero,848ec <__ssvfscanf_r+0x16bc>
   848e4:	39ffffc4 	addi	r7,r7,-1
   848e8:	e7000044 	addi	fp,fp,1
   848ec:	a5000044 	addi	r20,r20,1
   848f0:	003f3e06 	br	845ec <__ram_exceptions_end+0xfff643b8>
   848f4:	d9009c17 	ldw	r4,624(sp)
   848f8:	20c00017 	ldw	r3,0(r4)
   848fc:	21000104 	addi	r4,r4,4
   84900:	d9009c15 	stw	r4,624(sp)
   84904:	18800015 	stw	r2,0(r3)
   84908:	003fcc06 	br	8483c <__ram_exceptions_end+0xfff64608>
   8490c:	2839883a 	mov	fp,r5
   84910:	003fac06 	br	847c4 <__ram_exceptions_end+0xfff64590>
   84914:	00be1fc4 	movi	r2,-1921
   84918:	a0a8703a 	and	r20,r20,r2
   8491c:	05c00044 	movi	r23,1
   84920:	003ddb06 	br	84090 <__ram_exceptions_end+0xfff63e5c>
   84924:	817fffc7 	ldb	r5,-1(r16)
   84928:	980d883a 	mov	r6,r19
   8492c:	b809883a 	mov	r4,r23
   84930:	843fffc4 	addi	r16,r16,-1
   84934:	008e3040 	call	8e304 <_sungetc_r>
   84938:	003f4a06 	br	84664 <__ram_exceptions_end+0xfff64430>
   8493c:	00fe1fc4 	movi	r3,-1921
   84940:	a0e8703a 	and	r20,r20,r3
   84944:	05400044 	movi	r21,1
   84948:	003dd106 	br	84090 <__ram_exceptions_end+0xfff63e5c>
   8494c:	dd009b04 	addi	r20,sp,620
   84950:	003fc906 	br	84878 <__ram_exceptions_end+0xfff64644>
   84954:	d8c09f17 	ldw	r3,636(sp)
   84958:	88e3c83a 	sub	r17,r17,r3
   8495c:	044dc83a 	sub	r6,zero,r17
   84960:	883e1426 	beq	r17,zero,841b4 <__ram_exceptions_end+0xfff63f80>
   84964:	d88055c4 	addi	r2,sp,343
   84968:	80800136 	bltu	r16,r2,84970 <__ssvfscanf_r+0x1740>
   8496c:	dc005584 	addi	r16,sp,342
   84970:	014002b4 	movhi	r5,10
   84974:	29786c04 	addi	r5,r5,-7760
   84978:	8009883a 	mov	r4,r16
   8497c:	008bf300 	call	8bf30 <sprintf>
   84980:	003e0c06 	br	841b4 <__ram_exceptions_end+0xfff63f80>
   84984:	d8c0a517 	ldw	r3,660(sp)
   84988:	000d883a 	mov	r6,zero
   8498c:	01c00284 	movi	r7,10
   84990:	19400044 	addi	r5,r3,1
   84994:	b809883a 	mov	r4,r23
   84998:	008d7d80 	call	8d7d8 <_strtol_r>
   8499c:	d8c0a417 	ldw	r3,656(sp)
   849a0:	dc00a517 	ldw	r16,660(sp)
   849a4:	10cdc83a 	sub	r6,r2,r3
   849a8:	003fee06 	br	84964 <__ram_exceptions_end+0xfff64730>
   849ac:	d8809c17 	ldw	r2,624(sp)
   849b0:	180b883a 	mov	r5,r3
   849b4:	8009883a 	mov	r4,r16
   849b8:	15000017 	ldw	r20,0(r2)
   849bc:	14400104 	addi	r17,r2,4
   849c0:	d8c0a615 	stw	r3,664(sp)
   849c4:	008bd8c0 	call	8bd8c <__fpclassifyd>
   849c8:	d8c0a617 	ldw	r3,664(sp)
   849cc:	10007226 	beq	r2,zero,84b98 <__ssvfscanf_r+0x1968>
   849d0:	8009883a 	mov	r4,r16
   849d4:	180b883a 	mov	r5,r3
   849d8:	009943c0 	call	9943c <__truncdfsf2>
   849dc:	a0800015 	stw	r2,0(r20)
   849e0:	dc409c15 	stw	r17,624(sp)
   849e4:	003e0006 	br	841e8 <__ram_exceptions_end+0xfff63fb4>
   849e8:	88c0004c 	andi	r3,r17,1
   849ec:	183fc11e 	bne	r3,zero,848f4 <__ram_exceptions_end+0xfff646c0>
   849f0:	8c40008c 	andi	r17,r17,2
   849f4:	883fbf26 	beq	r17,zero,848f4 <__ram_exceptions_end+0xfff646c0>
   849f8:	d940a117 	ldw	r5,644(sp)
   849fc:	00800274 	movhi	r2,9
   84a00:	10b75404 	addi	r2,r2,-8880
   84a04:	d9c09e17 	ldw	r7,632(sp)
   84a08:	000d883a 	mov	r6,zero
   84a0c:	28806726 	beq	r5,r2,84bac <__ssvfscanf_r+0x197c>
   84a10:	d9400104 	addi	r5,sp,4
   84a14:	b809883a 	mov	r4,r23
   84a18:	008da4c0 	call	8da4c <_strtoll_r>
   84a1c:	d9409c17 	ldw	r5,624(sp)
   84a20:	29000017 	ldw	r4,0(r5)
   84a24:	29400104 	addi	r5,r5,4
   84a28:	d9409c15 	stw	r5,624(sp)
   84a2c:	20800015 	stw	r2,0(r4)
   84a30:	20c00115 	stw	r3,4(r4)
   84a34:	003f8106 	br	8483c <__ram_exceptions_end+0xfff64608>
   84a38:	0089bbc0 	call	89bbc <__locale_mb_cur_max>
   84a3c:	80bc5626 	beq	r16,r2,83b98 <__ram_exceptions_end+0xfff63964>
   84a40:	98800017 	ldw	r2,0(r19)
   84a44:	99000117 	ldw	r4,4(r19)
   84a48:	d9400104 	addi	r5,sp,4
   84a4c:	12000003 	ldbu	r8,0(r2)
   84a50:	213fffc4 	addi	r4,r4,-1
   84a54:	10800044 	addi	r2,r2,1
   84a58:	99000115 	stw	r4,4(r19)
   84a5c:	98800015 	stw	r2,0(r19)
   84a60:	84400044 	addi	r17,r16,1
   84a64:	dd400015 	stw	r21,0(sp)
   84a68:	2c21883a 	add	r16,r5,r16
   84a6c:	280d883a 	mov	r6,r5
   84a70:	880f883a 	mov	r7,r17
   84a74:	a00b883a 	mov	r5,r20
   84a78:	b809883a 	mov	r4,r23
   84a7c:	82000005 	stb	r8,0(r16)
   84a80:	0089e2c0 	call	89e2c <_mbrtowc_r>
   84a84:	00ffffc4 	movi	r3,-1
   84a88:	10fc4326 	beq	r2,r3,83b98 <__ram_exceptions_end+0xfff63964>
   84a8c:	103c371e 	bne	r2,zero,83b6c <__ram_exceptions_end+0xfff63938>
   84a90:	a0000015 	stw	zero,0(r20)
   84a94:	0009883a 	mov	r4,zero
   84a98:	0089b040 	call	89b04 <iswspace>
   84a9c:	10001b26 	beq	r2,zero,84b0c <__ssvfscanf_r+0x18dc>
   84aa0:	8821883a 	mov	r16,r17
   84aa4:	dc409f17 	ldw	r17,636(sp)
   84aa8:	803f7f26 	beq	r16,zero,848a8 <__ram_exceptions_end+0xfff64674>
   84aac:	843fffc4 	addi	r16,r16,-1
   84ab0:	d9400104 	addi	r5,sp,4
   84ab4:	2c2b883a 	add	r21,r5,r16
   84ab8:	00000106 	br	84ac0 <__ssvfscanf_r+0x1890>
   84abc:	843fffc4 	addi	r16,r16,-1
   84ac0:	a9400003 	ldbu	r5,0(r21)
   84ac4:	980d883a 	mov	r6,r19
   84ac8:	b809883a 	mov	r4,r23
   84acc:	008e3040 	call	8e304 <_sungetc_r>
   84ad0:	ad7fffc4 	addi	r21,r21,-1
   84ad4:	803ff91e 	bne	r16,zero,84abc <__ram_exceptions_end+0xfff64888>
   84ad8:	003f7306 	br	848a8 <__ram_exceptions_end+0xfff64674>
   84adc:	d9400104 	addi	r5,sp,4
   84ae0:	802b883a 	mov	r21,r16
   84ae4:	9839883a 	mov	fp,r19
   84ae8:	2c3a122e 	bgeu	r5,r16,83334 <__ram_exceptions_end+0xfff63100>
   84aec:	ad7fffc4 	addi	r21,r21,-1
   84af0:	a9400007 	ldb	r5,0(r21)
   84af4:	e00d883a 	mov	r6,fp
   84af8:	b809883a 	mov	r4,r23
   84afc:	008e3040 	call	8e304 <_sungetc_r>
   84b00:	d8800104 	addi	r2,sp,4
   84b04:	157ff91e 	bne	r2,r21,84aec <__ram_exceptions_end+0xfff648b8>
   84b08:	003a0a06 	br	83334 <__ram_exceptions_end+0xfff63100>
   84b0c:	d8c09f17 	ldw	r3,636(sp)
   84b10:	9465883a 	add	r18,r18,r17
   84b14:	e73fffc4 	addi	fp,fp,-1
   84b18:	1800051e 	bne	r3,zero,84b30 <__ssvfscanf_r+0x1900>
   84b1c:	a5000104 	addi	r20,r20,4
   84b20:	0021883a 	mov	r16,zero
   84b24:	003c1406 	br	83b78 <__ram_exceptions_end+0xfff63944>
   84b28:	a1000017 	ldw	r4,0(r20)
   84b2c:	003fda06 	br	84a98 <__ram_exceptions_end+0xfff64864>
   84b30:	0021883a 	mov	r16,zero
   84b34:	003c1006 	br	83b78 <__ram_exceptions_end+0xfff63944>
   84b38:	d8c00104 	addi	r3,sp,4
   84b3c:	802b883a 	mov	r21,r16
   84b40:	9839883a 	mov	fp,r19
   84b44:	1c39fb2e 	bgeu	r3,r16,83334 <__ram_exceptions_end+0xfff63100>
   84b48:	ad7fffc4 	addi	r21,r21,-1
   84b4c:	a9400007 	ldb	r5,0(r21)
   84b50:	b809883a 	mov	r4,r23
   84b54:	e00d883a 	mov	r6,fp
   84b58:	008e3040 	call	8e304 <_sungetc_r>
   84b5c:	d9000104 	addi	r4,sp,4
   84b60:	257ff91e 	bne	r4,r21,84b48 <__ram_exceptions_end+0xfff64914>
   84b64:	0039f306 	br	83334 <__ram_exceptions_end+0xfff63100>
   84b68:	d8c00104 	addi	r3,sp,4
   84b6c:	802b883a 	mov	r21,r16
   84b70:	9839883a 	mov	fp,r19
   84b74:	1c39ef2e 	bgeu	r3,r16,83334 <__ram_exceptions_end+0xfff63100>
   84b78:	ad7fffc4 	addi	r21,r21,-1
   84b7c:	a9400007 	ldb	r5,0(r21)
   84b80:	b809883a 	mov	r4,r23
   84b84:	e00d883a 	mov	r6,fp
   84b88:	008e3040 	call	8e304 <_sungetc_r>
   84b8c:	d9000104 	addi	r4,sp,4
   84b90:	257ff91e 	bne	r4,r21,84b78 <__ram_exceptions_end+0xfff64944>
   84b94:	0039e706 	br	83334 <__ram_exceptions_end+0xfff63100>
   84b98:	0009883a 	mov	r4,zero
   84b9c:	008bed00 	call	8bed0 <nanf>
   84ba0:	a0800015 	stw	r2,0(r20)
   84ba4:	dc409c15 	stw	r17,624(sp)
   84ba8:	003d8f06 	br	841e8 <__ram_exceptions_end+0xfff63fb4>
   84bac:	d9400104 	addi	r5,sp,4
   84bb0:	b809883a 	mov	r4,r23
   84bb4:	008dfe40 	call	8dfe4 <_strtoull_r>
   84bb8:	003f9806 	br	84a1c <__ram_exceptions_end+0xfff647e8>

00084bbc <___vfprintf_internal_r>:
   84bbc:	deffb804 	addi	sp,sp,-288
   84bc0:	dfc04715 	stw	ra,284(sp)
   84bc4:	ddc04515 	stw	r23,276(sp)
   84bc8:	dd404315 	stw	r21,268(sp)
   84bcc:	d9002d15 	stw	r4,180(sp)
   84bd0:	282f883a 	mov	r23,r5
   84bd4:	302b883a 	mov	r21,r6
   84bd8:	d9c02e15 	stw	r7,184(sp)
   84bdc:	df004615 	stw	fp,280(sp)
   84be0:	dd804415 	stw	r22,272(sp)
   84be4:	dd004215 	stw	r20,264(sp)
   84be8:	dcc04115 	stw	r19,260(sp)
   84bec:	dc804015 	stw	r18,256(sp)
   84bf0:	dc403f15 	stw	r17,252(sp)
   84bf4:	dc003e15 	stw	r16,248(sp)
   84bf8:	0089be00 	call	89be0 <_localeconv_r>
   84bfc:	10800017 	ldw	r2,0(r2)
   84c00:	1009883a 	mov	r4,r2
   84c04:	d8803415 	stw	r2,208(sp)
   84c08:	00831980 	call	83198 <strlen>
   84c0c:	d8803715 	stw	r2,220(sp)
   84c10:	d8802d17 	ldw	r2,180(sp)
   84c14:	10000226 	beq	r2,zero,84c20 <___vfprintf_internal_r+0x64>
   84c18:	10800e17 	ldw	r2,56(r2)
   84c1c:	1000fb26 	beq	r2,zero,8500c <___vfprintf_internal_r+0x450>
   84c20:	b880030b 	ldhu	r2,12(r23)
   84c24:	10c8000c 	andi	r3,r2,8192
   84c28:	1800061e 	bne	r3,zero,84c44 <___vfprintf_internal_r+0x88>
   84c2c:	b9001917 	ldw	r4,100(r23)
   84c30:	00f7ffc4 	movi	r3,-8193
   84c34:	10880014 	ori	r2,r2,8192
   84c38:	20c6703a 	and	r3,r4,r3
   84c3c:	b880030d 	sth	r2,12(r23)
   84c40:	b8c01915 	stw	r3,100(r23)
   84c44:	10c0020c 	andi	r3,r2,8
   84c48:	1800c326 	beq	r3,zero,84f58 <___vfprintf_internal_r+0x39c>
   84c4c:	b8c00417 	ldw	r3,16(r23)
   84c50:	1800c126 	beq	r3,zero,84f58 <___vfprintf_internal_r+0x39c>
   84c54:	1080068c 	andi	r2,r2,26
   84c58:	00c00284 	movi	r3,10
   84c5c:	10c0c626 	beq	r2,r3,84f78 <___vfprintf_internal_r+0x3bc>
   84c60:	d8c00404 	addi	r3,sp,16
   84c64:	050002b4 	movhi	r20,10
   84c68:	d9001e04 	addi	r4,sp,120
   84c6c:	a5388684 	addi	r20,r20,-7654
   84c70:	d8c01e15 	stw	r3,120(sp)
   84c74:	d8002015 	stw	zero,128(sp)
   84c78:	d8001f15 	stw	zero,124(sp)
   84c7c:	d8003315 	stw	zero,204(sp)
   84c80:	d8003615 	stw	zero,216(sp)
   84c84:	d8003815 	stw	zero,224(sp)
   84c88:	1811883a 	mov	r8,r3
   84c8c:	d8003915 	stw	zero,228(sp)
   84c90:	d8003a15 	stw	zero,232(sp)
   84c94:	d8002f15 	stw	zero,188(sp)
   84c98:	d9002815 	stw	r4,160(sp)
   84c9c:	a8800007 	ldb	r2,0(r21)
   84ca0:	10028b26 	beq	r2,zero,856d0 <___vfprintf_internal_r+0xb14>
   84ca4:	00c00944 	movi	r3,37
   84ca8:	a823883a 	mov	r17,r21
   84cac:	10c0021e 	bne	r2,r3,84cb8 <___vfprintf_internal_r+0xfc>
   84cb0:	00001406 	br	84d04 <___vfprintf_internal_r+0x148>
   84cb4:	10c00326 	beq	r2,r3,84cc4 <___vfprintf_internal_r+0x108>
   84cb8:	8c400044 	addi	r17,r17,1
   84cbc:	88800007 	ldb	r2,0(r17)
   84cc0:	103ffc1e 	bne	r2,zero,84cb4 <__ram_exceptions_end+0xfff64a80>
   84cc4:	8d61c83a 	sub	r16,r17,r21
   84cc8:	80000e26 	beq	r16,zero,84d04 <___vfprintf_internal_r+0x148>
   84ccc:	d8c02017 	ldw	r3,128(sp)
   84cd0:	d8801f17 	ldw	r2,124(sp)
   84cd4:	45400015 	stw	r21,0(r8)
   84cd8:	1c07883a 	add	r3,r3,r16
   84cdc:	10800044 	addi	r2,r2,1
   84ce0:	d8c02015 	stw	r3,128(sp)
   84ce4:	44000115 	stw	r16,4(r8)
   84ce8:	d8801f15 	stw	r2,124(sp)
   84cec:	00c001c4 	movi	r3,7
   84cf0:	1880a916 	blt	r3,r2,84f98 <___vfprintf_internal_r+0x3dc>
   84cf4:	42000204 	addi	r8,r8,8
   84cf8:	d9402f17 	ldw	r5,188(sp)
   84cfc:	2c0b883a 	add	r5,r5,r16
   84d00:	d9402f15 	stw	r5,188(sp)
   84d04:	88800007 	ldb	r2,0(r17)
   84d08:	1000aa26 	beq	r2,zero,84fb4 <___vfprintf_internal_r+0x3f8>
   84d0c:	8d400044 	addi	r21,r17,1
   84d10:	8c400047 	ldb	r17,1(r17)
   84d14:	0021883a 	mov	r16,zero
   84d18:	00bfffc4 	movi	r2,-1
   84d1c:	0025883a 	mov	r18,zero
   84d20:	dc002905 	stb	r16,164(sp)
   84d24:	d8002785 	stb	zero,158(sp)
   84d28:	d8002b05 	stb	zero,172(sp)
   84d2c:	d8802a15 	stw	r2,168(sp)
   84d30:	d8003115 	stw	zero,196(sp)
   84d34:	04c01604 	movi	r19,88
   84d38:	05800244 	movi	r22,9
   84d3c:	9021883a 	mov	r16,r18
   84d40:	4039883a 	mov	fp,r8
   84d44:	ad400044 	addi	r21,r21,1
   84d48:	88bff804 	addi	r2,r17,-32
   84d4c:	98833236 	bltu	r19,r2,85a18 <___vfprintf_internal_r+0xe5c>
   84d50:	100490ba 	slli	r2,r2,2
   84d54:	00c00234 	movhi	r3,8
   84d58:	18d35a04 	addi	r3,r3,19816
   84d5c:	10c5883a 	add	r2,r2,r3
   84d60:	10800017 	ldw	r2,0(r2)
   84d64:	1000683a 	jmp	r2
   84d68:	00085910 	cmplti	zero,zero,8548
   84d6c:	00085a18 	cmpnei	zero,zero,8552
   84d70:	00085a18 	cmpnei	zero,zero,8552
   84d74:	00085930 	cmpltui	zero,zero,8548
   84d78:	00085a18 	cmpnei	zero,zero,8552
   84d7c:	00085a18 	cmpnei	zero,zero,8552
   84d80:	00085a18 	cmpnei	zero,zero,8552
   84d84:	00085a18 	cmpnei	zero,zero,8552
   84d88:	00085a18 	cmpnei	zero,zero,8552
   84d8c:	00085a18 	cmpnei	zero,zero,8552
   84d90:	00085018 	cmpnei	zero,zero,8512
   84d94:	00085820 	cmpeqi	zero,zero,8544
   84d98:	00085a18 	cmpnei	zero,zero,8552
   84d9c:	00084edc 	xori	zero,zero,8507
   84da0:	0008503c 	xorhi	zero,zero,8512
   84da4:	00085a18 	cmpnei	zero,zero,8552
   84da8:	0008508c 	andi	zero,zero,8514
   84dac:	00085098 	cmpnei	zero,zero,8514
   84db0:	00085098 	cmpnei	zero,zero,8514
   84db4:	00085098 	cmpnei	zero,zero,8514
   84db8:	00085098 	cmpnei	zero,zero,8514
   84dbc:	00085098 	cmpnei	zero,zero,8514
   84dc0:	00085098 	cmpnei	zero,zero,8514
   84dc4:	00085098 	cmpnei	zero,zero,8514
   84dc8:	00085098 	cmpnei	zero,zero,8514
   84dcc:	00085098 	cmpnei	zero,zero,8514
   84dd0:	00085a18 	cmpnei	zero,zero,8552
   84dd4:	00085a18 	cmpnei	zero,zero,8552
   84dd8:	00085a18 	cmpnei	zero,zero,8552
   84ddc:	00085a18 	cmpnei	zero,zero,8552
   84de0:	00085a18 	cmpnei	zero,zero,8552
   84de4:	00085a18 	cmpnei	zero,zero,8552
   84de8:	00085a18 	cmpnei	zero,zero,8552
   84dec:	00085a18 	cmpnei	zero,zero,8552
   84df0:	00085a18 	cmpnei	zero,zero,8552
   84df4:	00085a18 	cmpnei	zero,zero,8552
   84df8:	000850d4 	movui	zero,8515
   84dfc:	0008519c 	xori	zero,zero,8518
   84e00:	00085a18 	cmpnei	zero,zero,8552
   84e04:	0008519c 	xori	zero,zero,8518
   84e08:	00085a18 	cmpnei	zero,zero,8552
   84e0c:	00085a18 	cmpnei	zero,zero,8552
   84e10:	00085a18 	cmpnei	zero,zero,8552
   84e14:	00085a18 	cmpnei	zero,zero,8552
   84e18:	00085248 	cmpgei	zero,zero,8521
   84e1c:	00085a18 	cmpnei	zero,zero,8552
   84e20:	00085a18 	cmpnei	zero,zero,8552
   84e24:	00085254 	movui	zero,8521
   84e28:	00085a18 	cmpnei	zero,zero,8552
   84e2c:	00085a18 	cmpnei	zero,zero,8552
   84e30:	00085a18 	cmpnei	zero,zero,8552
   84e34:	00085a18 	cmpnei	zero,zero,8552
   84e38:	00085a18 	cmpnei	zero,zero,8552
   84e3c:	000856d8 	cmpnei	zero,zero,8539
   84e40:	00085a18 	cmpnei	zero,zero,8552
   84e44:	00085a18 	cmpnei	zero,zero,8552
   84e48:	00085744 	movi	zero,8541
   84e4c:	00085a18 	cmpnei	zero,zero,8552
   84e50:	00085a18 	cmpnei	zero,zero,8552
   84e54:	00085a18 	cmpnei	zero,zero,8552
   84e58:	00085a18 	cmpnei	zero,zero,8552
   84e5c:	00085a18 	cmpnei	zero,zero,8552
   84e60:	00085a18 	cmpnei	zero,zero,8552
   84e64:	00085a18 	cmpnei	zero,zero,8552
   84e68:	00085a18 	cmpnei	zero,zero,8552
   84e6c:	00085a18 	cmpnei	zero,zero,8552
   84e70:	00085a18 	cmpnei	zero,zero,8552
   84e74:	000859bc 	xorhi	zero,zero,8550
   84e78:	0008593c 	xorhi	zero,zero,8548
   84e7c:	0008519c 	xori	zero,zero,8518
   84e80:	0008519c 	xori	zero,zero,8518
   84e84:	0008519c 	xori	zero,zero,8518
   84e88:	0008595c 	xori	zero,zero,8549
   84e8c:	0008593c 	xorhi	zero,zero,8548
   84e90:	00085a18 	cmpnei	zero,zero,8552
   84e94:	00085a18 	cmpnei	zero,zero,8552
   84e98:	00085968 	cmpgeui	zero,zero,8549
   84e9c:	00085a18 	cmpnei	zero,zero,8552
   84ea0:	0008597c 	xorhi	zero,zero,8549
   84ea4:	00085800 	call	8580 <_start-0x77a80>
   84ea8:	00084ee8 	cmpgeui	zero,zero,8507
   84eac:	00085838 	rdprs	zero,zero,8544
   84eb0:	00085a18 	cmpnei	zero,zero,8552
   84eb4:	00085844 	movi	zero,8545
   84eb8:	00085a18 	cmpnei	zero,zero,8552
   84ebc:	000858a8 	cmpgeui	zero,zero,8546
   84ec0:	00085a18 	cmpnei	zero,zero,8552
   84ec4:	00085a18 	cmpnei	zero,zero,8552
   84ec8:	000858c8 	cmpgei	zero,zero,8547
   84ecc:	d8c03117 	ldw	r3,196(sp)
   84ed0:	d8802e15 	stw	r2,184(sp)
   84ed4:	00c7c83a 	sub	r3,zero,r3
   84ed8:	d8c03115 	stw	r3,196(sp)
   84edc:	84000114 	ori	r16,r16,4
   84ee0:	ac400007 	ldb	r17,0(r21)
   84ee4:	003f9706 	br	84d44 <__ram_exceptions_end+0xfff64b10>
   84ee8:	00800c04 	movi	r2,48
   84eec:	d8802705 	stb	r2,156(sp)
   84ef0:	00801e04 	movi	r2,120
   84ef4:	d8802745 	stb	r2,157(sp)
   84ef8:	d9002a17 	ldw	r4,168(sp)
   84efc:	d8802e17 	ldw	r2,184(sp)
   84f00:	d8002785 	stb	zero,158(sp)
   84f04:	e011883a 	mov	r8,fp
   84f08:	10c00104 	addi	r3,r2,4
   84f0c:	14c00017 	ldw	r19,0(r2)
   84f10:	002d883a 	mov	r22,zero
   84f14:	80800094 	ori	r2,r16,2
   84f18:	2002ca16 	blt	r4,zero,85a44 <___vfprintf_internal_r+0xe88>
   84f1c:	00bfdfc4 	movi	r2,-129
   84f20:	80a4703a 	and	r18,r16,r2
   84f24:	d8c02e15 	stw	r3,184(sp)
   84f28:	94800094 	ori	r18,r18,2
   84f2c:	9802b41e 	bne	r19,zero,85a00 <___vfprintf_internal_r+0xe44>
   84f30:	014002b4 	movhi	r5,10
   84f34:	29787f04 	addi	r5,r5,-7684
   84f38:	d9403915 	stw	r5,228(sp)
   84f3c:	04401e04 	movi	r17,120
   84f40:	d8802a17 	ldw	r2,168(sp)
   84f44:	0039883a 	mov	fp,zero
   84f48:	1001fa26 	beq	r2,zero,85734 <___vfprintf_internal_r+0xb78>
   84f4c:	0027883a 	mov	r19,zero
   84f50:	002d883a 	mov	r22,zero
   84f54:	00021906 	br	857bc <___vfprintf_internal_r+0xc00>
   84f58:	d9002d17 	ldw	r4,180(sp)
   84f5c:	b80b883a 	mov	r5,r23
   84f60:	0086fd00 	call	86fd0 <__swsetup_r>
   84f64:	1005dc1e 	bne	r2,zero,866d8 <___vfprintf_internal_r+0x1b1c>
   84f68:	b880030b 	ldhu	r2,12(r23)
   84f6c:	00c00284 	movi	r3,10
   84f70:	1080068c 	andi	r2,r2,26
   84f74:	10ff3a1e 	bne	r2,r3,84c60 <__ram_exceptions_end+0xfff64a2c>
   84f78:	b880038f 	ldh	r2,14(r23)
   84f7c:	103f3816 	blt	r2,zero,84c60 <__ram_exceptions_end+0xfff64a2c>
   84f80:	d9c02e17 	ldw	r7,184(sp)
   84f84:	d9002d17 	ldw	r4,180(sp)
   84f88:	a80d883a 	mov	r6,r21
   84f8c:	b80b883a 	mov	r5,r23
   84f90:	0086eb40 	call	86eb4 <__sbprintf>
   84f94:	00001106 	br	84fdc <___vfprintf_internal_r+0x420>
   84f98:	d9002d17 	ldw	r4,180(sp)
   84f9c:	d9801e04 	addi	r6,sp,120
   84fa0:	b80b883a 	mov	r5,r23
   84fa4:	0091d000 	call	91d00 <__sprint_r>
   84fa8:	1000081e 	bne	r2,zero,84fcc <___vfprintf_internal_r+0x410>
   84fac:	da000404 	addi	r8,sp,16
   84fb0:	003f5106 	br	84cf8 <__ram_exceptions_end+0xfff64ac4>
   84fb4:	d8802017 	ldw	r2,128(sp)
   84fb8:	10000426 	beq	r2,zero,84fcc <___vfprintf_internal_r+0x410>
   84fbc:	d9002d17 	ldw	r4,180(sp)
   84fc0:	d9801e04 	addi	r6,sp,120
   84fc4:	b80b883a 	mov	r5,r23
   84fc8:	0091d000 	call	91d00 <__sprint_r>
   84fcc:	b880030b 	ldhu	r2,12(r23)
   84fd0:	1080100c 	andi	r2,r2,64
   84fd4:	1005c01e 	bne	r2,zero,866d8 <___vfprintf_internal_r+0x1b1c>
   84fd8:	d8802f17 	ldw	r2,188(sp)
   84fdc:	dfc04717 	ldw	ra,284(sp)
   84fe0:	df004617 	ldw	fp,280(sp)
   84fe4:	ddc04517 	ldw	r23,276(sp)
   84fe8:	dd804417 	ldw	r22,272(sp)
   84fec:	dd404317 	ldw	r21,268(sp)
   84ff0:	dd004217 	ldw	r20,264(sp)
   84ff4:	dcc04117 	ldw	r19,260(sp)
   84ff8:	dc804017 	ldw	r18,256(sp)
   84ffc:	dc403f17 	ldw	r17,252(sp)
   85000:	dc003e17 	ldw	r16,248(sp)
   85004:	dec04804 	addi	sp,sp,288
   85008:	f800283a 	ret
   8500c:	d9002d17 	ldw	r4,180(sp)
   85010:	00890300 	call	89030 <__sinit>
   85014:	003f0206 	br	84c20 <__ram_exceptions_end+0xfff649ec>
   85018:	d9002e17 	ldw	r4,184(sp)
   8501c:	d9402e17 	ldw	r5,184(sp)
   85020:	21000017 	ldw	r4,0(r4)
   85024:	28800104 	addi	r2,r5,4
   85028:	d9003115 	stw	r4,196(sp)
   8502c:	203fa716 	blt	r4,zero,84ecc <__ram_exceptions_end+0xfff64c98>
   85030:	d8802e15 	stw	r2,184(sp)
   85034:	ac400007 	ldb	r17,0(r21)
   85038:	003f4206 	br	84d44 <__ram_exceptions_end+0xfff64b10>
   8503c:	ac400007 	ldb	r17,0(r21)
   85040:	01000a84 	movi	r4,42
   85044:	a8c00044 	addi	r3,r21,1
   85048:	89075826 	beq	r17,r4,86dac <___vfprintf_internal_r+0x21f0>
   8504c:	8cbff404 	addi	r18,r17,-48
   85050:	b486ae36 	bltu	r22,r18,86b0c <___vfprintf_internal_r+0x1f50>
   85054:	0009883a 	mov	r4,zero
   85058:	1823883a 	mov	r17,r3
   8505c:	01400284 	movi	r5,10
   85060:	00822140 	call	82214 <__mulsi3>
   85064:	88c00007 	ldb	r3,0(r17)
   85068:	1489883a 	add	r4,r2,r18
   8506c:	8d400044 	addi	r21,r17,1
   85070:	1cbff404 	addi	r18,r3,-48
   85074:	a823883a 	mov	r17,r21
   85078:	b4bff82e 	bgeu	r22,r18,8505c <__ram_exceptions_end+0xfff64e28>
   8507c:	1823883a 	mov	r17,r3
   85080:	2005f616 	blt	r4,zero,8685c <___vfprintf_internal_r+0x1ca0>
   85084:	d9002a15 	stw	r4,168(sp)
   85088:	003f2f06 	br	84d48 <__ram_exceptions_end+0xfff64b14>
   8508c:	84002014 	ori	r16,r16,128
   85090:	ac400007 	ldb	r17,0(r21)
   85094:	003f2b06 	br	84d44 <__ram_exceptions_end+0xfff64b10>
   85098:	8cbff404 	addi	r18,r17,-48
   8509c:	d8003115 	stw	zero,196(sp)
   850a0:	0009883a 	mov	r4,zero
   850a4:	a823883a 	mov	r17,r21
   850a8:	01400284 	movi	r5,10
   850ac:	00822140 	call	82214 <__mulsi3>
   850b0:	88c00007 	ldb	r3,0(r17)
   850b4:	9089883a 	add	r4,r18,r2
   850b8:	ad400044 	addi	r21,r21,1
   850bc:	1cbff404 	addi	r18,r3,-48
   850c0:	a823883a 	mov	r17,r21
   850c4:	b4bff82e 	bgeu	r22,r18,850a8 <__ram_exceptions_end+0xfff64e74>
   850c8:	1823883a 	mov	r17,r3
   850cc:	d9003115 	stw	r4,196(sp)
   850d0:	003f1d06 	br	84d48 <__ram_exceptions_end+0xfff64b14>
   850d4:	8025883a 	mov	r18,r16
   850d8:	dc002903 	ldbu	r16,164(sp)
   850dc:	e011883a 	mov	r8,fp
   850e0:	84003fcc 	andi	r16,r16,255
   850e4:	8007531e 	bne	r16,zero,86e34 <___vfprintf_internal_r+0x2278>
   850e8:	94800414 	ori	r18,r18,16
   850ec:	9080080c 	andi	r2,r18,32
   850f0:	1003a326 	beq	r2,zero,85f80 <___vfprintf_internal_r+0x13c4>
   850f4:	d9002e17 	ldw	r4,184(sp)
   850f8:	20800117 	ldw	r2,4(r4)
   850fc:	24c00017 	ldw	r19,0(r4)
   85100:	21000204 	addi	r4,r4,8
   85104:	d9002e15 	stw	r4,184(sp)
   85108:	102d883a 	mov	r22,r2
   8510c:	10047316 	blt	r2,zero,862dc <___vfprintf_internal_r+0x1720>
   85110:	d9002a17 	ldw	r4,168(sp)
   85114:	df002783 	ldbu	fp,158(sp)
   85118:	2003e416 	blt	r4,zero,860ac <___vfprintf_internal_r+0x14f0>
   8511c:	00ffdfc4 	movi	r3,-129
   85120:	9d84b03a 	or	r2,r19,r22
   85124:	90e4703a 	and	r18,r18,r3
   85128:	10018026 	beq	r2,zero,8572c <___vfprintf_internal_r+0xb70>
   8512c:	b003ab26 	beq	r22,zero,85fdc <___vfprintf_internal_r+0x1420>
   85130:	dc402915 	stw	r17,164(sp)
   85134:	dc001e04 	addi	r16,sp,120
   85138:	b023883a 	mov	r17,r22
   8513c:	402d883a 	mov	r22,r8
   85140:	9809883a 	mov	r4,r19
   85144:	880b883a 	mov	r5,r17
   85148:	01800284 	movi	r6,10
   8514c:	000f883a 	mov	r7,zero
   85150:	009643c0 	call	9643c <__umoddi3>
   85154:	10800c04 	addi	r2,r2,48
   85158:	843fffc4 	addi	r16,r16,-1
   8515c:	9809883a 	mov	r4,r19
   85160:	880b883a 	mov	r5,r17
   85164:	80800005 	stb	r2,0(r16)
   85168:	01800284 	movi	r6,10
   8516c:	000f883a 	mov	r7,zero
   85170:	0095e400 	call	95e40 <__udivdi3>
   85174:	1027883a 	mov	r19,r2
   85178:	10c4b03a 	or	r2,r2,r3
   8517c:	1823883a 	mov	r17,r3
   85180:	103fef1e 	bne	r2,zero,85140 <__ram_exceptions_end+0xfff64f0c>
   85184:	d8c02817 	ldw	r3,160(sp)
   85188:	dc402917 	ldw	r17,164(sp)
   8518c:	b011883a 	mov	r8,r22
   85190:	1c07c83a 	sub	r3,r3,r16
   85194:	d8c02b15 	stw	r3,172(sp)
   85198:	00005f06 	br	85318 <___vfprintf_internal_r+0x75c>
   8519c:	8025883a 	mov	r18,r16
   851a0:	dc002903 	ldbu	r16,164(sp)
   851a4:	e011883a 	mov	r8,fp
   851a8:	84003fcc 	andi	r16,r16,255
   851ac:	80071e1e 	bne	r16,zero,86e28 <___vfprintf_internal_r+0x226c>
   851b0:	9080020c 	andi	r2,r18,8
   851b4:	1004af26 	beq	r2,zero,86474 <___vfprintf_internal_r+0x18b8>
   851b8:	d9002e17 	ldw	r4,184(sp)
   851bc:	d9402e17 	ldw	r5,184(sp)
   851c0:	d8802e17 	ldw	r2,184(sp)
   851c4:	21000017 	ldw	r4,0(r4)
   851c8:	29400117 	ldw	r5,4(r5)
   851cc:	10800204 	addi	r2,r2,8
   851d0:	d9003615 	stw	r4,216(sp)
   851d4:	d9403815 	stw	r5,224(sp)
   851d8:	d8802e15 	stw	r2,184(sp)
   851dc:	d9003617 	ldw	r4,216(sp)
   851e0:	d9403817 	ldw	r5,224(sp)
   851e4:	da003d15 	stw	r8,244(sp)
   851e8:	04000044 	movi	r16,1
   851ec:	008bd8c0 	call	8bd8c <__fpclassifyd>
   851f0:	da003d17 	ldw	r8,244(sp)
   851f4:	1404441e 	bne	r2,r16,86308 <___vfprintf_internal_r+0x174c>
   851f8:	d9003617 	ldw	r4,216(sp)
   851fc:	d9403817 	ldw	r5,224(sp)
   85200:	000d883a 	mov	r6,zero
   85204:	000f883a 	mov	r7,zero
   85208:	0097fdc0 	call	97fdc <__ledf2>
   8520c:	da003d17 	ldw	r8,244(sp)
   85210:	1005e316 	blt	r2,zero,869a0 <___vfprintf_internal_r+0x1de4>
   85214:	df002783 	ldbu	fp,158(sp)
   85218:	008011c4 	movi	r2,71
   8521c:	1445580e 	bge	r2,r17,86780 <___vfprintf_internal_r+0x1bc4>
   85220:	040002b4 	movhi	r16,10
   85224:	84387704 	addi	r16,r16,-7716
   85228:	00c000c4 	movi	r3,3
   8522c:	00bfdfc4 	movi	r2,-129
   85230:	d8c02915 	stw	r3,164(sp)
   85234:	90a4703a 	and	r18,r18,r2
   85238:	d8c02b15 	stw	r3,172(sp)
   8523c:	d8002a15 	stw	zero,168(sp)
   85240:	d8003215 	stw	zero,200(sp)
   85244:	00003a06 	br	85330 <___vfprintf_internal_r+0x774>
   85248:	84000214 	ori	r16,r16,8
   8524c:	ac400007 	ldb	r17,0(r21)
   85250:	003ebc06 	br	84d44 <__ram_exceptions_end+0xfff64b10>
   85254:	8025883a 	mov	r18,r16
   85258:	dc002903 	ldbu	r16,164(sp)
   8525c:	e011883a 	mov	r8,fp
   85260:	84003fcc 	andi	r16,r16,255
   85264:	8007001e 	bne	r16,zero,86e68 <___vfprintf_internal_r+0x22ac>
   85268:	94800414 	ori	r18,r18,16
   8526c:	9080080c 	andi	r2,r18,32
   85270:	1002fa26 	beq	r2,zero,85e5c <___vfprintf_internal_r+0x12a0>
   85274:	d9002e17 	ldw	r4,184(sp)
   85278:	d9402a17 	ldw	r5,168(sp)
   8527c:	d8002785 	stb	zero,158(sp)
   85280:	20800204 	addi	r2,r4,8
   85284:	24c00017 	ldw	r19,0(r4)
   85288:	25800117 	ldw	r22,4(r4)
   8528c:	2804b116 	blt	r5,zero,86554 <___vfprintf_internal_r+0x1998>
   85290:	013fdfc4 	movi	r4,-129
   85294:	9d86b03a 	or	r3,r19,r22
   85298:	d8802e15 	stw	r2,184(sp)
   8529c:	9124703a 	and	r18,r18,r4
   852a0:	1802fb1e 	bne	r3,zero,85e90 <___vfprintf_internal_r+0x12d4>
   852a4:	d8c02a17 	ldw	r3,168(sp)
   852a8:	0039883a 	mov	fp,zero
   852ac:	1805e526 	beq	r3,zero,86a44 <___vfprintf_internal_r+0x1e88>
   852b0:	0027883a 	mov	r19,zero
   852b4:	002d883a 	mov	r22,zero
   852b8:	dc001e04 	addi	r16,sp,120
   852bc:	9806d0fa 	srli	r3,r19,3
   852c0:	b008977a 	slli	r4,r22,29
   852c4:	b02cd0fa 	srli	r22,r22,3
   852c8:	9cc001cc 	andi	r19,r19,7
   852cc:	98800c04 	addi	r2,r19,48
   852d0:	843fffc4 	addi	r16,r16,-1
   852d4:	20e6b03a 	or	r19,r4,r3
   852d8:	80800005 	stb	r2,0(r16)
   852dc:	9d86b03a 	or	r3,r19,r22
   852e0:	183ff61e 	bne	r3,zero,852bc <__ram_exceptions_end+0xfff65088>
   852e4:	90c0004c 	andi	r3,r18,1
   852e8:	18014126 	beq	r3,zero,857f0 <___vfprintf_internal_r+0xc34>
   852ec:	10803fcc 	andi	r2,r2,255
   852f0:	1080201c 	xori	r2,r2,128
   852f4:	10bfe004 	addi	r2,r2,-128
   852f8:	00c00c04 	movi	r3,48
   852fc:	10c13c26 	beq	r2,r3,857f0 <___vfprintf_internal_r+0xc34>
   85300:	80ffffc5 	stb	r3,-1(r16)
   85304:	d8c02817 	ldw	r3,160(sp)
   85308:	80bfffc4 	addi	r2,r16,-1
   8530c:	1021883a 	mov	r16,r2
   85310:	1887c83a 	sub	r3,r3,r2
   85314:	d8c02b15 	stw	r3,172(sp)
   85318:	d8802b17 	ldw	r2,172(sp)
   8531c:	d9002a17 	ldw	r4,168(sp)
   85320:	1100010e 	bge	r2,r4,85328 <___vfprintf_internal_r+0x76c>
   85324:	2005883a 	mov	r2,r4
   85328:	d8802915 	stw	r2,164(sp)
   8532c:	d8003215 	stw	zero,200(sp)
   85330:	e7003fcc 	andi	fp,fp,255
   85334:	e700201c 	xori	fp,fp,128
   85338:	e73fe004 	addi	fp,fp,-128
   8533c:	e0000326 	beq	fp,zero,8534c <___vfprintf_internal_r+0x790>
   85340:	d8c02917 	ldw	r3,164(sp)
   85344:	18c00044 	addi	r3,r3,1
   85348:	d8c02915 	stw	r3,164(sp)
   8534c:	90c0008c 	andi	r3,r18,2
   85350:	d8c02c15 	stw	r3,176(sp)
   85354:	18000326 	beq	r3,zero,85364 <___vfprintf_internal_r+0x7a8>
   85358:	d8c02917 	ldw	r3,164(sp)
   8535c:	18c00084 	addi	r3,r3,2
   85360:	d8c02915 	stw	r3,164(sp)
   85364:	90c0210c 	andi	r3,r18,132
   85368:	d8c03015 	stw	r3,192(sp)
   8536c:	1801c51e 	bne	r3,zero,85a84 <___vfprintf_internal_r+0xec8>
   85370:	d9003117 	ldw	r4,196(sp)
   85374:	d8c02917 	ldw	r3,164(sp)
   85378:	20e7c83a 	sub	r19,r4,r3
   8537c:	04c1c10e 	bge	zero,r19,85a84 <___vfprintf_internal_r+0xec8>
   85380:	02400404 	movi	r9,16
   85384:	d8c02017 	ldw	r3,128(sp)
   85388:	d8801f17 	ldw	r2,124(sp)
   8538c:	4cc52f0e 	bge	r9,r19,8684c <___vfprintf_internal_r+0x1c90>
   85390:	014002b4 	movhi	r5,10
   85394:	29788a84 	addi	r5,r5,-7638
   85398:	dc403b15 	stw	r17,236(sp)
   8539c:	d9403515 	stw	r5,212(sp)
   853a0:	9823883a 	mov	r17,r19
   853a4:	482d883a 	mov	r22,r9
   853a8:	9027883a 	mov	r19,r18
   853ac:	070001c4 	movi	fp,7
   853b0:	8025883a 	mov	r18,r16
   853b4:	dc002d17 	ldw	r16,180(sp)
   853b8:	00000306 	br	853c8 <___vfprintf_internal_r+0x80c>
   853bc:	8c7ffc04 	addi	r17,r17,-16
   853c0:	42000204 	addi	r8,r8,8
   853c4:	b440130e 	bge	r22,r17,85414 <___vfprintf_internal_r+0x858>
   853c8:	010002b4 	movhi	r4,10
   853cc:	18c00404 	addi	r3,r3,16
   853d0:	10800044 	addi	r2,r2,1
   853d4:	21388a84 	addi	r4,r4,-7638
   853d8:	41000015 	stw	r4,0(r8)
   853dc:	45800115 	stw	r22,4(r8)
   853e0:	d8c02015 	stw	r3,128(sp)
   853e4:	d8801f15 	stw	r2,124(sp)
   853e8:	e0bff40e 	bge	fp,r2,853bc <__ram_exceptions_end+0xfff65188>
   853ec:	d9801e04 	addi	r6,sp,120
   853f0:	b80b883a 	mov	r5,r23
   853f4:	8009883a 	mov	r4,r16
   853f8:	0091d000 	call	91d00 <__sprint_r>
   853fc:	103ef31e 	bne	r2,zero,84fcc <__ram_exceptions_end+0xfff64d98>
   85400:	8c7ffc04 	addi	r17,r17,-16
   85404:	d8c02017 	ldw	r3,128(sp)
   85408:	d8801f17 	ldw	r2,124(sp)
   8540c:	da000404 	addi	r8,sp,16
   85410:	b47fed16 	blt	r22,r17,853c8 <__ram_exceptions_end+0xfff65194>
   85414:	9021883a 	mov	r16,r18
   85418:	9825883a 	mov	r18,r19
   8541c:	8827883a 	mov	r19,r17
   85420:	dc403b17 	ldw	r17,236(sp)
   85424:	d9403517 	ldw	r5,212(sp)
   85428:	98c7883a 	add	r3,r19,r3
   8542c:	10800044 	addi	r2,r2,1
   85430:	41400015 	stw	r5,0(r8)
   85434:	44c00115 	stw	r19,4(r8)
   85438:	d8c02015 	stw	r3,128(sp)
   8543c:	d8801f15 	stw	r2,124(sp)
   85440:	010001c4 	movi	r4,7
   85444:	2082c516 	blt	r4,r2,85f5c <___vfprintf_internal_r+0x13a0>
   85448:	df002787 	ldb	fp,158(sp)
   8544c:	42000204 	addi	r8,r8,8
   85450:	e0000c26 	beq	fp,zero,85484 <___vfprintf_internal_r+0x8c8>
   85454:	d8801f17 	ldw	r2,124(sp)
   85458:	d9002784 	addi	r4,sp,158
   8545c:	18c00044 	addi	r3,r3,1
   85460:	10800044 	addi	r2,r2,1
   85464:	41000015 	stw	r4,0(r8)
   85468:	01000044 	movi	r4,1
   8546c:	41000115 	stw	r4,4(r8)
   85470:	d8c02015 	stw	r3,128(sp)
   85474:	d8801f15 	stw	r2,124(sp)
   85478:	010001c4 	movi	r4,7
   8547c:	20825e16 	blt	r4,r2,85df8 <___vfprintf_internal_r+0x123c>
   85480:	42000204 	addi	r8,r8,8
   85484:	d8802c17 	ldw	r2,176(sp)
   85488:	10000c26 	beq	r2,zero,854bc <___vfprintf_internal_r+0x900>
   8548c:	d8801f17 	ldw	r2,124(sp)
   85490:	d9002704 	addi	r4,sp,156
   85494:	18c00084 	addi	r3,r3,2
   85498:	10800044 	addi	r2,r2,1
   8549c:	41000015 	stw	r4,0(r8)
   854a0:	01000084 	movi	r4,2
   854a4:	41000115 	stw	r4,4(r8)
   854a8:	d8c02015 	stw	r3,128(sp)
   854ac:	d8801f15 	stw	r2,124(sp)
   854b0:	010001c4 	movi	r4,7
   854b4:	20825816 	blt	r4,r2,85e18 <___vfprintf_internal_r+0x125c>
   854b8:	42000204 	addi	r8,r8,8
   854bc:	d9003017 	ldw	r4,192(sp)
   854c0:	00802004 	movi	r2,128
   854c4:	2081bb26 	beq	r4,r2,85bb4 <___vfprintf_internal_r+0xff8>
   854c8:	d9402a17 	ldw	r5,168(sp)
   854cc:	d8802b17 	ldw	r2,172(sp)
   854d0:	28adc83a 	sub	r22,r5,r2
   854d4:	0580310e 	bge	zero,r22,8559c <___vfprintf_internal_r+0x9e0>
   854d8:	07000404 	movi	fp,16
   854dc:	d8801f17 	ldw	r2,124(sp)
   854e0:	e584360e 	bge	fp,r22,865bc <___vfprintf_internal_r+0x1a00>
   854e4:	014002b4 	movhi	r5,10
   854e8:	29788684 	addi	r5,r5,-7654
   854ec:	dc402a15 	stw	r17,168(sp)
   854f0:	d9402c15 	stw	r5,176(sp)
   854f4:	b023883a 	mov	r17,r22
   854f8:	04c001c4 	movi	r19,7
   854fc:	a82d883a 	mov	r22,r21
   85500:	902b883a 	mov	r21,r18
   85504:	8025883a 	mov	r18,r16
   85508:	dc002d17 	ldw	r16,180(sp)
   8550c:	00000306 	br	8551c <___vfprintf_internal_r+0x960>
   85510:	8c7ffc04 	addi	r17,r17,-16
   85514:	42000204 	addi	r8,r8,8
   85518:	e440110e 	bge	fp,r17,85560 <___vfprintf_internal_r+0x9a4>
   8551c:	18c00404 	addi	r3,r3,16
   85520:	10800044 	addi	r2,r2,1
   85524:	45000015 	stw	r20,0(r8)
   85528:	47000115 	stw	fp,4(r8)
   8552c:	d8c02015 	stw	r3,128(sp)
   85530:	d8801f15 	stw	r2,124(sp)
   85534:	98bff60e 	bge	r19,r2,85510 <__ram_exceptions_end+0xfff652dc>
   85538:	d9801e04 	addi	r6,sp,120
   8553c:	b80b883a 	mov	r5,r23
   85540:	8009883a 	mov	r4,r16
   85544:	0091d000 	call	91d00 <__sprint_r>
   85548:	103ea01e 	bne	r2,zero,84fcc <__ram_exceptions_end+0xfff64d98>
   8554c:	8c7ffc04 	addi	r17,r17,-16
   85550:	d8c02017 	ldw	r3,128(sp)
   85554:	d8801f17 	ldw	r2,124(sp)
   85558:	da000404 	addi	r8,sp,16
   8555c:	e47fef16 	blt	fp,r17,8551c <__ram_exceptions_end+0xfff652e8>
   85560:	9021883a 	mov	r16,r18
   85564:	a825883a 	mov	r18,r21
   85568:	b02b883a 	mov	r21,r22
   8556c:	882d883a 	mov	r22,r17
   85570:	dc402a17 	ldw	r17,168(sp)
   85574:	d9002c17 	ldw	r4,176(sp)
   85578:	1d87883a 	add	r3,r3,r22
   8557c:	10800044 	addi	r2,r2,1
   85580:	41000015 	stw	r4,0(r8)
   85584:	45800115 	stw	r22,4(r8)
   85588:	d8c02015 	stw	r3,128(sp)
   8558c:	d8801f15 	stw	r2,124(sp)
   85590:	010001c4 	movi	r4,7
   85594:	20821016 	blt	r4,r2,85dd8 <___vfprintf_internal_r+0x121c>
   85598:	42000204 	addi	r8,r8,8
   8559c:	9080400c 	andi	r2,r18,256
   855a0:	10013a1e 	bne	r2,zero,85a8c <___vfprintf_internal_r+0xed0>
   855a4:	d9402b17 	ldw	r5,172(sp)
   855a8:	d8801f17 	ldw	r2,124(sp)
   855ac:	44000015 	stw	r16,0(r8)
   855b0:	1947883a 	add	r3,r3,r5
   855b4:	10800044 	addi	r2,r2,1
   855b8:	41400115 	stw	r5,4(r8)
   855bc:	d8c02015 	stw	r3,128(sp)
   855c0:	d8801f15 	stw	r2,124(sp)
   855c4:	010001c4 	movi	r4,7
   855c8:	2081f516 	blt	r4,r2,85da0 <___vfprintf_internal_r+0x11e4>
   855cc:	42000204 	addi	r8,r8,8
   855d0:	9480010c 	andi	r18,r18,4
   855d4:	90003226 	beq	r18,zero,856a0 <___vfprintf_internal_r+0xae4>
   855d8:	d9403117 	ldw	r5,196(sp)
   855dc:	d8802917 	ldw	r2,164(sp)
   855e0:	28a1c83a 	sub	r16,r5,r2
   855e4:	04002e0e 	bge	zero,r16,856a0 <___vfprintf_internal_r+0xae4>
   855e8:	04400404 	movi	r17,16
   855ec:	d8801f17 	ldw	r2,124(sp)
   855f0:	8c04c40e 	bge	r17,r16,86904 <___vfprintf_internal_r+0x1d48>
   855f4:	014002b4 	movhi	r5,10
   855f8:	29788a84 	addi	r5,r5,-7638
   855fc:	d9403515 	stw	r5,212(sp)
   85600:	048001c4 	movi	r18,7
   85604:	dcc02d17 	ldw	r19,180(sp)
   85608:	00000306 	br	85618 <___vfprintf_internal_r+0xa5c>
   8560c:	843ffc04 	addi	r16,r16,-16
   85610:	42000204 	addi	r8,r8,8
   85614:	8c00130e 	bge	r17,r16,85664 <___vfprintf_internal_r+0xaa8>
   85618:	010002b4 	movhi	r4,10
   8561c:	18c00404 	addi	r3,r3,16
   85620:	10800044 	addi	r2,r2,1
   85624:	21388a84 	addi	r4,r4,-7638
   85628:	41000015 	stw	r4,0(r8)
   8562c:	44400115 	stw	r17,4(r8)
   85630:	d8c02015 	stw	r3,128(sp)
   85634:	d8801f15 	stw	r2,124(sp)
   85638:	90bff40e 	bge	r18,r2,8560c <__ram_exceptions_end+0xfff653d8>
   8563c:	d9801e04 	addi	r6,sp,120
   85640:	b80b883a 	mov	r5,r23
   85644:	9809883a 	mov	r4,r19
   85648:	0091d000 	call	91d00 <__sprint_r>
   8564c:	103e5f1e 	bne	r2,zero,84fcc <__ram_exceptions_end+0xfff64d98>
   85650:	843ffc04 	addi	r16,r16,-16
   85654:	d8c02017 	ldw	r3,128(sp)
   85658:	d8801f17 	ldw	r2,124(sp)
   8565c:	da000404 	addi	r8,sp,16
   85660:	8c3fed16 	blt	r17,r16,85618 <__ram_exceptions_end+0xfff653e4>
   85664:	d9403517 	ldw	r5,212(sp)
   85668:	1c07883a 	add	r3,r3,r16
   8566c:	10800044 	addi	r2,r2,1
   85670:	41400015 	stw	r5,0(r8)
   85674:	44000115 	stw	r16,4(r8)
   85678:	d8c02015 	stw	r3,128(sp)
   8567c:	d8801f15 	stw	r2,124(sp)
   85680:	010001c4 	movi	r4,7
   85684:	2080060e 	bge	r4,r2,856a0 <___vfprintf_internal_r+0xae4>
   85688:	d9002d17 	ldw	r4,180(sp)
   8568c:	d9801e04 	addi	r6,sp,120
   85690:	b80b883a 	mov	r5,r23
   85694:	0091d000 	call	91d00 <__sprint_r>
   85698:	103e4c1e 	bne	r2,zero,84fcc <__ram_exceptions_end+0xfff64d98>
   8569c:	d8c02017 	ldw	r3,128(sp)
   856a0:	d8803117 	ldw	r2,196(sp)
   856a4:	d9002917 	ldw	r4,164(sp)
   856a8:	1100010e 	bge	r2,r4,856b0 <___vfprintf_internal_r+0xaf4>
   856ac:	2005883a 	mov	r2,r4
   856b0:	d9402f17 	ldw	r5,188(sp)
   856b4:	288b883a 	add	r5,r5,r2
   856b8:	d9402f15 	stw	r5,188(sp)
   856bc:	1801c01e 	bne	r3,zero,85dc0 <___vfprintf_internal_r+0x1204>
   856c0:	a8800007 	ldb	r2,0(r21)
   856c4:	d8001f15 	stw	zero,124(sp)
   856c8:	da000404 	addi	r8,sp,16
   856cc:	103d751e 	bne	r2,zero,84ca4 <__ram_exceptions_end+0xfff64a70>
   856d0:	a823883a 	mov	r17,r21
   856d4:	003d8b06 	br	84d04 <__ram_exceptions_end+0xfff64ad0>
   856d8:	8025883a 	mov	r18,r16
   856dc:	dc002903 	ldbu	r16,164(sp)
   856e0:	e011883a 	mov	r8,fp
   856e4:	84003fcc 	andi	r16,r16,255
   856e8:	8005e51e 	bne	r16,zero,86e80 <___vfprintf_internal_r+0x22c4>
   856ec:	94800414 	ori	r18,r18,16
   856f0:	9080080c 	andi	r2,r18,32
   856f4:	10022b26 	beq	r2,zero,85fa4 <___vfprintf_internal_r+0x13e8>
   856f8:	d9002e17 	ldw	r4,184(sp)
   856fc:	d9402a17 	ldw	r5,168(sp)
   85700:	d8002785 	stb	zero,158(sp)
   85704:	20c00204 	addi	r3,r4,8
   85708:	24c00017 	ldw	r19,0(r4)
   8570c:	25800117 	ldw	r22,4(r4)
   85710:	28042e16 	blt	r5,zero,867cc <___vfprintf_internal_r+0x1c10>
   85714:	013fdfc4 	movi	r4,-129
   85718:	9d84b03a 	or	r2,r19,r22
   8571c:	d8c02e15 	stw	r3,184(sp)
   85720:	9124703a 	and	r18,r18,r4
   85724:	0039883a 	mov	fp,zero
   85728:	103e801e 	bne	r2,zero,8512c <__ram_exceptions_end+0xfff64ef8>
   8572c:	d9002a17 	ldw	r4,168(sp)
   85730:	2002e01e 	bne	r4,zero,862b4 <___vfprintf_internal_r+0x16f8>
   85734:	d8002a15 	stw	zero,168(sp)
   85738:	d8002b15 	stw	zero,172(sp)
   8573c:	dc001e04 	addi	r16,sp,120
   85740:	003ef506 	br	85318 <__ram_exceptions_end+0xfff650e4>
   85744:	8025883a 	mov	r18,r16
   85748:	dc002903 	ldbu	r16,164(sp)
   8574c:	e011883a 	mov	r8,fp
   85750:	84003fcc 	andi	r16,r16,255
   85754:	8005ba1e 	bne	r16,zero,86e40 <___vfprintf_internal_r+0x2284>
   85758:	010002b4 	movhi	r4,10
   8575c:	21387a04 	addi	r4,r4,-7704
   85760:	d9003915 	stw	r4,228(sp)
   85764:	9080080c 	andi	r2,r18,32
   85768:	10006126 	beq	r2,zero,858f0 <___vfprintf_internal_r+0xd34>
   8576c:	d9402e17 	ldw	r5,184(sp)
   85770:	2cc00017 	ldw	r19,0(r5)
   85774:	2d800117 	ldw	r22,4(r5)
   85778:	29400204 	addi	r5,r5,8
   8577c:	d9402e15 	stw	r5,184(sp)
   85780:	9080004c 	andi	r2,r18,1
   85784:	1001ac26 	beq	r2,zero,85e38 <___vfprintf_internal_r+0x127c>
   85788:	9d84b03a 	or	r2,r19,r22
   8578c:	10038526 	beq	r2,zero,865a4 <___vfprintf_internal_r+0x19e8>
   85790:	d8c02a17 	ldw	r3,168(sp)
   85794:	00800c04 	movi	r2,48
   85798:	d8802705 	stb	r2,156(sp)
   8579c:	dc402745 	stb	r17,157(sp)
   857a0:	d8002785 	stb	zero,158(sp)
   857a4:	90800094 	ori	r2,r18,2
   857a8:	18047916 	blt	r3,zero,86990 <___vfprintf_internal_r+0x1dd4>
   857ac:	00bfdfc4 	movi	r2,-129
   857b0:	90a4703a 	and	r18,r18,r2
   857b4:	94800094 	ori	r18,r18,2
   857b8:	0039883a 	mov	fp,zero
   857bc:	d9003917 	ldw	r4,228(sp)
   857c0:	dc001e04 	addi	r16,sp,120
   857c4:	988003cc 	andi	r2,r19,15
   857c8:	b006973a 	slli	r3,r22,28
   857cc:	2085883a 	add	r2,r4,r2
   857d0:	9826d13a 	srli	r19,r19,4
   857d4:	10800003 	ldbu	r2,0(r2)
   857d8:	b02cd13a 	srli	r22,r22,4
   857dc:	843fffc4 	addi	r16,r16,-1
   857e0:	1ce6b03a 	or	r19,r3,r19
   857e4:	80800005 	stb	r2,0(r16)
   857e8:	9d84b03a 	or	r2,r19,r22
   857ec:	103ff51e 	bne	r2,zero,857c4 <__ram_exceptions_end+0xfff65590>
   857f0:	d8c02817 	ldw	r3,160(sp)
   857f4:	1c07c83a 	sub	r3,r3,r16
   857f8:	d8c02b15 	stw	r3,172(sp)
   857fc:	003ec606 	br	85318 <__ram_exceptions_end+0xfff650e4>
   85800:	8025883a 	mov	r18,r16
   85804:	dc002903 	ldbu	r16,164(sp)
   85808:	e011883a 	mov	r8,fp
   8580c:	84003fcc 	andi	r16,r16,255
   85810:	803e9626 	beq	r16,zero,8526c <__ram_exceptions_end+0xfff65038>
   85814:	d8c02b03 	ldbu	r3,172(sp)
   85818:	d8c02785 	stb	r3,158(sp)
   8581c:	003e9306 	br	8526c <__ram_exceptions_end+0xfff65038>
   85820:	00c00044 	movi	r3,1
   85824:	d8c02905 	stb	r3,164(sp)
   85828:	00c00ac4 	movi	r3,43
   8582c:	d8c02b05 	stb	r3,172(sp)
   85830:	ac400007 	ldb	r17,0(r21)
   85834:	003d4306 	br	84d44 <__ram_exceptions_end+0xfff64b10>
   85838:	84000814 	ori	r16,r16,32
   8583c:	ac400007 	ldb	r17,0(r21)
   85840:	003d4006 	br	84d44 <__ram_exceptions_end+0xfff64b10>
   85844:	d8802e17 	ldw	r2,184(sp)
   85848:	8025883a 	mov	r18,r16
   8584c:	d8002785 	stb	zero,158(sp)
   85850:	14000017 	ldw	r16,0(r2)
   85854:	e011883a 	mov	r8,fp
   85858:	14c00104 	addi	r19,r2,4
   8585c:	80042d26 	beq	r16,zero,86914 <___vfprintf_internal_r+0x1d58>
   85860:	d8c02a17 	ldw	r3,168(sp)
   85864:	1803e416 	blt	r3,zero,867f8 <___vfprintf_internal_r+0x1c3c>
   85868:	180d883a 	mov	r6,r3
   8586c:	000b883a 	mov	r5,zero
   85870:	8009883a 	mov	r4,r16
   85874:	df003d15 	stw	fp,244(sp)
   85878:	008a0500 	call	8a050 <memchr>
   8587c:	da003d17 	ldw	r8,244(sp)
   85880:	10046826 	beq	r2,zero,86a24 <___vfprintf_internal_r+0x1e68>
   85884:	1405c83a 	sub	r2,r2,r16
   85888:	d8802b15 	stw	r2,172(sp)
   8588c:	1003e016 	blt	r2,zero,86810 <___vfprintf_internal_r+0x1c54>
   85890:	df002783 	ldbu	fp,158(sp)
   85894:	d8802915 	stw	r2,164(sp)
   85898:	dcc02e15 	stw	r19,184(sp)
   8589c:	d8002a15 	stw	zero,168(sp)
   858a0:	d8003215 	stw	zero,200(sp)
   858a4:	003ea206 	br	85330 <__ram_exceptions_end+0xfff650fc>
   858a8:	8025883a 	mov	r18,r16
   858ac:	dc002903 	ldbu	r16,164(sp)
   858b0:	e011883a 	mov	r8,fp
   858b4:	84003fcc 	andi	r16,r16,255
   858b8:	803f8d26 	beq	r16,zero,856f0 <__ram_exceptions_end+0xfff654bc>
   858bc:	d8c02b03 	ldbu	r3,172(sp)
   858c0:	d8c02785 	stb	r3,158(sp)
   858c4:	003f8a06 	br	856f0 <__ram_exceptions_end+0xfff654bc>
   858c8:	8025883a 	mov	r18,r16
   858cc:	dc002903 	ldbu	r16,164(sp)
   858d0:	e011883a 	mov	r8,fp
   858d4:	84003fcc 	andi	r16,r16,255
   858d8:	8005661e 	bne	r16,zero,86e74 <___vfprintf_internal_r+0x22b8>
   858dc:	010002b4 	movhi	r4,10
   858e0:	21387f04 	addi	r4,r4,-7684
   858e4:	d9003915 	stw	r4,228(sp)
   858e8:	9080080c 	andi	r2,r18,32
   858ec:	103f9f1e 	bne	r2,zero,8576c <__ram_exceptions_end+0xfff65538>
   858f0:	9080040c 	andi	r2,r18,16
   858f4:	1002eb26 	beq	r2,zero,864a4 <___vfprintf_internal_r+0x18e8>
   858f8:	d8802e17 	ldw	r2,184(sp)
   858fc:	002d883a 	mov	r22,zero
   85900:	14c00017 	ldw	r19,0(r2)
   85904:	10800104 	addi	r2,r2,4
   85908:	d8802e15 	stw	r2,184(sp)
   8590c:	003f9c06 	br	85780 <__ram_exceptions_end+0xfff6554c>
   85910:	d8802b07 	ldb	r2,172(sp)
   85914:	1002e11e 	bne	r2,zero,8649c <___vfprintf_internal_r+0x18e0>
   85918:	00c00044 	movi	r3,1
   8591c:	d8c02905 	stb	r3,164(sp)
   85920:	00c00804 	movi	r3,32
   85924:	d8c02b05 	stb	r3,172(sp)
   85928:	ac400007 	ldb	r17,0(r21)
   8592c:	003d0506 	br	84d44 <__ram_exceptions_end+0xfff64b10>
   85930:	84000054 	ori	r16,r16,1
   85934:	ac400007 	ldb	r17,0(r21)
   85938:	003d0206 	br	84d44 <__ram_exceptions_end+0xfff64b10>
   8593c:	8025883a 	mov	r18,r16
   85940:	dc002903 	ldbu	r16,164(sp)
   85944:	e011883a 	mov	r8,fp
   85948:	84003fcc 	andi	r16,r16,255
   8594c:	803de726 	beq	r16,zero,850ec <__ram_exceptions_end+0xfff64eb8>
   85950:	d8c02b03 	ldbu	r3,172(sp)
   85954:	d8c02785 	stb	r3,158(sp)
   85958:	003de406 	br	850ec <__ram_exceptions_end+0xfff64eb8>
   8595c:	84001014 	ori	r16,r16,64
   85960:	ac400007 	ldb	r17,0(r21)
   85964:	003cf706 	br	84d44 <__ram_exceptions_end+0xfff64b10>
   85968:	ac400007 	ldb	r17,0(r21)
   8596c:	00801b04 	movi	r2,108
   85970:	88838f26 	beq	r17,r2,867b0 <___vfprintf_internal_r+0x1bf4>
   85974:	84000414 	ori	r16,r16,16
   85978:	003cf206 	br	84d44 <__ram_exceptions_end+0xfff64b10>
   8597c:	8025883a 	mov	r18,r16
   85980:	dc002903 	ldbu	r16,164(sp)
   85984:	e011883a 	mov	r8,fp
   85988:	84003fcc 	andi	r16,r16,255
   8598c:	80053f1e 	bne	r16,zero,86e8c <___vfprintf_internal_r+0x22d0>
   85990:	9080080c 	andi	r2,r18,32
   85994:	1002d226 	beq	r2,zero,864e0 <___vfprintf_internal_r+0x1924>
   85998:	d9002e17 	ldw	r4,184(sp)
   8599c:	d9402f17 	ldw	r5,188(sp)
   859a0:	20800017 	ldw	r2,0(r4)
   859a4:	2807d7fa 	srai	r3,r5,31
   859a8:	21000104 	addi	r4,r4,4
   859ac:	d9002e15 	stw	r4,184(sp)
   859b0:	11400015 	stw	r5,0(r2)
   859b4:	10c00115 	stw	r3,4(r2)
   859b8:	003cb806 	br	84c9c <__ram_exceptions_end+0xfff64a68>
   859bc:	d8c02e17 	ldw	r3,184(sp)
   859c0:	d9002e17 	ldw	r4,184(sp)
   859c4:	8025883a 	mov	r18,r16
   859c8:	18800017 	ldw	r2,0(r3)
   859cc:	21000104 	addi	r4,r4,4
   859d0:	00c00044 	movi	r3,1
   859d4:	e011883a 	mov	r8,fp
   859d8:	d8c02915 	stw	r3,164(sp)
   859dc:	d8002785 	stb	zero,158(sp)
   859e0:	d8801405 	stb	r2,80(sp)
   859e4:	d9002e15 	stw	r4,184(sp)
   859e8:	d8c02b15 	stw	r3,172(sp)
   859ec:	d8002a15 	stw	zero,168(sp)
   859f0:	d8003215 	stw	zero,200(sp)
   859f4:	dc001404 	addi	r16,sp,80
   859f8:	0039883a 	mov	fp,zero
   859fc:	003e5306 	br	8534c <__ram_exceptions_end+0xfff65118>
   85a00:	010002b4 	movhi	r4,10
   85a04:	21387f04 	addi	r4,r4,-7684
   85a08:	0039883a 	mov	fp,zero
   85a0c:	d9003915 	stw	r4,228(sp)
   85a10:	04401e04 	movi	r17,120
   85a14:	003f6906 	br	857bc <__ram_exceptions_end+0xfff65588>
   85a18:	8025883a 	mov	r18,r16
   85a1c:	dc002903 	ldbu	r16,164(sp)
   85a20:	e011883a 	mov	r8,fp
   85a24:	84003fcc 	andi	r16,r16,255
   85a28:	8005081e 	bne	r16,zero,86e4c <___vfprintf_internal_r+0x2290>
   85a2c:	883d6126 	beq	r17,zero,84fb4 <__ram_exceptions_end+0xfff64d80>
   85a30:	00c00044 	movi	r3,1
   85a34:	d8c02915 	stw	r3,164(sp)
   85a38:	dc401405 	stb	r17,80(sp)
   85a3c:	d8002785 	stb	zero,158(sp)
   85a40:	003fe906 	br	859e8 <__ram_exceptions_end+0xfff657b4>
   85a44:	014002b4 	movhi	r5,10
   85a48:	29787f04 	addi	r5,r5,-7684
   85a4c:	d9403915 	stw	r5,228(sp)
   85a50:	d8c02e15 	stw	r3,184(sp)
   85a54:	1025883a 	mov	r18,r2
   85a58:	04401e04 	movi	r17,120
   85a5c:	9d84b03a 	or	r2,r19,r22
   85a60:	1000fc1e 	bne	r2,zero,85e54 <___vfprintf_internal_r+0x1298>
   85a64:	0039883a 	mov	fp,zero
   85a68:	00800084 	movi	r2,2
   85a6c:	10803fcc 	andi	r2,r2,255
   85a70:	00c00044 	movi	r3,1
   85a74:	10c20f26 	beq	r2,r3,862b4 <___vfprintf_internal_r+0x16f8>
   85a78:	00c00084 	movi	r3,2
   85a7c:	10fd3326 	beq	r2,r3,84f4c <__ram_exceptions_end+0xfff64d18>
   85a80:	003e0b06 	br	852b0 <__ram_exceptions_end+0xfff6507c>
   85a84:	d8c02017 	ldw	r3,128(sp)
   85a88:	003e7106 	br	85450 <__ram_exceptions_end+0xfff6521c>
   85a8c:	00801944 	movi	r2,101
   85a90:	14407e0e 	bge	r2,r17,85c8c <___vfprintf_internal_r+0x10d0>
   85a94:	d9003617 	ldw	r4,216(sp)
   85a98:	d9403817 	ldw	r5,224(sp)
   85a9c:	000d883a 	mov	r6,zero
   85aa0:	000f883a 	mov	r7,zero
   85aa4:	d8c03c15 	stw	r3,240(sp)
   85aa8:	da003d15 	stw	r8,244(sp)
   85aac:	0097e780 	call	97e78 <__eqdf2>
   85ab0:	d8c03c17 	ldw	r3,240(sp)
   85ab4:	da003d17 	ldw	r8,244(sp)
   85ab8:	1000f71e 	bne	r2,zero,85e98 <___vfprintf_internal_r+0x12dc>
   85abc:	d8801f17 	ldw	r2,124(sp)
   85ac0:	010002b4 	movhi	r4,10
   85ac4:	21388604 	addi	r4,r4,-7656
   85ac8:	18c00044 	addi	r3,r3,1
   85acc:	10800044 	addi	r2,r2,1
   85ad0:	41000015 	stw	r4,0(r8)
   85ad4:	01000044 	movi	r4,1
   85ad8:	41000115 	stw	r4,4(r8)
   85adc:	d8c02015 	stw	r3,128(sp)
   85ae0:	d8801f15 	stw	r2,124(sp)
   85ae4:	010001c4 	movi	r4,7
   85ae8:	2082b816 	blt	r4,r2,865cc <___vfprintf_internal_r+0x1a10>
   85aec:	42000204 	addi	r8,r8,8
   85af0:	d8802617 	ldw	r2,152(sp)
   85af4:	d9403317 	ldw	r5,204(sp)
   85af8:	11400216 	blt	r2,r5,85b04 <___vfprintf_internal_r+0xf48>
   85afc:	9080004c 	andi	r2,r18,1
   85b00:	103eb326 	beq	r2,zero,855d0 <__ram_exceptions_end+0xfff6539c>
   85b04:	d8803717 	ldw	r2,220(sp)
   85b08:	d9003417 	ldw	r4,208(sp)
   85b0c:	d9403717 	ldw	r5,220(sp)
   85b10:	1887883a 	add	r3,r3,r2
   85b14:	d8801f17 	ldw	r2,124(sp)
   85b18:	41000015 	stw	r4,0(r8)
   85b1c:	41400115 	stw	r5,4(r8)
   85b20:	10800044 	addi	r2,r2,1
   85b24:	d8c02015 	stw	r3,128(sp)
   85b28:	d8801f15 	stw	r2,124(sp)
   85b2c:	010001c4 	movi	r4,7
   85b30:	20832916 	blt	r4,r2,867d8 <___vfprintf_internal_r+0x1c1c>
   85b34:	42000204 	addi	r8,r8,8
   85b38:	d8803317 	ldw	r2,204(sp)
   85b3c:	143fffc4 	addi	r16,r2,-1
   85b40:	043ea30e 	bge	zero,r16,855d0 <__ram_exceptions_end+0xfff6539c>
   85b44:	04400404 	movi	r17,16
   85b48:	d8801f17 	ldw	r2,124(sp)
   85b4c:	8c00880e 	bge	r17,r16,85d70 <___vfprintf_internal_r+0x11b4>
   85b50:	014002b4 	movhi	r5,10
   85b54:	29788684 	addi	r5,r5,-7654
   85b58:	d9402c15 	stw	r5,176(sp)
   85b5c:	058001c4 	movi	r22,7
   85b60:	dcc02d17 	ldw	r19,180(sp)
   85b64:	00000306 	br	85b74 <___vfprintf_internal_r+0xfb8>
   85b68:	42000204 	addi	r8,r8,8
   85b6c:	843ffc04 	addi	r16,r16,-16
   85b70:	8c00820e 	bge	r17,r16,85d7c <___vfprintf_internal_r+0x11c0>
   85b74:	18c00404 	addi	r3,r3,16
   85b78:	10800044 	addi	r2,r2,1
   85b7c:	45000015 	stw	r20,0(r8)
   85b80:	44400115 	stw	r17,4(r8)
   85b84:	d8c02015 	stw	r3,128(sp)
   85b88:	d8801f15 	stw	r2,124(sp)
   85b8c:	b0bff60e 	bge	r22,r2,85b68 <__ram_exceptions_end+0xfff65934>
   85b90:	d9801e04 	addi	r6,sp,120
   85b94:	b80b883a 	mov	r5,r23
   85b98:	9809883a 	mov	r4,r19
   85b9c:	0091d000 	call	91d00 <__sprint_r>
   85ba0:	103d0a1e 	bne	r2,zero,84fcc <__ram_exceptions_end+0xfff64d98>
   85ba4:	d8c02017 	ldw	r3,128(sp)
   85ba8:	d8801f17 	ldw	r2,124(sp)
   85bac:	da000404 	addi	r8,sp,16
   85bb0:	003fee06 	br	85b6c <__ram_exceptions_end+0xfff65938>
   85bb4:	d9403117 	ldw	r5,196(sp)
   85bb8:	d8802917 	ldw	r2,164(sp)
   85bbc:	28adc83a 	sub	r22,r5,r2
   85bc0:	05be410e 	bge	zero,r22,854c8 <__ram_exceptions_end+0xfff65294>
   85bc4:	07000404 	movi	fp,16
   85bc8:	d8801f17 	ldw	r2,124(sp)
   85bcc:	e5838f0e 	bge	fp,r22,86a0c <___vfprintf_internal_r+0x1e50>
   85bd0:	014002b4 	movhi	r5,10
   85bd4:	29788684 	addi	r5,r5,-7654
   85bd8:	dc403015 	stw	r17,192(sp)
   85bdc:	d9402c15 	stw	r5,176(sp)
   85be0:	b023883a 	mov	r17,r22
   85be4:	04c001c4 	movi	r19,7
   85be8:	a82d883a 	mov	r22,r21
   85bec:	902b883a 	mov	r21,r18
   85bf0:	8025883a 	mov	r18,r16
   85bf4:	dc002d17 	ldw	r16,180(sp)
   85bf8:	00000306 	br	85c08 <___vfprintf_internal_r+0x104c>
   85bfc:	8c7ffc04 	addi	r17,r17,-16
   85c00:	42000204 	addi	r8,r8,8
   85c04:	e440110e 	bge	fp,r17,85c4c <___vfprintf_internal_r+0x1090>
   85c08:	18c00404 	addi	r3,r3,16
   85c0c:	10800044 	addi	r2,r2,1
   85c10:	45000015 	stw	r20,0(r8)
   85c14:	47000115 	stw	fp,4(r8)
   85c18:	d8c02015 	stw	r3,128(sp)
   85c1c:	d8801f15 	stw	r2,124(sp)
   85c20:	98bff60e 	bge	r19,r2,85bfc <__ram_exceptions_end+0xfff659c8>
   85c24:	d9801e04 	addi	r6,sp,120
   85c28:	b80b883a 	mov	r5,r23
   85c2c:	8009883a 	mov	r4,r16
   85c30:	0091d000 	call	91d00 <__sprint_r>
   85c34:	103ce51e 	bne	r2,zero,84fcc <__ram_exceptions_end+0xfff64d98>
   85c38:	8c7ffc04 	addi	r17,r17,-16
   85c3c:	d8c02017 	ldw	r3,128(sp)
   85c40:	d8801f17 	ldw	r2,124(sp)
   85c44:	da000404 	addi	r8,sp,16
   85c48:	e47fef16 	blt	fp,r17,85c08 <__ram_exceptions_end+0xfff659d4>
   85c4c:	9021883a 	mov	r16,r18
   85c50:	a825883a 	mov	r18,r21
   85c54:	b02b883a 	mov	r21,r22
   85c58:	882d883a 	mov	r22,r17
   85c5c:	dc403017 	ldw	r17,192(sp)
   85c60:	d9002c17 	ldw	r4,176(sp)
   85c64:	1d87883a 	add	r3,r3,r22
   85c68:	10800044 	addi	r2,r2,1
   85c6c:	41000015 	stw	r4,0(r8)
   85c70:	45800115 	stw	r22,4(r8)
   85c74:	d8c02015 	stw	r3,128(sp)
   85c78:	d8801f15 	stw	r2,124(sp)
   85c7c:	010001c4 	movi	r4,7
   85c80:	20818e16 	blt	r4,r2,862bc <___vfprintf_internal_r+0x1700>
   85c84:	42000204 	addi	r8,r8,8
   85c88:	003e0f06 	br	854c8 <__ram_exceptions_end+0xfff65294>
   85c8c:	d9403317 	ldw	r5,204(sp)
   85c90:	00800044 	movi	r2,1
   85c94:	18c00044 	addi	r3,r3,1
   85c98:	1141530e 	bge	r2,r5,861e8 <___vfprintf_internal_r+0x162c>
   85c9c:	dc401f17 	ldw	r17,124(sp)
   85ca0:	00800044 	movi	r2,1
   85ca4:	40800115 	stw	r2,4(r8)
   85ca8:	8c400044 	addi	r17,r17,1
   85cac:	44000015 	stw	r16,0(r8)
   85cb0:	d8c02015 	stw	r3,128(sp)
   85cb4:	dc401f15 	stw	r17,124(sp)
   85cb8:	008001c4 	movi	r2,7
   85cbc:	14416b16 	blt	r2,r17,8626c <___vfprintf_internal_r+0x16b0>
   85cc0:	42000204 	addi	r8,r8,8
   85cc4:	d8803717 	ldw	r2,220(sp)
   85cc8:	d9003417 	ldw	r4,208(sp)
   85ccc:	8c400044 	addi	r17,r17,1
   85cd0:	10c7883a 	add	r3,r2,r3
   85cd4:	40800115 	stw	r2,4(r8)
   85cd8:	41000015 	stw	r4,0(r8)
   85cdc:	d8c02015 	stw	r3,128(sp)
   85ce0:	dc401f15 	stw	r17,124(sp)
   85ce4:	008001c4 	movi	r2,7
   85ce8:	14416916 	blt	r2,r17,86290 <___vfprintf_internal_r+0x16d4>
   85cec:	45800204 	addi	r22,r8,8
   85cf0:	d9003617 	ldw	r4,216(sp)
   85cf4:	d9403817 	ldw	r5,224(sp)
   85cf8:	000d883a 	mov	r6,zero
   85cfc:	000f883a 	mov	r7,zero
   85d00:	d8c03c15 	stw	r3,240(sp)
   85d04:	0097e780 	call	97e78 <__eqdf2>
   85d08:	d8c03c17 	ldw	r3,240(sp)
   85d0c:	1000bc26 	beq	r2,zero,86000 <___vfprintf_internal_r+0x1444>
   85d10:	d9403317 	ldw	r5,204(sp)
   85d14:	84000044 	addi	r16,r16,1
   85d18:	8c400044 	addi	r17,r17,1
   85d1c:	28bfffc4 	addi	r2,r5,-1
   85d20:	1887883a 	add	r3,r3,r2
   85d24:	b0800115 	stw	r2,4(r22)
   85d28:	b4000015 	stw	r16,0(r22)
   85d2c:	d8c02015 	stw	r3,128(sp)
   85d30:	dc401f15 	stw	r17,124(sp)
   85d34:	008001c4 	movi	r2,7
   85d38:	14414316 	blt	r2,r17,86248 <___vfprintf_internal_r+0x168c>
   85d3c:	b5800204 	addi	r22,r22,8
   85d40:	d9003a17 	ldw	r4,232(sp)
   85d44:	df0022c4 	addi	fp,sp,139
   85d48:	8c400044 	addi	r17,r17,1
   85d4c:	20c7883a 	add	r3,r4,r3
   85d50:	b7000015 	stw	fp,0(r22)
   85d54:	b1000115 	stw	r4,4(r22)
   85d58:	d8c02015 	stw	r3,128(sp)
   85d5c:	dc401f15 	stw	r17,124(sp)
   85d60:	008001c4 	movi	r2,7
   85d64:	14400e16 	blt	r2,r17,85da0 <___vfprintf_internal_r+0x11e4>
   85d68:	b2000204 	addi	r8,r22,8
   85d6c:	003e1806 	br	855d0 <__ram_exceptions_end+0xfff6539c>
   85d70:	010002b4 	movhi	r4,10
   85d74:	21388684 	addi	r4,r4,-7654
   85d78:	d9002c15 	stw	r4,176(sp)
   85d7c:	d9002c17 	ldw	r4,176(sp)
   85d80:	1c07883a 	add	r3,r3,r16
   85d84:	44000115 	stw	r16,4(r8)
   85d88:	41000015 	stw	r4,0(r8)
   85d8c:	10800044 	addi	r2,r2,1
   85d90:	d8c02015 	stw	r3,128(sp)
   85d94:	d8801f15 	stw	r2,124(sp)
   85d98:	010001c4 	movi	r4,7
   85d9c:	20be0b0e 	bge	r4,r2,855cc <__ram_exceptions_end+0xfff65398>
   85da0:	d9002d17 	ldw	r4,180(sp)
   85da4:	d9801e04 	addi	r6,sp,120
   85da8:	b80b883a 	mov	r5,r23
   85dac:	0091d000 	call	91d00 <__sprint_r>
   85db0:	103c861e 	bne	r2,zero,84fcc <__ram_exceptions_end+0xfff64d98>
   85db4:	d8c02017 	ldw	r3,128(sp)
   85db8:	da000404 	addi	r8,sp,16
   85dbc:	003e0406 	br	855d0 <__ram_exceptions_end+0xfff6539c>
   85dc0:	d9002d17 	ldw	r4,180(sp)
   85dc4:	d9801e04 	addi	r6,sp,120
   85dc8:	b80b883a 	mov	r5,r23
   85dcc:	0091d000 	call	91d00 <__sprint_r>
   85dd0:	103e3b26 	beq	r2,zero,856c0 <__ram_exceptions_end+0xfff6548c>
   85dd4:	003c7d06 	br	84fcc <__ram_exceptions_end+0xfff64d98>
   85dd8:	d9002d17 	ldw	r4,180(sp)
   85ddc:	d9801e04 	addi	r6,sp,120
   85de0:	b80b883a 	mov	r5,r23
   85de4:	0091d000 	call	91d00 <__sprint_r>
   85de8:	103c781e 	bne	r2,zero,84fcc <__ram_exceptions_end+0xfff64d98>
   85dec:	d8c02017 	ldw	r3,128(sp)
   85df0:	da000404 	addi	r8,sp,16
   85df4:	003de906 	br	8559c <__ram_exceptions_end+0xfff65368>
   85df8:	d9002d17 	ldw	r4,180(sp)
   85dfc:	d9801e04 	addi	r6,sp,120
   85e00:	b80b883a 	mov	r5,r23
   85e04:	0091d000 	call	91d00 <__sprint_r>
   85e08:	103c701e 	bne	r2,zero,84fcc <__ram_exceptions_end+0xfff64d98>
   85e0c:	d8c02017 	ldw	r3,128(sp)
   85e10:	da000404 	addi	r8,sp,16
   85e14:	003d9b06 	br	85484 <__ram_exceptions_end+0xfff65250>
   85e18:	d9002d17 	ldw	r4,180(sp)
   85e1c:	d9801e04 	addi	r6,sp,120
   85e20:	b80b883a 	mov	r5,r23
   85e24:	0091d000 	call	91d00 <__sprint_r>
   85e28:	103c681e 	bne	r2,zero,84fcc <__ram_exceptions_end+0xfff64d98>
   85e2c:	d8c02017 	ldw	r3,128(sp)
   85e30:	da000404 	addi	r8,sp,16
   85e34:	003da106 	br	854bc <__ram_exceptions_end+0xfff65288>
   85e38:	d9402a17 	ldw	r5,168(sp)
   85e3c:	d8002785 	stb	zero,158(sp)
   85e40:	283f0616 	blt	r5,zero,85a5c <__ram_exceptions_end+0xfff65828>
   85e44:	00ffdfc4 	movi	r3,-129
   85e48:	9d84b03a 	or	r2,r19,r22
   85e4c:	90e4703a 	and	r18,r18,r3
   85e50:	103c3b26 	beq	r2,zero,84f40 <__ram_exceptions_end+0xfff64d0c>
   85e54:	0039883a 	mov	fp,zero
   85e58:	003e5806 	br	857bc <__ram_exceptions_end+0xfff65588>
   85e5c:	9080040c 	andi	r2,r18,16
   85e60:	1001b326 	beq	r2,zero,86530 <___vfprintf_internal_r+0x1974>
   85e64:	d8c02e17 	ldw	r3,184(sp)
   85e68:	d9002a17 	ldw	r4,168(sp)
   85e6c:	d8002785 	stb	zero,158(sp)
   85e70:	18800104 	addi	r2,r3,4
   85e74:	1cc00017 	ldw	r19,0(r3)
   85e78:	002d883a 	mov	r22,zero
   85e7c:	2001b516 	blt	r4,zero,86554 <___vfprintf_internal_r+0x1998>
   85e80:	00ffdfc4 	movi	r3,-129
   85e84:	d8802e15 	stw	r2,184(sp)
   85e88:	90e4703a 	and	r18,r18,r3
   85e8c:	983d0526 	beq	r19,zero,852a4 <__ram_exceptions_end+0xfff65070>
   85e90:	0039883a 	mov	fp,zero
   85e94:	003d0806 	br	852b8 <__ram_exceptions_end+0xfff65084>
   85e98:	dc402617 	ldw	r17,152(sp)
   85e9c:	0441d30e 	bge	zero,r17,865ec <___vfprintf_internal_r+0x1a30>
   85ea0:	dc403217 	ldw	r17,200(sp)
   85ea4:	d8803317 	ldw	r2,204(sp)
   85ea8:	1440010e 	bge	r2,r17,85eb0 <___vfprintf_internal_r+0x12f4>
   85eac:	1023883a 	mov	r17,r2
   85eb0:	04400a0e 	bge	zero,r17,85edc <___vfprintf_internal_r+0x1320>
   85eb4:	d8801f17 	ldw	r2,124(sp)
   85eb8:	1c47883a 	add	r3,r3,r17
   85ebc:	44000015 	stw	r16,0(r8)
   85ec0:	10800044 	addi	r2,r2,1
   85ec4:	44400115 	stw	r17,4(r8)
   85ec8:	d8c02015 	stw	r3,128(sp)
   85ecc:	d8801f15 	stw	r2,124(sp)
   85ed0:	010001c4 	movi	r4,7
   85ed4:	20826516 	blt	r4,r2,8686c <___vfprintf_internal_r+0x1cb0>
   85ed8:	42000204 	addi	r8,r8,8
   85edc:	88026116 	blt	r17,zero,86864 <___vfprintf_internal_r+0x1ca8>
   85ee0:	d9003217 	ldw	r4,200(sp)
   85ee4:	2463c83a 	sub	r17,r4,r17
   85ee8:	04407b0e 	bge	zero,r17,860d8 <___vfprintf_internal_r+0x151c>
   85eec:	05800404 	movi	r22,16
   85ef0:	d8801f17 	ldw	r2,124(sp)
   85ef4:	b4419d0e 	bge	r22,r17,8656c <___vfprintf_internal_r+0x19b0>
   85ef8:	010002b4 	movhi	r4,10
   85efc:	21388684 	addi	r4,r4,-7654
   85f00:	d9002c15 	stw	r4,176(sp)
   85f04:	070001c4 	movi	fp,7
   85f08:	dcc02d17 	ldw	r19,180(sp)
   85f0c:	00000306 	br	85f1c <___vfprintf_internal_r+0x1360>
   85f10:	42000204 	addi	r8,r8,8
   85f14:	8c7ffc04 	addi	r17,r17,-16
   85f18:	b441970e 	bge	r22,r17,86578 <___vfprintf_internal_r+0x19bc>
   85f1c:	18c00404 	addi	r3,r3,16
   85f20:	10800044 	addi	r2,r2,1
   85f24:	45000015 	stw	r20,0(r8)
   85f28:	45800115 	stw	r22,4(r8)
   85f2c:	d8c02015 	stw	r3,128(sp)
   85f30:	d8801f15 	stw	r2,124(sp)
   85f34:	e0bff60e 	bge	fp,r2,85f10 <__ram_exceptions_end+0xfff65cdc>
   85f38:	d9801e04 	addi	r6,sp,120
   85f3c:	b80b883a 	mov	r5,r23
   85f40:	9809883a 	mov	r4,r19
   85f44:	0091d000 	call	91d00 <__sprint_r>
   85f48:	103c201e 	bne	r2,zero,84fcc <__ram_exceptions_end+0xfff64d98>
   85f4c:	d8c02017 	ldw	r3,128(sp)
   85f50:	d8801f17 	ldw	r2,124(sp)
   85f54:	da000404 	addi	r8,sp,16
   85f58:	003fee06 	br	85f14 <__ram_exceptions_end+0xfff65ce0>
   85f5c:	d9002d17 	ldw	r4,180(sp)
   85f60:	d9801e04 	addi	r6,sp,120
   85f64:	b80b883a 	mov	r5,r23
   85f68:	0091d000 	call	91d00 <__sprint_r>
   85f6c:	103c171e 	bne	r2,zero,84fcc <__ram_exceptions_end+0xfff64d98>
   85f70:	d8c02017 	ldw	r3,128(sp)
   85f74:	df002787 	ldb	fp,158(sp)
   85f78:	da000404 	addi	r8,sp,16
   85f7c:	003d3406 	br	85450 <__ram_exceptions_end+0xfff6521c>
   85f80:	9080040c 	andi	r2,r18,16
   85f84:	10016126 	beq	r2,zero,8650c <___vfprintf_internal_r+0x1950>
   85f88:	d9402e17 	ldw	r5,184(sp)
   85f8c:	2cc00017 	ldw	r19,0(r5)
   85f90:	29400104 	addi	r5,r5,4
   85f94:	d9402e15 	stw	r5,184(sp)
   85f98:	982dd7fa 	srai	r22,r19,31
   85f9c:	b005883a 	mov	r2,r22
   85fa0:	003c5a06 	br	8510c <__ram_exceptions_end+0xfff64ed8>
   85fa4:	9080040c 	andi	r2,r18,16
   85fa8:	10003526 	beq	r2,zero,86080 <___vfprintf_internal_r+0x14c4>
   85fac:	d8c02e17 	ldw	r3,184(sp)
   85fb0:	d9002a17 	ldw	r4,168(sp)
   85fb4:	d8002785 	stb	zero,158(sp)
   85fb8:	18800104 	addi	r2,r3,4
   85fbc:	1cc00017 	ldw	r19,0(r3)
   85fc0:	002d883a 	mov	r22,zero
   85fc4:	20003716 	blt	r4,zero,860a4 <___vfprintf_internal_r+0x14e8>
   85fc8:	00ffdfc4 	movi	r3,-129
   85fcc:	d8802e15 	stw	r2,184(sp)
   85fd0:	90e4703a 	and	r18,r18,r3
   85fd4:	0039883a 	mov	fp,zero
   85fd8:	983dd426 	beq	r19,zero,8572c <__ram_exceptions_end+0xfff654f8>
   85fdc:	00800244 	movi	r2,9
   85fe0:	14fc5336 	bltu	r2,r19,85130 <__ram_exceptions_end+0xfff64efc>
   85fe4:	d8c02817 	ldw	r3,160(sp)
   85fe8:	dc001dc4 	addi	r16,sp,119
   85fec:	9cc00c04 	addi	r19,r19,48
   85ff0:	1c07c83a 	sub	r3,r3,r16
   85ff4:	dcc01dc5 	stb	r19,119(sp)
   85ff8:	d8c02b15 	stw	r3,172(sp)
   85ffc:	003cc606 	br	85318 <__ram_exceptions_end+0xfff650e4>
   86000:	d8803317 	ldw	r2,204(sp)
   86004:	143fffc4 	addi	r16,r2,-1
   86008:	043f4d0e 	bge	zero,r16,85d40 <__ram_exceptions_end+0xfff65b0c>
   8600c:	07000404 	movi	fp,16
   86010:	e400810e 	bge	fp,r16,86218 <___vfprintf_internal_r+0x165c>
   86014:	014002b4 	movhi	r5,10
   86018:	29788684 	addi	r5,r5,-7654
   8601c:	d9402c15 	stw	r5,176(sp)
   86020:	01c001c4 	movi	r7,7
   86024:	dcc02d17 	ldw	r19,180(sp)
   86028:	00000306 	br	86038 <___vfprintf_internal_r+0x147c>
   8602c:	b5800204 	addi	r22,r22,8
   86030:	843ffc04 	addi	r16,r16,-16
   86034:	e4007b0e 	bge	fp,r16,86224 <___vfprintf_internal_r+0x1668>
   86038:	18c00404 	addi	r3,r3,16
   8603c:	8c400044 	addi	r17,r17,1
   86040:	b5000015 	stw	r20,0(r22)
   86044:	b7000115 	stw	fp,4(r22)
   86048:	d8c02015 	stw	r3,128(sp)
   8604c:	dc401f15 	stw	r17,124(sp)
   86050:	3c7ff60e 	bge	r7,r17,8602c <__ram_exceptions_end+0xfff65df8>
   86054:	d9801e04 	addi	r6,sp,120
   86058:	b80b883a 	mov	r5,r23
   8605c:	9809883a 	mov	r4,r19
   86060:	d9c03c15 	stw	r7,240(sp)
   86064:	0091d000 	call	91d00 <__sprint_r>
   86068:	d9c03c17 	ldw	r7,240(sp)
   8606c:	103bd71e 	bne	r2,zero,84fcc <__ram_exceptions_end+0xfff64d98>
   86070:	d8c02017 	ldw	r3,128(sp)
   86074:	dc401f17 	ldw	r17,124(sp)
   86078:	dd800404 	addi	r22,sp,16
   8607c:	003fec06 	br	86030 <__ram_exceptions_end+0xfff65dfc>
   86080:	9080100c 	andi	r2,r18,64
   86084:	d8002785 	stb	zero,158(sp)
   86088:	10010e26 	beq	r2,zero,864c4 <___vfprintf_internal_r+0x1908>
   8608c:	d9402e17 	ldw	r5,184(sp)
   86090:	d8c02a17 	ldw	r3,168(sp)
   86094:	002d883a 	mov	r22,zero
   86098:	28800104 	addi	r2,r5,4
   8609c:	2cc0000b 	ldhu	r19,0(r5)
   860a0:	183fc90e 	bge	r3,zero,85fc8 <__ram_exceptions_end+0xfff65d94>
   860a4:	d8802e15 	stw	r2,184(sp)
   860a8:	0039883a 	mov	fp,zero
   860ac:	9d84b03a 	or	r2,r19,r22
   860b0:	103c1e1e 	bne	r2,zero,8512c <__ram_exceptions_end+0xfff64ef8>
   860b4:	00800044 	movi	r2,1
   860b8:	003e6c06 	br	85a6c <__ram_exceptions_end+0xfff65838>
   860bc:	d9002d17 	ldw	r4,180(sp)
   860c0:	d9801e04 	addi	r6,sp,120
   860c4:	b80b883a 	mov	r5,r23
   860c8:	0091d000 	call	91d00 <__sprint_r>
   860cc:	103bbf1e 	bne	r2,zero,84fcc <__ram_exceptions_end+0xfff64d98>
   860d0:	d8c02017 	ldw	r3,128(sp)
   860d4:	da000404 	addi	r8,sp,16
   860d8:	d9003217 	ldw	r4,200(sp)
   860dc:	d8802617 	ldw	r2,152(sp)
   860e0:	d9403317 	ldw	r5,204(sp)
   860e4:	8123883a 	add	r17,r16,r4
   860e8:	11400216 	blt	r2,r5,860f4 <___vfprintf_internal_r+0x1538>
   860ec:	9100004c 	andi	r4,r18,1
   860f0:	20000d26 	beq	r4,zero,86128 <___vfprintf_internal_r+0x156c>
   860f4:	d9003717 	ldw	r4,220(sp)
   860f8:	d9403417 	ldw	r5,208(sp)
   860fc:	1907883a 	add	r3,r3,r4
   86100:	d9001f17 	ldw	r4,124(sp)
   86104:	41400015 	stw	r5,0(r8)
   86108:	d9403717 	ldw	r5,220(sp)
   8610c:	21000044 	addi	r4,r4,1
   86110:	d8c02015 	stw	r3,128(sp)
   86114:	41400115 	stw	r5,4(r8)
   86118:	d9001f15 	stw	r4,124(sp)
   8611c:	014001c4 	movi	r5,7
   86120:	2901e816 	blt	r5,r4,868c4 <___vfprintf_internal_r+0x1d08>
   86124:	42000204 	addi	r8,r8,8
   86128:	d9003317 	ldw	r4,204(sp)
   8612c:	8121883a 	add	r16,r16,r4
   86130:	2085c83a 	sub	r2,r4,r2
   86134:	8461c83a 	sub	r16,r16,r17
   86138:	1400010e 	bge	r2,r16,86140 <___vfprintf_internal_r+0x1584>
   8613c:	1021883a 	mov	r16,r2
   86140:	04000a0e 	bge	zero,r16,8616c <___vfprintf_internal_r+0x15b0>
   86144:	d9001f17 	ldw	r4,124(sp)
   86148:	1c07883a 	add	r3,r3,r16
   8614c:	44400015 	stw	r17,0(r8)
   86150:	21000044 	addi	r4,r4,1
   86154:	44000115 	stw	r16,4(r8)
   86158:	d8c02015 	stw	r3,128(sp)
   8615c:	d9001f15 	stw	r4,124(sp)
   86160:	014001c4 	movi	r5,7
   86164:	2901fb16 	blt	r5,r4,86954 <___vfprintf_internal_r+0x1d98>
   86168:	42000204 	addi	r8,r8,8
   8616c:	8001f716 	blt	r16,zero,8694c <___vfprintf_internal_r+0x1d90>
   86170:	1421c83a 	sub	r16,r2,r16
   86174:	043d160e 	bge	zero,r16,855d0 <__ram_exceptions_end+0xfff6539c>
   86178:	04400404 	movi	r17,16
   8617c:	d8801f17 	ldw	r2,124(sp)
   86180:	8c3efb0e 	bge	r17,r16,85d70 <__ram_exceptions_end+0xfff65b3c>
   86184:	014002b4 	movhi	r5,10
   86188:	29788684 	addi	r5,r5,-7654
   8618c:	d9402c15 	stw	r5,176(sp)
   86190:	058001c4 	movi	r22,7
   86194:	dcc02d17 	ldw	r19,180(sp)
   86198:	00000306 	br	861a8 <___vfprintf_internal_r+0x15ec>
   8619c:	42000204 	addi	r8,r8,8
   861a0:	843ffc04 	addi	r16,r16,-16
   861a4:	8c3ef50e 	bge	r17,r16,85d7c <__ram_exceptions_end+0xfff65b48>
   861a8:	18c00404 	addi	r3,r3,16
   861ac:	10800044 	addi	r2,r2,1
   861b0:	45000015 	stw	r20,0(r8)
   861b4:	44400115 	stw	r17,4(r8)
   861b8:	d8c02015 	stw	r3,128(sp)
   861bc:	d8801f15 	stw	r2,124(sp)
   861c0:	b0bff60e 	bge	r22,r2,8619c <__ram_exceptions_end+0xfff65f68>
   861c4:	d9801e04 	addi	r6,sp,120
   861c8:	b80b883a 	mov	r5,r23
   861cc:	9809883a 	mov	r4,r19
   861d0:	0091d000 	call	91d00 <__sprint_r>
   861d4:	103b7d1e 	bne	r2,zero,84fcc <__ram_exceptions_end+0xfff64d98>
   861d8:	d8c02017 	ldw	r3,128(sp)
   861dc:	d8801f17 	ldw	r2,124(sp)
   861e0:	da000404 	addi	r8,sp,16
   861e4:	003fee06 	br	861a0 <__ram_exceptions_end+0xfff65f6c>
   861e8:	9088703a 	and	r4,r18,r2
   861ec:	203eab1e 	bne	r4,zero,85c9c <__ram_exceptions_end+0xfff65a68>
   861f0:	dc401f17 	ldw	r17,124(sp)
   861f4:	40800115 	stw	r2,4(r8)
   861f8:	44000015 	stw	r16,0(r8)
   861fc:	8c400044 	addi	r17,r17,1
   86200:	d8c02015 	stw	r3,128(sp)
   86204:	dc401f15 	stw	r17,124(sp)
   86208:	008001c4 	movi	r2,7
   8620c:	14400e16 	blt	r2,r17,86248 <___vfprintf_internal_r+0x168c>
   86210:	45800204 	addi	r22,r8,8
   86214:	003eca06 	br	85d40 <__ram_exceptions_end+0xfff65b0c>
   86218:	010002b4 	movhi	r4,10
   8621c:	21388684 	addi	r4,r4,-7654
   86220:	d9002c15 	stw	r4,176(sp)
   86224:	d8802c17 	ldw	r2,176(sp)
   86228:	1c07883a 	add	r3,r3,r16
   8622c:	8c400044 	addi	r17,r17,1
   86230:	b0800015 	stw	r2,0(r22)
   86234:	b4000115 	stw	r16,4(r22)
   86238:	d8c02015 	stw	r3,128(sp)
   8623c:	dc401f15 	stw	r17,124(sp)
   86240:	008001c4 	movi	r2,7
   86244:	147ebd0e 	bge	r2,r17,85d3c <__ram_exceptions_end+0xfff65b08>
   86248:	d9002d17 	ldw	r4,180(sp)
   8624c:	d9801e04 	addi	r6,sp,120
   86250:	b80b883a 	mov	r5,r23
   86254:	0091d000 	call	91d00 <__sprint_r>
   86258:	103b5c1e 	bne	r2,zero,84fcc <__ram_exceptions_end+0xfff64d98>
   8625c:	d8c02017 	ldw	r3,128(sp)
   86260:	dc401f17 	ldw	r17,124(sp)
   86264:	dd800404 	addi	r22,sp,16
   86268:	003eb506 	br	85d40 <__ram_exceptions_end+0xfff65b0c>
   8626c:	d9002d17 	ldw	r4,180(sp)
   86270:	d9801e04 	addi	r6,sp,120
   86274:	b80b883a 	mov	r5,r23
   86278:	0091d000 	call	91d00 <__sprint_r>
   8627c:	103b531e 	bne	r2,zero,84fcc <__ram_exceptions_end+0xfff64d98>
   86280:	d8c02017 	ldw	r3,128(sp)
   86284:	dc401f17 	ldw	r17,124(sp)
   86288:	da000404 	addi	r8,sp,16
   8628c:	003e8d06 	br	85cc4 <__ram_exceptions_end+0xfff65a90>
   86290:	d9002d17 	ldw	r4,180(sp)
   86294:	d9801e04 	addi	r6,sp,120
   86298:	b80b883a 	mov	r5,r23
   8629c:	0091d000 	call	91d00 <__sprint_r>
   862a0:	103b4a1e 	bne	r2,zero,84fcc <__ram_exceptions_end+0xfff64d98>
   862a4:	d8c02017 	ldw	r3,128(sp)
   862a8:	dc401f17 	ldw	r17,124(sp)
   862ac:	dd800404 	addi	r22,sp,16
   862b0:	003e8f06 	br	85cf0 <__ram_exceptions_end+0xfff65abc>
   862b4:	0027883a 	mov	r19,zero
   862b8:	003f4a06 	br	85fe4 <__ram_exceptions_end+0xfff65db0>
   862bc:	d9002d17 	ldw	r4,180(sp)
   862c0:	d9801e04 	addi	r6,sp,120
   862c4:	b80b883a 	mov	r5,r23
   862c8:	0091d000 	call	91d00 <__sprint_r>
   862cc:	103b3f1e 	bne	r2,zero,84fcc <__ram_exceptions_end+0xfff64d98>
   862d0:	d8c02017 	ldw	r3,128(sp)
   862d4:	da000404 	addi	r8,sp,16
   862d8:	003c7b06 	br	854c8 <__ram_exceptions_end+0xfff65294>
   862dc:	d9402a17 	ldw	r5,168(sp)
   862e0:	04e7c83a 	sub	r19,zero,r19
   862e4:	07000b44 	movi	fp,45
   862e8:	9804c03a 	cmpne	r2,r19,zero
   862ec:	05adc83a 	sub	r22,zero,r22
   862f0:	df002785 	stb	fp,158(sp)
   862f4:	b0adc83a 	sub	r22,r22,r2
   862f8:	28017b16 	blt	r5,zero,868e8 <___vfprintf_internal_r+0x1d2c>
   862fc:	00bfdfc4 	movi	r2,-129
   86300:	90a4703a 	and	r18,r18,r2
   86304:	003b8906 	br	8512c <__ram_exceptions_end+0xfff64ef8>
   86308:	d9003617 	ldw	r4,216(sp)
   8630c:	d9403817 	ldw	r5,224(sp)
   86310:	da003d15 	stw	r8,244(sp)
   86314:	008bd8c0 	call	8bd8c <__fpclassifyd>
   86318:	da003d17 	ldw	r8,244(sp)
   8631c:	1000f026 	beq	r2,zero,866e0 <___vfprintf_internal_r+0x1b24>
   86320:	d9002a17 	ldw	r4,168(sp)
   86324:	05bff7c4 	movi	r22,-33
   86328:	00bfffc4 	movi	r2,-1
   8632c:	8dac703a 	and	r22,r17,r22
   86330:	20820026 	beq	r4,r2,86b34 <___vfprintf_internal_r+0x1f78>
   86334:	008011c4 	movi	r2,71
   86338:	b081f726 	beq	r22,r2,86b18 <___vfprintf_internal_r+0x1f5c>
   8633c:	d9003817 	ldw	r4,224(sp)
   86340:	90c04014 	ori	r3,r18,256
   86344:	d8c02c15 	stw	r3,176(sp)
   86348:	20021516 	blt	r4,zero,86ba0 <___vfprintf_internal_r+0x1fe4>
   8634c:	dcc03817 	ldw	r19,224(sp)
   86350:	d8002905 	stb	zero,164(sp)
   86354:	00801984 	movi	r2,102
   86358:	8881f926 	beq	r17,r2,86b40 <___vfprintf_internal_r+0x1f84>
   8635c:	00801184 	movi	r2,70
   86360:	88821c26 	beq	r17,r2,86bd4 <___vfprintf_internal_r+0x2018>
   86364:	00801144 	movi	r2,69
   86368:	b081ef26 	beq	r22,r2,86b28 <___vfprintf_internal_r+0x1f6c>
   8636c:	d8c02a17 	ldw	r3,168(sp)
   86370:	d8802104 	addi	r2,sp,132
   86374:	d8800315 	stw	r2,12(sp)
   86378:	d9403617 	ldw	r5,216(sp)
   8637c:	d8802504 	addi	r2,sp,148
   86380:	d9002d17 	ldw	r4,180(sp)
   86384:	d8800215 	stw	r2,8(sp)
   86388:	d8802604 	addi	r2,sp,152
   8638c:	d8c00015 	stw	r3,0(sp)
   86390:	d8800115 	stw	r2,4(sp)
   86394:	01c00084 	movi	r7,2
   86398:	980d883a 	mov	r6,r19
   8639c:	d8c03c15 	stw	r3,240(sp)
   863a0:	da003d15 	stw	r8,244(sp)
   863a4:	00873a00 	call	873a0 <_dtoa_r>
   863a8:	1021883a 	mov	r16,r2
   863ac:	008019c4 	movi	r2,103
   863b0:	d8c03c17 	ldw	r3,240(sp)
   863b4:	da003d17 	ldw	r8,244(sp)
   863b8:	88817126 	beq	r17,r2,86980 <___vfprintf_internal_r+0x1dc4>
   863bc:	008011c4 	movi	r2,71
   863c0:	88829126 	beq	r17,r2,86e08 <___vfprintf_internal_r+0x224c>
   863c4:	80f9883a 	add	fp,r16,r3
   863c8:	d9003617 	ldw	r4,216(sp)
   863cc:	000d883a 	mov	r6,zero
   863d0:	000f883a 	mov	r7,zero
   863d4:	980b883a 	mov	r5,r19
   863d8:	da003d15 	stw	r8,244(sp)
   863dc:	0097e780 	call	97e78 <__eqdf2>
   863e0:	da003d17 	ldw	r8,244(sp)
   863e4:	10018d26 	beq	r2,zero,86a1c <___vfprintf_internal_r+0x1e60>
   863e8:	d8802117 	ldw	r2,132(sp)
   863ec:	1700062e 	bgeu	r2,fp,86408 <___vfprintf_internal_r+0x184c>
   863f0:	01000c04 	movi	r4,48
   863f4:	10c00044 	addi	r3,r2,1
   863f8:	d8c02115 	stw	r3,132(sp)
   863fc:	11000005 	stb	r4,0(r2)
   86400:	d8802117 	ldw	r2,132(sp)
   86404:	173ffb36 	bltu	r2,fp,863f4 <__ram_exceptions_end+0xfff661c0>
   86408:	1405c83a 	sub	r2,r2,r16
   8640c:	d8803315 	stw	r2,204(sp)
   86410:	008011c4 	movi	r2,71
   86414:	b0817626 	beq	r22,r2,869f0 <___vfprintf_internal_r+0x1e34>
   86418:	00801944 	movi	r2,101
   8641c:	1442800e 	bge	r2,r17,86e20 <___vfprintf_internal_r+0x2264>
   86420:	d8c02617 	ldw	r3,152(sp)
   86424:	00801984 	movi	r2,102
   86428:	d8c03215 	stw	r3,200(sp)
   8642c:	8881fe26 	beq	r17,r2,86c28 <___vfprintf_internal_r+0x206c>
   86430:	d8c03217 	ldw	r3,200(sp)
   86434:	d9003317 	ldw	r4,204(sp)
   86438:	1901dd16 	blt	r3,r4,86bb0 <___vfprintf_internal_r+0x1ff4>
   8643c:	9480004c 	andi	r18,r18,1
   86440:	90022b1e 	bne	r18,zero,86cf0 <___vfprintf_internal_r+0x2134>
   86444:	1805883a 	mov	r2,r3
   86448:	18028316 	blt	r3,zero,86e58 <___vfprintf_internal_r+0x229c>
   8644c:	d8c03217 	ldw	r3,200(sp)
   86450:	044019c4 	movi	r17,103
   86454:	d8c02b15 	stw	r3,172(sp)
   86458:	df002907 	ldb	fp,164(sp)
   8645c:	e001531e 	bne	fp,zero,869ac <___vfprintf_internal_r+0x1df0>
   86460:	df002783 	ldbu	fp,158(sp)
   86464:	d8802915 	stw	r2,164(sp)
   86468:	dc802c17 	ldw	r18,176(sp)
   8646c:	d8002a15 	stw	zero,168(sp)
   86470:	003baf06 	br	85330 <__ram_exceptions_end+0xfff650fc>
   86474:	d8c02e17 	ldw	r3,184(sp)
   86478:	d9002e17 	ldw	r4,184(sp)
   8647c:	d9402e17 	ldw	r5,184(sp)
   86480:	18c00017 	ldw	r3,0(r3)
   86484:	21000117 	ldw	r4,4(r4)
   86488:	29400204 	addi	r5,r5,8
   8648c:	d8c03615 	stw	r3,216(sp)
   86490:	d9003815 	stw	r4,224(sp)
   86494:	d9402e15 	stw	r5,184(sp)
   86498:	003b5006 	br	851dc <__ram_exceptions_end+0xfff64fa8>
   8649c:	ac400007 	ldb	r17,0(r21)
   864a0:	003a2806 	br	84d44 <__ram_exceptions_end+0xfff64b10>
   864a4:	9080100c 	andi	r2,r18,64
   864a8:	1000a826 	beq	r2,zero,8674c <___vfprintf_internal_r+0x1b90>
   864ac:	d8c02e17 	ldw	r3,184(sp)
   864b0:	002d883a 	mov	r22,zero
   864b4:	1cc0000b 	ldhu	r19,0(r3)
   864b8:	18c00104 	addi	r3,r3,4
   864bc:	d8c02e15 	stw	r3,184(sp)
   864c0:	003caf06 	br	85780 <__ram_exceptions_end+0xfff6554c>
   864c4:	d9002e17 	ldw	r4,184(sp)
   864c8:	d9402a17 	ldw	r5,168(sp)
   864cc:	002d883a 	mov	r22,zero
   864d0:	20800104 	addi	r2,r4,4
   864d4:	24c00017 	ldw	r19,0(r4)
   864d8:	283ebb0e 	bge	r5,zero,85fc8 <__ram_exceptions_end+0xfff65d94>
   864dc:	003ef106 	br	860a4 <__ram_exceptions_end+0xfff65e70>
   864e0:	9080040c 	andi	r2,r18,16
   864e4:	1000921e 	bne	r2,zero,86730 <___vfprintf_internal_r+0x1b74>
   864e8:	9480100c 	andi	r18,r18,64
   864ec:	90013926 	beq	r18,zero,869d4 <___vfprintf_internal_r+0x1e18>
   864f0:	d9402e17 	ldw	r5,184(sp)
   864f4:	d8c02f17 	ldw	r3,188(sp)
   864f8:	28800017 	ldw	r2,0(r5)
   864fc:	29400104 	addi	r5,r5,4
   86500:	d9402e15 	stw	r5,184(sp)
   86504:	10c0000d 	sth	r3,0(r2)
   86508:	0039e406 	br	84c9c <__ram_exceptions_end+0xfff64a68>
   8650c:	9080100c 	andi	r2,r18,64
   86510:	10008026 	beq	r2,zero,86714 <___vfprintf_internal_r+0x1b58>
   86514:	d8802e17 	ldw	r2,184(sp)
   86518:	14c0000f 	ldh	r19,0(r2)
   8651c:	10800104 	addi	r2,r2,4
   86520:	d8802e15 	stw	r2,184(sp)
   86524:	982dd7fa 	srai	r22,r19,31
   86528:	b005883a 	mov	r2,r22
   8652c:	003af706 	br	8510c <__ram_exceptions_end+0xfff64ed8>
   86530:	9080100c 	andi	r2,r18,64
   86534:	d8002785 	stb	zero,158(sp)
   86538:	10008a1e 	bne	r2,zero,86764 <___vfprintf_internal_r+0x1ba8>
   8653c:	d9002e17 	ldw	r4,184(sp)
   86540:	d9402a17 	ldw	r5,168(sp)
   86544:	002d883a 	mov	r22,zero
   86548:	20800104 	addi	r2,r4,4
   8654c:	24c00017 	ldw	r19,0(r4)
   86550:	283e4b0e 	bge	r5,zero,85e80 <__ram_exceptions_end+0xfff65c4c>
   86554:	9d86b03a 	or	r3,r19,r22
   86558:	d8802e15 	stw	r2,184(sp)
   8655c:	183e4c1e 	bne	r3,zero,85e90 <__ram_exceptions_end+0xfff65c5c>
   86560:	0039883a 	mov	fp,zero
   86564:	0005883a 	mov	r2,zero
   86568:	003d4006 	br	85a6c <__ram_exceptions_end+0xfff65838>
   8656c:	014002b4 	movhi	r5,10
   86570:	29788684 	addi	r5,r5,-7654
   86574:	d9402c15 	stw	r5,176(sp)
   86578:	d9402c17 	ldw	r5,176(sp)
   8657c:	1c47883a 	add	r3,r3,r17
   86580:	10800044 	addi	r2,r2,1
   86584:	41400015 	stw	r5,0(r8)
   86588:	44400115 	stw	r17,4(r8)
   8658c:	d8c02015 	stw	r3,128(sp)
   86590:	d8801f15 	stw	r2,124(sp)
   86594:	010001c4 	movi	r4,7
   86598:	20bec816 	blt	r4,r2,860bc <__ram_exceptions_end+0xfff65e88>
   8659c:	42000204 	addi	r8,r8,8
   865a0:	003ecd06 	br	860d8 <__ram_exceptions_end+0xfff65ea4>
   865a4:	d9002a17 	ldw	r4,168(sp)
   865a8:	d8002785 	stb	zero,158(sp)
   865ac:	203d2d16 	blt	r4,zero,85a64 <__ram_exceptions_end+0xfff65830>
   865b0:	00bfdfc4 	movi	r2,-129
   865b4:	90a4703a 	and	r18,r18,r2
   865b8:	003a6106 	br	84f40 <__ram_exceptions_end+0xfff64d0c>
   865bc:	010002b4 	movhi	r4,10
   865c0:	21388684 	addi	r4,r4,-7654
   865c4:	d9002c15 	stw	r4,176(sp)
   865c8:	003bea06 	br	85574 <__ram_exceptions_end+0xfff65340>
   865cc:	d9002d17 	ldw	r4,180(sp)
   865d0:	d9801e04 	addi	r6,sp,120
   865d4:	b80b883a 	mov	r5,r23
   865d8:	0091d000 	call	91d00 <__sprint_r>
   865dc:	103a7b1e 	bne	r2,zero,84fcc <__ram_exceptions_end+0xfff64d98>
   865e0:	d8c02017 	ldw	r3,128(sp)
   865e4:	da000404 	addi	r8,sp,16
   865e8:	003d4106 	br	85af0 <__ram_exceptions_end+0xfff658bc>
   865ec:	d8801f17 	ldw	r2,124(sp)
   865f0:	014002b4 	movhi	r5,10
   865f4:	01000044 	movi	r4,1
   865f8:	18c00044 	addi	r3,r3,1
   865fc:	10800044 	addi	r2,r2,1
   86600:	29788604 	addi	r5,r5,-7656
   86604:	41000115 	stw	r4,4(r8)
   86608:	41400015 	stw	r5,0(r8)
   8660c:	d8c02015 	stw	r3,128(sp)
   86610:	d8801f15 	stw	r2,124(sp)
   86614:	010001c4 	movi	r4,7
   86618:	20805c16 	blt	r4,r2,8678c <___vfprintf_internal_r+0x1bd0>
   8661c:	42000204 	addi	r8,r8,8
   86620:	8800041e 	bne	r17,zero,86634 <___vfprintf_internal_r+0x1a78>
   86624:	d8803317 	ldw	r2,204(sp)
   86628:	1000021e 	bne	r2,zero,86634 <___vfprintf_internal_r+0x1a78>
   8662c:	9080004c 	andi	r2,r18,1
   86630:	103be726 	beq	r2,zero,855d0 <__ram_exceptions_end+0xfff6539c>
   86634:	d9003717 	ldw	r4,220(sp)
   86638:	d8801f17 	ldw	r2,124(sp)
   8663c:	d9403417 	ldw	r5,208(sp)
   86640:	20c7883a 	add	r3,r4,r3
   86644:	10800044 	addi	r2,r2,1
   86648:	41000115 	stw	r4,4(r8)
   8664c:	41400015 	stw	r5,0(r8)
   86650:	d8c02015 	stw	r3,128(sp)
   86654:	d8801f15 	stw	r2,124(sp)
   86658:	010001c4 	movi	r4,7
   8665c:	20812116 	blt	r4,r2,86ae4 <___vfprintf_internal_r+0x1f28>
   86660:	42000204 	addi	r8,r8,8
   86664:	0463c83a 	sub	r17,zero,r17
   86668:	0440730e 	bge	zero,r17,86838 <___vfprintf_internal_r+0x1c7c>
   8666c:	05800404 	movi	r22,16
   86670:	b440860e 	bge	r22,r17,8688c <___vfprintf_internal_r+0x1cd0>
   86674:	014002b4 	movhi	r5,10
   86678:	29788684 	addi	r5,r5,-7654
   8667c:	d9402c15 	stw	r5,176(sp)
   86680:	070001c4 	movi	fp,7
   86684:	dcc02d17 	ldw	r19,180(sp)
   86688:	00000306 	br	86698 <___vfprintf_internal_r+0x1adc>
   8668c:	42000204 	addi	r8,r8,8
   86690:	8c7ffc04 	addi	r17,r17,-16
   86694:	b440800e 	bge	r22,r17,86898 <___vfprintf_internal_r+0x1cdc>
   86698:	18c00404 	addi	r3,r3,16
   8669c:	10800044 	addi	r2,r2,1
   866a0:	45000015 	stw	r20,0(r8)
   866a4:	45800115 	stw	r22,4(r8)
   866a8:	d8c02015 	stw	r3,128(sp)
   866ac:	d8801f15 	stw	r2,124(sp)
   866b0:	e0bff60e 	bge	fp,r2,8668c <__ram_exceptions_end+0xfff66458>
   866b4:	d9801e04 	addi	r6,sp,120
   866b8:	b80b883a 	mov	r5,r23
   866bc:	9809883a 	mov	r4,r19
   866c0:	0091d000 	call	91d00 <__sprint_r>
   866c4:	103a411e 	bne	r2,zero,84fcc <__ram_exceptions_end+0xfff64d98>
   866c8:	d8c02017 	ldw	r3,128(sp)
   866cc:	d8801f17 	ldw	r2,124(sp)
   866d0:	da000404 	addi	r8,sp,16
   866d4:	003fee06 	br	86690 <__ram_exceptions_end+0xfff6645c>
   866d8:	00bfffc4 	movi	r2,-1
   866dc:	003a3f06 	br	84fdc <__ram_exceptions_end+0xfff64da8>
   866e0:	008011c4 	movi	r2,71
   866e4:	1440b816 	blt	r2,r17,869c8 <___vfprintf_internal_r+0x1e0c>
   866e8:	040002b4 	movhi	r16,10
   866ec:	84387804 	addi	r16,r16,-7712
   866f0:	00c000c4 	movi	r3,3
   866f4:	00bfdfc4 	movi	r2,-129
   866f8:	d8c02915 	stw	r3,164(sp)
   866fc:	90a4703a 	and	r18,r18,r2
   86700:	df002783 	ldbu	fp,158(sp)
   86704:	d8c02b15 	stw	r3,172(sp)
   86708:	d8002a15 	stw	zero,168(sp)
   8670c:	d8003215 	stw	zero,200(sp)
   86710:	003b0706 	br	85330 <__ram_exceptions_end+0xfff650fc>
   86714:	d8c02e17 	ldw	r3,184(sp)
   86718:	1cc00017 	ldw	r19,0(r3)
   8671c:	18c00104 	addi	r3,r3,4
   86720:	d8c02e15 	stw	r3,184(sp)
   86724:	982dd7fa 	srai	r22,r19,31
   86728:	b005883a 	mov	r2,r22
   8672c:	003a7706 	br	8510c <__ram_exceptions_end+0xfff64ed8>
   86730:	d8c02e17 	ldw	r3,184(sp)
   86734:	d9002f17 	ldw	r4,188(sp)
   86738:	18800017 	ldw	r2,0(r3)
   8673c:	18c00104 	addi	r3,r3,4
   86740:	d8c02e15 	stw	r3,184(sp)
   86744:	11000015 	stw	r4,0(r2)
   86748:	00395406 	br	84c9c <__ram_exceptions_end+0xfff64a68>
   8674c:	d9002e17 	ldw	r4,184(sp)
   86750:	002d883a 	mov	r22,zero
   86754:	24c00017 	ldw	r19,0(r4)
   86758:	21000104 	addi	r4,r4,4
   8675c:	d9002e15 	stw	r4,184(sp)
   86760:	003c0706 	br	85780 <__ram_exceptions_end+0xfff6554c>
   86764:	d9402e17 	ldw	r5,184(sp)
   86768:	d8c02a17 	ldw	r3,168(sp)
   8676c:	002d883a 	mov	r22,zero
   86770:	28800104 	addi	r2,r5,4
   86774:	2cc0000b 	ldhu	r19,0(r5)
   86778:	183dc10e 	bge	r3,zero,85e80 <__ram_exceptions_end+0xfff65c4c>
   8677c:	003f7506 	br	86554 <__ram_exceptions_end+0xfff66320>
   86780:	040002b4 	movhi	r16,10
   86784:	84387604 	addi	r16,r16,-7720
   86788:	003aa706 	br	85228 <__ram_exceptions_end+0xfff64ff4>
   8678c:	d9002d17 	ldw	r4,180(sp)
   86790:	d9801e04 	addi	r6,sp,120
   86794:	b80b883a 	mov	r5,r23
   86798:	0091d000 	call	91d00 <__sprint_r>
   8679c:	103a0b1e 	bne	r2,zero,84fcc <__ram_exceptions_end+0xfff64d98>
   867a0:	dc402617 	ldw	r17,152(sp)
   867a4:	d8c02017 	ldw	r3,128(sp)
   867a8:	da000404 	addi	r8,sp,16
   867ac:	003f9c06 	br	86620 <__ram_exceptions_end+0xfff663ec>
   867b0:	ac400043 	ldbu	r17,1(r21)
   867b4:	84000814 	ori	r16,r16,32
   867b8:	ad400044 	addi	r21,r21,1
   867bc:	8c403fcc 	andi	r17,r17,255
   867c0:	8c40201c 	xori	r17,r17,128
   867c4:	8c7fe004 	addi	r17,r17,-128
   867c8:	00395e06 	br	84d44 <__ram_exceptions_end+0xfff64b10>
   867cc:	d8c02e15 	stw	r3,184(sp)
   867d0:	0039883a 	mov	fp,zero
   867d4:	003e3506 	br	860ac <__ram_exceptions_end+0xfff65e78>
   867d8:	d9002d17 	ldw	r4,180(sp)
   867dc:	d9801e04 	addi	r6,sp,120
   867e0:	b80b883a 	mov	r5,r23
   867e4:	0091d000 	call	91d00 <__sprint_r>
   867e8:	1039f81e 	bne	r2,zero,84fcc <__ram_exceptions_end+0xfff64d98>
   867ec:	d8c02017 	ldw	r3,128(sp)
   867f0:	da000404 	addi	r8,sp,16
   867f4:	003cd006 	br	85b38 <__ram_exceptions_end+0xfff65904>
   867f8:	8009883a 	mov	r4,r16
   867fc:	df003d15 	stw	fp,244(sp)
   86800:	00831980 	call	83198 <strlen>
   86804:	d8802b15 	stw	r2,172(sp)
   86808:	da003d17 	ldw	r8,244(sp)
   8680c:	103c200e 	bge	r2,zero,85890 <__ram_exceptions_end+0xfff6565c>
   86810:	0005883a 	mov	r2,zero
   86814:	003c1e06 	br	85890 <__ram_exceptions_end+0xfff6565c>
   86818:	d9002d17 	ldw	r4,180(sp)
   8681c:	d9801e04 	addi	r6,sp,120
   86820:	b80b883a 	mov	r5,r23
   86824:	0091d000 	call	91d00 <__sprint_r>
   86828:	1039e81e 	bne	r2,zero,84fcc <__ram_exceptions_end+0xfff64d98>
   8682c:	d8c02017 	ldw	r3,128(sp)
   86830:	d8801f17 	ldw	r2,124(sp)
   86834:	da000404 	addi	r8,sp,16
   86838:	d9403317 	ldw	r5,204(sp)
   8683c:	10800044 	addi	r2,r2,1
   86840:	44000015 	stw	r16,0(r8)
   86844:	28c7883a 	add	r3,r5,r3
   86848:	003b5b06 	br	855b8 <__ram_exceptions_end+0xfff65384>
   8684c:	010002b4 	movhi	r4,10
   86850:	21388a84 	addi	r4,r4,-7638
   86854:	d9003515 	stw	r4,212(sp)
   86858:	003af206 	br	85424 <__ram_exceptions_end+0xfff651f0>
   8685c:	013fffc4 	movi	r4,-1
   86860:	003a0806 	br	85084 <__ram_exceptions_end+0xfff64e50>
   86864:	0023883a 	mov	r17,zero
   86868:	003d9d06 	br	85ee0 <__ram_exceptions_end+0xfff65cac>
   8686c:	d9002d17 	ldw	r4,180(sp)
   86870:	d9801e04 	addi	r6,sp,120
   86874:	b80b883a 	mov	r5,r23
   86878:	0091d000 	call	91d00 <__sprint_r>
   8687c:	1039d31e 	bne	r2,zero,84fcc <__ram_exceptions_end+0xfff64d98>
   86880:	d8c02017 	ldw	r3,128(sp)
   86884:	da000404 	addi	r8,sp,16
   86888:	003d9406 	br	85edc <__ram_exceptions_end+0xfff65ca8>
   8688c:	010002b4 	movhi	r4,10
   86890:	21388684 	addi	r4,r4,-7654
   86894:	d9002c15 	stw	r4,176(sp)
   86898:	d9002c17 	ldw	r4,176(sp)
   8689c:	1c47883a 	add	r3,r3,r17
   868a0:	10800044 	addi	r2,r2,1
   868a4:	41000015 	stw	r4,0(r8)
   868a8:	44400115 	stw	r17,4(r8)
   868ac:	d8c02015 	stw	r3,128(sp)
   868b0:	d8801f15 	stw	r2,124(sp)
   868b4:	010001c4 	movi	r4,7
   868b8:	20bfd716 	blt	r4,r2,86818 <__ram_exceptions_end+0xfff665e4>
   868bc:	42000204 	addi	r8,r8,8
   868c0:	003fdd06 	br	86838 <__ram_exceptions_end+0xfff66604>
   868c4:	d9002d17 	ldw	r4,180(sp)
   868c8:	d9801e04 	addi	r6,sp,120
   868cc:	b80b883a 	mov	r5,r23
   868d0:	0091d000 	call	91d00 <__sprint_r>
   868d4:	1039bd1e 	bne	r2,zero,84fcc <__ram_exceptions_end+0xfff64d98>
   868d8:	d8802617 	ldw	r2,152(sp)
   868dc:	d8c02017 	ldw	r3,128(sp)
   868e0:	da000404 	addi	r8,sp,16
   868e4:	003e1006 	br	86128 <__ram_exceptions_end+0xfff65ef4>
   868e8:	00800044 	movi	r2,1
   868ec:	10803fcc 	andi	r2,r2,255
   868f0:	00c00044 	movi	r3,1
   868f4:	10fa0d26 	beq	r2,r3,8512c <__ram_exceptions_end+0xfff64ef8>
   868f8:	00c00084 	movi	r3,2
   868fc:	10fbaf26 	beq	r2,r3,857bc <__ram_exceptions_end+0xfff65588>
   86900:	003a6d06 	br	852b8 <__ram_exceptions_end+0xfff65084>
   86904:	010002b4 	movhi	r4,10
   86908:	21388a84 	addi	r4,r4,-7638
   8690c:	d9003515 	stw	r4,212(sp)
   86910:	003b5406 	br	85664 <__ram_exceptions_end+0xfff65430>
   86914:	d8802a17 	ldw	r2,168(sp)
   86918:	00c00184 	movi	r3,6
   8691c:	1880012e 	bgeu	r3,r2,86924 <___vfprintf_internal_r+0x1d68>
   86920:	1805883a 	mov	r2,r3
   86924:	d8802b15 	stw	r2,172(sp)
   86928:	1000ef16 	blt	r2,zero,86ce8 <___vfprintf_internal_r+0x212c>
   8692c:	040002b4 	movhi	r16,10
   86930:	d8802915 	stw	r2,164(sp)
   86934:	dcc02e15 	stw	r19,184(sp)
   86938:	d8002a15 	stw	zero,168(sp)
   8693c:	d8003215 	stw	zero,200(sp)
   86940:	84388404 	addi	r16,r16,-7664
   86944:	0039883a 	mov	fp,zero
   86948:	003a8006 	br	8534c <__ram_exceptions_end+0xfff65118>
   8694c:	0021883a 	mov	r16,zero
   86950:	003e0706 	br	86170 <__ram_exceptions_end+0xfff65f3c>
   86954:	d9002d17 	ldw	r4,180(sp)
   86958:	d9801e04 	addi	r6,sp,120
   8695c:	b80b883a 	mov	r5,r23
   86960:	0091d000 	call	91d00 <__sprint_r>
   86964:	1039991e 	bne	r2,zero,84fcc <__ram_exceptions_end+0xfff64d98>
   86968:	d8802617 	ldw	r2,152(sp)
   8696c:	d9403317 	ldw	r5,204(sp)
   86970:	d8c02017 	ldw	r3,128(sp)
   86974:	da000404 	addi	r8,sp,16
   86978:	2885c83a 	sub	r2,r5,r2
   8697c:	003dfb06 	br	8616c <__ram_exceptions_end+0xfff65f38>
   86980:	9080004c 	andi	r2,r18,1
   86984:	103e8f1e 	bne	r2,zero,863c4 <__ram_exceptions_end+0xfff66190>
   86988:	d8802117 	ldw	r2,132(sp)
   8698c:	003e9e06 	br	86408 <__ram_exceptions_end+0xfff661d4>
   86990:	1025883a 	mov	r18,r2
   86994:	0039883a 	mov	fp,zero
   86998:	00800084 	movi	r2,2
   8699c:	003fd306 	br	868ec <__ram_exceptions_end+0xfff666b8>
   869a0:	07000b44 	movi	fp,45
   869a4:	df002785 	stb	fp,158(sp)
   869a8:	003a1b06 	br	85218 <__ram_exceptions_end+0xfff64fe4>
   869ac:	00c00b44 	movi	r3,45
   869b0:	d8c02785 	stb	r3,158(sp)
   869b4:	d8802915 	stw	r2,164(sp)
   869b8:	dc802c17 	ldw	r18,176(sp)
   869bc:	d8002a15 	stw	zero,168(sp)
   869c0:	07000b44 	movi	fp,45
   869c4:	003a5e06 	br	85340 <__ram_exceptions_end+0xfff6510c>
   869c8:	040002b4 	movhi	r16,10
   869cc:	84387904 	addi	r16,r16,-7708
   869d0:	003f4706 	br	866f0 <__ram_exceptions_end+0xfff664bc>
   869d4:	d9002e17 	ldw	r4,184(sp)
   869d8:	d9402f17 	ldw	r5,188(sp)
   869dc:	20800017 	ldw	r2,0(r4)
   869e0:	21000104 	addi	r4,r4,4
   869e4:	d9002e15 	stw	r4,184(sp)
   869e8:	11400015 	stw	r5,0(r2)
   869ec:	0038ab06 	br	84c9c <__ram_exceptions_end+0xfff64a68>
   869f0:	dd802617 	ldw	r22,152(sp)
   869f4:	00bfff44 	movi	r2,-3
   869f8:	b0801c16 	blt	r22,r2,86a6c <___vfprintf_internal_r+0x1eb0>
   869fc:	d9402a17 	ldw	r5,168(sp)
   86a00:	2d801a16 	blt	r5,r22,86a6c <___vfprintf_internal_r+0x1eb0>
   86a04:	dd803215 	stw	r22,200(sp)
   86a08:	003e8906 	br	86430 <__ram_exceptions_end+0xfff661fc>
   86a0c:	010002b4 	movhi	r4,10
   86a10:	21388684 	addi	r4,r4,-7654
   86a14:	d9002c15 	stw	r4,176(sp)
   86a18:	003c9106 	br	85c60 <__ram_exceptions_end+0xfff65a2c>
   86a1c:	e005883a 	mov	r2,fp
   86a20:	003e7906 	br	86408 <__ram_exceptions_end+0xfff661d4>
   86a24:	d9002a17 	ldw	r4,168(sp)
   86a28:	df002783 	ldbu	fp,158(sp)
   86a2c:	dcc02e15 	stw	r19,184(sp)
   86a30:	d9002915 	stw	r4,164(sp)
   86a34:	d9002b15 	stw	r4,172(sp)
   86a38:	d8002a15 	stw	zero,168(sp)
   86a3c:	d8003215 	stw	zero,200(sp)
   86a40:	003a3b06 	br	85330 <__ram_exceptions_end+0xfff650fc>
   86a44:	9080004c 	andi	r2,r18,1
   86a48:	0039883a 	mov	fp,zero
   86a4c:	10000426 	beq	r2,zero,86a60 <___vfprintf_internal_r+0x1ea4>
   86a50:	00800c04 	movi	r2,48
   86a54:	dc001dc4 	addi	r16,sp,119
   86a58:	d8801dc5 	stb	r2,119(sp)
   86a5c:	003b6406 	br	857f0 <__ram_exceptions_end+0xfff655bc>
   86a60:	d8002b15 	stw	zero,172(sp)
   86a64:	dc001e04 	addi	r16,sp,120
   86a68:	003a2b06 	br	85318 <__ram_exceptions_end+0xfff650e4>
   86a6c:	8c7fff84 	addi	r17,r17,-2
   86a70:	b5bfffc4 	addi	r22,r22,-1
   86a74:	dd802615 	stw	r22,152(sp)
   86a78:	dc4022c5 	stb	r17,139(sp)
   86a7c:	b000bf16 	blt	r22,zero,86d7c <___vfprintf_internal_r+0x21c0>
   86a80:	00800ac4 	movi	r2,43
   86a84:	d8802305 	stb	r2,140(sp)
   86a88:	00800244 	movi	r2,9
   86a8c:	15807016 	blt	r2,r22,86c50 <___vfprintf_internal_r+0x2094>
   86a90:	00800c04 	movi	r2,48
   86a94:	b5800c04 	addi	r22,r22,48
   86a98:	d8802345 	stb	r2,141(sp)
   86a9c:	dd802385 	stb	r22,142(sp)
   86aa0:	d88023c4 	addi	r2,sp,143
   86aa4:	df0022c4 	addi	fp,sp,139
   86aa8:	d8c03317 	ldw	r3,204(sp)
   86aac:	1739c83a 	sub	fp,r2,fp
   86ab0:	d9003317 	ldw	r4,204(sp)
   86ab4:	e0c7883a 	add	r3,fp,r3
   86ab8:	df003a15 	stw	fp,232(sp)
   86abc:	d8c02b15 	stw	r3,172(sp)
   86ac0:	00800044 	movi	r2,1
   86ac4:	1100b30e 	bge	r2,r4,86d94 <___vfprintf_internal_r+0x21d8>
   86ac8:	d8c02b17 	ldw	r3,172(sp)
   86acc:	18c00044 	addi	r3,r3,1
   86ad0:	d8c02b15 	stw	r3,172(sp)
   86ad4:	1805883a 	mov	r2,r3
   86ad8:	1800ac16 	blt	r3,zero,86d8c <___vfprintf_internal_r+0x21d0>
   86adc:	d8003215 	stw	zero,200(sp)
   86ae0:	003e5d06 	br	86458 <__ram_exceptions_end+0xfff66224>
   86ae4:	d9002d17 	ldw	r4,180(sp)
   86ae8:	d9801e04 	addi	r6,sp,120
   86aec:	b80b883a 	mov	r5,r23
   86af0:	0091d000 	call	91d00 <__sprint_r>
   86af4:	1039351e 	bne	r2,zero,84fcc <__ram_exceptions_end+0xfff64d98>
   86af8:	dc402617 	ldw	r17,152(sp)
   86afc:	d8c02017 	ldw	r3,128(sp)
   86b00:	d8801f17 	ldw	r2,124(sp)
   86b04:	da000404 	addi	r8,sp,16
   86b08:	003ed606 	br	86664 <__ram_exceptions_end+0xfff66430>
   86b0c:	182b883a 	mov	r21,r3
   86b10:	d8002a15 	stw	zero,168(sp)
   86b14:	00388c06 	br	84d48 <__ram_exceptions_end+0xfff64b14>
   86b18:	d8802a17 	ldw	r2,168(sp)
   86b1c:	103e071e 	bne	r2,zero,8633c <__ram_exceptions_end+0xfff66108>
   86b20:	dc002a15 	stw	r16,168(sp)
   86b24:	003e0506 	br	8633c <__ram_exceptions_end+0xfff66108>
   86b28:	d9002a17 	ldw	r4,168(sp)
   86b2c:	20c00044 	addi	r3,r4,1
   86b30:	003e0f06 	br	86370 <__ram_exceptions_end+0xfff6613c>
   86b34:	01400184 	movi	r5,6
   86b38:	d9402a15 	stw	r5,168(sp)
   86b3c:	003dff06 	br	8633c <__ram_exceptions_end+0xfff66108>
   86b40:	d8802104 	addi	r2,sp,132
   86b44:	d8800315 	stw	r2,12(sp)
   86b48:	d8802504 	addi	r2,sp,148
   86b4c:	d8800215 	stw	r2,8(sp)
   86b50:	d8802604 	addi	r2,sp,152
   86b54:	d8800115 	stw	r2,4(sp)
   86b58:	d8802a17 	ldw	r2,168(sp)
   86b5c:	d9403617 	ldw	r5,216(sp)
   86b60:	d9002d17 	ldw	r4,180(sp)
   86b64:	d8800015 	stw	r2,0(sp)
   86b68:	01c000c4 	movi	r7,3
   86b6c:	980d883a 	mov	r6,r19
   86b70:	da003d15 	stw	r8,244(sp)
   86b74:	00873a00 	call	873a0 <_dtoa_r>
   86b78:	d8c02a17 	ldw	r3,168(sp)
   86b7c:	da003d17 	ldw	r8,244(sp)
   86b80:	1021883a 	mov	r16,r2
   86b84:	10f9883a 	add	fp,r2,r3
   86b88:	81000007 	ldb	r4,0(r16)
   86b8c:	00800c04 	movi	r2,48
   86b90:	20805e26 	beq	r4,r2,86d0c <___vfprintf_internal_r+0x2150>
   86b94:	d8c02617 	ldw	r3,152(sp)
   86b98:	e0f9883a 	add	fp,fp,r3
   86b9c:	003e0a06 	br	863c8 <__ram_exceptions_end+0xfff66194>
   86ba0:	00c00b44 	movi	r3,45
   86ba4:	24e0003c 	xorhi	r19,r4,32768
   86ba8:	d8c02905 	stb	r3,164(sp)
   86bac:	003de906 	br	86354 <__ram_exceptions_end+0xfff66120>
   86bb0:	d8c03217 	ldw	r3,200(sp)
   86bb4:	00c07a0e 	bge	zero,r3,86da0 <___vfprintf_internal_r+0x21e4>
   86bb8:	00800044 	movi	r2,1
   86bbc:	d9003317 	ldw	r4,204(sp)
   86bc0:	1105883a 	add	r2,r2,r4
   86bc4:	d8802b15 	stw	r2,172(sp)
   86bc8:	10004e16 	blt	r2,zero,86d04 <___vfprintf_internal_r+0x2148>
   86bcc:	044019c4 	movi	r17,103
   86bd0:	003e2106 	br	86458 <__ram_exceptions_end+0xfff66224>
   86bd4:	d9002a17 	ldw	r4,168(sp)
   86bd8:	d8802104 	addi	r2,sp,132
   86bdc:	d8800315 	stw	r2,12(sp)
   86be0:	d9000015 	stw	r4,0(sp)
   86be4:	d8802504 	addi	r2,sp,148
   86be8:	d9403617 	ldw	r5,216(sp)
   86bec:	d9002d17 	ldw	r4,180(sp)
   86bf0:	d8800215 	stw	r2,8(sp)
   86bf4:	d8802604 	addi	r2,sp,152
   86bf8:	d8800115 	stw	r2,4(sp)
   86bfc:	01c000c4 	movi	r7,3
   86c00:	980d883a 	mov	r6,r19
   86c04:	da003d15 	stw	r8,244(sp)
   86c08:	00873a00 	call	873a0 <_dtoa_r>
   86c0c:	d8c02a17 	ldw	r3,168(sp)
   86c10:	da003d17 	ldw	r8,244(sp)
   86c14:	1021883a 	mov	r16,r2
   86c18:	00801184 	movi	r2,70
   86c1c:	80f9883a 	add	fp,r16,r3
   86c20:	88bfd926 	beq	r17,r2,86b88 <__ram_exceptions_end+0xfff66954>
   86c24:	003de806 	br	863c8 <__ram_exceptions_end+0xfff66194>
   86c28:	d9002a17 	ldw	r4,168(sp)
   86c2c:	00c04d0e 	bge	zero,r3,86d64 <___vfprintf_internal_r+0x21a8>
   86c30:	2000441e 	bne	r4,zero,86d44 <___vfprintf_internal_r+0x2188>
   86c34:	9480004c 	andi	r18,r18,1
   86c38:	9000421e 	bne	r18,zero,86d44 <___vfprintf_internal_r+0x2188>
   86c3c:	1805883a 	mov	r2,r3
   86c40:	18006f16 	blt	r3,zero,86e00 <___vfprintf_internal_r+0x2244>
   86c44:	d8c03217 	ldw	r3,200(sp)
   86c48:	d8c02b15 	stw	r3,172(sp)
   86c4c:	003e0206 	br	86458 <__ram_exceptions_end+0xfff66224>
   86c50:	df0022c4 	addi	fp,sp,139
   86c54:	dc002a15 	stw	r16,168(sp)
   86c58:	4027883a 	mov	r19,r8
   86c5c:	e021883a 	mov	r16,fp
   86c60:	b009883a 	mov	r4,r22
   86c64:	01400284 	movi	r5,10
   86c68:	00820e40 	call	820e4 <__modsi3>
   86c6c:	10800c04 	addi	r2,r2,48
   86c70:	843fffc4 	addi	r16,r16,-1
   86c74:	b009883a 	mov	r4,r22
   86c78:	01400284 	movi	r5,10
   86c7c:	80800005 	stb	r2,0(r16)
   86c80:	00820600 	call	82060 <__divsi3>
   86c84:	102d883a 	mov	r22,r2
   86c88:	00800244 	movi	r2,9
   86c8c:	15bff416 	blt	r2,r22,86c60 <__ram_exceptions_end+0xfff66a2c>
   86c90:	9811883a 	mov	r8,r19
   86c94:	b0800c04 	addi	r2,r22,48
   86c98:	8027883a 	mov	r19,r16
   86c9c:	997fffc4 	addi	r5,r19,-1
   86ca0:	98bfffc5 	stb	r2,-1(r19)
   86ca4:	dc002a17 	ldw	r16,168(sp)
   86ca8:	2f006d2e 	bgeu	r5,fp,86e60 <___vfprintf_internal_r+0x22a4>
   86cac:	d9c02384 	addi	r7,sp,142
   86cb0:	3ccfc83a 	sub	r7,r7,r19
   86cb4:	d9002344 	addi	r4,sp,141
   86cb8:	e1cf883a 	add	r7,fp,r7
   86cbc:	00000106 	br	86cc4 <___vfprintf_internal_r+0x2108>
   86cc0:	28800003 	ldbu	r2,0(r5)
   86cc4:	20800005 	stb	r2,0(r4)
   86cc8:	21000044 	addi	r4,r4,1
   86ccc:	29400044 	addi	r5,r5,1
   86cd0:	393ffb1e 	bne	r7,r4,86cc0 <__ram_exceptions_end+0xfff66a8c>
   86cd4:	d8802304 	addi	r2,sp,140
   86cd8:	14c5c83a 	sub	r2,r2,r19
   86cdc:	d8c02344 	addi	r3,sp,141
   86ce0:	1885883a 	add	r2,r3,r2
   86ce4:	003f7006 	br	86aa8 <__ram_exceptions_end+0xfff66874>
   86ce8:	0005883a 	mov	r2,zero
   86cec:	003f0f06 	br	8692c <__ram_exceptions_end+0xfff666f8>
   86cf0:	d8c03217 	ldw	r3,200(sp)
   86cf4:	18c00044 	addi	r3,r3,1
   86cf8:	d8c02b15 	stw	r3,172(sp)
   86cfc:	1805883a 	mov	r2,r3
   86d00:	183fb20e 	bge	r3,zero,86bcc <__ram_exceptions_end+0xfff66998>
   86d04:	0005883a 	mov	r2,zero
   86d08:	003fb006 	br	86bcc <__ram_exceptions_end+0xfff66998>
   86d0c:	d9003617 	ldw	r4,216(sp)
   86d10:	000d883a 	mov	r6,zero
   86d14:	000f883a 	mov	r7,zero
   86d18:	980b883a 	mov	r5,r19
   86d1c:	d8c03c15 	stw	r3,240(sp)
   86d20:	da003d15 	stw	r8,244(sp)
   86d24:	0097e780 	call	97e78 <__eqdf2>
   86d28:	d8c03c17 	ldw	r3,240(sp)
   86d2c:	da003d17 	ldw	r8,244(sp)
   86d30:	103f9826 	beq	r2,zero,86b94 <__ram_exceptions_end+0xfff66960>
   86d34:	00800044 	movi	r2,1
   86d38:	10c7c83a 	sub	r3,r2,r3
   86d3c:	d8c02615 	stw	r3,152(sp)
   86d40:	003f9506 	br	86b98 <__ram_exceptions_end+0xfff66964>
   86d44:	d9002a17 	ldw	r4,168(sp)
   86d48:	d8c03217 	ldw	r3,200(sp)
   86d4c:	20800044 	addi	r2,r4,1
   86d50:	1885883a 	add	r2,r3,r2
   86d54:	d8802b15 	stw	r2,172(sp)
   86d58:	103dbf0e 	bge	r2,zero,86458 <__ram_exceptions_end+0xfff66224>
   86d5c:	0005883a 	mov	r2,zero
   86d60:	003dbd06 	br	86458 <__ram_exceptions_end+0xfff66224>
   86d64:	2000201e 	bne	r4,zero,86de8 <___vfprintf_internal_r+0x222c>
   86d68:	9480004c 	andi	r18,r18,1
   86d6c:	90001e1e 	bne	r18,zero,86de8 <___vfprintf_internal_r+0x222c>
   86d70:	00800044 	movi	r2,1
   86d74:	d8802b15 	stw	r2,172(sp)
   86d78:	003db706 	br	86458 <__ram_exceptions_end+0xfff66224>
   86d7c:	00800b44 	movi	r2,45
   86d80:	05adc83a 	sub	r22,zero,r22
   86d84:	d8802305 	stb	r2,140(sp)
   86d88:	003f3f06 	br	86a88 <__ram_exceptions_end+0xfff66854>
   86d8c:	0005883a 	mov	r2,zero
   86d90:	003f5206 	br	86adc <__ram_exceptions_end+0xfff668a8>
   86d94:	90a4703a 	and	r18,r18,r2
   86d98:	903f4e26 	beq	r18,zero,86ad4 <__ram_exceptions_end+0xfff668a0>
   86d9c:	003f4a06 	br	86ac8 <__ram_exceptions_end+0xfff66894>
   86da0:	00800084 	movi	r2,2
   86da4:	10c5c83a 	sub	r2,r2,r3
   86da8:	003f8406 	br	86bbc <__ram_exceptions_end+0xfff66988>
   86dac:	d9402e17 	ldw	r5,184(sp)
   86db0:	d9002e17 	ldw	r4,184(sp)
   86db4:	ac400043 	ldbu	r17,1(r21)
   86db8:	29400017 	ldw	r5,0(r5)
   86dbc:	20800104 	addi	r2,r4,4
   86dc0:	d8802e15 	stw	r2,184(sp)
   86dc4:	d9402a15 	stw	r5,168(sp)
   86dc8:	182b883a 	mov	r21,r3
   86dcc:	283e7b0e 	bge	r5,zero,867bc <__ram_exceptions_end+0xfff66588>
   86dd0:	8c403fcc 	andi	r17,r17,255
   86dd4:	017fffc4 	movi	r5,-1
   86dd8:	8c40201c 	xori	r17,r17,128
   86ddc:	d9402a15 	stw	r5,168(sp)
   86de0:	8c7fe004 	addi	r17,r17,-128
   86de4:	0037d706 	br	84d44 <__ram_exceptions_end+0xfff64b10>
   86de8:	d8c02a17 	ldw	r3,168(sp)
   86dec:	18c00084 	addi	r3,r3,2
   86df0:	d8c02b15 	stw	r3,172(sp)
   86df4:	1805883a 	mov	r2,r3
   86df8:	183d970e 	bge	r3,zero,86458 <__ram_exceptions_end+0xfff66224>
   86dfc:	003fd706 	br	86d5c <__ram_exceptions_end+0xfff66b28>
   86e00:	0005883a 	mov	r2,zero
   86e04:	003f8f06 	br	86c44 <__ram_exceptions_end+0xfff66a10>
   86e08:	9080004c 	andi	r2,r18,1
   86e0c:	103f821e 	bne	r2,zero,86c18 <__ram_exceptions_end+0xfff669e4>
   86e10:	d8802117 	ldw	r2,132(sp)
   86e14:	1405c83a 	sub	r2,r2,r16
   86e18:	d8803315 	stw	r2,204(sp)
   86e1c:	b47ef426 	beq	r22,r17,869f0 <__ram_exceptions_end+0xfff667bc>
   86e20:	dd802617 	ldw	r22,152(sp)
   86e24:	003f1206 	br	86a70 <__ram_exceptions_end+0xfff6683c>
   86e28:	d8c02b03 	ldbu	r3,172(sp)
   86e2c:	d8c02785 	stb	r3,158(sp)
   86e30:	0038df06 	br	851b0 <__ram_exceptions_end+0xfff64f7c>
   86e34:	d8c02b03 	ldbu	r3,172(sp)
   86e38:	d8c02785 	stb	r3,158(sp)
   86e3c:	0038aa06 	br	850e8 <__ram_exceptions_end+0xfff64eb4>
   86e40:	d8c02b03 	ldbu	r3,172(sp)
   86e44:	d8c02785 	stb	r3,158(sp)
   86e48:	003a4306 	br	85758 <__ram_exceptions_end+0xfff65524>
   86e4c:	d8c02b03 	ldbu	r3,172(sp)
   86e50:	d8c02785 	stb	r3,158(sp)
   86e54:	003af506 	br	85a2c <__ram_exceptions_end+0xfff657f8>
   86e58:	0005883a 	mov	r2,zero
   86e5c:	003d7b06 	br	8644c <__ram_exceptions_end+0xfff66218>
   86e60:	d8802344 	addi	r2,sp,141
   86e64:	003f1006 	br	86aa8 <__ram_exceptions_end+0xfff66874>
   86e68:	d8c02b03 	ldbu	r3,172(sp)
   86e6c:	d8c02785 	stb	r3,158(sp)
   86e70:	0038fd06 	br	85268 <__ram_exceptions_end+0xfff65034>
   86e74:	d8c02b03 	ldbu	r3,172(sp)
   86e78:	d8c02785 	stb	r3,158(sp)
   86e7c:	003a9706 	br	858dc <__ram_exceptions_end+0xfff656a8>
   86e80:	d8c02b03 	ldbu	r3,172(sp)
   86e84:	d8c02785 	stb	r3,158(sp)
   86e88:	003a1806 	br	856ec <__ram_exceptions_end+0xfff654b8>
   86e8c:	d8c02b03 	ldbu	r3,172(sp)
   86e90:	d8c02785 	stb	r3,158(sp)
   86e94:	003abe06 	br	85990 <__ram_exceptions_end+0xfff6575c>

00086e98 <__vfprintf_internal>:
   86e98:	008002b4 	movhi	r2,10
   86e9c:	10817a04 	addi	r2,r2,1512
   86ea0:	300f883a 	mov	r7,r6
   86ea4:	280d883a 	mov	r6,r5
   86ea8:	200b883a 	mov	r5,r4
   86eac:	11000017 	ldw	r4,0(r2)
   86eb0:	0084bbc1 	jmpi	84bbc <___vfprintf_internal_r>

00086eb4 <__sbprintf>:
   86eb4:	2880030b 	ldhu	r2,12(r5)
   86eb8:	2ac01917 	ldw	r11,100(r5)
   86ebc:	2a80038b 	ldhu	r10,14(r5)
   86ec0:	2a400717 	ldw	r9,28(r5)
   86ec4:	2a000917 	ldw	r8,36(r5)
   86ec8:	defee204 	addi	sp,sp,-1144
   86ecc:	00c10004 	movi	r3,1024
   86ed0:	dc011a15 	stw	r16,1128(sp)
   86ed4:	10bfff4c 	andi	r2,r2,65533
   86ed8:	2821883a 	mov	r16,r5
   86edc:	d8cb883a 	add	r5,sp,r3
   86ee0:	dc811c15 	stw	r18,1136(sp)
   86ee4:	dc411b15 	stw	r17,1132(sp)
   86ee8:	dfc11d15 	stw	ra,1140(sp)
   86eec:	2025883a 	mov	r18,r4
   86ef0:	d881030d 	sth	r2,1036(sp)
   86ef4:	dac11915 	stw	r11,1124(sp)
   86ef8:	da81038d 	sth	r10,1038(sp)
   86efc:	da410715 	stw	r9,1052(sp)
   86f00:	da010915 	stw	r8,1060(sp)
   86f04:	dec10015 	stw	sp,1024(sp)
   86f08:	dec10415 	stw	sp,1040(sp)
   86f0c:	d8c10215 	stw	r3,1032(sp)
   86f10:	d8c10515 	stw	r3,1044(sp)
   86f14:	d8010615 	stw	zero,1048(sp)
   86f18:	0084bbc0 	call	84bbc <___vfprintf_internal_r>
   86f1c:	1023883a 	mov	r17,r2
   86f20:	10000416 	blt	r2,zero,86f34 <__sbprintf+0x80>
   86f24:	d9410004 	addi	r5,sp,1024
   86f28:	9009883a 	mov	r4,r18
   86f2c:	0088c440 	call	88c44 <_fflush_r>
   86f30:	10000d1e 	bne	r2,zero,86f68 <__sbprintf+0xb4>
   86f34:	d881030b 	ldhu	r2,1036(sp)
   86f38:	1080100c 	andi	r2,r2,64
   86f3c:	10000326 	beq	r2,zero,86f4c <__sbprintf+0x98>
   86f40:	8080030b 	ldhu	r2,12(r16)
   86f44:	10801014 	ori	r2,r2,64
   86f48:	8080030d 	sth	r2,12(r16)
   86f4c:	8805883a 	mov	r2,r17
   86f50:	dfc11d17 	ldw	ra,1140(sp)
   86f54:	dc811c17 	ldw	r18,1136(sp)
   86f58:	dc411b17 	ldw	r17,1132(sp)
   86f5c:	dc011a17 	ldw	r16,1128(sp)
   86f60:	dec11e04 	addi	sp,sp,1144
   86f64:	f800283a 	ret
   86f68:	047fffc4 	movi	r17,-1
   86f6c:	003ff106 	br	86f34 <__ram_exceptions_end+0xfff66d00>

00086f70 <_write_r>:
   86f70:	defffd04 	addi	sp,sp,-12
   86f74:	2805883a 	mov	r2,r5
   86f78:	dc000015 	stw	r16,0(sp)
   86f7c:	040002b4 	movhi	r16,10
   86f80:	dc400115 	stw	r17,4(sp)
   86f84:	300b883a 	mov	r5,r6
   86f88:	8408d104 	addi	r16,r16,9028
   86f8c:	2023883a 	mov	r17,r4
   86f90:	380d883a 	mov	r6,r7
   86f94:	1009883a 	mov	r4,r2
   86f98:	dfc00215 	stw	ra,8(sp)
   86f9c:	80000015 	stw	zero,0(r16)
   86fa0:	0099f980 	call	99f98 <write>
   86fa4:	00ffffc4 	movi	r3,-1
   86fa8:	10c00526 	beq	r2,r3,86fc0 <_write_r+0x50>
   86fac:	dfc00217 	ldw	ra,8(sp)
   86fb0:	dc400117 	ldw	r17,4(sp)
   86fb4:	dc000017 	ldw	r16,0(sp)
   86fb8:	dec00304 	addi	sp,sp,12
   86fbc:	f800283a 	ret
   86fc0:	80c00017 	ldw	r3,0(r16)
   86fc4:	183ff926 	beq	r3,zero,86fac <__ram_exceptions_end+0xfff66d78>
   86fc8:	88c00015 	stw	r3,0(r17)
   86fcc:	003ff706 	br	86fac <__ram_exceptions_end+0xfff66d78>

00086fd0 <__swsetup_r>:
   86fd0:	008002b4 	movhi	r2,10
   86fd4:	defffd04 	addi	sp,sp,-12
   86fd8:	10817a04 	addi	r2,r2,1512
   86fdc:	dc400115 	stw	r17,4(sp)
   86fe0:	2023883a 	mov	r17,r4
   86fe4:	11000017 	ldw	r4,0(r2)
   86fe8:	dc000015 	stw	r16,0(sp)
   86fec:	dfc00215 	stw	ra,8(sp)
   86ff0:	2821883a 	mov	r16,r5
   86ff4:	20000226 	beq	r4,zero,87000 <__swsetup_r+0x30>
   86ff8:	20800e17 	ldw	r2,56(r4)
   86ffc:	10003126 	beq	r2,zero,870c4 <__swsetup_r+0xf4>
   87000:	8080030b 	ldhu	r2,12(r16)
   87004:	10c0020c 	andi	r3,r2,8
   87008:	1009883a 	mov	r4,r2
   8700c:	18000f26 	beq	r3,zero,8704c <__swsetup_r+0x7c>
   87010:	80c00417 	ldw	r3,16(r16)
   87014:	18001526 	beq	r3,zero,8706c <__swsetup_r+0x9c>
   87018:	1100004c 	andi	r4,r2,1
   8701c:	20001c1e 	bne	r4,zero,87090 <__swsetup_r+0xc0>
   87020:	1080008c 	andi	r2,r2,2
   87024:	1000291e 	bne	r2,zero,870cc <__swsetup_r+0xfc>
   87028:	80800517 	ldw	r2,20(r16)
   8702c:	80800215 	stw	r2,8(r16)
   87030:	18001c26 	beq	r3,zero,870a4 <__swsetup_r+0xd4>
   87034:	0005883a 	mov	r2,zero
   87038:	dfc00217 	ldw	ra,8(sp)
   8703c:	dc400117 	ldw	r17,4(sp)
   87040:	dc000017 	ldw	r16,0(sp)
   87044:	dec00304 	addi	sp,sp,12
   87048:	f800283a 	ret
   8704c:	2080040c 	andi	r2,r4,16
   87050:	10002e26 	beq	r2,zero,8710c <__swsetup_r+0x13c>
   87054:	2080010c 	andi	r2,r4,4
   87058:	10001e1e 	bne	r2,zero,870d4 <__swsetup_r+0x104>
   8705c:	80c00417 	ldw	r3,16(r16)
   87060:	20800214 	ori	r2,r4,8
   87064:	8080030d 	sth	r2,12(r16)
   87068:	183feb1e 	bne	r3,zero,87018 <__ram_exceptions_end+0xfff66de4>
   8706c:	1100a00c 	andi	r4,r2,640
   87070:	01408004 	movi	r5,512
   87074:	217fe826 	beq	r4,r5,87018 <__ram_exceptions_end+0xfff66de4>
   87078:	800b883a 	mov	r5,r16
   8707c:	8809883a 	mov	r4,r17
   87080:	0089c700 	call	89c70 <__smakebuf_r>
   87084:	8080030b 	ldhu	r2,12(r16)
   87088:	80c00417 	ldw	r3,16(r16)
   8708c:	003fe206 	br	87018 <__ram_exceptions_end+0xfff66de4>
   87090:	80800517 	ldw	r2,20(r16)
   87094:	80000215 	stw	zero,8(r16)
   87098:	0085c83a 	sub	r2,zero,r2
   8709c:	80800615 	stw	r2,24(r16)
   870a0:	183fe41e 	bne	r3,zero,87034 <__ram_exceptions_end+0xfff66e00>
   870a4:	80c0030b 	ldhu	r3,12(r16)
   870a8:	0005883a 	mov	r2,zero
   870ac:	1900200c 	andi	r4,r3,128
   870b0:	203fe126 	beq	r4,zero,87038 <__ram_exceptions_end+0xfff66e04>
   870b4:	18c01014 	ori	r3,r3,64
   870b8:	80c0030d 	sth	r3,12(r16)
   870bc:	00bfffc4 	movi	r2,-1
   870c0:	003fdd06 	br	87038 <__ram_exceptions_end+0xfff66e04>
   870c4:	00890300 	call	89030 <__sinit>
   870c8:	003fcd06 	br	87000 <__ram_exceptions_end+0xfff66dcc>
   870cc:	0005883a 	mov	r2,zero
   870d0:	003fd606 	br	8702c <__ram_exceptions_end+0xfff66df8>
   870d4:	81400c17 	ldw	r5,48(r16)
   870d8:	28000626 	beq	r5,zero,870f4 <__swsetup_r+0x124>
   870dc:	80801004 	addi	r2,r16,64
   870e0:	28800326 	beq	r5,r2,870f0 <__swsetup_r+0x120>
   870e4:	8809883a 	mov	r4,r17
   870e8:	00891a40 	call	891a4 <_free_r>
   870ec:	8100030b 	ldhu	r4,12(r16)
   870f0:	80000c15 	stw	zero,48(r16)
   870f4:	80c00417 	ldw	r3,16(r16)
   870f8:	00bff6c4 	movi	r2,-37
   870fc:	1108703a 	and	r4,r2,r4
   87100:	80000115 	stw	zero,4(r16)
   87104:	80c00015 	stw	r3,0(r16)
   87108:	003fd506 	br	87060 <__ram_exceptions_end+0xfff66e2c>
   8710c:	00800244 	movi	r2,9
   87110:	88800015 	stw	r2,0(r17)
   87114:	20801014 	ori	r2,r4,64
   87118:	8080030d 	sth	r2,12(r16)
   8711c:	00bfffc4 	movi	r2,-1
   87120:	003fc506 	br	87038 <__ram_exceptions_end+0xfff66e04>

00087124 <_close_r>:
   87124:	defffd04 	addi	sp,sp,-12
   87128:	dc000015 	stw	r16,0(sp)
   8712c:	040002b4 	movhi	r16,10
   87130:	dc400115 	stw	r17,4(sp)
   87134:	8408d104 	addi	r16,r16,9028
   87138:	2023883a 	mov	r17,r4
   8713c:	2809883a 	mov	r4,r5
   87140:	dfc00215 	stw	ra,8(sp)
   87144:	80000015 	stw	zero,0(r16)
   87148:	00996840 	call	99684 <close>
   8714c:	00ffffc4 	movi	r3,-1
   87150:	10c00526 	beq	r2,r3,87168 <_close_r+0x44>
   87154:	dfc00217 	ldw	ra,8(sp)
   87158:	dc400117 	ldw	r17,4(sp)
   8715c:	dc000017 	ldw	r16,0(sp)
   87160:	dec00304 	addi	sp,sp,12
   87164:	f800283a 	ret
   87168:	80c00017 	ldw	r3,0(r16)
   8716c:	183ff926 	beq	r3,zero,87154 <__ram_exceptions_end+0xfff66f20>
   87170:	88c00015 	stw	r3,0(r17)
   87174:	003ff706 	br	87154 <__ram_exceptions_end+0xfff66f20>

00087178 <quorem>:
   87178:	defff204 	addi	sp,sp,-56
   8717c:	ddc00b15 	stw	r23,44(sp)
   87180:	20800417 	ldw	r2,16(r4)
   87184:	2dc00417 	ldw	r23,16(r5)
   87188:	dfc00d15 	stw	ra,52(sp)
   8718c:	df000c15 	stw	fp,48(sp)
   87190:	dd800a15 	stw	r22,40(sp)
   87194:	dd400915 	stw	r21,36(sp)
   87198:	dd000815 	stw	r20,32(sp)
   8719c:	dcc00715 	stw	r19,28(sp)
   871a0:	dc800615 	stw	r18,24(sp)
   871a4:	dc400515 	stw	r17,20(sp)
   871a8:	dc000415 	stw	r16,16(sp)
   871ac:	15c07a16 	blt	r2,r23,87398 <quorem+0x220>
   871b0:	bdffffc4 	addi	r23,r23,-1
   871b4:	bde9883a 	add	r20,r23,r23
   871b8:	28c00504 	addi	r3,r5,20
   871bc:	a529883a 	add	r20,r20,r20
   871c0:	1d39883a 	add	fp,r3,r20
   871c4:	24c00504 	addi	r19,r4,20
   871c8:	d9400215 	stw	r5,8(sp)
   871cc:	9d29883a 	add	r20,r19,r20
   871d0:	e1400017 	ldw	r5,0(fp)
   871d4:	d9000015 	stw	r4,0(sp)
   871d8:	a1000017 	ldw	r4,0(r20)
   871dc:	29400044 	addi	r5,r5,1
   871e0:	d8c00115 	stw	r3,4(sp)
   871e4:	dd000315 	stw	r20,12(sp)
   871e8:	00821580 	call	82158 <__udivsi3>
   871ec:	1025883a 	mov	r18,r2
   871f0:	10003026 	beq	r2,zero,872b4 <quorem+0x13c>
   871f4:	dc400117 	ldw	r17,4(sp)
   871f8:	9829883a 	mov	r20,r19
   871fc:	002d883a 	mov	r22,zero
   87200:	0021883a 	mov	r16,zero
   87204:	8d400017 	ldw	r21,0(r17)
   87208:	900b883a 	mov	r5,r18
   8720c:	8c400104 	addi	r17,r17,4
   87210:	a93fffcc 	andi	r4,r21,65535
   87214:	00822140 	call	82214 <__mulsi3>
   87218:	a808d43a 	srli	r4,r21,16
   8721c:	900b883a 	mov	r5,r18
   87220:	15ad883a 	add	r22,r2,r22
   87224:	00822140 	call	82214 <__mulsi3>
   87228:	a1000017 	ldw	r4,0(r20)
   8722c:	b00cd43a 	srli	r6,r22,16
   87230:	b0ffffcc 	andi	r3,r22,65535
   87234:	217fffcc 	andi	r5,r4,65535
   87238:	2c21883a 	add	r16,r5,r16
   8723c:	80c7c83a 	sub	r3,r16,r3
   87240:	2008d43a 	srli	r4,r4,16
   87244:	1185883a 	add	r2,r2,r6
   87248:	1821d43a 	srai	r16,r3,16
   8724c:	117fffcc 	andi	r5,r2,65535
   87250:	2149c83a 	sub	r4,r4,r5
   87254:	2421883a 	add	r16,r4,r16
   87258:	8008943a 	slli	r4,r16,16
   8725c:	18ffffcc 	andi	r3,r3,65535
   87260:	102cd43a 	srli	r22,r2,16
   87264:	20c8b03a 	or	r4,r4,r3
   87268:	a1000015 	stw	r4,0(r20)
   8726c:	8021d43a 	srai	r16,r16,16
   87270:	a5000104 	addi	r20,r20,4
   87274:	e47fe32e 	bgeu	fp,r17,87204 <__ram_exceptions_end+0xfff66fd0>
   87278:	d8c00317 	ldw	r3,12(sp)
   8727c:	18800017 	ldw	r2,0(r3)
   87280:	10000c1e 	bne	r2,zero,872b4 <quorem+0x13c>
   87284:	18bfff04 	addi	r2,r3,-4
   87288:	9880082e 	bgeu	r19,r2,872ac <quorem+0x134>
   8728c:	18ffff17 	ldw	r3,-4(r3)
   87290:	18000326 	beq	r3,zero,872a0 <quorem+0x128>
   87294:	00000506 	br	872ac <quorem+0x134>
   87298:	10c00017 	ldw	r3,0(r2)
   8729c:	1800031e 	bne	r3,zero,872ac <quorem+0x134>
   872a0:	10bfff04 	addi	r2,r2,-4
   872a4:	bdffffc4 	addi	r23,r23,-1
   872a8:	98bffb36 	bltu	r19,r2,87298 <__ram_exceptions_end+0xfff67064>
   872ac:	d8c00017 	ldw	r3,0(sp)
   872b0:	1dc00415 	stw	r23,16(r3)
   872b4:	d9400217 	ldw	r5,8(sp)
   872b8:	d9000017 	ldw	r4,0(sp)
   872bc:	008ad3c0 	call	8ad3c <__mcmp>
   872c0:	10002816 	blt	r2,zero,87364 <quorem+0x1ec>
   872c4:	dc400117 	ldw	r17,4(sp)
   872c8:	94800044 	addi	r18,r18,1
   872cc:	980d883a 	mov	r6,r19
   872d0:	0007883a 	mov	r3,zero
   872d4:	31000017 	ldw	r4,0(r6)
   872d8:	89400017 	ldw	r5,0(r17)
   872dc:	31800104 	addi	r6,r6,4
   872e0:	20bfffcc 	andi	r2,r4,65535
   872e4:	10c7883a 	add	r3,r2,r3
   872e8:	28bfffcc 	andi	r2,r5,65535
   872ec:	1885c83a 	sub	r2,r3,r2
   872f0:	280ad43a 	srli	r5,r5,16
   872f4:	2008d43a 	srli	r4,r4,16
   872f8:	1007d43a 	srai	r3,r2,16
   872fc:	10bfffcc 	andi	r2,r2,65535
   87300:	2149c83a 	sub	r4,r4,r5
   87304:	20c9883a 	add	r4,r4,r3
   87308:	200a943a 	slli	r5,r4,16
   8730c:	8c400104 	addi	r17,r17,4
   87310:	2007d43a 	srai	r3,r4,16
   87314:	2884b03a 	or	r2,r5,r2
   87318:	30bfff15 	stw	r2,-4(r6)
   8731c:	e47fed2e 	bgeu	fp,r17,872d4 <__ram_exceptions_end+0xfff670a0>
   87320:	bdc5883a 	add	r2,r23,r23
   87324:	1085883a 	add	r2,r2,r2
   87328:	9887883a 	add	r3,r19,r2
   8732c:	18800017 	ldw	r2,0(r3)
   87330:	10000c1e 	bne	r2,zero,87364 <quorem+0x1ec>
   87334:	18bfff04 	addi	r2,r3,-4
   87338:	9880082e 	bgeu	r19,r2,8735c <quorem+0x1e4>
   8733c:	18ffff17 	ldw	r3,-4(r3)
   87340:	18000326 	beq	r3,zero,87350 <quorem+0x1d8>
   87344:	00000506 	br	8735c <quorem+0x1e4>
   87348:	10c00017 	ldw	r3,0(r2)
   8734c:	1800031e 	bne	r3,zero,8735c <quorem+0x1e4>
   87350:	10bfff04 	addi	r2,r2,-4
   87354:	bdffffc4 	addi	r23,r23,-1
   87358:	98bffb36 	bltu	r19,r2,87348 <__ram_exceptions_end+0xfff67114>
   8735c:	d8c00017 	ldw	r3,0(sp)
   87360:	1dc00415 	stw	r23,16(r3)
   87364:	9005883a 	mov	r2,r18
   87368:	dfc00d17 	ldw	ra,52(sp)
   8736c:	df000c17 	ldw	fp,48(sp)
   87370:	ddc00b17 	ldw	r23,44(sp)
   87374:	dd800a17 	ldw	r22,40(sp)
   87378:	dd400917 	ldw	r21,36(sp)
   8737c:	dd000817 	ldw	r20,32(sp)
   87380:	dcc00717 	ldw	r19,28(sp)
   87384:	dc800617 	ldw	r18,24(sp)
   87388:	dc400517 	ldw	r17,20(sp)
   8738c:	dc000417 	ldw	r16,16(sp)
   87390:	dec00e04 	addi	sp,sp,56
   87394:	f800283a 	ret
   87398:	0005883a 	mov	r2,zero
   8739c:	003ff206 	br	87368 <__ram_exceptions_end+0xfff67134>

000873a0 <_dtoa_r>:
   873a0:	20801017 	ldw	r2,64(r4)
   873a4:	deffde04 	addi	sp,sp,-136
   873a8:	df002015 	stw	fp,128(sp)
   873ac:	dcc01b15 	stw	r19,108(sp)
   873b0:	dc801a15 	stw	r18,104(sp)
   873b4:	dc401915 	stw	r17,100(sp)
   873b8:	dc001815 	stw	r16,96(sp)
   873bc:	dfc02115 	stw	ra,132(sp)
   873c0:	ddc01f15 	stw	r23,124(sp)
   873c4:	dd801e15 	stw	r22,120(sp)
   873c8:	dd401d15 	stw	r21,116(sp)
   873cc:	dd001c15 	stw	r20,112(sp)
   873d0:	d9c00315 	stw	r7,12(sp)
   873d4:	2039883a 	mov	fp,r4
   873d8:	3023883a 	mov	r17,r6
   873dc:	2825883a 	mov	r18,r5
   873e0:	dc002417 	ldw	r16,144(sp)
   873e4:	3027883a 	mov	r19,r6
   873e8:	10000826 	beq	r2,zero,8740c <_dtoa_r+0x6c>
   873ec:	21801117 	ldw	r6,68(r4)
   873f0:	00c00044 	movi	r3,1
   873f4:	100b883a 	mov	r5,r2
   873f8:	1986983a 	sll	r3,r3,r6
   873fc:	11800115 	stw	r6,4(r2)
   87400:	10c00215 	stw	r3,8(r2)
   87404:	008a4600 	call	8a460 <_Bfree>
   87408:	e0001015 	stw	zero,64(fp)
   8740c:	88002e16 	blt	r17,zero,874c8 <_dtoa_r+0x128>
   87410:	80000015 	stw	zero,0(r16)
   87414:	889ffc2c 	andhi	r2,r17,32752
   87418:	00dffc34 	movhi	r3,32752
   8741c:	10c01c26 	beq	r2,r3,87490 <_dtoa_r+0xf0>
   87420:	000d883a 	mov	r6,zero
   87424:	000f883a 	mov	r7,zero
   87428:	9009883a 	mov	r4,r18
   8742c:	980b883a 	mov	r5,r19
   87430:	0097e780 	call	97e78 <__eqdf2>
   87434:	10002b1e 	bne	r2,zero,874e4 <_dtoa_r+0x144>
   87438:	d9c02317 	ldw	r7,140(sp)
   8743c:	00800044 	movi	r2,1
   87440:	38800015 	stw	r2,0(r7)
   87444:	d8802517 	ldw	r2,148(sp)
   87448:	10019e26 	beq	r2,zero,87ac4 <_dtoa_r+0x724>
   8744c:	d8c02517 	ldw	r3,148(sp)
   87450:	008002b4 	movhi	r2,10
   87454:	10b88644 	addi	r2,r2,-7655
   87458:	18800015 	stw	r2,0(r3)
   8745c:	10bfffc4 	addi	r2,r2,-1
   87460:	dfc02117 	ldw	ra,132(sp)
   87464:	df002017 	ldw	fp,128(sp)
   87468:	ddc01f17 	ldw	r23,124(sp)
   8746c:	dd801e17 	ldw	r22,120(sp)
   87470:	dd401d17 	ldw	r21,116(sp)
   87474:	dd001c17 	ldw	r20,112(sp)
   87478:	dcc01b17 	ldw	r19,108(sp)
   8747c:	dc801a17 	ldw	r18,104(sp)
   87480:	dc401917 	ldw	r17,100(sp)
   87484:	dc001817 	ldw	r16,96(sp)
   87488:	dec02204 	addi	sp,sp,136
   8748c:	f800283a 	ret
   87490:	d8c02317 	ldw	r3,140(sp)
   87494:	0089c3c4 	movi	r2,9999
   87498:	18800015 	stw	r2,0(r3)
   8749c:	90017726 	beq	r18,zero,87a7c <_dtoa_r+0x6dc>
   874a0:	008002b4 	movhi	r2,10
   874a4:	10b93204 	addi	r2,r2,-6968
   874a8:	d9002517 	ldw	r4,148(sp)
   874ac:	203fec26 	beq	r4,zero,87460 <__ram_exceptions_end+0xfff6722c>
   874b0:	10c000c7 	ldb	r3,3(r2)
   874b4:	1801781e 	bne	r3,zero,87a98 <_dtoa_r+0x6f8>
   874b8:	10c000c4 	addi	r3,r2,3
   874bc:	d9802517 	ldw	r6,148(sp)
   874c0:	30c00015 	stw	r3,0(r6)
   874c4:	003fe606 	br	87460 <__ram_exceptions_end+0xfff6722c>
   874c8:	04e00034 	movhi	r19,32768
   874cc:	9cffffc4 	addi	r19,r19,-1
   874d0:	00800044 	movi	r2,1
   874d4:	8ce6703a 	and	r19,r17,r19
   874d8:	80800015 	stw	r2,0(r16)
   874dc:	9823883a 	mov	r17,r19
   874e0:	003fcc06 	br	87414 <__ram_exceptions_end+0xfff671e0>
   874e4:	d8800204 	addi	r2,sp,8
   874e8:	d8800015 	stw	r2,0(sp)
   874ec:	d9c00104 	addi	r7,sp,4
   874f0:	900b883a 	mov	r5,r18
   874f4:	980d883a 	mov	r6,r19
   874f8:	e009883a 	mov	r4,fp
   874fc:	8820d53a 	srli	r16,r17,20
   87500:	008b1080 	call	8b108 <__d2b>
   87504:	d8800915 	stw	r2,36(sp)
   87508:	8001651e 	bne	r16,zero,87aa0 <_dtoa_r+0x700>
   8750c:	dd800217 	ldw	r22,8(sp)
   87510:	dc000117 	ldw	r16,4(sp)
   87514:	00800804 	movi	r2,32
   87518:	b421883a 	add	r16,r22,r16
   8751c:	80c10c84 	addi	r3,r16,1074
   87520:	10c2d10e 	bge	r2,r3,88068 <_dtoa_r+0xcc8>
   87524:	00801004 	movi	r2,64
   87528:	81010484 	addi	r4,r16,1042
   8752c:	10c7c83a 	sub	r3,r2,r3
   87530:	9108d83a 	srl	r4,r18,r4
   87534:	88e2983a 	sll	r17,r17,r3
   87538:	2448b03a 	or	r4,r4,r17
   8753c:	00993940 	call	99394 <__floatunsidf>
   87540:	017f8434 	movhi	r5,65040
   87544:	01800044 	movi	r6,1
   87548:	1009883a 	mov	r4,r2
   8754c:	194b883a 	add	r5,r3,r5
   87550:	843fffc4 	addi	r16,r16,-1
   87554:	d9801115 	stw	r6,68(sp)
   87558:	000d883a 	mov	r6,zero
   8755c:	01cffe34 	movhi	r7,16376
   87560:	009893c0 	call	9893c <__subdf3>
   87564:	0198dbf4 	movhi	r6,25455
   87568:	01cff4f4 	movhi	r7,16339
   8756c:	3190d844 	addi	r6,r6,17249
   87570:	39e1e9c4 	addi	r7,r7,-30809
   87574:	1009883a 	mov	r4,r2
   87578:	180b883a 	mov	r5,r3
   8757c:	00980d00 	call	980d0 <__muldf3>
   87580:	01a2d874 	movhi	r6,35681
   87584:	01cff1f4 	movhi	r7,16327
   87588:	31b22cc4 	addi	r6,r6,-14157
   8758c:	39e28a04 	addi	r7,r7,-30168
   87590:	180b883a 	mov	r5,r3
   87594:	1009883a 	mov	r4,r2
   87598:	0096bfc0 	call	96bfc <__adddf3>
   8759c:	8009883a 	mov	r4,r16
   875a0:	1029883a 	mov	r20,r2
   875a4:	1823883a 	mov	r17,r3
   875a8:	00992b80 	call	992b8 <__floatsidf>
   875ac:	019427f4 	movhi	r6,20639
   875b0:	01cff4f4 	movhi	r7,16339
   875b4:	319e7ec4 	addi	r6,r6,31227
   875b8:	39d104c4 	addi	r7,r7,17427
   875bc:	1009883a 	mov	r4,r2
   875c0:	180b883a 	mov	r5,r3
   875c4:	00980d00 	call	980d0 <__muldf3>
   875c8:	100d883a 	mov	r6,r2
   875cc:	180f883a 	mov	r7,r3
   875d0:	a009883a 	mov	r4,r20
   875d4:	880b883a 	mov	r5,r17
   875d8:	0096bfc0 	call	96bfc <__adddf3>
   875dc:	1009883a 	mov	r4,r2
   875e0:	180b883a 	mov	r5,r3
   875e4:	1029883a 	mov	r20,r2
   875e8:	1823883a 	mov	r17,r3
   875ec:	00992380 	call	99238 <__fixdfsi>
   875f0:	000d883a 	mov	r6,zero
   875f4:	000f883a 	mov	r7,zero
   875f8:	a009883a 	mov	r4,r20
   875fc:	880b883a 	mov	r5,r17
   87600:	d8800515 	stw	r2,20(sp)
   87604:	0097fdc0 	call	97fdc <__ledf2>
   87608:	10028716 	blt	r2,zero,88028 <_dtoa_r+0xc88>
   8760c:	d8c00517 	ldw	r3,20(sp)
   87610:	00800584 	movi	r2,22
   87614:	10c27536 	bltu	r2,r3,87fec <_dtoa_r+0xc4c>
   87618:	180490fa 	slli	r2,r3,3
   8761c:	00c002b4 	movhi	r3,10
   87620:	18f94d04 	addi	r3,r3,-6860
   87624:	1885883a 	add	r2,r3,r2
   87628:	11000017 	ldw	r4,0(r2)
   8762c:	11400117 	ldw	r5,4(r2)
   87630:	900d883a 	mov	r6,r18
   87634:	980f883a 	mov	r7,r19
   87638:	0097f000 	call	97f00 <__gedf2>
   8763c:	00828d0e 	bge	zero,r2,88074 <_dtoa_r+0xcd4>
   87640:	d9000517 	ldw	r4,20(sp)
   87644:	d8000e15 	stw	zero,56(sp)
   87648:	213fffc4 	addi	r4,r4,-1
   8764c:	d9000515 	stw	r4,20(sp)
   87650:	b42dc83a 	sub	r22,r22,r16
   87654:	b5bfffc4 	addi	r22,r22,-1
   87658:	b0026f16 	blt	r22,zero,88018 <_dtoa_r+0xc78>
   8765c:	d8000815 	stw	zero,32(sp)
   87660:	d9c00517 	ldw	r7,20(sp)
   87664:	38026416 	blt	r7,zero,87ff8 <_dtoa_r+0xc58>
   87668:	b1ed883a 	add	r22,r22,r7
   8766c:	d9c00d15 	stw	r7,52(sp)
   87670:	d8000a15 	stw	zero,40(sp)
   87674:	d9800317 	ldw	r6,12(sp)
   87678:	00800244 	movi	r2,9
   8767c:	11811436 	bltu	r2,r6,87ad0 <_dtoa_r+0x730>
   87680:	00800144 	movi	r2,5
   87684:	1184e10e 	bge	r2,r6,88a0c <_dtoa_r+0x166c>
   87688:	31bfff04 	addi	r6,r6,-4
   8768c:	d9800315 	stw	r6,12(sp)
   87690:	0023883a 	mov	r17,zero
   87694:	d9800317 	ldw	r6,12(sp)
   87698:	008000c4 	movi	r2,3
   8769c:	30836726 	beq	r6,r2,8843c <_dtoa_r+0x109c>
   876a0:	1183410e 	bge	r2,r6,883a8 <_dtoa_r+0x1008>
   876a4:	d9c00317 	ldw	r7,12(sp)
   876a8:	00800104 	movi	r2,4
   876ac:	38827c26 	beq	r7,r2,880a0 <_dtoa_r+0xd00>
   876b0:	00800144 	movi	r2,5
   876b4:	3884c41e 	bne	r7,r2,889c8 <_dtoa_r+0x1628>
   876b8:	00800044 	movi	r2,1
   876bc:	d8800b15 	stw	r2,44(sp)
   876c0:	d8c00517 	ldw	r3,20(sp)
   876c4:	d9002217 	ldw	r4,136(sp)
   876c8:	1907883a 	add	r3,r3,r4
   876cc:	19800044 	addi	r6,r3,1
   876d0:	d8c00c15 	stw	r3,48(sp)
   876d4:	d9800615 	stw	r6,24(sp)
   876d8:	0183a40e 	bge	zero,r6,8856c <_dtoa_r+0x11cc>
   876dc:	d9800617 	ldw	r6,24(sp)
   876e0:	3021883a 	mov	r16,r6
   876e4:	e0001115 	stw	zero,68(fp)
   876e8:	008005c4 	movi	r2,23
   876ec:	1184c92e 	bgeu	r2,r6,88a14 <_dtoa_r+0x1674>
   876f0:	00c00044 	movi	r3,1
   876f4:	00800104 	movi	r2,4
   876f8:	1085883a 	add	r2,r2,r2
   876fc:	11000504 	addi	r4,r2,20
   87700:	180b883a 	mov	r5,r3
   87704:	18c00044 	addi	r3,r3,1
   87708:	313ffb2e 	bgeu	r6,r4,876f8 <__ram_exceptions_end+0xfff674c4>
   8770c:	e1401115 	stw	r5,68(fp)
   87710:	e009883a 	mov	r4,fp
   87714:	008a3b80 	call	8a3b8 <_Balloc>
   87718:	d8800715 	stw	r2,28(sp)
   8771c:	e0801015 	stw	r2,64(fp)
   87720:	00800384 	movi	r2,14
   87724:	1400f736 	bltu	r2,r16,87b04 <_dtoa_r+0x764>
   87728:	8800f626 	beq	r17,zero,87b04 <_dtoa_r+0x764>
   8772c:	d9c00517 	ldw	r7,20(sp)
   87730:	01c39a0e 	bge	zero,r7,8859c <_dtoa_r+0x11fc>
   87734:	388003cc 	andi	r2,r7,15
   87738:	100490fa 	slli	r2,r2,3
   8773c:	382bd13a 	srai	r21,r7,4
   87740:	00c002b4 	movhi	r3,10
   87744:	18f94d04 	addi	r3,r3,-6860
   87748:	1885883a 	add	r2,r3,r2
   8774c:	a8c0040c 	andi	r3,r21,16
   87750:	12400017 	ldw	r9,0(r2)
   87754:	12000117 	ldw	r8,4(r2)
   87758:	18037926 	beq	r3,zero,88540 <_dtoa_r+0x11a0>
   8775c:	008002b4 	movhi	r2,10
   87760:	10b94304 	addi	r2,r2,-6900
   87764:	11800817 	ldw	r6,32(r2)
   87768:	11c00917 	ldw	r7,36(r2)
   8776c:	9009883a 	mov	r4,r18
   87770:	980b883a 	mov	r5,r19
   87774:	da001715 	stw	r8,92(sp)
   87778:	da401615 	stw	r9,88(sp)
   8777c:	00974a80 	call	974a8 <__divdf3>
   87780:	da001717 	ldw	r8,92(sp)
   87784:	da401617 	ldw	r9,88(sp)
   87788:	ad4003cc 	andi	r21,r21,15
   8778c:	040000c4 	movi	r16,3
   87790:	1023883a 	mov	r17,r2
   87794:	1829883a 	mov	r20,r3
   87798:	a8001126 	beq	r21,zero,877e0 <_dtoa_r+0x440>
   8779c:	05c002b4 	movhi	r23,10
   877a0:	bdf94304 	addi	r23,r23,-6900
   877a4:	4805883a 	mov	r2,r9
   877a8:	4007883a 	mov	r3,r8
   877ac:	a980004c 	andi	r6,r21,1
   877b0:	1009883a 	mov	r4,r2
   877b4:	a82bd07a 	srai	r21,r21,1
   877b8:	180b883a 	mov	r5,r3
   877bc:	30000426 	beq	r6,zero,877d0 <_dtoa_r+0x430>
   877c0:	b9800017 	ldw	r6,0(r23)
   877c4:	b9c00117 	ldw	r7,4(r23)
   877c8:	84000044 	addi	r16,r16,1
   877cc:	00980d00 	call	980d0 <__muldf3>
   877d0:	bdc00204 	addi	r23,r23,8
   877d4:	a83ff51e 	bne	r21,zero,877ac <__ram_exceptions_end+0xfff67578>
   877d8:	1013883a 	mov	r9,r2
   877dc:	1811883a 	mov	r8,r3
   877e0:	480d883a 	mov	r6,r9
   877e4:	400f883a 	mov	r7,r8
   877e8:	8809883a 	mov	r4,r17
   877ec:	a00b883a 	mov	r5,r20
   877f0:	00974a80 	call	974a8 <__divdf3>
   877f4:	d8800f15 	stw	r2,60(sp)
   877f8:	d8c01015 	stw	r3,64(sp)
   877fc:	d8c00e17 	ldw	r3,56(sp)
   87800:	18000626 	beq	r3,zero,8781c <_dtoa_r+0x47c>
   87804:	d9000f17 	ldw	r4,60(sp)
   87808:	d9401017 	ldw	r5,64(sp)
   8780c:	000d883a 	mov	r6,zero
   87810:	01cffc34 	movhi	r7,16368
   87814:	0097fdc0 	call	97fdc <__ledf2>
   87818:	10040b16 	blt	r2,zero,88848 <_dtoa_r+0x14a8>
   8781c:	8009883a 	mov	r4,r16
   87820:	00992b80 	call	992b8 <__floatsidf>
   87824:	d9800f17 	ldw	r6,60(sp)
   87828:	d9c01017 	ldw	r7,64(sp)
   8782c:	1009883a 	mov	r4,r2
   87830:	180b883a 	mov	r5,r3
   87834:	00980d00 	call	980d0 <__muldf3>
   87838:	000d883a 	mov	r6,zero
   8783c:	01d00734 	movhi	r7,16412
   87840:	1009883a 	mov	r4,r2
   87844:	180b883a 	mov	r5,r3
   87848:	0096bfc0 	call	96bfc <__adddf3>
   8784c:	1021883a 	mov	r16,r2
   87850:	d8800617 	ldw	r2,24(sp)
   87854:	047f3034 	movhi	r17,64704
   87858:	1c63883a 	add	r17,r3,r17
   8785c:	10031826 	beq	r2,zero,884c0 <_dtoa_r+0x1120>
   87860:	d8c00517 	ldw	r3,20(sp)
   87864:	db000617 	ldw	r12,24(sp)
   87868:	d8c01315 	stw	r3,76(sp)
   8786c:	d9000b17 	ldw	r4,44(sp)
   87870:	20038f26 	beq	r4,zero,886b0 <_dtoa_r+0x1310>
   87874:	60bfffc4 	addi	r2,r12,-1
   87878:	100490fa 	slli	r2,r2,3
   8787c:	00c002b4 	movhi	r3,10
   87880:	18f94d04 	addi	r3,r3,-6860
   87884:	1885883a 	add	r2,r3,r2
   87888:	11800017 	ldw	r6,0(r2)
   8788c:	11c00117 	ldw	r7,4(r2)
   87890:	d8800717 	ldw	r2,28(sp)
   87894:	0009883a 	mov	r4,zero
   87898:	014ff834 	movhi	r5,16352
   8789c:	db001615 	stw	r12,88(sp)
   878a0:	15c00044 	addi	r23,r2,1
   878a4:	00974a80 	call	974a8 <__divdf3>
   878a8:	800d883a 	mov	r6,r16
   878ac:	880f883a 	mov	r7,r17
   878b0:	1009883a 	mov	r4,r2
   878b4:	180b883a 	mov	r5,r3
   878b8:	009893c0 	call	9893c <__subdf3>
   878bc:	d9401017 	ldw	r5,64(sp)
   878c0:	d9000f17 	ldw	r4,60(sp)
   878c4:	102b883a 	mov	r21,r2
   878c8:	d8c01215 	stw	r3,72(sp)
   878cc:	00992380 	call	99238 <__fixdfsi>
   878d0:	1009883a 	mov	r4,r2
   878d4:	1029883a 	mov	r20,r2
   878d8:	00992b80 	call	992b8 <__floatsidf>
   878dc:	d9000f17 	ldw	r4,60(sp)
   878e0:	d9401017 	ldw	r5,64(sp)
   878e4:	100d883a 	mov	r6,r2
   878e8:	180f883a 	mov	r7,r3
   878ec:	009893c0 	call	9893c <__subdf3>
   878f0:	1823883a 	mov	r17,r3
   878f4:	d8c00717 	ldw	r3,28(sp)
   878f8:	d9401217 	ldw	r5,72(sp)
   878fc:	a2000c04 	addi	r8,r20,48
   87900:	1021883a 	mov	r16,r2
   87904:	1a000005 	stb	r8,0(r3)
   87908:	800d883a 	mov	r6,r16
   8790c:	880f883a 	mov	r7,r17
   87910:	a809883a 	mov	r4,r21
   87914:	4029883a 	mov	r20,r8
   87918:	0097f000 	call	97f00 <__gedf2>
   8791c:	00841d16 	blt	zero,r2,88994 <_dtoa_r+0x15f4>
   87920:	800d883a 	mov	r6,r16
   87924:	880f883a 	mov	r7,r17
   87928:	0009883a 	mov	r4,zero
   8792c:	014ffc34 	movhi	r5,16368
   87930:	009893c0 	call	9893c <__subdf3>
   87934:	d9401217 	ldw	r5,72(sp)
   87938:	100d883a 	mov	r6,r2
   8793c:	180f883a 	mov	r7,r3
   87940:	a809883a 	mov	r4,r21
   87944:	0097f000 	call	97f00 <__gedf2>
   87948:	db001617 	ldw	r12,88(sp)
   8794c:	00840e16 	blt	zero,r2,88988 <_dtoa_r+0x15e8>
   87950:	00800044 	movi	r2,1
   87954:	13006b0e 	bge	r2,r12,87b04 <_dtoa_r+0x764>
   87958:	d9000717 	ldw	r4,28(sp)
   8795c:	dd800f15 	stw	r22,60(sp)
   87960:	dcc01015 	stw	r19,64(sp)
   87964:	2319883a 	add	r12,r4,r12
   87968:	dcc01217 	ldw	r19,72(sp)
   8796c:	602d883a 	mov	r22,r12
   87970:	dc801215 	stw	r18,72(sp)
   87974:	b825883a 	mov	r18,r23
   87978:	00000906 	br	879a0 <_dtoa_r+0x600>
   8797c:	009893c0 	call	9893c <__subdf3>
   87980:	a80d883a 	mov	r6,r21
   87984:	980f883a 	mov	r7,r19
   87988:	1009883a 	mov	r4,r2
   8798c:	180b883a 	mov	r5,r3
   87990:	0097fdc0 	call	97fdc <__ledf2>
   87994:	1003e816 	blt	r2,zero,88938 <_dtoa_r+0x1598>
   87998:	b825883a 	mov	r18,r23
   8799c:	bd83e926 	beq	r23,r22,88944 <_dtoa_r+0x15a4>
   879a0:	a809883a 	mov	r4,r21
   879a4:	980b883a 	mov	r5,r19
   879a8:	000d883a 	mov	r6,zero
   879ac:	01d00934 	movhi	r7,16420
   879b0:	00980d00 	call	980d0 <__muldf3>
   879b4:	000d883a 	mov	r6,zero
   879b8:	01d00934 	movhi	r7,16420
   879bc:	8009883a 	mov	r4,r16
   879c0:	880b883a 	mov	r5,r17
   879c4:	102b883a 	mov	r21,r2
   879c8:	1827883a 	mov	r19,r3
   879cc:	00980d00 	call	980d0 <__muldf3>
   879d0:	180b883a 	mov	r5,r3
   879d4:	1009883a 	mov	r4,r2
   879d8:	1821883a 	mov	r16,r3
   879dc:	1023883a 	mov	r17,r2
   879e0:	00992380 	call	99238 <__fixdfsi>
   879e4:	1009883a 	mov	r4,r2
   879e8:	1029883a 	mov	r20,r2
   879ec:	00992b80 	call	992b8 <__floatsidf>
   879f0:	8809883a 	mov	r4,r17
   879f4:	800b883a 	mov	r5,r16
   879f8:	100d883a 	mov	r6,r2
   879fc:	180f883a 	mov	r7,r3
   87a00:	009893c0 	call	9893c <__subdf3>
   87a04:	a5000c04 	addi	r20,r20,48
   87a08:	a80d883a 	mov	r6,r21
   87a0c:	980f883a 	mov	r7,r19
   87a10:	1009883a 	mov	r4,r2
   87a14:	180b883a 	mov	r5,r3
   87a18:	95000005 	stb	r20,0(r18)
   87a1c:	1021883a 	mov	r16,r2
   87a20:	1823883a 	mov	r17,r3
   87a24:	0097fdc0 	call	97fdc <__ledf2>
   87a28:	bdc00044 	addi	r23,r23,1
   87a2c:	800d883a 	mov	r6,r16
   87a30:	880f883a 	mov	r7,r17
   87a34:	0009883a 	mov	r4,zero
   87a38:	014ffc34 	movhi	r5,16368
   87a3c:	103fcf0e 	bge	r2,zero,8797c <__ram_exceptions_end+0xfff67748>
   87a40:	d8c01317 	ldw	r3,76(sp)
   87a44:	d8c00515 	stw	r3,20(sp)
   87a48:	d9400917 	ldw	r5,36(sp)
   87a4c:	e009883a 	mov	r4,fp
   87a50:	008a4600 	call	8a460 <_Bfree>
   87a54:	d9000517 	ldw	r4,20(sp)
   87a58:	d9802317 	ldw	r6,140(sp)
   87a5c:	d9c02517 	ldw	r7,148(sp)
   87a60:	b8000005 	stb	zero,0(r23)
   87a64:	20800044 	addi	r2,r4,1
   87a68:	30800015 	stw	r2,0(r6)
   87a6c:	3802aa26 	beq	r7,zero,88518 <_dtoa_r+0x1178>
   87a70:	3dc00015 	stw	r23,0(r7)
   87a74:	d8800717 	ldw	r2,28(sp)
   87a78:	003e7906 	br	87460 <__ram_exceptions_end+0xfff6722c>
   87a7c:	00800434 	movhi	r2,16
   87a80:	10bfffc4 	addi	r2,r2,-1
   87a84:	88a2703a 	and	r17,r17,r2
   87a88:	883e851e 	bne	r17,zero,874a0 <__ram_exceptions_end+0xfff6726c>
   87a8c:	008002b4 	movhi	r2,10
   87a90:	10b92f04 	addi	r2,r2,-6980
   87a94:	003e8406 	br	874a8 <__ram_exceptions_end+0xfff67274>
   87a98:	10c00204 	addi	r3,r2,8
   87a9c:	003e8706 	br	874bc <__ram_exceptions_end+0xfff67288>
   87aa0:	01400434 	movhi	r5,16
   87aa4:	297fffc4 	addi	r5,r5,-1
   87aa8:	994a703a 	and	r5,r19,r5
   87aac:	9009883a 	mov	r4,r18
   87ab0:	843f0044 	addi	r16,r16,-1023
   87ab4:	294ffc34 	orhi	r5,r5,16368
   87ab8:	dd800217 	ldw	r22,8(sp)
   87abc:	d8001115 	stw	zero,68(sp)
   87ac0:	003ea506 	br	87558 <__ram_exceptions_end+0xfff67324>
   87ac4:	008002b4 	movhi	r2,10
   87ac8:	10b88604 	addi	r2,r2,-7656
   87acc:	003e6406 	br	87460 <__ram_exceptions_end+0xfff6722c>
   87ad0:	e0001115 	stw	zero,68(fp)
   87ad4:	000b883a 	mov	r5,zero
   87ad8:	e009883a 	mov	r4,fp
   87adc:	008a3b80 	call	8a3b8 <_Balloc>
   87ae0:	01bfffc4 	movi	r6,-1
   87ae4:	01c00044 	movi	r7,1
   87ae8:	d8800715 	stw	r2,28(sp)
   87aec:	d9800c15 	stw	r6,48(sp)
   87af0:	e0801015 	stw	r2,64(fp)
   87af4:	d8000315 	stw	zero,12(sp)
   87af8:	d9c00b15 	stw	r7,44(sp)
   87afc:	d9800615 	stw	r6,24(sp)
   87b00:	d8002215 	stw	zero,136(sp)
   87b04:	d8800117 	ldw	r2,4(sp)
   87b08:	10008916 	blt	r2,zero,87d30 <_dtoa_r+0x990>
   87b0c:	d9000517 	ldw	r4,20(sp)
   87b10:	00c00384 	movi	r3,14
   87b14:	19008616 	blt	r3,r4,87d30 <_dtoa_r+0x990>
   87b18:	200490fa 	slli	r2,r4,3
   87b1c:	00c002b4 	movhi	r3,10
   87b20:	d9802217 	ldw	r6,136(sp)
   87b24:	18f94d04 	addi	r3,r3,-6860
   87b28:	1885883a 	add	r2,r3,r2
   87b2c:	14000017 	ldw	r16,0(r2)
   87b30:	14400117 	ldw	r17,4(r2)
   87b34:	30016316 	blt	r6,zero,880c4 <_dtoa_r+0xd24>
   87b38:	800d883a 	mov	r6,r16
   87b3c:	880f883a 	mov	r7,r17
   87b40:	9009883a 	mov	r4,r18
   87b44:	980b883a 	mov	r5,r19
   87b48:	00974a80 	call	974a8 <__divdf3>
   87b4c:	180b883a 	mov	r5,r3
   87b50:	1009883a 	mov	r4,r2
   87b54:	00992380 	call	99238 <__fixdfsi>
   87b58:	1009883a 	mov	r4,r2
   87b5c:	102b883a 	mov	r21,r2
   87b60:	00992b80 	call	992b8 <__floatsidf>
   87b64:	800d883a 	mov	r6,r16
   87b68:	880f883a 	mov	r7,r17
   87b6c:	1009883a 	mov	r4,r2
   87b70:	180b883a 	mov	r5,r3
   87b74:	00980d00 	call	980d0 <__muldf3>
   87b78:	100d883a 	mov	r6,r2
   87b7c:	180f883a 	mov	r7,r3
   87b80:	9009883a 	mov	r4,r18
   87b84:	980b883a 	mov	r5,r19
   87b88:	009893c0 	call	9893c <__subdf3>
   87b8c:	d9c00717 	ldw	r7,28(sp)
   87b90:	1009883a 	mov	r4,r2
   87b94:	a8800c04 	addi	r2,r21,48
   87b98:	38800005 	stb	r2,0(r7)
   87b9c:	3dc00044 	addi	r23,r7,1
   87ba0:	d9c00617 	ldw	r7,24(sp)
   87ba4:	01800044 	movi	r6,1
   87ba8:	180b883a 	mov	r5,r3
   87bac:	2005883a 	mov	r2,r4
   87bb0:	39803826 	beq	r7,r6,87c94 <_dtoa_r+0x8f4>
   87bb4:	000d883a 	mov	r6,zero
   87bb8:	01d00934 	movhi	r7,16420
   87bbc:	00980d00 	call	980d0 <__muldf3>
   87bc0:	000d883a 	mov	r6,zero
   87bc4:	000f883a 	mov	r7,zero
   87bc8:	1009883a 	mov	r4,r2
   87bcc:	180b883a 	mov	r5,r3
   87bd0:	1025883a 	mov	r18,r2
   87bd4:	1827883a 	mov	r19,r3
   87bd8:	0097e780 	call	97e78 <__eqdf2>
   87bdc:	103f9a26 	beq	r2,zero,87a48 <__ram_exceptions_end+0xfff67814>
   87be0:	d9c00617 	ldw	r7,24(sp)
   87be4:	d8c00717 	ldw	r3,28(sp)
   87be8:	b829883a 	mov	r20,r23
   87bec:	38bfffc4 	addi	r2,r7,-1
   87bf0:	18ad883a 	add	r22,r3,r2
   87bf4:	00000a06 	br	87c20 <_dtoa_r+0x880>
   87bf8:	00980d00 	call	980d0 <__muldf3>
   87bfc:	000d883a 	mov	r6,zero
   87c00:	000f883a 	mov	r7,zero
   87c04:	1009883a 	mov	r4,r2
   87c08:	180b883a 	mov	r5,r3
   87c0c:	1025883a 	mov	r18,r2
   87c10:	1827883a 	mov	r19,r3
   87c14:	b829883a 	mov	r20,r23
   87c18:	0097e780 	call	97e78 <__eqdf2>
   87c1c:	103f8a26 	beq	r2,zero,87a48 <__ram_exceptions_end+0xfff67814>
   87c20:	800d883a 	mov	r6,r16
   87c24:	880f883a 	mov	r7,r17
   87c28:	9009883a 	mov	r4,r18
   87c2c:	980b883a 	mov	r5,r19
   87c30:	00974a80 	call	974a8 <__divdf3>
   87c34:	180b883a 	mov	r5,r3
   87c38:	1009883a 	mov	r4,r2
   87c3c:	00992380 	call	99238 <__fixdfsi>
   87c40:	1009883a 	mov	r4,r2
   87c44:	102b883a 	mov	r21,r2
   87c48:	00992b80 	call	992b8 <__floatsidf>
   87c4c:	800d883a 	mov	r6,r16
   87c50:	880f883a 	mov	r7,r17
   87c54:	1009883a 	mov	r4,r2
   87c58:	180b883a 	mov	r5,r3
   87c5c:	00980d00 	call	980d0 <__muldf3>
   87c60:	100d883a 	mov	r6,r2
   87c64:	180f883a 	mov	r7,r3
   87c68:	9009883a 	mov	r4,r18
   87c6c:	980b883a 	mov	r5,r19
   87c70:	009893c0 	call	9893c <__subdf3>
   87c74:	aa000c04 	addi	r8,r21,48
   87c78:	a2000005 	stb	r8,0(r20)
   87c7c:	000d883a 	mov	r6,zero
   87c80:	01d00934 	movhi	r7,16420
   87c84:	1009883a 	mov	r4,r2
   87c88:	180b883a 	mov	r5,r3
   87c8c:	a5c00044 	addi	r23,r20,1
   87c90:	b53fd91e 	bne	r22,r20,87bf8 <__ram_exceptions_end+0xfff679c4>
   87c94:	100d883a 	mov	r6,r2
   87c98:	180f883a 	mov	r7,r3
   87c9c:	1009883a 	mov	r4,r2
   87ca0:	180b883a 	mov	r5,r3
   87ca4:	0096bfc0 	call	96bfc <__adddf3>
   87ca8:	100d883a 	mov	r6,r2
   87cac:	180f883a 	mov	r7,r3
   87cb0:	8009883a 	mov	r4,r16
   87cb4:	880b883a 	mov	r5,r17
   87cb8:	1027883a 	mov	r19,r2
   87cbc:	1825883a 	mov	r18,r3
   87cc0:	0097fdc0 	call	97fdc <__ledf2>
   87cc4:	10000816 	blt	r2,zero,87ce8 <_dtoa_r+0x948>
   87cc8:	980d883a 	mov	r6,r19
   87ccc:	900f883a 	mov	r7,r18
   87cd0:	8009883a 	mov	r4,r16
   87cd4:	880b883a 	mov	r5,r17
   87cd8:	0097e780 	call	97e78 <__eqdf2>
   87cdc:	103f5a1e 	bne	r2,zero,87a48 <__ram_exceptions_end+0xfff67814>
   87ce0:	ad40004c 	andi	r21,r21,1
   87ce4:	a83f5826 	beq	r21,zero,87a48 <__ram_exceptions_end+0xfff67814>
   87ce8:	bd3fffc3 	ldbu	r20,-1(r23)
   87cec:	b8bfffc4 	addi	r2,r23,-1
   87cf0:	1007883a 	mov	r3,r2
   87cf4:	01400e44 	movi	r5,57
   87cf8:	d9800717 	ldw	r6,28(sp)
   87cfc:	00000506 	br	87d14 <_dtoa_r+0x974>
   87d00:	18ffffc4 	addi	r3,r3,-1
   87d04:	11824726 	beq	r2,r6,88624 <_dtoa_r+0x1284>
   87d08:	1d000003 	ldbu	r20,0(r3)
   87d0c:	102f883a 	mov	r23,r2
   87d10:	10bfffc4 	addi	r2,r2,-1
   87d14:	a1003fcc 	andi	r4,r20,255
   87d18:	2100201c 	xori	r4,r4,128
   87d1c:	213fe004 	addi	r4,r4,-128
   87d20:	217ff726 	beq	r4,r5,87d00 <__ram_exceptions_end+0xfff67acc>
   87d24:	a2000044 	addi	r8,r20,1
   87d28:	12000005 	stb	r8,0(r2)
   87d2c:	003f4606 	br	87a48 <__ram_exceptions_end+0xfff67814>
   87d30:	d9000b17 	ldw	r4,44(sp)
   87d34:	2000c826 	beq	r4,zero,88058 <_dtoa_r+0xcb8>
   87d38:	d9800317 	ldw	r6,12(sp)
   87d3c:	00c00044 	movi	r3,1
   87d40:	1980f90e 	bge	r3,r6,88128 <_dtoa_r+0xd88>
   87d44:	d8800617 	ldw	r2,24(sp)
   87d48:	d8c00a17 	ldw	r3,40(sp)
   87d4c:	157fffc4 	addi	r21,r2,-1
   87d50:	1d41f316 	blt	r3,r21,88520 <_dtoa_r+0x1180>
   87d54:	1d6bc83a 	sub	r21,r3,r21
   87d58:	d9c00617 	ldw	r7,24(sp)
   87d5c:	3802aa16 	blt	r7,zero,88808 <_dtoa_r+0x1468>
   87d60:	dd000817 	ldw	r20,32(sp)
   87d64:	d8800617 	ldw	r2,24(sp)
   87d68:	d8c00817 	ldw	r3,32(sp)
   87d6c:	01400044 	movi	r5,1
   87d70:	e009883a 	mov	r4,fp
   87d74:	1887883a 	add	r3,r3,r2
   87d78:	d8c00815 	stw	r3,32(sp)
   87d7c:	b0ad883a 	add	r22,r22,r2
   87d80:	008a7ec0 	call	8a7ec <__i2b>
   87d84:	1023883a 	mov	r17,r2
   87d88:	a0000826 	beq	r20,zero,87dac <_dtoa_r+0xa0c>
   87d8c:	0580070e 	bge	zero,r22,87dac <_dtoa_r+0xa0c>
   87d90:	a005883a 	mov	r2,r20
   87d94:	b500b916 	blt	r22,r20,8807c <_dtoa_r+0xcdc>
   87d98:	d9000817 	ldw	r4,32(sp)
   87d9c:	a0a9c83a 	sub	r20,r20,r2
   87da0:	b0adc83a 	sub	r22,r22,r2
   87da4:	2089c83a 	sub	r4,r4,r2
   87da8:	d9000815 	stw	r4,32(sp)
   87dac:	d9800a17 	ldw	r6,40(sp)
   87db0:	0181810e 	bge	zero,r6,883b8 <_dtoa_r+0x1018>
   87db4:	d9c00b17 	ldw	r7,44(sp)
   87db8:	3800b326 	beq	r7,zero,88088 <_dtoa_r+0xce8>
   87dbc:	a800b226 	beq	r21,zero,88088 <_dtoa_r+0xce8>
   87dc0:	880b883a 	mov	r5,r17
   87dc4:	a80d883a 	mov	r6,r21
   87dc8:	e009883a 	mov	r4,fp
   87dcc:	008aab40 	call	8aab4 <__pow5mult>
   87dd0:	d9800917 	ldw	r6,36(sp)
   87dd4:	100b883a 	mov	r5,r2
   87dd8:	e009883a 	mov	r4,fp
   87ddc:	1023883a 	mov	r17,r2
   87de0:	008a8280 	call	8a828 <__multiply>
   87de4:	1021883a 	mov	r16,r2
   87de8:	d8800a17 	ldw	r2,40(sp)
   87dec:	d9400917 	ldw	r5,36(sp)
   87df0:	e009883a 	mov	r4,fp
   87df4:	1545c83a 	sub	r2,r2,r21
   87df8:	d8800a15 	stw	r2,40(sp)
   87dfc:	008a4600 	call	8a460 <_Bfree>
   87e00:	d8c00a17 	ldw	r3,40(sp)
   87e04:	18009f1e 	bne	r3,zero,88084 <_dtoa_r+0xce4>
   87e08:	05c00044 	movi	r23,1
   87e0c:	e009883a 	mov	r4,fp
   87e10:	b80b883a 	mov	r5,r23
   87e14:	008a7ec0 	call	8a7ec <__i2b>
   87e18:	d9000d17 	ldw	r4,52(sp)
   87e1c:	102b883a 	mov	r21,r2
   87e20:	2000ce26 	beq	r4,zero,8815c <_dtoa_r+0xdbc>
   87e24:	200d883a 	mov	r6,r4
   87e28:	100b883a 	mov	r5,r2
   87e2c:	e009883a 	mov	r4,fp
   87e30:	008aab40 	call	8aab4 <__pow5mult>
   87e34:	d9800317 	ldw	r6,12(sp)
   87e38:	102b883a 	mov	r21,r2
   87e3c:	b981810e 	bge	r23,r6,88444 <_dtoa_r+0x10a4>
   87e40:	0027883a 	mov	r19,zero
   87e44:	a8800417 	ldw	r2,16(r21)
   87e48:	05c00804 	movi	r23,32
   87e4c:	10800104 	addi	r2,r2,4
   87e50:	1085883a 	add	r2,r2,r2
   87e54:	1085883a 	add	r2,r2,r2
   87e58:	a885883a 	add	r2,r21,r2
   87e5c:	11000017 	ldw	r4,0(r2)
   87e60:	008a6d40 	call	8a6d4 <__hi0bits>
   87e64:	b885c83a 	sub	r2,r23,r2
   87e68:	1585883a 	add	r2,r2,r22
   87e6c:	108007cc 	andi	r2,r2,31
   87e70:	1000b326 	beq	r2,zero,88140 <_dtoa_r+0xda0>
   87e74:	00c00804 	movi	r3,32
   87e78:	1887c83a 	sub	r3,r3,r2
   87e7c:	01000104 	movi	r4,4
   87e80:	20c2cd0e 	bge	r4,r3,889b8 <_dtoa_r+0x1618>
   87e84:	00c00704 	movi	r3,28
   87e88:	1885c83a 	sub	r2,r3,r2
   87e8c:	d8c00817 	ldw	r3,32(sp)
   87e90:	a0a9883a 	add	r20,r20,r2
   87e94:	b0ad883a 	add	r22,r22,r2
   87e98:	1887883a 	add	r3,r3,r2
   87e9c:	d8c00815 	stw	r3,32(sp)
   87ea0:	d9800817 	ldw	r6,32(sp)
   87ea4:	0180040e 	bge	zero,r6,87eb8 <_dtoa_r+0xb18>
   87ea8:	800b883a 	mov	r5,r16
   87eac:	e009883a 	mov	r4,fp
   87eb0:	008abf40 	call	8abf4 <__lshift>
   87eb4:	1021883a 	mov	r16,r2
   87eb8:	0580050e 	bge	zero,r22,87ed0 <_dtoa_r+0xb30>
   87ebc:	a80b883a 	mov	r5,r21
   87ec0:	b00d883a 	mov	r6,r22
   87ec4:	e009883a 	mov	r4,fp
   87ec8:	008abf40 	call	8abf4 <__lshift>
   87ecc:	102b883a 	mov	r21,r2
   87ed0:	d9c00e17 	ldw	r7,56(sp)
   87ed4:	3801211e 	bne	r7,zero,8835c <_dtoa_r+0xfbc>
   87ed8:	d9800617 	ldw	r6,24(sp)
   87edc:	0181380e 	bge	zero,r6,883c0 <_dtoa_r+0x1020>
   87ee0:	d8c00b17 	ldw	r3,44(sp)
   87ee4:	1800ab1e 	bne	r3,zero,88194 <_dtoa_r+0xdf4>
   87ee8:	dc800717 	ldw	r18,28(sp)
   87eec:	dcc00617 	ldw	r19,24(sp)
   87ef0:	9029883a 	mov	r20,r18
   87ef4:	00000206 	br	87f00 <_dtoa_r+0xb60>
   87ef8:	008a4880 	call	8a488 <__multadd>
   87efc:	1021883a 	mov	r16,r2
   87f00:	a80b883a 	mov	r5,r21
   87f04:	8009883a 	mov	r4,r16
   87f08:	00871780 	call	87178 <quorem>
   87f0c:	10800c04 	addi	r2,r2,48
   87f10:	90800005 	stb	r2,0(r18)
   87f14:	94800044 	addi	r18,r18,1
   87f18:	9507c83a 	sub	r3,r18,r20
   87f1c:	000f883a 	mov	r7,zero
   87f20:	01800284 	movi	r6,10
   87f24:	800b883a 	mov	r5,r16
   87f28:	e009883a 	mov	r4,fp
   87f2c:	1cfff216 	blt	r3,r19,87ef8 <__ram_exceptions_end+0xfff67cc4>
   87f30:	1011883a 	mov	r8,r2
   87f34:	d8800617 	ldw	r2,24(sp)
   87f38:	0082370e 	bge	zero,r2,88818 <_dtoa_r+0x1478>
   87f3c:	d9000717 	ldw	r4,28(sp)
   87f40:	0025883a 	mov	r18,zero
   87f44:	20af883a 	add	r23,r4,r2
   87f48:	01800044 	movi	r6,1
   87f4c:	800b883a 	mov	r5,r16
   87f50:	e009883a 	mov	r4,fp
   87f54:	da001715 	stw	r8,92(sp)
   87f58:	008abf40 	call	8abf4 <__lshift>
   87f5c:	a80b883a 	mov	r5,r21
   87f60:	1009883a 	mov	r4,r2
   87f64:	d8800915 	stw	r2,36(sp)
   87f68:	008ad3c0 	call	8ad3c <__mcmp>
   87f6c:	da001717 	ldw	r8,92(sp)
   87f70:	0081800e 	bge	zero,r2,88574 <_dtoa_r+0x11d4>
   87f74:	b93fffc3 	ldbu	r4,-1(r23)
   87f78:	b8bfffc4 	addi	r2,r23,-1
   87f7c:	1007883a 	mov	r3,r2
   87f80:	01800e44 	movi	r6,57
   87f84:	d9c00717 	ldw	r7,28(sp)
   87f88:	00000506 	br	87fa0 <_dtoa_r+0xc00>
   87f8c:	18ffffc4 	addi	r3,r3,-1
   87f90:	11c12326 	beq	r2,r7,88420 <_dtoa_r+0x1080>
   87f94:	19000003 	ldbu	r4,0(r3)
   87f98:	102f883a 	mov	r23,r2
   87f9c:	10bfffc4 	addi	r2,r2,-1
   87fa0:	21403fcc 	andi	r5,r4,255
   87fa4:	2940201c 	xori	r5,r5,128
   87fa8:	297fe004 	addi	r5,r5,-128
   87fac:	29bff726 	beq	r5,r6,87f8c <__ram_exceptions_end+0xfff67d58>
   87fb0:	21000044 	addi	r4,r4,1
   87fb4:	11000005 	stb	r4,0(r2)
   87fb8:	a80b883a 	mov	r5,r21
   87fbc:	e009883a 	mov	r4,fp
   87fc0:	008a4600 	call	8a460 <_Bfree>
   87fc4:	883ea026 	beq	r17,zero,87a48 <__ram_exceptions_end+0xfff67814>
   87fc8:	90000426 	beq	r18,zero,87fdc <_dtoa_r+0xc3c>
   87fcc:	94400326 	beq	r18,r17,87fdc <_dtoa_r+0xc3c>
   87fd0:	900b883a 	mov	r5,r18
   87fd4:	e009883a 	mov	r4,fp
   87fd8:	008a4600 	call	8a460 <_Bfree>
   87fdc:	880b883a 	mov	r5,r17
   87fe0:	e009883a 	mov	r4,fp
   87fe4:	008a4600 	call	8a460 <_Bfree>
   87fe8:	003e9706 	br	87a48 <__ram_exceptions_end+0xfff67814>
   87fec:	01800044 	movi	r6,1
   87ff0:	d9800e15 	stw	r6,56(sp)
   87ff4:	003d9606 	br	87650 <__ram_exceptions_end+0xfff6741c>
   87ff8:	d8800817 	ldw	r2,32(sp)
   87ffc:	d8c00517 	ldw	r3,20(sp)
   88000:	d8000d15 	stw	zero,52(sp)
   88004:	10c5c83a 	sub	r2,r2,r3
   88008:	00c9c83a 	sub	r4,zero,r3
   8800c:	d8800815 	stw	r2,32(sp)
   88010:	d9000a15 	stw	r4,40(sp)
   88014:	003d9706 	br	87674 <__ram_exceptions_end+0xfff67440>
   88018:	05adc83a 	sub	r22,zero,r22
   8801c:	dd800815 	stw	r22,32(sp)
   88020:	002d883a 	mov	r22,zero
   88024:	003d8e06 	br	87660 <__ram_exceptions_end+0xfff6742c>
   88028:	d9000517 	ldw	r4,20(sp)
   8802c:	00992b80 	call	992b8 <__floatsidf>
   88030:	100d883a 	mov	r6,r2
   88034:	180f883a 	mov	r7,r3
   88038:	a009883a 	mov	r4,r20
   8803c:	880b883a 	mov	r5,r17
   88040:	0097e780 	call	97e78 <__eqdf2>
   88044:	103d7126 	beq	r2,zero,8760c <__ram_exceptions_end+0xfff673d8>
   88048:	d9c00517 	ldw	r7,20(sp)
   8804c:	39ffffc4 	addi	r7,r7,-1
   88050:	d9c00515 	stw	r7,20(sp)
   88054:	003d6d06 	br	8760c <__ram_exceptions_end+0xfff673d8>
   88058:	dd400a17 	ldw	r21,40(sp)
   8805c:	dd000817 	ldw	r20,32(sp)
   88060:	0023883a 	mov	r17,zero
   88064:	003f4806 	br	87d88 <__ram_exceptions_end+0xfff67b54>
   88068:	10e3c83a 	sub	r17,r2,r3
   8806c:	9448983a 	sll	r4,r18,r17
   88070:	003d3206 	br	8753c <__ram_exceptions_end+0xfff67308>
   88074:	d8000e15 	stw	zero,56(sp)
   88078:	003d7506 	br	87650 <__ram_exceptions_end+0xfff6741c>
   8807c:	b005883a 	mov	r2,r22
   88080:	003f4506 	br	87d98 <__ram_exceptions_end+0xfff67b64>
   88084:	dc000915 	stw	r16,36(sp)
   88088:	d9800a17 	ldw	r6,40(sp)
   8808c:	d9400917 	ldw	r5,36(sp)
   88090:	e009883a 	mov	r4,fp
   88094:	008aab40 	call	8aab4 <__pow5mult>
   88098:	1021883a 	mov	r16,r2
   8809c:	003f5a06 	br	87e08 <__ram_exceptions_end+0xfff67bd4>
   880a0:	01c00044 	movi	r7,1
   880a4:	d9c00b15 	stw	r7,44(sp)
   880a8:	d8802217 	ldw	r2,136(sp)
   880ac:	0081280e 	bge	zero,r2,88550 <_dtoa_r+0x11b0>
   880b0:	100d883a 	mov	r6,r2
   880b4:	1021883a 	mov	r16,r2
   880b8:	d8800c15 	stw	r2,48(sp)
   880bc:	d8800615 	stw	r2,24(sp)
   880c0:	003d8806 	br	876e4 <__ram_exceptions_end+0xfff674b0>
   880c4:	d8800617 	ldw	r2,24(sp)
   880c8:	00be9b16 	blt	zero,r2,87b38 <__ram_exceptions_end+0xfff67904>
   880cc:	10010f1e 	bne	r2,zero,8850c <_dtoa_r+0x116c>
   880d0:	880b883a 	mov	r5,r17
   880d4:	000d883a 	mov	r6,zero
   880d8:	01d00534 	movhi	r7,16404
   880dc:	8009883a 	mov	r4,r16
   880e0:	00980d00 	call	980d0 <__muldf3>
   880e4:	900d883a 	mov	r6,r18
   880e8:	980f883a 	mov	r7,r19
   880ec:	1009883a 	mov	r4,r2
   880f0:	180b883a 	mov	r5,r3
   880f4:	0097f000 	call	97f00 <__gedf2>
   880f8:	002b883a 	mov	r21,zero
   880fc:	0023883a 	mov	r17,zero
   88100:	1000bf16 	blt	r2,zero,88400 <_dtoa_r+0x1060>
   88104:	d9802217 	ldw	r6,136(sp)
   88108:	ddc00717 	ldw	r23,28(sp)
   8810c:	018c303a 	nor	r6,zero,r6
   88110:	d9800515 	stw	r6,20(sp)
   88114:	a80b883a 	mov	r5,r21
   88118:	e009883a 	mov	r4,fp
   8811c:	008a4600 	call	8a460 <_Bfree>
   88120:	883e4926 	beq	r17,zero,87a48 <__ram_exceptions_end+0xfff67814>
   88124:	003fad06 	br	87fdc <__ram_exceptions_end+0xfff67da8>
   88128:	d9c01117 	ldw	r7,68(sp)
   8812c:	3801bc26 	beq	r7,zero,88820 <_dtoa_r+0x1480>
   88130:	10810cc4 	addi	r2,r2,1075
   88134:	dd400a17 	ldw	r21,40(sp)
   88138:	dd000817 	ldw	r20,32(sp)
   8813c:	003f0a06 	br	87d68 <__ram_exceptions_end+0xfff67b34>
   88140:	00800704 	movi	r2,28
   88144:	d9000817 	ldw	r4,32(sp)
   88148:	a0a9883a 	add	r20,r20,r2
   8814c:	b0ad883a 	add	r22,r22,r2
   88150:	2089883a 	add	r4,r4,r2
   88154:	d9000815 	stw	r4,32(sp)
   88158:	003f5106 	br	87ea0 <__ram_exceptions_end+0xfff67c6c>
   8815c:	d8c00317 	ldw	r3,12(sp)
   88160:	b8c1fc0e 	bge	r23,r3,88954 <_dtoa_r+0x15b4>
   88164:	0027883a 	mov	r19,zero
   88168:	b805883a 	mov	r2,r23
   8816c:	003f3e06 	br	87e68 <__ram_exceptions_end+0xfff67c34>
   88170:	880b883a 	mov	r5,r17
   88174:	e009883a 	mov	r4,fp
   88178:	000f883a 	mov	r7,zero
   8817c:	01800284 	movi	r6,10
   88180:	008a4880 	call	8a488 <__multadd>
   88184:	d9000c17 	ldw	r4,48(sp)
   88188:	1023883a 	mov	r17,r2
   8818c:	0102040e 	bge	zero,r4,889a0 <_dtoa_r+0x1600>
   88190:	d9000615 	stw	r4,24(sp)
   88194:	0500050e 	bge	zero,r20,881ac <_dtoa_r+0xe0c>
   88198:	880b883a 	mov	r5,r17
   8819c:	a00d883a 	mov	r6,r20
   881a0:	e009883a 	mov	r4,fp
   881a4:	008abf40 	call	8abf4 <__lshift>
   881a8:	1023883a 	mov	r17,r2
   881ac:	9801241e 	bne	r19,zero,88640 <_dtoa_r+0x12a0>
   881b0:	8829883a 	mov	r20,r17
   881b4:	d9000617 	ldw	r4,24(sp)
   881b8:	dcc00717 	ldw	r19,28(sp)
   881bc:	9480004c 	andi	r18,r18,1
   881c0:	20bfffc4 	addi	r2,r4,-1
   881c4:	9885883a 	add	r2,r19,r2
   881c8:	d8800415 	stw	r2,16(sp)
   881cc:	dc800615 	stw	r18,24(sp)
   881d0:	a80b883a 	mov	r5,r21
   881d4:	8009883a 	mov	r4,r16
   881d8:	00871780 	call	87178 <quorem>
   881dc:	880b883a 	mov	r5,r17
   881e0:	8009883a 	mov	r4,r16
   881e4:	102f883a 	mov	r23,r2
   881e8:	008ad3c0 	call	8ad3c <__mcmp>
   881ec:	a80b883a 	mov	r5,r21
   881f0:	a00d883a 	mov	r6,r20
   881f4:	e009883a 	mov	r4,fp
   881f8:	102d883a 	mov	r22,r2
   881fc:	008ad9c0 	call	8ad9c <__mdiff>
   88200:	1007883a 	mov	r3,r2
   88204:	10800317 	ldw	r2,12(r2)
   88208:	bc800c04 	addi	r18,r23,48
   8820c:	180b883a 	mov	r5,r3
   88210:	10004e1e 	bne	r2,zero,8834c <_dtoa_r+0xfac>
   88214:	8009883a 	mov	r4,r16
   88218:	d8c01615 	stw	r3,88(sp)
   8821c:	008ad3c0 	call	8ad3c <__mcmp>
   88220:	d8c01617 	ldw	r3,88(sp)
   88224:	e009883a 	mov	r4,fp
   88228:	d8801615 	stw	r2,88(sp)
   8822c:	180b883a 	mov	r5,r3
   88230:	008a4600 	call	8a460 <_Bfree>
   88234:	d8801617 	ldw	r2,88(sp)
   88238:	1000041e 	bne	r2,zero,8824c <_dtoa_r+0xeac>
   8823c:	d9800317 	ldw	r6,12(sp)
   88240:	3000021e 	bne	r6,zero,8824c <_dtoa_r+0xeac>
   88244:	d8c00617 	ldw	r3,24(sp)
   88248:	18003726 	beq	r3,zero,88328 <_dtoa_r+0xf88>
   8824c:	b0002016 	blt	r22,zero,882d0 <_dtoa_r+0xf30>
   88250:	b000041e 	bne	r22,zero,88264 <_dtoa_r+0xec4>
   88254:	d9000317 	ldw	r4,12(sp)
   88258:	2000021e 	bne	r4,zero,88264 <_dtoa_r+0xec4>
   8825c:	d8c00617 	ldw	r3,24(sp)
   88260:	18001b26 	beq	r3,zero,882d0 <_dtoa_r+0xf30>
   88264:	00810716 	blt	zero,r2,88684 <_dtoa_r+0x12e4>
   88268:	d8c00417 	ldw	r3,16(sp)
   8826c:	9d800044 	addi	r22,r19,1
   88270:	9c800005 	stb	r18,0(r19)
   88274:	b02f883a 	mov	r23,r22
   88278:	98c10626 	beq	r19,r3,88694 <_dtoa_r+0x12f4>
   8827c:	800b883a 	mov	r5,r16
   88280:	000f883a 	mov	r7,zero
   88284:	01800284 	movi	r6,10
   88288:	e009883a 	mov	r4,fp
   8828c:	008a4880 	call	8a488 <__multadd>
   88290:	1021883a 	mov	r16,r2
   88294:	000f883a 	mov	r7,zero
   88298:	01800284 	movi	r6,10
   8829c:	880b883a 	mov	r5,r17
   882a0:	e009883a 	mov	r4,fp
   882a4:	8d002526 	beq	r17,r20,8833c <_dtoa_r+0xf9c>
   882a8:	008a4880 	call	8a488 <__multadd>
   882ac:	a00b883a 	mov	r5,r20
   882b0:	000f883a 	mov	r7,zero
   882b4:	01800284 	movi	r6,10
   882b8:	e009883a 	mov	r4,fp
   882bc:	1023883a 	mov	r17,r2
   882c0:	008a4880 	call	8a488 <__multadd>
   882c4:	1029883a 	mov	r20,r2
   882c8:	b027883a 	mov	r19,r22
   882cc:	003fc006 	br	881d0 <__ram_exceptions_end+0xfff67f9c>
   882d0:	9011883a 	mov	r8,r18
   882d4:	00800e0e 	bge	zero,r2,88310 <_dtoa_r+0xf70>
   882d8:	800b883a 	mov	r5,r16
   882dc:	01800044 	movi	r6,1
   882e0:	e009883a 	mov	r4,fp
   882e4:	da001715 	stw	r8,92(sp)
   882e8:	008abf40 	call	8abf4 <__lshift>
   882ec:	a80b883a 	mov	r5,r21
   882f0:	1009883a 	mov	r4,r2
   882f4:	1021883a 	mov	r16,r2
   882f8:	008ad3c0 	call	8ad3c <__mcmp>
   882fc:	da001717 	ldw	r8,92(sp)
   88300:	0081960e 	bge	zero,r2,8895c <_dtoa_r+0x15bc>
   88304:	00800e44 	movi	r2,57
   88308:	40817026 	beq	r8,r2,888cc <_dtoa_r+0x152c>
   8830c:	ba000c44 	addi	r8,r23,49
   88310:	8825883a 	mov	r18,r17
   88314:	9dc00044 	addi	r23,r19,1
   88318:	9a000005 	stb	r8,0(r19)
   8831c:	a023883a 	mov	r17,r20
   88320:	dc000915 	stw	r16,36(sp)
   88324:	003f2406 	br	87fb8 <__ram_exceptions_end+0xfff67d84>
   88328:	00800e44 	movi	r2,57
   8832c:	9011883a 	mov	r8,r18
   88330:	90816626 	beq	r18,r2,888cc <_dtoa_r+0x152c>
   88334:	05bff516 	blt	zero,r22,8830c <__ram_exceptions_end+0xfff680d8>
   88338:	003ff506 	br	88310 <__ram_exceptions_end+0xfff680dc>
   8833c:	008a4880 	call	8a488 <__multadd>
   88340:	1023883a 	mov	r17,r2
   88344:	1029883a 	mov	r20,r2
   88348:	003fdf06 	br	882c8 <__ram_exceptions_end+0xfff68094>
   8834c:	e009883a 	mov	r4,fp
   88350:	008a4600 	call	8a460 <_Bfree>
   88354:	00800044 	movi	r2,1
   88358:	003fbc06 	br	8824c <__ram_exceptions_end+0xfff68018>
   8835c:	a80b883a 	mov	r5,r21
   88360:	8009883a 	mov	r4,r16
   88364:	008ad3c0 	call	8ad3c <__mcmp>
   88368:	103edb0e 	bge	r2,zero,87ed8 <__ram_exceptions_end+0xfff67ca4>
   8836c:	800b883a 	mov	r5,r16
   88370:	000f883a 	mov	r7,zero
   88374:	01800284 	movi	r6,10
   88378:	e009883a 	mov	r4,fp
   8837c:	008a4880 	call	8a488 <__multadd>
   88380:	1021883a 	mov	r16,r2
   88384:	d8800517 	ldw	r2,20(sp)
   88388:	d8c00b17 	ldw	r3,44(sp)
   8838c:	10bfffc4 	addi	r2,r2,-1
   88390:	d8800515 	stw	r2,20(sp)
   88394:	183f761e 	bne	r3,zero,88170 <__ram_exceptions_end+0xfff67f3c>
   88398:	d9000c17 	ldw	r4,48(sp)
   8839c:	0101730e 	bge	zero,r4,8896c <_dtoa_r+0x15cc>
   883a0:	d9000615 	stw	r4,24(sp)
   883a4:	003ed006 	br	87ee8 <__ram_exceptions_end+0xfff67cb4>
   883a8:	00800084 	movi	r2,2
   883ac:	3081861e 	bne	r6,r2,889c8 <_dtoa_r+0x1628>
   883b0:	d8000b15 	stw	zero,44(sp)
   883b4:	003f3c06 	br	880a8 <__ram_exceptions_end+0xfff67e74>
   883b8:	dc000917 	ldw	r16,36(sp)
   883bc:	003e9206 	br	87e08 <__ram_exceptions_end+0xfff67bd4>
   883c0:	d9c00317 	ldw	r7,12(sp)
   883c4:	00800084 	movi	r2,2
   883c8:	11fec50e 	bge	r2,r7,87ee0 <__ram_exceptions_end+0xfff67cac>
   883cc:	d9000617 	ldw	r4,24(sp)
   883d0:	20013c1e 	bne	r4,zero,888c4 <_dtoa_r+0x1524>
   883d4:	a80b883a 	mov	r5,r21
   883d8:	000f883a 	mov	r7,zero
   883dc:	01800144 	movi	r6,5
   883e0:	e009883a 	mov	r4,fp
   883e4:	008a4880 	call	8a488 <__multadd>
   883e8:	100b883a 	mov	r5,r2
   883ec:	8009883a 	mov	r4,r16
   883f0:	102b883a 	mov	r21,r2
   883f4:	008ad3c0 	call	8ad3c <__mcmp>
   883f8:	dc000915 	stw	r16,36(sp)
   883fc:	00bf410e 	bge	zero,r2,88104 <__ram_exceptions_end+0xfff67ed0>
   88400:	d9c00717 	ldw	r7,28(sp)
   88404:	00800c44 	movi	r2,49
   88408:	38800005 	stb	r2,0(r7)
   8840c:	d8800517 	ldw	r2,20(sp)
   88410:	3dc00044 	addi	r23,r7,1
   88414:	10800044 	addi	r2,r2,1
   88418:	d8800515 	stw	r2,20(sp)
   8841c:	003f3d06 	br	88114 <__ram_exceptions_end+0xfff67ee0>
   88420:	d9800517 	ldw	r6,20(sp)
   88424:	d9c00717 	ldw	r7,28(sp)
   88428:	00800c44 	movi	r2,49
   8842c:	31800044 	addi	r6,r6,1
   88430:	d9800515 	stw	r6,20(sp)
   88434:	38800005 	stb	r2,0(r7)
   88438:	003edf06 	br	87fb8 <__ram_exceptions_end+0xfff67d84>
   8843c:	d8000b15 	stw	zero,44(sp)
   88440:	003c9f06 	br	876c0 <__ram_exceptions_end+0xfff6748c>
   88444:	903e7e1e 	bne	r18,zero,87e40 <__ram_exceptions_end+0xfff67c0c>
   88448:	00800434 	movhi	r2,16
   8844c:	10bfffc4 	addi	r2,r2,-1
   88450:	9884703a 	and	r2,r19,r2
   88454:	1000ea1e 	bne	r2,zero,88800 <_dtoa_r+0x1460>
   88458:	9cdffc2c 	andhi	r19,r19,32752
   8845c:	9800e826 	beq	r19,zero,88800 <_dtoa_r+0x1460>
   88460:	d9c00817 	ldw	r7,32(sp)
   88464:	b5800044 	addi	r22,r22,1
   88468:	04c00044 	movi	r19,1
   8846c:	39c00044 	addi	r7,r7,1
   88470:	d9c00815 	stw	r7,32(sp)
   88474:	d8800d17 	ldw	r2,52(sp)
   88478:	103e721e 	bne	r2,zero,87e44 <__ram_exceptions_end+0xfff67c10>
   8847c:	00800044 	movi	r2,1
   88480:	003e7906 	br	87e68 <__ram_exceptions_end+0xfff67c34>
   88484:	8009883a 	mov	r4,r16
   88488:	00992b80 	call	992b8 <__floatsidf>
   8848c:	d9800f17 	ldw	r6,60(sp)
   88490:	d9c01017 	ldw	r7,64(sp)
   88494:	1009883a 	mov	r4,r2
   88498:	180b883a 	mov	r5,r3
   8849c:	00980d00 	call	980d0 <__muldf3>
   884a0:	000d883a 	mov	r6,zero
   884a4:	01d00734 	movhi	r7,16412
   884a8:	1009883a 	mov	r4,r2
   884ac:	180b883a 	mov	r5,r3
   884b0:	0096bfc0 	call	96bfc <__adddf3>
   884b4:	047f3034 	movhi	r17,64704
   884b8:	1021883a 	mov	r16,r2
   884bc:	1c63883a 	add	r17,r3,r17
   884c0:	d9000f17 	ldw	r4,60(sp)
   884c4:	d9401017 	ldw	r5,64(sp)
   884c8:	000d883a 	mov	r6,zero
   884cc:	01d00534 	movhi	r7,16404
   884d0:	009893c0 	call	9893c <__subdf3>
   884d4:	800d883a 	mov	r6,r16
   884d8:	880f883a 	mov	r7,r17
   884dc:	1009883a 	mov	r4,r2
   884e0:	180b883a 	mov	r5,r3
   884e4:	102b883a 	mov	r21,r2
   884e8:	1829883a 	mov	r20,r3
   884ec:	0097f000 	call	97f00 <__gedf2>
   884f0:	00806c16 	blt	zero,r2,886a4 <_dtoa_r+0x1304>
   884f4:	89e0003c 	xorhi	r7,r17,32768
   884f8:	800d883a 	mov	r6,r16
   884fc:	a809883a 	mov	r4,r21
   88500:	a00b883a 	mov	r5,r20
   88504:	0097fdc0 	call	97fdc <__ledf2>
   88508:	103d7e0e 	bge	r2,zero,87b04 <__ram_exceptions_end+0xfff678d0>
   8850c:	002b883a 	mov	r21,zero
   88510:	0023883a 	mov	r17,zero
   88514:	003efb06 	br	88104 <__ram_exceptions_end+0xfff67ed0>
   88518:	d8800717 	ldw	r2,28(sp)
   8851c:	003bd006 	br	87460 <__ram_exceptions_end+0xfff6722c>
   88520:	d9000a17 	ldw	r4,40(sp)
   88524:	d9800d17 	ldw	r6,52(sp)
   88528:	dd400a15 	stw	r21,40(sp)
   8852c:	a905c83a 	sub	r2,r21,r4
   88530:	308d883a 	add	r6,r6,r2
   88534:	d9800d15 	stw	r6,52(sp)
   88538:	002b883a 	mov	r21,zero
   8853c:	003e0606 	br	87d58 <__ram_exceptions_end+0xfff67b24>
   88540:	9023883a 	mov	r17,r18
   88544:	9829883a 	mov	r20,r19
   88548:	04000084 	movi	r16,2
   8854c:	003c9206 	br	87798 <__ram_exceptions_end+0xfff67564>
   88550:	04000044 	movi	r16,1
   88554:	dc000c15 	stw	r16,48(sp)
   88558:	dc000615 	stw	r16,24(sp)
   8855c:	dc002215 	stw	r16,136(sp)
   88560:	e0001115 	stw	zero,68(fp)
   88564:	000b883a 	mov	r5,zero
   88568:	003c6906 	br	87710 <__ram_exceptions_end+0xfff674dc>
   8856c:	3021883a 	mov	r16,r6
   88570:	003ffb06 	br	88560 <__ram_exceptions_end+0xfff6832c>
   88574:	1000021e 	bne	r2,zero,88580 <_dtoa_r+0x11e0>
   88578:	4200004c 	andi	r8,r8,1
   8857c:	403e7d1e 	bne	r8,zero,87f74 <__ram_exceptions_end+0xfff67d40>
   88580:	01000c04 	movi	r4,48
   88584:	00000106 	br	8858c <_dtoa_r+0x11ec>
   88588:	102f883a 	mov	r23,r2
   8858c:	b8bfffc4 	addi	r2,r23,-1
   88590:	10c00007 	ldb	r3,0(r2)
   88594:	193ffc26 	beq	r3,r4,88588 <__ram_exceptions_end+0xfff68354>
   88598:	003e8706 	br	87fb8 <__ram_exceptions_end+0xfff67d84>
   8859c:	d8800517 	ldw	r2,20(sp)
   885a0:	00a3c83a 	sub	r17,zero,r2
   885a4:	8800a426 	beq	r17,zero,88838 <_dtoa_r+0x1498>
   885a8:	888003cc 	andi	r2,r17,15
   885ac:	100490fa 	slli	r2,r2,3
   885b0:	00c002b4 	movhi	r3,10
   885b4:	18f94d04 	addi	r3,r3,-6860
   885b8:	1885883a 	add	r2,r3,r2
   885bc:	11800017 	ldw	r6,0(r2)
   885c0:	11c00117 	ldw	r7,4(r2)
   885c4:	9009883a 	mov	r4,r18
   885c8:	980b883a 	mov	r5,r19
   885cc:	8823d13a 	srai	r17,r17,4
   885d0:	00980d00 	call	980d0 <__muldf3>
   885d4:	d8800f15 	stw	r2,60(sp)
   885d8:	d8c01015 	stw	r3,64(sp)
   885dc:	8800e826 	beq	r17,zero,88980 <_dtoa_r+0x15e0>
   885e0:	050002b4 	movhi	r20,10
   885e4:	a5394304 	addi	r20,r20,-6900
   885e8:	04000084 	movi	r16,2
   885ec:	8980004c 	andi	r6,r17,1
   885f0:	1009883a 	mov	r4,r2
   885f4:	8823d07a 	srai	r17,r17,1
   885f8:	180b883a 	mov	r5,r3
   885fc:	30000426 	beq	r6,zero,88610 <_dtoa_r+0x1270>
   88600:	a1800017 	ldw	r6,0(r20)
   88604:	a1c00117 	ldw	r7,4(r20)
   88608:	84000044 	addi	r16,r16,1
   8860c:	00980d00 	call	980d0 <__muldf3>
   88610:	a5000204 	addi	r20,r20,8
   88614:	883ff51e 	bne	r17,zero,885ec <__ram_exceptions_end+0xfff683b8>
   88618:	d8800f15 	stw	r2,60(sp)
   8861c:	d8c01015 	stw	r3,64(sp)
   88620:	003c7606 	br	877fc <__ram_exceptions_end+0xfff675c8>
   88624:	00c00c04 	movi	r3,48
   88628:	10c00005 	stb	r3,0(r2)
   8862c:	d8c00517 	ldw	r3,20(sp)
   88630:	bd3fffc3 	ldbu	r20,-1(r23)
   88634:	18c00044 	addi	r3,r3,1
   88638:	d8c00515 	stw	r3,20(sp)
   8863c:	003db906 	br	87d24 <__ram_exceptions_end+0xfff67af0>
   88640:	89400117 	ldw	r5,4(r17)
   88644:	e009883a 	mov	r4,fp
   88648:	008a3b80 	call	8a3b8 <_Balloc>
   8864c:	89800417 	ldw	r6,16(r17)
   88650:	89400304 	addi	r5,r17,12
   88654:	11000304 	addi	r4,r2,12
   88658:	31800084 	addi	r6,r6,2
   8865c:	318d883a 	add	r6,r6,r6
   88660:	318d883a 	add	r6,r6,r6
   88664:	1027883a 	mov	r19,r2
   88668:	0082be40 	call	82be4 <memcpy>
   8866c:	01800044 	movi	r6,1
   88670:	980b883a 	mov	r5,r19
   88674:	e009883a 	mov	r4,fp
   88678:	008abf40 	call	8abf4 <__lshift>
   8867c:	1029883a 	mov	r20,r2
   88680:	003ecc06 	br	881b4 <__ram_exceptions_end+0xfff67f80>
   88684:	00800e44 	movi	r2,57
   88688:	90809026 	beq	r18,r2,888cc <_dtoa_r+0x152c>
   8868c:	92000044 	addi	r8,r18,1
   88690:	003f1f06 	br	88310 <__ram_exceptions_end+0xfff680dc>
   88694:	9011883a 	mov	r8,r18
   88698:	8825883a 	mov	r18,r17
   8869c:	a023883a 	mov	r17,r20
   886a0:	003e2906 	br	87f48 <__ram_exceptions_end+0xfff67d14>
   886a4:	002b883a 	mov	r21,zero
   886a8:	0023883a 	mov	r17,zero
   886ac:	003f5406 	br	88400 <__ram_exceptions_end+0xfff681cc>
   886b0:	61bfffc4 	addi	r6,r12,-1
   886b4:	300490fa 	slli	r2,r6,3
   886b8:	00c002b4 	movhi	r3,10
   886bc:	18f94d04 	addi	r3,r3,-6860
   886c0:	1885883a 	add	r2,r3,r2
   886c4:	11000017 	ldw	r4,0(r2)
   886c8:	11400117 	ldw	r5,4(r2)
   886cc:	d8800717 	ldw	r2,28(sp)
   886d0:	880f883a 	mov	r7,r17
   886d4:	d9801215 	stw	r6,72(sp)
   886d8:	800d883a 	mov	r6,r16
   886dc:	db001615 	stw	r12,88(sp)
   886e0:	15c00044 	addi	r23,r2,1
   886e4:	00980d00 	call	980d0 <__muldf3>
   886e8:	d9401017 	ldw	r5,64(sp)
   886ec:	d9000f17 	ldw	r4,60(sp)
   886f0:	d8c01515 	stw	r3,84(sp)
   886f4:	d8801415 	stw	r2,80(sp)
   886f8:	00992380 	call	99238 <__fixdfsi>
   886fc:	1009883a 	mov	r4,r2
   88700:	1021883a 	mov	r16,r2
   88704:	00992b80 	call	992b8 <__floatsidf>
   88708:	d9000f17 	ldw	r4,60(sp)
   8870c:	d9401017 	ldw	r5,64(sp)
   88710:	100d883a 	mov	r6,r2
   88714:	180f883a 	mov	r7,r3
   88718:	009893c0 	call	9893c <__subdf3>
   8871c:	1829883a 	mov	r20,r3
   88720:	d8c00717 	ldw	r3,28(sp)
   88724:	84000c04 	addi	r16,r16,48
   88728:	1023883a 	mov	r17,r2
   8872c:	1c000005 	stb	r16,0(r3)
   88730:	db001617 	ldw	r12,88(sp)
   88734:	00800044 	movi	r2,1
   88738:	60802226 	beq	r12,r2,887c4 <_dtoa_r+0x1424>
   8873c:	d9c00717 	ldw	r7,28(sp)
   88740:	8805883a 	mov	r2,r17
   88744:	b82b883a 	mov	r21,r23
   88748:	3b19883a 	add	r12,r7,r12
   8874c:	6023883a 	mov	r17,r12
   88750:	a007883a 	mov	r3,r20
   88754:	dc800f15 	stw	r18,60(sp)
   88758:	000d883a 	mov	r6,zero
   8875c:	01d00934 	movhi	r7,16420
   88760:	1009883a 	mov	r4,r2
   88764:	180b883a 	mov	r5,r3
   88768:	00980d00 	call	980d0 <__muldf3>
   8876c:	180b883a 	mov	r5,r3
   88770:	1009883a 	mov	r4,r2
   88774:	1829883a 	mov	r20,r3
   88778:	1025883a 	mov	r18,r2
   8877c:	00992380 	call	99238 <__fixdfsi>
   88780:	1009883a 	mov	r4,r2
   88784:	1021883a 	mov	r16,r2
   88788:	00992b80 	call	992b8 <__floatsidf>
   8878c:	100d883a 	mov	r6,r2
   88790:	180f883a 	mov	r7,r3
   88794:	9009883a 	mov	r4,r18
   88798:	a00b883a 	mov	r5,r20
   8879c:	84000c04 	addi	r16,r16,48
   887a0:	009893c0 	call	9893c <__subdf3>
   887a4:	ad400044 	addi	r21,r21,1
   887a8:	ac3fffc5 	stb	r16,-1(r21)
   887ac:	ac7fea1e 	bne	r21,r17,88758 <__ram_exceptions_end+0xfff68524>
   887b0:	1023883a 	mov	r17,r2
   887b4:	d8801217 	ldw	r2,72(sp)
   887b8:	dc800f17 	ldw	r18,60(sp)
   887bc:	1829883a 	mov	r20,r3
   887c0:	b8af883a 	add	r23,r23,r2
   887c4:	d9001417 	ldw	r4,80(sp)
   887c8:	d9401517 	ldw	r5,84(sp)
   887cc:	000d883a 	mov	r6,zero
   887d0:	01cff834 	movhi	r7,16352
   887d4:	0096bfc0 	call	96bfc <__adddf3>
   887d8:	880d883a 	mov	r6,r17
   887dc:	a00f883a 	mov	r7,r20
   887e0:	1009883a 	mov	r4,r2
   887e4:	180b883a 	mov	r5,r3
   887e8:	0097fdc0 	call	97fdc <__ledf2>
   887ec:	10003e0e 	bge	r2,zero,888e8 <_dtoa_r+0x1548>
   887f0:	d9001317 	ldw	r4,76(sp)
   887f4:	bd3fffc3 	ldbu	r20,-1(r23)
   887f8:	d9000515 	stw	r4,20(sp)
   887fc:	003d3b06 	br	87cec <__ram_exceptions_end+0xfff67ab8>
   88800:	0027883a 	mov	r19,zero
   88804:	003f1b06 	br	88474 <__ram_exceptions_end+0xfff68240>
   88808:	d8800817 	ldw	r2,32(sp)
   8880c:	11e9c83a 	sub	r20,r2,r7
   88810:	0005883a 	mov	r2,zero
   88814:	003d5406 	br	87d68 <__ram_exceptions_end+0xfff67b34>
   88818:	00800044 	movi	r2,1
   8881c:	003dc706 	br	87f3c <__ram_exceptions_end+0xfff67d08>
   88820:	d8c00217 	ldw	r3,8(sp)
   88824:	00800d84 	movi	r2,54
   88828:	dd400a17 	ldw	r21,40(sp)
   8882c:	10c5c83a 	sub	r2,r2,r3
   88830:	dd000817 	ldw	r20,32(sp)
   88834:	003d4c06 	br	87d68 <__ram_exceptions_end+0xfff67b34>
   88838:	dc800f15 	stw	r18,60(sp)
   8883c:	dcc01015 	stw	r19,64(sp)
   88840:	04000084 	movi	r16,2
   88844:	003bed06 	br	877fc <__ram_exceptions_end+0xfff675c8>
   88848:	d9000617 	ldw	r4,24(sp)
   8884c:	203f0d26 	beq	r4,zero,88484 <__ram_exceptions_end+0xfff68250>
   88850:	d9800c17 	ldw	r6,48(sp)
   88854:	01bcab0e 	bge	zero,r6,87b04 <__ram_exceptions_end+0xfff678d0>
   88858:	d9401017 	ldw	r5,64(sp)
   8885c:	d9000f17 	ldw	r4,60(sp)
   88860:	000d883a 	mov	r6,zero
   88864:	01d00934 	movhi	r7,16420
   88868:	00980d00 	call	980d0 <__muldf3>
   8886c:	81000044 	addi	r4,r16,1
   88870:	d8800f15 	stw	r2,60(sp)
   88874:	d8c01015 	stw	r3,64(sp)
   88878:	00992b80 	call	992b8 <__floatsidf>
   8887c:	d9800f17 	ldw	r6,60(sp)
   88880:	d9c01017 	ldw	r7,64(sp)
   88884:	1009883a 	mov	r4,r2
   88888:	180b883a 	mov	r5,r3
   8888c:	00980d00 	call	980d0 <__muldf3>
   88890:	01d00734 	movhi	r7,16412
   88894:	000d883a 	mov	r6,zero
   88898:	1009883a 	mov	r4,r2
   8889c:	180b883a 	mov	r5,r3
   888a0:	0096bfc0 	call	96bfc <__adddf3>
   888a4:	d9c00517 	ldw	r7,20(sp)
   888a8:	047f3034 	movhi	r17,64704
   888ac:	1021883a 	mov	r16,r2
   888b0:	39ffffc4 	addi	r7,r7,-1
   888b4:	d9c01315 	stw	r7,76(sp)
   888b8:	1c63883a 	add	r17,r3,r17
   888bc:	db000c17 	ldw	r12,48(sp)
   888c0:	003bea06 	br	8786c <__ram_exceptions_end+0xfff67638>
   888c4:	dc000915 	stw	r16,36(sp)
   888c8:	003e0e06 	br	88104 <__ram_exceptions_end+0xfff67ed0>
   888cc:	01000e44 	movi	r4,57
   888d0:	8825883a 	mov	r18,r17
   888d4:	9dc00044 	addi	r23,r19,1
   888d8:	99000005 	stb	r4,0(r19)
   888dc:	a023883a 	mov	r17,r20
   888e0:	dc000915 	stw	r16,36(sp)
   888e4:	003da406 	br	87f78 <__ram_exceptions_end+0xfff67d44>
   888e8:	d9801417 	ldw	r6,80(sp)
   888ec:	d9c01517 	ldw	r7,84(sp)
   888f0:	0009883a 	mov	r4,zero
   888f4:	014ff834 	movhi	r5,16352
   888f8:	009893c0 	call	9893c <__subdf3>
   888fc:	880d883a 	mov	r6,r17
   88900:	a00f883a 	mov	r7,r20
   88904:	1009883a 	mov	r4,r2
   88908:	180b883a 	mov	r5,r3
   8890c:	0097f000 	call	97f00 <__gedf2>
   88910:	00bc7c0e 	bge	zero,r2,87b04 <__ram_exceptions_end+0xfff678d0>
   88914:	01000c04 	movi	r4,48
   88918:	00000106 	br	88920 <_dtoa_r+0x1580>
   8891c:	102f883a 	mov	r23,r2
   88920:	b8bfffc4 	addi	r2,r23,-1
   88924:	10c00007 	ldb	r3,0(r2)
   88928:	193ffc26 	beq	r3,r4,8891c <__ram_exceptions_end+0xfff686e8>
   8892c:	d9801317 	ldw	r6,76(sp)
   88930:	d9800515 	stw	r6,20(sp)
   88934:	003c4406 	br	87a48 <__ram_exceptions_end+0xfff67814>
   88938:	d9801317 	ldw	r6,76(sp)
   8893c:	d9800515 	stw	r6,20(sp)
   88940:	003cea06 	br	87cec <__ram_exceptions_end+0xfff67ab8>
   88944:	dd800f17 	ldw	r22,60(sp)
   88948:	dcc01017 	ldw	r19,64(sp)
   8894c:	dc801217 	ldw	r18,72(sp)
   88950:	003c6c06 	br	87b04 <__ram_exceptions_end+0xfff678d0>
   88954:	903e031e 	bne	r18,zero,88164 <__ram_exceptions_end+0xfff67f30>
   88958:	003ebb06 	br	88448 <__ram_exceptions_end+0xfff68214>
   8895c:	103e6c1e 	bne	r2,zero,88310 <__ram_exceptions_end+0xfff680dc>
   88960:	4080004c 	andi	r2,r8,1
   88964:	103e6a26 	beq	r2,zero,88310 <__ram_exceptions_end+0xfff680dc>
   88968:	003e6606 	br	88304 <__ram_exceptions_end+0xfff680d0>
   8896c:	d8c00317 	ldw	r3,12(sp)
   88970:	00800084 	movi	r2,2
   88974:	10c02916 	blt	r2,r3,88a1c <_dtoa_r+0x167c>
   88978:	d9000c17 	ldw	r4,48(sp)
   8897c:	003e8806 	br	883a0 <__ram_exceptions_end+0xfff6816c>
   88980:	04000084 	movi	r16,2
   88984:	003b9d06 	br	877fc <__ram_exceptions_end+0xfff675c8>
   88988:	d9001317 	ldw	r4,76(sp)
   8898c:	d9000515 	stw	r4,20(sp)
   88990:	003cd606 	br	87cec <__ram_exceptions_end+0xfff67ab8>
   88994:	d8801317 	ldw	r2,76(sp)
   88998:	d8800515 	stw	r2,20(sp)
   8899c:	003c2a06 	br	87a48 <__ram_exceptions_end+0xfff67814>
   889a0:	d9800317 	ldw	r6,12(sp)
   889a4:	00800084 	movi	r2,2
   889a8:	11801516 	blt	r2,r6,88a00 <_dtoa_r+0x1660>
   889ac:	d9c00c17 	ldw	r7,48(sp)
   889b0:	d9c00615 	stw	r7,24(sp)
   889b4:	003df706 	br	88194 <__ram_exceptions_end+0xfff67f60>
   889b8:	193d3926 	beq	r3,r4,87ea0 <__ram_exceptions_end+0xfff67c6c>
   889bc:	00c00f04 	movi	r3,60
   889c0:	1885c83a 	sub	r2,r3,r2
   889c4:	003ddf06 	br	88144 <__ram_exceptions_end+0xfff67f10>
   889c8:	e009883a 	mov	r4,fp
   889cc:	e0001115 	stw	zero,68(fp)
   889d0:	000b883a 	mov	r5,zero
   889d4:	008a3b80 	call	8a3b8 <_Balloc>
   889d8:	d8800715 	stw	r2,28(sp)
   889dc:	d8c00717 	ldw	r3,28(sp)
   889e0:	00bfffc4 	movi	r2,-1
   889e4:	01000044 	movi	r4,1
   889e8:	d8800c15 	stw	r2,48(sp)
   889ec:	e0c01015 	stw	r3,64(fp)
   889f0:	d9000b15 	stw	r4,44(sp)
   889f4:	d8800615 	stw	r2,24(sp)
   889f8:	d8002215 	stw	zero,136(sp)
   889fc:	003c4106 	br	87b04 <__ram_exceptions_end+0xfff678d0>
   88a00:	d8c00c17 	ldw	r3,48(sp)
   88a04:	d8c00615 	stw	r3,24(sp)
   88a08:	003e7006 	br	883cc <__ram_exceptions_end+0xfff68198>
   88a0c:	04400044 	movi	r17,1
   88a10:	003b2006 	br	87694 <__ram_exceptions_end+0xfff67460>
   88a14:	000b883a 	mov	r5,zero
   88a18:	003b3d06 	br	87710 <__ram_exceptions_end+0xfff674dc>
   88a1c:	d8800c17 	ldw	r2,48(sp)
   88a20:	d8800615 	stw	r2,24(sp)
   88a24:	003e6906 	br	883cc <__ram_exceptions_end+0xfff68198>

00088a28 <__sflush_r>:
   88a28:	2880030b 	ldhu	r2,12(r5)
   88a2c:	defffb04 	addi	sp,sp,-20
   88a30:	dcc00315 	stw	r19,12(sp)
   88a34:	dc400115 	stw	r17,4(sp)
   88a38:	dfc00415 	stw	ra,16(sp)
   88a3c:	dc800215 	stw	r18,8(sp)
   88a40:	dc000015 	stw	r16,0(sp)
   88a44:	10c0020c 	andi	r3,r2,8
   88a48:	2823883a 	mov	r17,r5
   88a4c:	2027883a 	mov	r19,r4
   88a50:	1800311e 	bne	r3,zero,88b18 <__sflush_r+0xf0>
   88a54:	28c00117 	ldw	r3,4(r5)
   88a58:	10820014 	ori	r2,r2,2048
   88a5c:	2880030d 	sth	r2,12(r5)
   88a60:	00c04b0e 	bge	zero,r3,88b90 <__sflush_r+0x168>
   88a64:	8a000a17 	ldw	r8,40(r17)
   88a68:	40002326 	beq	r8,zero,88af8 <__sflush_r+0xd0>
   88a6c:	9c000017 	ldw	r16,0(r19)
   88a70:	10c4000c 	andi	r3,r2,4096
   88a74:	98000015 	stw	zero,0(r19)
   88a78:	18004826 	beq	r3,zero,88b9c <__sflush_r+0x174>
   88a7c:	89801417 	ldw	r6,80(r17)
   88a80:	10c0010c 	andi	r3,r2,4
   88a84:	18000626 	beq	r3,zero,88aa0 <__sflush_r+0x78>
   88a88:	88c00117 	ldw	r3,4(r17)
   88a8c:	88800c17 	ldw	r2,48(r17)
   88a90:	30cdc83a 	sub	r6,r6,r3
   88a94:	10000226 	beq	r2,zero,88aa0 <__sflush_r+0x78>
   88a98:	88800f17 	ldw	r2,60(r17)
   88a9c:	308dc83a 	sub	r6,r6,r2
   88aa0:	89400717 	ldw	r5,28(r17)
   88aa4:	000f883a 	mov	r7,zero
   88aa8:	9809883a 	mov	r4,r19
   88aac:	403ee83a 	callr	r8
   88ab0:	00ffffc4 	movi	r3,-1
   88ab4:	10c04426 	beq	r2,r3,88bc8 <__sflush_r+0x1a0>
   88ab8:	88c0030b 	ldhu	r3,12(r17)
   88abc:	89000417 	ldw	r4,16(r17)
   88ac0:	88000115 	stw	zero,4(r17)
   88ac4:	197dffcc 	andi	r5,r3,63487
   88ac8:	8940030d 	sth	r5,12(r17)
   88acc:	89000015 	stw	r4,0(r17)
   88ad0:	18c4000c 	andi	r3,r3,4096
   88ad4:	18002c1e 	bne	r3,zero,88b88 <__sflush_r+0x160>
   88ad8:	89400c17 	ldw	r5,48(r17)
   88adc:	9c000015 	stw	r16,0(r19)
   88ae0:	28000526 	beq	r5,zero,88af8 <__sflush_r+0xd0>
   88ae4:	88801004 	addi	r2,r17,64
   88ae8:	28800226 	beq	r5,r2,88af4 <__sflush_r+0xcc>
   88aec:	9809883a 	mov	r4,r19
   88af0:	00891a40 	call	891a4 <_free_r>
   88af4:	88000c15 	stw	zero,48(r17)
   88af8:	0005883a 	mov	r2,zero
   88afc:	dfc00417 	ldw	ra,16(sp)
   88b00:	dcc00317 	ldw	r19,12(sp)
   88b04:	dc800217 	ldw	r18,8(sp)
   88b08:	dc400117 	ldw	r17,4(sp)
   88b0c:	dc000017 	ldw	r16,0(sp)
   88b10:	dec00504 	addi	sp,sp,20
   88b14:	f800283a 	ret
   88b18:	2c800417 	ldw	r18,16(r5)
   88b1c:	903ff626 	beq	r18,zero,88af8 <__ram_exceptions_end+0xfff688c4>
   88b20:	2c000017 	ldw	r16,0(r5)
   88b24:	108000cc 	andi	r2,r2,3
   88b28:	2c800015 	stw	r18,0(r5)
   88b2c:	84a1c83a 	sub	r16,r16,r18
   88b30:	1000131e 	bne	r2,zero,88b80 <__sflush_r+0x158>
   88b34:	28800517 	ldw	r2,20(r5)
   88b38:	88800215 	stw	r2,8(r17)
   88b3c:	04000316 	blt	zero,r16,88b4c <__sflush_r+0x124>
   88b40:	003fed06 	br	88af8 <__ram_exceptions_end+0xfff688c4>
   88b44:	90a5883a 	add	r18,r18,r2
   88b48:	043feb0e 	bge	zero,r16,88af8 <__ram_exceptions_end+0xfff688c4>
   88b4c:	88800917 	ldw	r2,36(r17)
   88b50:	89400717 	ldw	r5,28(r17)
   88b54:	800f883a 	mov	r7,r16
   88b58:	900d883a 	mov	r6,r18
   88b5c:	9809883a 	mov	r4,r19
   88b60:	103ee83a 	callr	r2
   88b64:	80a1c83a 	sub	r16,r16,r2
   88b68:	00bff616 	blt	zero,r2,88b44 <__ram_exceptions_end+0xfff68910>
   88b6c:	88c0030b 	ldhu	r3,12(r17)
   88b70:	00bfffc4 	movi	r2,-1
   88b74:	18c01014 	ori	r3,r3,64
   88b78:	88c0030d 	sth	r3,12(r17)
   88b7c:	003fdf06 	br	88afc <__ram_exceptions_end+0xfff688c8>
   88b80:	0005883a 	mov	r2,zero
   88b84:	003fec06 	br	88b38 <__ram_exceptions_end+0xfff68904>
   88b88:	88801415 	stw	r2,80(r17)
   88b8c:	003fd206 	br	88ad8 <__ram_exceptions_end+0xfff688a4>
   88b90:	28c00f17 	ldw	r3,60(r5)
   88b94:	00ffb316 	blt	zero,r3,88a64 <__ram_exceptions_end+0xfff68830>
   88b98:	003fd706 	br	88af8 <__ram_exceptions_end+0xfff688c4>
   88b9c:	89400717 	ldw	r5,28(r17)
   88ba0:	000d883a 	mov	r6,zero
   88ba4:	01c00044 	movi	r7,1
   88ba8:	9809883a 	mov	r4,r19
   88bac:	403ee83a 	callr	r8
   88bb0:	100d883a 	mov	r6,r2
   88bb4:	00bfffc4 	movi	r2,-1
   88bb8:	30801426 	beq	r6,r2,88c0c <__sflush_r+0x1e4>
   88bbc:	8880030b 	ldhu	r2,12(r17)
   88bc0:	8a000a17 	ldw	r8,40(r17)
   88bc4:	003fae06 	br	88a80 <__ram_exceptions_end+0xfff6884c>
   88bc8:	98c00017 	ldw	r3,0(r19)
   88bcc:	183fba26 	beq	r3,zero,88ab8 <__ram_exceptions_end+0xfff68884>
   88bd0:	01000744 	movi	r4,29
   88bd4:	19000626 	beq	r3,r4,88bf0 <__sflush_r+0x1c8>
   88bd8:	01000584 	movi	r4,22
   88bdc:	19000426 	beq	r3,r4,88bf0 <__sflush_r+0x1c8>
   88be0:	88c0030b 	ldhu	r3,12(r17)
   88be4:	18c01014 	ori	r3,r3,64
   88be8:	88c0030d 	sth	r3,12(r17)
   88bec:	003fc306 	br	88afc <__ram_exceptions_end+0xfff688c8>
   88bf0:	8880030b 	ldhu	r2,12(r17)
   88bf4:	88c00417 	ldw	r3,16(r17)
   88bf8:	88000115 	stw	zero,4(r17)
   88bfc:	10bdffcc 	andi	r2,r2,63487
   88c00:	8880030d 	sth	r2,12(r17)
   88c04:	88c00015 	stw	r3,0(r17)
   88c08:	003fb306 	br	88ad8 <__ram_exceptions_end+0xfff688a4>
   88c0c:	98800017 	ldw	r2,0(r19)
   88c10:	103fea26 	beq	r2,zero,88bbc <__ram_exceptions_end+0xfff68988>
   88c14:	00c00744 	movi	r3,29
   88c18:	10c00226 	beq	r2,r3,88c24 <__sflush_r+0x1fc>
   88c1c:	00c00584 	movi	r3,22
   88c20:	10c0031e 	bne	r2,r3,88c30 <__sflush_r+0x208>
   88c24:	9c000015 	stw	r16,0(r19)
   88c28:	0005883a 	mov	r2,zero
   88c2c:	003fb306 	br	88afc <__ram_exceptions_end+0xfff688c8>
   88c30:	88c0030b 	ldhu	r3,12(r17)
   88c34:	3005883a 	mov	r2,r6
   88c38:	18c01014 	ori	r3,r3,64
   88c3c:	88c0030d 	sth	r3,12(r17)
   88c40:	003fae06 	br	88afc <__ram_exceptions_end+0xfff688c8>

00088c44 <_fflush_r>:
   88c44:	defffd04 	addi	sp,sp,-12
   88c48:	dc000115 	stw	r16,4(sp)
   88c4c:	dfc00215 	stw	ra,8(sp)
   88c50:	2021883a 	mov	r16,r4
   88c54:	20000226 	beq	r4,zero,88c60 <_fflush_r+0x1c>
   88c58:	20800e17 	ldw	r2,56(r4)
   88c5c:	10000c26 	beq	r2,zero,88c90 <_fflush_r+0x4c>
   88c60:	2880030f 	ldh	r2,12(r5)
   88c64:	1000051e 	bne	r2,zero,88c7c <_fflush_r+0x38>
   88c68:	0005883a 	mov	r2,zero
   88c6c:	dfc00217 	ldw	ra,8(sp)
   88c70:	dc000117 	ldw	r16,4(sp)
   88c74:	dec00304 	addi	sp,sp,12
   88c78:	f800283a 	ret
   88c7c:	8009883a 	mov	r4,r16
   88c80:	dfc00217 	ldw	ra,8(sp)
   88c84:	dc000117 	ldw	r16,4(sp)
   88c88:	dec00304 	addi	sp,sp,12
   88c8c:	0088a281 	jmpi	88a28 <__sflush_r>
   88c90:	d9400015 	stw	r5,0(sp)
   88c94:	00890300 	call	89030 <__sinit>
   88c98:	d9400017 	ldw	r5,0(sp)
   88c9c:	003ff006 	br	88c60 <__ram_exceptions_end+0xfff68a2c>

00088ca0 <fflush>:
   88ca0:	20000526 	beq	r4,zero,88cb8 <fflush+0x18>
   88ca4:	008002b4 	movhi	r2,10
   88ca8:	10817a04 	addi	r2,r2,1512
   88cac:	200b883a 	mov	r5,r4
   88cb0:	11000017 	ldw	r4,0(r2)
   88cb4:	0088c441 	jmpi	88c44 <_fflush_r>
   88cb8:	008002b4 	movhi	r2,10
   88cbc:	10817904 	addi	r2,r2,1508
   88cc0:	11000017 	ldw	r4,0(r2)
   88cc4:	01400274 	movhi	r5,9
   88cc8:	29631104 	addi	r5,r5,-29628
   88ccc:	0089a401 	jmpi	89a40 <_fwalk_reent>

00088cd0 <__fp_unlock>:
   88cd0:	0005883a 	mov	r2,zero
   88cd4:	f800283a 	ret

00088cd8 <_cleanup_r>:
   88cd8:	01400274 	movhi	r5,9
   88cdc:	294d4c04 	addi	r5,r5,13616
   88ce0:	0089a401 	jmpi	89a40 <_fwalk_reent>

00088ce4 <__sinit.part.1>:
   88ce4:	defff704 	addi	sp,sp,-36
   88ce8:	00c00274 	movhi	r3,9
   88cec:	dfc00815 	stw	ra,32(sp)
   88cf0:	ddc00715 	stw	r23,28(sp)
   88cf4:	dd800615 	stw	r22,24(sp)
   88cf8:	dd400515 	stw	r21,20(sp)
   88cfc:	dd000415 	stw	r20,16(sp)
   88d00:	dcc00315 	stw	r19,12(sp)
   88d04:	dc800215 	stw	r18,8(sp)
   88d08:	dc400115 	stw	r17,4(sp)
   88d0c:	dc000015 	stw	r16,0(sp)
   88d10:	18e33604 	addi	r3,r3,-29480
   88d14:	24000117 	ldw	r16,4(r4)
   88d18:	20c00f15 	stw	r3,60(r4)
   88d1c:	2080bb04 	addi	r2,r4,748
   88d20:	00c000c4 	movi	r3,3
   88d24:	20c0b915 	stw	r3,740(r4)
   88d28:	2080ba15 	stw	r2,744(r4)
   88d2c:	2000b815 	stw	zero,736(r4)
   88d30:	05c00204 	movi	r23,8
   88d34:	00800104 	movi	r2,4
   88d38:	2025883a 	mov	r18,r4
   88d3c:	b80d883a 	mov	r6,r23
   88d40:	81001704 	addi	r4,r16,92
   88d44:	000b883a 	mov	r5,zero
   88d48:	80000015 	stw	zero,0(r16)
   88d4c:	80000115 	stw	zero,4(r16)
   88d50:	80000215 	stw	zero,8(r16)
   88d54:	8080030d 	sth	r2,12(r16)
   88d58:	80001915 	stw	zero,100(r16)
   88d5c:	8000038d 	sth	zero,14(r16)
   88d60:	80000415 	stw	zero,16(r16)
   88d64:	80000515 	stw	zero,20(r16)
   88d68:	80000615 	stw	zero,24(r16)
   88d6c:	008a2900 	call	8a290 <memset>
   88d70:	05800234 	movhi	r22,8
   88d74:	94400217 	ldw	r17,8(r18)
   88d78:	05400234 	movhi	r21,8
   88d7c:	05000234 	movhi	r20,8
   88d80:	04c00234 	movhi	r19,8
   88d84:	b58c1704 	addi	r22,r22,12380
   88d88:	ad4c2e04 	addi	r21,r21,12472
   88d8c:	a50c4d04 	addi	r20,r20,12596
   88d90:	9ccc6404 	addi	r19,r19,12688
   88d94:	85800815 	stw	r22,32(r16)
   88d98:	85400915 	stw	r21,36(r16)
   88d9c:	85000a15 	stw	r20,40(r16)
   88da0:	84c00b15 	stw	r19,44(r16)
   88da4:	84000715 	stw	r16,28(r16)
   88da8:	00800284 	movi	r2,10
   88dac:	8880030d 	sth	r2,12(r17)
   88db0:	00800044 	movi	r2,1
   88db4:	b80d883a 	mov	r6,r23
   88db8:	89001704 	addi	r4,r17,92
   88dbc:	000b883a 	mov	r5,zero
   88dc0:	88000015 	stw	zero,0(r17)
   88dc4:	88000115 	stw	zero,4(r17)
   88dc8:	88000215 	stw	zero,8(r17)
   88dcc:	88001915 	stw	zero,100(r17)
   88dd0:	8880038d 	sth	r2,14(r17)
   88dd4:	88000415 	stw	zero,16(r17)
   88dd8:	88000515 	stw	zero,20(r17)
   88ddc:	88000615 	stw	zero,24(r17)
   88de0:	008a2900 	call	8a290 <memset>
   88de4:	94000317 	ldw	r16,12(r18)
   88de8:	00800484 	movi	r2,18
   88dec:	8c400715 	stw	r17,28(r17)
   88df0:	8d800815 	stw	r22,32(r17)
   88df4:	8d400915 	stw	r21,36(r17)
   88df8:	8d000a15 	stw	r20,40(r17)
   88dfc:	8cc00b15 	stw	r19,44(r17)
   88e00:	8080030d 	sth	r2,12(r16)
   88e04:	00800084 	movi	r2,2
   88e08:	80000015 	stw	zero,0(r16)
   88e0c:	80000115 	stw	zero,4(r16)
   88e10:	80000215 	stw	zero,8(r16)
   88e14:	80001915 	stw	zero,100(r16)
   88e18:	8080038d 	sth	r2,14(r16)
   88e1c:	80000415 	stw	zero,16(r16)
   88e20:	80000515 	stw	zero,20(r16)
   88e24:	80000615 	stw	zero,24(r16)
   88e28:	b80d883a 	mov	r6,r23
   88e2c:	000b883a 	mov	r5,zero
   88e30:	81001704 	addi	r4,r16,92
   88e34:	008a2900 	call	8a290 <memset>
   88e38:	00800044 	movi	r2,1
   88e3c:	84000715 	stw	r16,28(r16)
   88e40:	85800815 	stw	r22,32(r16)
   88e44:	85400915 	stw	r21,36(r16)
   88e48:	85000a15 	stw	r20,40(r16)
   88e4c:	84c00b15 	stw	r19,44(r16)
   88e50:	90800e15 	stw	r2,56(r18)
   88e54:	dfc00817 	ldw	ra,32(sp)
   88e58:	ddc00717 	ldw	r23,28(sp)
   88e5c:	dd800617 	ldw	r22,24(sp)
   88e60:	dd400517 	ldw	r21,20(sp)
   88e64:	dd000417 	ldw	r20,16(sp)
   88e68:	dcc00317 	ldw	r19,12(sp)
   88e6c:	dc800217 	ldw	r18,8(sp)
   88e70:	dc400117 	ldw	r17,4(sp)
   88e74:	dc000017 	ldw	r16,0(sp)
   88e78:	dec00904 	addi	sp,sp,36
   88e7c:	f800283a 	ret

00088e80 <__fp_lock>:
   88e80:	0005883a 	mov	r2,zero
   88e84:	f800283a 	ret

00088e88 <__sfmoreglue>:
   88e88:	defffc04 	addi	sp,sp,-16
   88e8c:	dc800215 	stw	r18,8(sp)
   88e90:	2825883a 	mov	r18,r5
   88e94:	dc000015 	stw	r16,0(sp)
   88e98:	01401a04 	movi	r5,104
   88e9c:	2021883a 	mov	r16,r4
   88ea0:	913fffc4 	addi	r4,r18,-1
   88ea4:	dfc00315 	stw	ra,12(sp)
   88ea8:	dc400115 	stw	r17,4(sp)
   88eac:	00822140 	call	82214 <__mulsi3>
   88eb0:	8009883a 	mov	r4,r16
   88eb4:	11401d04 	addi	r5,r2,116
   88eb8:	1023883a 	mov	r17,r2
   88ebc:	008235c0 	call	8235c <_malloc_r>
   88ec0:	1021883a 	mov	r16,r2
   88ec4:	10000726 	beq	r2,zero,88ee4 <__sfmoreglue+0x5c>
   88ec8:	11000304 	addi	r4,r2,12
   88ecc:	10000015 	stw	zero,0(r2)
   88ed0:	14800115 	stw	r18,4(r2)
   88ed4:	11000215 	stw	r4,8(r2)
   88ed8:	89801a04 	addi	r6,r17,104
   88edc:	000b883a 	mov	r5,zero
   88ee0:	008a2900 	call	8a290 <memset>
   88ee4:	8005883a 	mov	r2,r16
   88ee8:	dfc00317 	ldw	ra,12(sp)
   88eec:	dc800217 	ldw	r18,8(sp)
   88ef0:	dc400117 	ldw	r17,4(sp)
   88ef4:	dc000017 	ldw	r16,0(sp)
   88ef8:	dec00404 	addi	sp,sp,16
   88efc:	f800283a 	ret

00088f00 <__sfp>:
   88f00:	defffb04 	addi	sp,sp,-20
   88f04:	dc000015 	stw	r16,0(sp)
   88f08:	040002b4 	movhi	r16,10
   88f0c:	84017904 	addi	r16,r16,1508
   88f10:	dcc00315 	stw	r19,12(sp)
   88f14:	2027883a 	mov	r19,r4
   88f18:	81000017 	ldw	r4,0(r16)
   88f1c:	dfc00415 	stw	ra,16(sp)
   88f20:	dc800215 	stw	r18,8(sp)
   88f24:	20800e17 	ldw	r2,56(r4)
   88f28:	dc400115 	stw	r17,4(sp)
   88f2c:	1000021e 	bne	r2,zero,88f38 <__sfp+0x38>
   88f30:	0088ce40 	call	88ce4 <__sinit.part.1>
   88f34:	81000017 	ldw	r4,0(r16)
   88f38:	2480b804 	addi	r18,r4,736
   88f3c:	047fffc4 	movi	r17,-1
   88f40:	91000117 	ldw	r4,4(r18)
   88f44:	94000217 	ldw	r16,8(r18)
   88f48:	213fffc4 	addi	r4,r4,-1
   88f4c:	20000a16 	blt	r4,zero,88f78 <__sfp+0x78>
   88f50:	8080030f 	ldh	r2,12(r16)
   88f54:	10000c26 	beq	r2,zero,88f88 <__sfp+0x88>
   88f58:	80c01d04 	addi	r3,r16,116
   88f5c:	00000206 	br	88f68 <__sfp+0x68>
   88f60:	18bfe60f 	ldh	r2,-104(r3)
   88f64:	10000826 	beq	r2,zero,88f88 <__sfp+0x88>
   88f68:	213fffc4 	addi	r4,r4,-1
   88f6c:	1c3ffd04 	addi	r16,r3,-12
   88f70:	18c01a04 	addi	r3,r3,104
   88f74:	247ffa1e 	bne	r4,r17,88f60 <__ram_exceptions_end+0xfff68d2c>
   88f78:	90800017 	ldw	r2,0(r18)
   88f7c:	10001d26 	beq	r2,zero,88ff4 <__sfp+0xf4>
   88f80:	1025883a 	mov	r18,r2
   88f84:	003fee06 	br	88f40 <__ram_exceptions_end+0xfff68d0c>
   88f88:	00bfffc4 	movi	r2,-1
   88f8c:	8080038d 	sth	r2,14(r16)
   88f90:	00800044 	movi	r2,1
   88f94:	8080030d 	sth	r2,12(r16)
   88f98:	80001915 	stw	zero,100(r16)
   88f9c:	80000015 	stw	zero,0(r16)
   88fa0:	80000215 	stw	zero,8(r16)
   88fa4:	80000115 	stw	zero,4(r16)
   88fa8:	80000415 	stw	zero,16(r16)
   88fac:	80000515 	stw	zero,20(r16)
   88fb0:	80000615 	stw	zero,24(r16)
   88fb4:	01800204 	movi	r6,8
   88fb8:	000b883a 	mov	r5,zero
   88fbc:	81001704 	addi	r4,r16,92
   88fc0:	008a2900 	call	8a290 <memset>
   88fc4:	8005883a 	mov	r2,r16
   88fc8:	80000c15 	stw	zero,48(r16)
   88fcc:	80000d15 	stw	zero,52(r16)
   88fd0:	80001115 	stw	zero,68(r16)
   88fd4:	80001215 	stw	zero,72(r16)
   88fd8:	dfc00417 	ldw	ra,16(sp)
   88fdc:	dcc00317 	ldw	r19,12(sp)
   88fe0:	dc800217 	ldw	r18,8(sp)
   88fe4:	dc400117 	ldw	r17,4(sp)
   88fe8:	dc000017 	ldw	r16,0(sp)
   88fec:	dec00504 	addi	sp,sp,20
   88ff0:	f800283a 	ret
   88ff4:	01400104 	movi	r5,4
   88ff8:	9809883a 	mov	r4,r19
   88ffc:	0088e880 	call	88e88 <__sfmoreglue>
   89000:	90800015 	stw	r2,0(r18)
   89004:	103fde1e 	bne	r2,zero,88f80 <__ram_exceptions_end+0xfff68d4c>
   89008:	00800304 	movi	r2,12
   8900c:	98800015 	stw	r2,0(r19)
   89010:	0005883a 	mov	r2,zero
   89014:	003ff006 	br	88fd8 <__ram_exceptions_end+0xfff68da4>

00089018 <_cleanup>:
   89018:	008002b4 	movhi	r2,10
   8901c:	10817904 	addi	r2,r2,1508
   89020:	11000017 	ldw	r4,0(r2)
   89024:	01400274 	movhi	r5,9
   89028:	294d4c04 	addi	r5,r5,13616
   8902c:	0089a401 	jmpi	89a40 <_fwalk_reent>

00089030 <__sinit>:
   89030:	20800e17 	ldw	r2,56(r4)
   89034:	10000126 	beq	r2,zero,8903c <__sinit+0xc>
   89038:	f800283a 	ret
   8903c:	0088ce41 	jmpi	88ce4 <__sinit.part.1>

00089040 <__sfp_lock_acquire>:
   89040:	f800283a 	ret

00089044 <__sfp_lock_release>:
   89044:	f800283a 	ret

00089048 <__sinit_lock_acquire>:
   89048:	f800283a 	ret

0008904c <__sinit_lock_release>:
   8904c:	f800283a 	ret

00089050 <__fp_lock_all>:
   89050:	008002b4 	movhi	r2,10
   89054:	10817a04 	addi	r2,r2,1512
   89058:	11000017 	ldw	r4,0(r2)
   8905c:	01400274 	movhi	r5,9
   89060:	2963a004 	addi	r5,r5,-29056
   89064:	008997c1 	jmpi	8997c <_fwalk>

00089068 <__fp_unlock_all>:
   89068:	008002b4 	movhi	r2,10
   8906c:	10817a04 	addi	r2,r2,1512
   89070:	11000017 	ldw	r4,0(r2)
   89074:	01400274 	movhi	r5,9
   89078:	29633404 	addi	r5,r5,-29488
   8907c:	008997c1 	jmpi	8997c <_fwalk>

00089080 <_malloc_trim_r>:
   89080:	defffb04 	addi	sp,sp,-20
   89084:	dcc00315 	stw	r19,12(sp)
   89088:	04c002b4 	movhi	r19,10
   8908c:	dc800215 	stw	r18,8(sp)
   89090:	dc400115 	stw	r17,4(sp)
   89094:	dc000015 	stw	r16,0(sp)
   89098:	dfc00415 	stw	ra,16(sp)
   8909c:	2821883a 	mov	r16,r5
   890a0:	9cfb5b04 	addi	r19,r19,-4756
   890a4:	2025883a 	mov	r18,r4
   890a8:	0099ca00 	call	99ca0 <__malloc_lock>
   890ac:	98800217 	ldw	r2,8(r19)
   890b0:	14400117 	ldw	r17,4(r2)
   890b4:	00bfff04 	movi	r2,-4
   890b8:	88a2703a 	and	r17,r17,r2
   890bc:	8c21c83a 	sub	r16,r17,r16
   890c0:	8403fbc4 	addi	r16,r16,4079
   890c4:	8020d33a 	srli	r16,r16,12
   890c8:	0083ffc4 	movi	r2,4095
   890cc:	843fffc4 	addi	r16,r16,-1
   890d0:	8020933a 	slli	r16,r16,12
   890d4:	1400060e 	bge	r2,r16,890f0 <_malloc_trim_r+0x70>
   890d8:	000b883a 	mov	r5,zero
   890dc:	9009883a 	mov	r4,r18
   890e0:	0082f140 	call	82f14 <_sbrk_r>
   890e4:	98c00217 	ldw	r3,8(r19)
   890e8:	1c47883a 	add	r3,r3,r17
   890ec:	10c00a26 	beq	r2,r3,89118 <_malloc_trim_r+0x98>
   890f0:	9009883a 	mov	r4,r18
   890f4:	0099cc40 	call	99cc4 <__malloc_unlock>
   890f8:	0005883a 	mov	r2,zero
   890fc:	dfc00417 	ldw	ra,16(sp)
   89100:	dcc00317 	ldw	r19,12(sp)
   89104:	dc800217 	ldw	r18,8(sp)
   89108:	dc400117 	ldw	r17,4(sp)
   8910c:	dc000017 	ldw	r16,0(sp)
   89110:	dec00504 	addi	sp,sp,20
   89114:	f800283a 	ret
   89118:	040bc83a 	sub	r5,zero,r16
   8911c:	9009883a 	mov	r4,r18
   89120:	0082f140 	call	82f14 <_sbrk_r>
   89124:	00ffffc4 	movi	r3,-1
   89128:	10c00d26 	beq	r2,r3,89160 <_malloc_trim_r+0xe0>
   8912c:	00c002b4 	movhi	r3,10
   89130:	18c8dc04 	addi	r3,r3,9072
   89134:	18800017 	ldw	r2,0(r3)
   89138:	99000217 	ldw	r4,8(r19)
   8913c:	8c23c83a 	sub	r17,r17,r16
   89140:	8c400054 	ori	r17,r17,1
   89144:	1421c83a 	sub	r16,r2,r16
   89148:	24400115 	stw	r17,4(r4)
   8914c:	9009883a 	mov	r4,r18
   89150:	1c000015 	stw	r16,0(r3)
   89154:	0099cc40 	call	99cc4 <__malloc_unlock>
   89158:	00800044 	movi	r2,1
   8915c:	003fe706 	br	890fc <__ram_exceptions_end+0xfff68ec8>
   89160:	000b883a 	mov	r5,zero
   89164:	9009883a 	mov	r4,r18
   89168:	0082f140 	call	82f14 <_sbrk_r>
   8916c:	99000217 	ldw	r4,8(r19)
   89170:	014003c4 	movi	r5,15
   89174:	1107c83a 	sub	r3,r2,r4
   89178:	28ffdd0e 	bge	r5,r3,890f0 <__ram_exceptions_end+0xfff68ebc>
   8917c:	014002b4 	movhi	r5,10
   89180:	29417b04 	addi	r5,r5,1516
   89184:	29400017 	ldw	r5,0(r5)
   89188:	18c00054 	ori	r3,r3,1
   8918c:	20c00115 	stw	r3,4(r4)
   89190:	00c002b4 	movhi	r3,10
   89194:	1145c83a 	sub	r2,r2,r5
   89198:	18c8dc04 	addi	r3,r3,9072
   8919c:	18800015 	stw	r2,0(r3)
   891a0:	003fd306 	br	890f0 <__ram_exceptions_end+0xfff68ebc>

000891a4 <_free_r>:
   891a4:	28004126 	beq	r5,zero,892ac <_free_r+0x108>
   891a8:	defffd04 	addi	sp,sp,-12
   891ac:	dc400115 	stw	r17,4(sp)
   891b0:	dc000015 	stw	r16,0(sp)
   891b4:	2023883a 	mov	r17,r4
   891b8:	2821883a 	mov	r16,r5
   891bc:	dfc00215 	stw	ra,8(sp)
   891c0:	0099ca00 	call	99ca0 <__malloc_lock>
   891c4:	81ffff17 	ldw	r7,-4(r16)
   891c8:	00bfff84 	movi	r2,-2
   891cc:	010002b4 	movhi	r4,10
   891d0:	81bffe04 	addi	r6,r16,-8
   891d4:	3884703a 	and	r2,r7,r2
   891d8:	213b5b04 	addi	r4,r4,-4756
   891dc:	308b883a 	add	r5,r6,r2
   891e0:	2a400117 	ldw	r9,4(r5)
   891e4:	22000217 	ldw	r8,8(r4)
   891e8:	00ffff04 	movi	r3,-4
   891ec:	48c6703a 	and	r3,r9,r3
   891f0:	2a005726 	beq	r5,r8,89350 <_free_r+0x1ac>
   891f4:	28c00115 	stw	r3,4(r5)
   891f8:	39c0004c 	andi	r7,r7,1
   891fc:	3800091e 	bne	r7,zero,89224 <_free_r+0x80>
   89200:	823ffe17 	ldw	r8,-8(r16)
   89204:	22400204 	addi	r9,r4,8
   89208:	320dc83a 	sub	r6,r6,r8
   8920c:	31c00217 	ldw	r7,8(r6)
   89210:	1205883a 	add	r2,r2,r8
   89214:	3a406526 	beq	r7,r9,893ac <_free_r+0x208>
   89218:	32000317 	ldw	r8,12(r6)
   8921c:	3a000315 	stw	r8,12(r7)
   89220:	41c00215 	stw	r7,8(r8)
   89224:	28cf883a 	add	r7,r5,r3
   89228:	39c00117 	ldw	r7,4(r7)
   8922c:	39c0004c 	andi	r7,r7,1
   89230:	38003a26 	beq	r7,zero,8931c <_free_r+0x178>
   89234:	10c00054 	ori	r3,r2,1
   89238:	30c00115 	stw	r3,4(r6)
   8923c:	3087883a 	add	r3,r6,r2
   89240:	18800015 	stw	r2,0(r3)
   89244:	00c07fc4 	movi	r3,511
   89248:	18801936 	bltu	r3,r2,892b0 <_free_r+0x10c>
   8924c:	1004d0fa 	srli	r2,r2,3
   89250:	01c00044 	movi	r7,1
   89254:	21400117 	ldw	r5,4(r4)
   89258:	10c00044 	addi	r3,r2,1
   8925c:	18c7883a 	add	r3,r3,r3
   89260:	1005d0ba 	srai	r2,r2,2
   89264:	18c7883a 	add	r3,r3,r3
   89268:	18c7883a 	add	r3,r3,r3
   8926c:	1907883a 	add	r3,r3,r4
   89270:	3884983a 	sll	r2,r7,r2
   89274:	19c00017 	ldw	r7,0(r3)
   89278:	1a3ffe04 	addi	r8,r3,-8
   8927c:	1144b03a 	or	r2,r2,r5
   89280:	32000315 	stw	r8,12(r6)
   89284:	31c00215 	stw	r7,8(r6)
   89288:	20800115 	stw	r2,4(r4)
   8928c:	19800015 	stw	r6,0(r3)
   89290:	39800315 	stw	r6,12(r7)
   89294:	8809883a 	mov	r4,r17
   89298:	dfc00217 	ldw	ra,8(sp)
   8929c:	dc400117 	ldw	r17,4(sp)
   892a0:	dc000017 	ldw	r16,0(sp)
   892a4:	dec00304 	addi	sp,sp,12
   892a8:	0099cc41 	jmpi	99cc4 <__malloc_unlock>
   892ac:	f800283a 	ret
   892b0:	100ad27a 	srli	r5,r2,9
   892b4:	00c00104 	movi	r3,4
   892b8:	19404a36 	bltu	r3,r5,893e4 <_free_r+0x240>
   892bc:	100ad1ba 	srli	r5,r2,6
   892c0:	28c00e44 	addi	r3,r5,57
   892c4:	18c7883a 	add	r3,r3,r3
   892c8:	29400e04 	addi	r5,r5,56
   892cc:	18c7883a 	add	r3,r3,r3
   892d0:	18c7883a 	add	r3,r3,r3
   892d4:	1909883a 	add	r4,r3,r4
   892d8:	20c00017 	ldw	r3,0(r4)
   892dc:	01c002b4 	movhi	r7,10
   892e0:	213ffe04 	addi	r4,r4,-8
   892e4:	39fb5b04 	addi	r7,r7,-4756
   892e8:	20c04426 	beq	r4,r3,893fc <_free_r+0x258>
   892ec:	01ffff04 	movi	r7,-4
   892f0:	19400117 	ldw	r5,4(r3)
   892f4:	29ca703a 	and	r5,r5,r7
   892f8:	1140022e 	bgeu	r2,r5,89304 <_free_r+0x160>
   892fc:	18c00217 	ldw	r3,8(r3)
   89300:	20fffb1e 	bne	r4,r3,892f0 <__ram_exceptions_end+0xfff690bc>
   89304:	19000317 	ldw	r4,12(r3)
   89308:	31000315 	stw	r4,12(r6)
   8930c:	30c00215 	stw	r3,8(r6)
   89310:	21800215 	stw	r6,8(r4)
   89314:	19800315 	stw	r6,12(r3)
   89318:	003fde06 	br	89294 <__ram_exceptions_end+0xfff69060>
   8931c:	29c00217 	ldw	r7,8(r5)
   89320:	10c5883a 	add	r2,r2,r3
   89324:	00c002b4 	movhi	r3,10
   89328:	18fb5d04 	addi	r3,r3,-4748
   8932c:	38c03b26 	beq	r7,r3,8941c <_free_r+0x278>
   89330:	2a000317 	ldw	r8,12(r5)
   89334:	11400054 	ori	r5,r2,1
   89338:	3087883a 	add	r3,r6,r2
   8933c:	3a000315 	stw	r8,12(r7)
   89340:	41c00215 	stw	r7,8(r8)
   89344:	31400115 	stw	r5,4(r6)
   89348:	18800015 	stw	r2,0(r3)
   8934c:	003fbd06 	br	89244 <__ram_exceptions_end+0xfff69010>
   89350:	39c0004c 	andi	r7,r7,1
   89354:	10c5883a 	add	r2,r2,r3
   89358:	3800071e 	bne	r7,zero,89378 <_free_r+0x1d4>
   8935c:	81fffe17 	ldw	r7,-8(r16)
   89360:	31cdc83a 	sub	r6,r6,r7
   89364:	30c00317 	ldw	r3,12(r6)
   89368:	31400217 	ldw	r5,8(r6)
   8936c:	11c5883a 	add	r2,r2,r7
   89370:	28c00315 	stw	r3,12(r5)
   89374:	19400215 	stw	r5,8(r3)
   89378:	10c00054 	ori	r3,r2,1
   8937c:	30c00115 	stw	r3,4(r6)
   89380:	00c002b4 	movhi	r3,10
   89384:	18c17c04 	addi	r3,r3,1520
   89388:	18c00017 	ldw	r3,0(r3)
   8938c:	21800215 	stw	r6,8(r4)
   89390:	10ffc036 	bltu	r2,r3,89294 <__ram_exceptions_end+0xfff69060>
   89394:	008002b4 	movhi	r2,10
   89398:	1088d004 	addi	r2,r2,9024
   8939c:	11400017 	ldw	r5,0(r2)
   893a0:	8809883a 	mov	r4,r17
   893a4:	00890800 	call	89080 <_malloc_trim_r>
   893a8:	003fba06 	br	89294 <__ram_exceptions_end+0xfff69060>
   893ac:	28c9883a 	add	r4,r5,r3
   893b0:	21000117 	ldw	r4,4(r4)
   893b4:	2100004c 	andi	r4,r4,1
   893b8:	2000391e 	bne	r4,zero,894a0 <_free_r+0x2fc>
   893bc:	29c00217 	ldw	r7,8(r5)
   893c0:	29000317 	ldw	r4,12(r5)
   893c4:	1885883a 	add	r2,r3,r2
   893c8:	10c00054 	ori	r3,r2,1
   893cc:	39000315 	stw	r4,12(r7)
   893d0:	21c00215 	stw	r7,8(r4)
   893d4:	30c00115 	stw	r3,4(r6)
   893d8:	308d883a 	add	r6,r6,r2
   893dc:	30800015 	stw	r2,0(r6)
   893e0:	003fac06 	br	89294 <__ram_exceptions_end+0xfff69060>
   893e4:	00c00504 	movi	r3,20
   893e8:	19401536 	bltu	r3,r5,89440 <_free_r+0x29c>
   893ec:	28c01704 	addi	r3,r5,92
   893f0:	18c7883a 	add	r3,r3,r3
   893f4:	294016c4 	addi	r5,r5,91
   893f8:	003fb406 	br	892cc <__ram_exceptions_end+0xfff69098>
   893fc:	280bd0ba 	srai	r5,r5,2
   89400:	00c00044 	movi	r3,1
   89404:	38800117 	ldw	r2,4(r7)
   89408:	194a983a 	sll	r5,r3,r5
   8940c:	2007883a 	mov	r3,r4
   89410:	2884b03a 	or	r2,r5,r2
   89414:	38800115 	stw	r2,4(r7)
   89418:	003fbb06 	br	89308 <__ram_exceptions_end+0xfff690d4>
   8941c:	21800515 	stw	r6,20(r4)
   89420:	21800415 	stw	r6,16(r4)
   89424:	10c00054 	ori	r3,r2,1
   89428:	31c00315 	stw	r7,12(r6)
   8942c:	31c00215 	stw	r7,8(r6)
   89430:	30c00115 	stw	r3,4(r6)
   89434:	308d883a 	add	r6,r6,r2
   89438:	30800015 	stw	r2,0(r6)
   8943c:	003f9506 	br	89294 <__ram_exceptions_end+0xfff69060>
   89440:	00c01504 	movi	r3,84
   89444:	19400536 	bltu	r3,r5,8945c <_free_r+0x2b8>
   89448:	100ad33a 	srli	r5,r2,12
   8944c:	28c01bc4 	addi	r3,r5,111
   89450:	18c7883a 	add	r3,r3,r3
   89454:	29401b84 	addi	r5,r5,110
   89458:	003f9c06 	br	892cc <__ram_exceptions_end+0xfff69098>
   8945c:	00c05504 	movi	r3,340
   89460:	19400536 	bltu	r3,r5,89478 <_free_r+0x2d4>
   89464:	100ad3fa 	srli	r5,r2,15
   89468:	28c01e04 	addi	r3,r5,120
   8946c:	18c7883a 	add	r3,r3,r3
   89470:	29401dc4 	addi	r5,r5,119
   89474:	003f9506 	br	892cc <__ram_exceptions_end+0xfff69098>
   89478:	00c15504 	movi	r3,1364
   8947c:	19400536 	bltu	r3,r5,89494 <_free_r+0x2f0>
   89480:	100ad4ba 	srli	r5,r2,18
   89484:	28c01f44 	addi	r3,r5,125
   89488:	18c7883a 	add	r3,r3,r3
   8948c:	29401f04 	addi	r5,r5,124
   89490:	003f8e06 	br	892cc <__ram_exceptions_end+0xfff69098>
   89494:	00c03f84 	movi	r3,254
   89498:	01401f84 	movi	r5,126
   8949c:	003f8b06 	br	892cc <__ram_exceptions_end+0xfff69098>
   894a0:	10c00054 	ori	r3,r2,1
   894a4:	30c00115 	stw	r3,4(r6)
   894a8:	308d883a 	add	r6,r6,r2
   894ac:	30800015 	stw	r2,0(r6)
   894b0:	003f7806 	br	89294 <__ram_exceptions_end+0xfff69060>

000894b4 <__sfvwrite_r>:
   894b4:	30800217 	ldw	r2,8(r6)
   894b8:	10006726 	beq	r2,zero,89658 <__sfvwrite_r+0x1a4>
   894bc:	28c0030b 	ldhu	r3,12(r5)
   894c0:	defff404 	addi	sp,sp,-48
   894c4:	dd400715 	stw	r21,28(sp)
   894c8:	dd000615 	stw	r20,24(sp)
   894cc:	dc000215 	stw	r16,8(sp)
   894d0:	dfc00b15 	stw	ra,44(sp)
   894d4:	df000a15 	stw	fp,40(sp)
   894d8:	ddc00915 	stw	r23,36(sp)
   894dc:	dd800815 	stw	r22,32(sp)
   894e0:	dcc00515 	stw	r19,20(sp)
   894e4:	dc800415 	stw	r18,16(sp)
   894e8:	dc400315 	stw	r17,12(sp)
   894ec:	1880020c 	andi	r2,r3,8
   894f0:	2821883a 	mov	r16,r5
   894f4:	202b883a 	mov	r21,r4
   894f8:	3029883a 	mov	r20,r6
   894fc:	10002726 	beq	r2,zero,8959c <__sfvwrite_r+0xe8>
   89500:	28800417 	ldw	r2,16(r5)
   89504:	10002526 	beq	r2,zero,8959c <__sfvwrite_r+0xe8>
   89508:	1880008c 	andi	r2,r3,2
   8950c:	a4400017 	ldw	r17,0(r20)
   89510:	10002a26 	beq	r2,zero,895bc <__sfvwrite_r+0x108>
   89514:	05a00034 	movhi	r22,32768
   89518:	0027883a 	mov	r19,zero
   8951c:	0025883a 	mov	r18,zero
   89520:	b5bf0004 	addi	r22,r22,-1024
   89524:	980d883a 	mov	r6,r19
   89528:	a809883a 	mov	r4,r21
   8952c:	90004626 	beq	r18,zero,89648 <__sfvwrite_r+0x194>
   89530:	900f883a 	mov	r7,r18
   89534:	b480022e 	bgeu	r22,r18,89540 <__sfvwrite_r+0x8c>
   89538:	01e00034 	movhi	r7,32768
   8953c:	39ff0004 	addi	r7,r7,-1024
   89540:	80800917 	ldw	r2,36(r16)
   89544:	81400717 	ldw	r5,28(r16)
   89548:	103ee83a 	callr	r2
   8954c:	00805a0e 	bge	zero,r2,896b8 <__sfvwrite_r+0x204>
   89550:	a0c00217 	ldw	r3,8(r20)
   89554:	98a7883a 	add	r19,r19,r2
   89558:	90a5c83a 	sub	r18,r18,r2
   8955c:	1885c83a 	sub	r2,r3,r2
   89560:	a0800215 	stw	r2,8(r20)
   89564:	103fef1e 	bne	r2,zero,89524 <__ram_exceptions_end+0xfff692f0>
   89568:	0005883a 	mov	r2,zero
   8956c:	dfc00b17 	ldw	ra,44(sp)
   89570:	df000a17 	ldw	fp,40(sp)
   89574:	ddc00917 	ldw	r23,36(sp)
   89578:	dd800817 	ldw	r22,32(sp)
   8957c:	dd400717 	ldw	r21,28(sp)
   89580:	dd000617 	ldw	r20,24(sp)
   89584:	dcc00517 	ldw	r19,20(sp)
   89588:	dc800417 	ldw	r18,16(sp)
   8958c:	dc400317 	ldw	r17,12(sp)
   89590:	dc000217 	ldw	r16,8(sp)
   89594:	dec00c04 	addi	sp,sp,48
   89598:	f800283a 	ret
   8959c:	800b883a 	mov	r5,r16
   895a0:	a809883a 	mov	r4,r21
   895a4:	0086fd00 	call	86fd0 <__swsetup_r>
   895a8:	1000ee1e 	bne	r2,zero,89964 <__sfvwrite_r+0x4b0>
   895ac:	80c0030b 	ldhu	r3,12(r16)
   895b0:	a4400017 	ldw	r17,0(r20)
   895b4:	1880008c 	andi	r2,r3,2
   895b8:	103fd61e 	bne	r2,zero,89514 <__ram_exceptions_end+0xfff692e0>
   895bc:	1880004c 	andi	r2,r3,1
   895c0:	1000421e 	bne	r2,zero,896cc <__sfvwrite_r+0x218>
   895c4:	0039883a 	mov	fp,zero
   895c8:	0025883a 	mov	r18,zero
   895cc:	90001a26 	beq	r18,zero,89638 <__sfvwrite_r+0x184>
   895d0:	1880800c 	andi	r2,r3,512
   895d4:	84c00217 	ldw	r19,8(r16)
   895d8:	10002126 	beq	r2,zero,89660 <__sfvwrite_r+0x1ac>
   895dc:	982f883a 	mov	r23,r19
   895e0:	94c09636 	bltu	r18,r19,8983c <__sfvwrite_r+0x388>
   895e4:	1881200c 	andi	r2,r3,1152
   895e8:	1000a11e 	bne	r2,zero,89870 <__sfvwrite_r+0x3bc>
   895ec:	81000017 	ldw	r4,0(r16)
   895f0:	b80d883a 	mov	r6,r23
   895f4:	e00b883a 	mov	r5,fp
   895f8:	008a1340 	call	8a134 <memmove>
   895fc:	80c00217 	ldw	r3,8(r16)
   89600:	81000017 	ldw	r4,0(r16)
   89604:	9005883a 	mov	r2,r18
   89608:	1ce7c83a 	sub	r19,r3,r19
   8960c:	25cf883a 	add	r7,r4,r23
   89610:	84c00215 	stw	r19,8(r16)
   89614:	81c00015 	stw	r7,0(r16)
   89618:	a0c00217 	ldw	r3,8(r20)
   8961c:	e0b9883a 	add	fp,fp,r2
   89620:	90a5c83a 	sub	r18,r18,r2
   89624:	18a7c83a 	sub	r19,r3,r2
   89628:	a4c00215 	stw	r19,8(r20)
   8962c:	983fce26 	beq	r19,zero,89568 <__ram_exceptions_end+0xfff69334>
   89630:	80c0030b 	ldhu	r3,12(r16)
   89634:	903fe61e 	bne	r18,zero,895d0 <__ram_exceptions_end+0xfff6939c>
   89638:	8f000017 	ldw	fp,0(r17)
   8963c:	8c800117 	ldw	r18,4(r17)
   89640:	8c400204 	addi	r17,r17,8
   89644:	003fe106 	br	895cc <__ram_exceptions_end+0xfff69398>
   89648:	8cc00017 	ldw	r19,0(r17)
   8964c:	8c800117 	ldw	r18,4(r17)
   89650:	8c400204 	addi	r17,r17,8
   89654:	003fb306 	br	89524 <__ram_exceptions_end+0xfff692f0>
   89658:	0005883a 	mov	r2,zero
   8965c:	f800283a 	ret
   89660:	81000017 	ldw	r4,0(r16)
   89664:	80800417 	ldw	r2,16(r16)
   89668:	11005a36 	bltu	r2,r4,897d4 <__sfvwrite_r+0x320>
   8966c:	85c00517 	ldw	r23,20(r16)
   89670:	95c05836 	bltu	r18,r23,897d4 <__sfvwrite_r+0x320>
   89674:	00a00034 	movhi	r2,32768
   89678:	10bfffc4 	addi	r2,r2,-1
   8967c:	9009883a 	mov	r4,r18
   89680:	1480012e 	bgeu	r2,r18,89688 <__sfvwrite_r+0x1d4>
   89684:	1009883a 	mov	r4,r2
   89688:	b80b883a 	mov	r5,r23
   8968c:	00820600 	call	82060 <__divsi3>
   89690:	b80b883a 	mov	r5,r23
   89694:	1009883a 	mov	r4,r2
   89698:	00822140 	call	82214 <__mulsi3>
   8969c:	81400717 	ldw	r5,28(r16)
   896a0:	80c00917 	ldw	r3,36(r16)
   896a4:	100f883a 	mov	r7,r2
   896a8:	e00d883a 	mov	r6,fp
   896ac:	a809883a 	mov	r4,r21
   896b0:	183ee83a 	callr	r3
   896b4:	00bfd816 	blt	zero,r2,89618 <__ram_exceptions_end+0xfff693e4>
   896b8:	8080030b 	ldhu	r2,12(r16)
   896bc:	10801014 	ori	r2,r2,64
   896c0:	8080030d 	sth	r2,12(r16)
   896c4:	00bfffc4 	movi	r2,-1
   896c8:	003fa806 	br	8956c <__ram_exceptions_end+0xfff69338>
   896cc:	0027883a 	mov	r19,zero
   896d0:	0011883a 	mov	r8,zero
   896d4:	0039883a 	mov	fp,zero
   896d8:	0025883a 	mov	r18,zero
   896dc:	90001f26 	beq	r18,zero,8975c <__sfvwrite_r+0x2a8>
   896e0:	40005a26 	beq	r8,zero,8984c <__sfvwrite_r+0x398>
   896e4:	982d883a 	mov	r22,r19
   896e8:	94c0012e 	bgeu	r18,r19,896f0 <__sfvwrite_r+0x23c>
   896ec:	902d883a 	mov	r22,r18
   896f0:	81000017 	ldw	r4,0(r16)
   896f4:	80800417 	ldw	r2,16(r16)
   896f8:	b02f883a 	mov	r23,r22
   896fc:	81c00517 	ldw	r7,20(r16)
   89700:	1100032e 	bgeu	r2,r4,89710 <__sfvwrite_r+0x25c>
   89704:	80c00217 	ldw	r3,8(r16)
   89708:	38c7883a 	add	r3,r7,r3
   8970c:	1d801816 	blt	r3,r22,89770 <__sfvwrite_r+0x2bc>
   89710:	b1c03e16 	blt	r22,r7,8980c <__sfvwrite_r+0x358>
   89714:	80800917 	ldw	r2,36(r16)
   89718:	81400717 	ldw	r5,28(r16)
   8971c:	e00d883a 	mov	r6,fp
   89720:	da000115 	stw	r8,4(sp)
   89724:	a809883a 	mov	r4,r21
   89728:	103ee83a 	callr	r2
   8972c:	102f883a 	mov	r23,r2
   89730:	da000117 	ldw	r8,4(sp)
   89734:	00bfe00e 	bge	zero,r2,896b8 <__ram_exceptions_end+0xfff69484>
   89738:	9de7c83a 	sub	r19,r19,r23
   8973c:	98001f26 	beq	r19,zero,897bc <__sfvwrite_r+0x308>
   89740:	a0800217 	ldw	r2,8(r20)
   89744:	e5f9883a 	add	fp,fp,r23
   89748:	95e5c83a 	sub	r18,r18,r23
   8974c:	15efc83a 	sub	r23,r2,r23
   89750:	a5c00215 	stw	r23,8(r20)
   89754:	b83f8426 	beq	r23,zero,89568 <__ram_exceptions_end+0xfff69334>
   89758:	903fe11e 	bne	r18,zero,896e0 <__ram_exceptions_end+0xfff694ac>
   8975c:	8f000017 	ldw	fp,0(r17)
   89760:	8c800117 	ldw	r18,4(r17)
   89764:	0011883a 	mov	r8,zero
   89768:	8c400204 	addi	r17,r17,8
   8976c:	003fdb06 	br	896dc <__ram_exceptions_end+0xfff694a8>
   89770:	180d883a 	mov	r6,r3
   89774:	e00b883a 	mov	r5,fp
   89778:	da000115 	stw	r8,4(sp)
   8977c:	d8c00015 	stw	r3,0(sp)
   89780:	008a1340 	call	8a134 <memmove>
   89784:	d8c00017 	ldw	r3,0(sp)
   89788:	80800017 	ldw	r2,0(r16)
   8978c:	800b883a 	mov	r5,r16
   89790:	a809883a 	mov	r4,r21
   89794:	10c5883a 	add	r2,r2,r3
   89798:	80800015 	stw	r2,0(r16)
   8979c:	d8c00015 	stw	r3,0(sp)
   897a0:	0088c440 	call	88c44 <_fflush_r>
   897a4:	d8c00017 	ldw	r3,0(sp)
   897a8:	da000117 	ldw	r8,4(sp)
   897ac:	103fc21e 	bne	r2,zero,896b8 <__ram_exceptions_end+0xfff69484>
   897b0:	182f883a 	mov	r23,r3
   897b4:	9de7c83a 	sub	r19,r19,r23
   897b8:	983fe11e 	bne	r19,zero,89740 <__ram_exceptions_end+0xfff6950c>
   897bc:	800b883a 	mov	r5,r16
   897c0:	a809883a 	mov	r4,r21
   897c4:	0088c440 	call	88c44 <_fflush_r>
   897c8:	103fbb1e 	bne	r2,zero,896b8 <__ram_exceptions_end+0xfff69484>
   897cc:	0011883a 	mov	r8,zero
   897d0:	003fdb06 	br	89740 <__ram_exceptions_end+0xfff6950c>
   897d4:	94c0012e 	bgeu	r18,r19,897dc <__sfvwrite_r+0x328>
   897d8:	9027883a 	mov	r19,r18
   897dc:	980d883a 	mov	r6,r19
   897e0:	e00b883a 	mov	r5,fp
   897e4:	008a1340 	call	8a134 <memmove>
   897e8:	80800217 	ldw	r2,8(r16)
   897ec:	80c00017 	ldw	r3,0(r16)
   897f0:	14c5c83a 	sub	r2,r2,r19
   897f4:	1cc7883a 	add	r3,r3,r19
   897f8:	80800215 	stw	r2,8(r16)
   897fc:	80c00015 	stw	r3,0(r16)
   89800:	10004326 	beq	r2,zero,89910 <__sfvwrite_r+0x45c>
   89804:	9805883a 	mov	r2,r19
   89808:	003f8306 	br	89618 <__ram_exceptions_end+0xfff693e4>
   8980c:	b00d883a 	mov	r6,r22
   89810:	e00b883a 	mov	r5,fp
   89814:	da000115 	stw	r8,4(sp)
   89818:	008a1340 	call	8a134 <memmove>
   8981c:	80800217 	ldw	r2,8(r16)
   89820:	80c00017 	ldw	r3,0(r16)
   89824:	da000117 	ldw	r8,4(sp)
   89828:	1585c83a 	sub	r2,r2,r22
   8982c:	1dad883a 	add	r22,r3,r22
   89830:	80800215 	stw	r2,8(r16)
   89834:	85800015 	stw	r22,0(r16)
   89838:	003fbf06 	br	89738 <__ram_exceptions_end+0xfff69504>
   8983c:	81000017 	ldw	r4,0(r16)
   89840:	9027883a 	mov	r19,r18
   89844:	902f883a 	mov	r23,r18
   89848:	003f6906 	br	895f0 <__ram_exceptions_end+0xfff693bc>
   8984c:	900d883a 	mov	r6,r18
   89850:	01400284 	movi	r5,10
   89854:	e009883a 	mov	r4,fp
   89858:	008a0500 	call	8a050 <memchr>
   8985c:	10003e26 	beq	r2,zero,89958 <__sfvwrite_r+0x4a4>
   89860:	10800044 	addi	r2,r2,1
   89864:	1727c83a 	sub	r19,r2,fp
   89868:	02000044 	movi	r8,1
   8986c:	003f9d06 	br	896e4 <__ram_exceptions_end+0xfff694b0>
   89870:	80800517 	ldw	r2,20(r16)
   89874:	81400417 	ldw	r5,16(r16)
   89878:	81c00017 	ldw	r7,0(r16)
   8987c:	10a7883a 	add	r19,r2,r2
   89880:	9885883a 	add	r2,r19,r2
   89884:	1026d7fa 	srli	r19,r2,31
   89888:	396dc83a 	sub	r22,r7,r5
   8988c:	b1000044 	addi	r4,r22,1
   89890:	9885883a 	add	r2,r19,r2
   89894:	1027d07a 	srai	r19,r2,1
   89898:	2485883a 	add	r2,r4,r18
   8989c:	980d883a 	mov	r6,r19
   898a0:	9880022e 	bgeu	r19,r2,898ac <__sfvwrite_r+0x3f8>
   898a4:	1027883a 	mov	r19,r2
   898a8:	100d883a 	mov	r6,r2
   898ac:	18c1000c 	andi	r3,r3,1024
   898b0:	18001c26 	beq	r3,zero,89924 <__sfvwrite_r+0x470>
   898b4:	300b883a 	mov	r5,r6
   898b8:	a809883a 	mov	r4,r21
   898bc:	008235c0 	call	8235c <_malloc_r>
   898c0:	102f883a 	mov	r23,r2
   898c4:	10002926 	beq	r2,zero,8996c <__sfvwrite_r+0x4b8>
   898c8:	81400417 	ldw	r5,16(r16)
   898cc:	b00d883a 	mov	r6,r22
   898d0:	1009883a 	mov	r4,r2
   898d4:	0082be40 	call	82be4 <memcpy>
   898d8:	8080030b 	ldhu	r2,12(r16)
   898dc:	00fedfc4 	movi	r3,-1153
   898e0:	10c4703a 	and	r2,r2,r3
   898e4:	10802014 	ori	r2,r2,128
   898e8:	8080030d 	sth	r2,12(r16)
   898ec:	bd89883a 	add	r4,r23,r22
   898f0:	9d8fc83a 	sub	r7,r19,r22
   898f4:	85c00415 	stw	r23,16(r16)
   898f8:	84c00515 	stw	r19,20(r16)
   898fc:	81000015 	stw	r4,0(r16)
   89900:	9027883a 	mov	r19,r18
   89904:	81c00215 	stw	r7,8(r16)
   89908:	902f883a 	mov	r23,r18
   8990c:	003f3806 	br	895f0 <__ram_exceptions_end+0xfff693bc>
   89910:	800b883a 	mov	r5,r16
   89914:	a809883a 	mov	r4,r21
   89918:	0088c440 	call	88c44 <_fflush_r>
   8991c:	103fb926 	beq	r2,zero,89804 <__ram_exceptions_end+0xfff695d0>
   89920:	003f6506 	br	896b8 <__ram_exceptions_end+0xfff69484>
   89924:	a809883a 	mov	r4,r21
   89928:	008b6380 	call	8b638 <_realloc_r>
   8992c:	102f883a 	mov	r23,r2
   89930:	103fee1e 	bne	r2,zero,898ec <__ram_exceptions_end+0xfff696b8>
   89934:	81400417 	ldw	r5,16(r16)
   89938:	a809883a 	mov	r4,r21
   8993c:	00891a40 	call	891a4 <_free_r>
   89940:	8080030b 	ldhu	r2,12(r16)
   89944:	00ffdfc4 	movi	r3,-129
   89948:	1884703a 	and	r2,r3,r2
   8994c:	00c00304 	movi	r3,12
   89950:	a8c00015 	stw	r3,0(r21)
   89954:	003f5906 	br	896bc <__ram_exceptions_end+0xfff69488>
   89958:	94c00044 	addi	r19,r18,1
   8995c:	02000044 	movi	r8,1
   89960:	003f6006 	br	896e4 <__ram_exceptions_end+0xfff694b0>
   89964:	00bfffc4 	movi	r2,-1
   89968:	003f0006 	br	8956c <__ram_exceptions_end+0xfff69338>
   8996c:	00800304 	movi	r2,12
   89970:	a8800015 	stw	r2,0(r21)
   89974:	8080030b 	ldhu	r2,12(r16)
   89978:	003f5006 	br	896bc <__ram_exceptions_end+0xfff69488>

0008997c <_fwalk>:
   8997c:	defff704 	addi	sp,sp,-36
   89980:	dd000415 	stw	r20,16(sp)
   89984:	dfc00815 	stw	ra,32(sp)
   89988:	ddc00715 	stw	r23,28(sp)
   8998c:	dd800615 	stw	r22,24(sp)
   89990:	dd400515 	stw	r21,20(sp)
   89994:	dcc00315 	stw	r19,12(sp)
   89998:	dc800215 	stw	r18,8(sp)
   8999c:	dc400115 	stw	r17,4(sp)
   899a0:	dc000015 	stw	r16,0(sp)
   899a4:	2500b804 	addi	r20,r4,736
   899a8:	a0002326 	beq	r20,zero,89a38 <_fwalk+0xbc>
   899ac:	282b883a 	mov	r21,r5
   899b0:	002f883a 	mov	r23,zero
   899b4:	05800044 	movi	r22,1
   899b8:	04ffffc4 	movi	r19,-1
   899bc:	a4400117 	ldw	r17,4(r20)
   899c0:	a4800217 	ldw	r18,8(r20)
   899c4:	8c7fffc4 	addi	r17,r17,-1
   899c8:	88000d16 	blt	r17,zero,89a00 <_fwalk+0x84>
   899cc:	94000304 	addi	r16,r18,12
   899d0:	94800384 	addi	r18,r18,14
   899d4:	8080000b 	ldhu	r2,0(r16)
   899d8:	8c7fffc4 	addi	r17,r17,-1
   899dc:	813ffd04 	addi	r4,r16,-12
   899e0:	b080042e 	bgeu	r22,r2,899f4 <_fwalk+0x78>
   899e4:	9080000f 	ldh	r2,0(r18)
   899e8:	14c00226 	beq	r2,r19,899f4 <_fwalk+0x78>
   899ec:	a83ee83a 	callr	r21
   899f0:	b8aeb03a 	or	r23,r23,r2
   899f4:	84001a04 	addi	r16,r16,104
   899f8:	94801a04 	addi	r18,r18,104
   899fc:	8cfff51e 	bne	r17,r19,899d4 <__ram_exceptions_end+0xfff697a0>
   89a00:	a5000017 	ldw	r20,0(r20)
   89a04:	a03fed1e 	bne	r20,zero,899bc <__ram_exceptions_end+0xfff69788>
   89a08:	b805883a 	mov	r2,r23
   89a0c:	dfc00817 	ldw	ra,32(sp)
   89a10:	ddc00717 	ldw	r23,28(sp)
   89a14:	dd800617 	ldw	r22,24(sp)
   89a18:	dd400517 	ldw	r21,20(sp)
   89a1c:	dd000417 	ldw	r20,16(sp)
   89a20:	dcc00317 	ldw	r19,12(sp)
   89a24:	dc800217 	ldw	r18,8(sp)
   89a28:	dc400117 	ldw	r17,4(sp)
   89a2c:	dc000017 	ldw	r16,0(sp)
   89a30:	dec00904 	addi	sp,sp,36
   89a34:	f800283a 	ret
   89a38:	002f883a 	mov	r23,zero
   89a3c:	003ff206 	br	89a08 <__ram_exceptions_end+0xfff697d4>

00089a40 <_fwalk_reent>:
   89a40:	defff704 	addi	sp,sp,-36
   89a44:	dd000415 	stw	r20,16(sp)
   89a48:	dfc00815 	stw	ra,32(sp)
   89a4c:	ddc00715 	stw	r23,28(sp)
   89a50:	dd800615 	stw	r22,24(sp)
   89a54:	dd400515 	stw	r21,20(sp)
   89a58:	dcc00315 	stw	r19,12(sp)
   89a5c:	dc800215 	stw	r18,8(sp)
   89a60:	dc400115 	stw	r17,4(sp)
   89a64:	dc000015 	stw	r16,0(sp)
   89a68:	2500b804 	addi	r20,r4,736
   89a6c:	a0002326 	beq	r20,zero,89afc <_fwalk_reent+0xbc>
   89a70:	282b883a 	mov	r21,r5
   89a74:	2027883a 	mov	r19,r4
   89a78:	002f883a 	mov	r23,zero
   89a7c:	05800044 	movi	r22,1
   89a80:	04bfffc4 	movi	r18,-1
   89a84:	a4400117 	ldw	r17,4(r20)
   89a88:	a4000217 	ldw	r16,8(r20)
   89a8c:	8c7fffc4 	addi	r17,r17,-1
   89a90:	88000c16 	blt	r17,zero,89ac4 <_fwalk_reent+0x84>
   89a94:	84000304 	addi	r16,r16,12
   89a98:	8080000b 	ldhu	r2,0(r16)
   89a9c:	8c7fffc4 	addi	r17,r17,-1
   89aa0:	817ffd04 	addi	r5,r16,-12
   89aa4:	b080052e 	bgeu	r22,r2,89abc <_fwalk_reent+0x7c>
   89aa8:	8080008f 	ldh	r2,2(r16)
   89aac:	9809883a 	mov	r4,r19
   89ab0:	14800226 	beq	r2,r18,89abc <_fwalk_reent+0x7c>
   89ab4:	a83ee83a 	callr	r21
   89ab8:	b8aeb03a 	or	r23,r23,r2
   89abc:	84001a04 	addi	r16,r16,104
   89ac0:	8cbff51e 	bne	r17,r18,89a98 <__ram_exceptions_end+0xfff69864>
   89ac4:	a5000017 	ldw	r20,0(r20)
   89ac8:	a03fee1e 	bne	r20,zero,89a84 <__ram_exceptions_end+0xfff69850>
   89acc:	b805883a 	mov	r2,r23
   89ad0:	dfc00817 	ldw	ra,32(sp)
   89ad4:	ddc00717 	ldw	r23,28(sp)
   89ad8:	dd800617 	ldw	r22,24(sp)
   89adc:	dd400517 	ldw	r21,20(sp)
   89ae0:	dd000417 	ldw	r20,16(sp)
   89ae4:	dcc00317 	ldw	r19,12(sp)
   89ae8:	dc800217 	ldw	r18,8(sp)
   89aec:	dc400117 	ldw	r17,4(sp)
   89af0:	dc000017 	ldw	r16,0(sp)
   89af4:	dec00904 	addi	sp,sp,36
   89af8:	f800283a 	ret
   89afc:	002f883a 	mov	r23,zero
   89b00:	003ff206 	br	89acc <__ram_exceptions_end+0xfff69898>

00089b04 <iswspace>:
   89b04:	00803fc4 	movi	r2,255
   89b08:	11000836 	bltu	r2,r4,89b2c <iswspace+0x28>
   89b0c:	008002b4 	movhi	r2,10
   89b10:	10817d04 	addi	r2,r2,1524
   89b14:	10800017 	ldw	r2,0(r2)
   89b18:	1109883a 	add	r4,r2,r4
   89b1c:	20800043 	ldbu	r2,1(r4)
   89b20:	1080020c 	andi	r2,r2,8
   89b24:	10803fcc 	andi	r2,r2,255
   89b28:	f800283a 	ret
   89b2c:	0005883a 	mov	r2,zero
   89b30:	f800283a 	ret

00089b34 <_setlocale_r>:
   89b34:	30001b26 	beq	r6,zero,89ba4 <_setlocale_r+0x70>
   89b38:	014002b4 	movhi	r5,10
   89b3c:	defffe04 	addi	sp,sp,-8
   89b40:	29793304 	addi	r5,r5,-6964
   89b44:	3009883a 	mov	r4,r6
   89b48:	dc000015 	stw	r16,0(sp)
   89b4c:	dfc00115 	stw	ra,4(sp)
   89b50:	3021883a 	mov	r16,r6
   89b54:	008bf9c0 	call	8bf9c <strcmp>
   89b58:	1000061e 	bne	r2,zero,89b74 <_setlocale_r+0x40>
   89b5c:	008002b4 	movhi	r2,10
   89b60:	10b86a04 	addi	r2,r2,-7768
   89b64:	dfc00117 	ldw	ra,4(sp)
   89b68:	dc000017 	ldw	r16,0(sp)
   89b6c:	dec00204 	addi	sp,sp,8
   89b70:	f800283a 	ret
   89b74:	014002b4 	movhi	r5,10
   89b78:	29786a04 	addi	r5,r5,-7768
   89b7c:	8009883a 	mov	r4,r16
   89b80:	008bf9c0 	call	8bf9c <strcmp>
   89b84:	103ff526 	beq	r2,zero,89b5c <__ram_exceptions_end+0xfff69928>
   89b88:	014002b4 	movhi	r5,10
   89b8c:	29787e04 	addi	r5,r5,-7688
   89b90:	8009883a 	mov	r4,r16
   89b94:	008bf9c0 	call	8bf9c <strcmp>
   89b98:	103ff026 	beq	r2,zero,89b5c <__ram_exceptions_end+0xfff69928>
   89b9c:	0005883a 	mov	r2,zero
   89ba0:	003ff006 	br	89b64 <__ram_exceptions_end+0xfff69930>
   89ba4:	008002b4 	movhi	r2,10
   89ba8:	10b86a04 	addi	r2,r2,-7768
   89bac:	f800283a 	ret

00089bb0 <__locale_charset>:
   89bb0:	008002b4 	movhi	r2,10
   89bb4:	10bc6504 	addi	r2,r2,-3692
   89bb8:	f800283a 	ret

00089bbc <__locale_mb_cur_max>:
   89bbc:	008002b4 	movhi	r2,10
   89bc0:	10817e04 	addi	r2,r2,1528
   89bc4:	10800017 	ldw	r2,0(r2)
   89bc8:	f800283a 	ret

00089bcc <__locale_msgcharset>:
   89bcc:	008002b4 	movhi	r2,10
   89bd0:	10bc5d04 	addi	r2,r2,-3724
   89bd4:	f800283a 	ret

00089bd8 <__locale_cjk_lang>:
   89bd8:	0005883a 	mov	r2,zero
   89bdc:	f800283a 	ret

00089be0 <_localeconv_r>:
   89be0:	008002b4 	movhi	r2,10
   89be4:	10bc6d04 	addi	r2,r2,-3660
   89be8:	f800283a 	ret

00089bec <setlocale>:
   89bec:	008002b4 	movhi	r2,10
   89bf0:	10817a04 	addi	r2,r2,1512
   89bf4:	280d883a 	mov	r6,r5
   89bf8:	200b883a 	mov	r5,r4
   89bfc:	11000017 	ldw	r4,0(r2)
   89c00:	0089b341 	jmpi	89b34 <_setlocale_r>

00089c04 <localeconv>:
   89c04:	008002b4 	movhi	r2,10
   89c08:	10bc6d04 	addi	r2,r2,-3660
   89c0c:	f800283a 	ret

00089c10 <_lseek_r>:
   89c10:	defffd04 	addi	sp,sp,-12
   89c14:	2805883a 	mov	r2,r5
   89c18:	dc000015 	stw	r16,0(sp)
   89c1c:	040002b4 	movhi	r16,10
   89c20:	dc400115 	stw	r17,4(sp)
   89c24:	300b883a 	mov	r5,r6
   89c28:	8408d104 	addi	r16,r16,9028
   89c2c:	2023883a 	mov	r17,r4
   89c30:	380d883a 	mov	r6,r7
   89c34:	1009883a 	mov	r4,r2
   89c38:	dfc00215 	stw	ra,8(sp)
   89c3c:	80000015 	stw	zero,0(r16)
   89c40:	0099b480 	call	99b48 <lseek>
   89c44:	00ffffc4 	movi	r3,-1
   89c48:	10c00526 	beq	r2,r3,89c60 <_lseek_r+0x50>
   89c4c:	dfc00217 	ldw	ra,8(sp)
   89c50:	dc400117 	ldw	r17,4(sp)
   89c54:	dc000017 	ldw	r16,0(sp)
   89c58:	dec00304 	addi	sp,sp,12
   89c5c:	f800283a 	ret
   89c60:	80c00017 	ldw	r3,0(r16)
   89c64:	183ff926 	beq	r3,zero,89c4c <__ram_exceptions_end+0xfff69a18>
   89c68:	88c00015 	stw	r3,0(r17)
   89c6c:	003ff706 	br	89c4c <__ram_exceptions_end+0xfff69a18>

00089c70 <__smakebuf_r>:
   89c70:	2880030b 	ldhu	r2,12(r5)
   89c74:	10c0008c 	andi	r3,r2,2
   89c78:	1800411e 	bne	r3,zero,89d80 <__smakebuf_r+0x110>
   89c7c:	deffec04 	addi	sp,sp,-80
   89c80:	dc000f15 	stw	r16,60(sp)
   89c84:	2821883a 	mov	r16,r5
   89c88:	2940038f 	ldh	r5,14(r5)
   89c8c:	dc401015 	stw	r17,64(sp)
   89c90:	dfc01315 	stw	ra,76(sp)
   89c94:	dcc01215 	stw	r19,72(sp)
   89c98:	dc801115 	stw	r18,68(sp)
   89c9c:	2023883a 	mov	r17,r4
   89ca0:	28001c16 	blt	r5,zero,89d14 <__smakebuf_r+0xa4>
   89ca4:	d80d883a 	mov	r6,sp
   89ca8:	009383c0 	call	9383c <_fstat_r>
   89cac:	10001816 	blt	r2,zero,89d10 <__smakebuf_r+0xa0>
   89cb0:	d8800117 	ldw	r2,4(sp)
   89cb4:	00e00014 	movui	r3,32768
   89cb8:	10bc000c 	andi	r2,r2,61440
   89cbc:	14c80020 	cmpeqi	r19,r2,8192
   89cc0:	10c03726 	beq	r2,r3,89da0 <__smakebuf_r+0x130>
   89cc4:	80c0030b 	ldhu	r3,12(r16)
   89cc8:	18c20014 	ori	r3,r3,2048
   89ccc:	80c0030d 	sth	r3,12(r16)
   89cd0:	00c80004 	movi	r3,8192
   89cd4:	10c0521e 	bne	r2,r3,89e20 <__smakebuf_r+0x1b0>
   89cd8:	8140038f 	ldh	r5,14(r16)
   89cdc:	8809883a 	mov	r4,r17
   89ce0:	00944440 	call	94444 <_isatty_r>
   89ce4:	10004c26 	beq	r2,zero,89e18 <__smakebuf_r+0x1a8>
   89ce8:	8080030b 	ldhu	r2,12(r16)
   89cec:	80c010c4 	addi	r3,r16,67
   89cf0:	80c00015 	stw	r3,0(r16)
   89cf4:	10800054 	ori	r2,r2,1
   89cf8:	8080030d 	sth	r2,12(r16)
   89cfc:	00800044 	movi	r2,1
   89d00:	80c00415 	stw	r3,16(r16)
   89d04:	80800515 	stw	r2,20(r16)
   89d08:	04810004 	movi	r18,1024
   89d0c:	00000706 	br	89d2c <__smakebuf_r+0xbc>
   89d10:	8080030b 	ldhu	r2,12(r16)
   89d14:	10c0200c 	andi	r3,r2,128
   89d18:	18001f1e 	bne	r3,zero,89d98 <__smakebuf_r+0x128>
   89d1c:	04810004 	movi	r18,1024
   89d20:	10820014 	ori	r2,r2,2048
   89d24:	8080030d 	sth	r2,12(r16)
   89d28:	0027883a 	mov	r19,zero
   89d2c:	900b883a 	mov	r5,r18
   89d30:	8809883a 	mov	r4,r17
   89d34:	008235c0 	call	8235c <_malloc_r>
   89d38:	10002c26 	beq	r2,zero,89dec <__smakebuf_r+0x17c>
   89d3c:	80c0030b 	ldhu	r3,12(r16)
   89d40:	01000274 	movhi	r4,9
   89d44:	21233604 	addi	r4,r4,-29480
   89d48:	89000f15 	stw	r4,60(r17)
   89d4c:	18c02014 	ori	r3,r3,128
   89d50:	80c0030d 	sth	r3,12(r16)
   89d54:	80800015 	stw	r2,0(r16)
   89d58:	80800415 	stw	r2,16(r16)
   89d5c:	84800515 	stw	r18,20(r16)
   89d60:	98001a1e 	bne	r19,zero,89dcc <__smakebuf_r+0x15c>
   89d64:	dfc01317 	ldw	ra,76(sp)
   89d68:	dcc01217 	ldw	r19,72(sp)
   89d6c:	dc801117 	ldw	r18,68(sp)
   89d70:	dc401017 	ldw	r17,64(sp)
   89d74:	dc000f17 	ldw	r16,60(sp)
   89d78:	dec01404 	addi	sp,sp,80
   89d7c:	f800283a 	ret
   89d80:	288010c4 	addi	r2,r5,67
   89d84:	28800015 	stw	r2,0(r5)
   89d88:	28800415 	stw	r2,16(r5)
   89d8c:	00800044 	movi	r2,1
   89d90:	28800515 	stw	r2,20(r5)
   89d94:	f800283a 	ret
   89d98:	04801004 	movi	r18,64
   89d9c:	003fe006 	br	89d20 <__ram_exceptions_end+0xfff69aec>
   89da0:	81000a17 	ldw	r4,40(r16)
   89da4:	00c00234 	movhi	r3,8
   89da8:	18cc4d04 	addi	r3,r3,12596
   89dac:	20ffc51e 	bne	r4,r3,89cc4 <__ram_exceptions_end+0xfff69a90>
   89db0:	8080030b 	ldhu	r2,12(r16)
   89db4:	04810004 	movi	r18,1024
   89db8:	84801315 	stw	r18,76(r16)
   89dbc:	1484b03a 	or	r2,r2,r18
   89dc0:	8080030d 	sth	r2,12(r16)
   89dc4:	0027883a 	mov	r19,zero
   89dc8:	003fd806 	br	89d2c <__ram_exceptions_end+0xfff69af8>
   89dcc:	8140038f 	ldh	r5,14(r16)
   89dd0:	8809883a 	mov	r4,r17
   89dd4:	00944440 	call	94444 <_isatty_r>
   89dd8:	103fe226 	beq	r2,zero,89d64 <__ram_exceptions_end+0xfff69b30>
   89ddc:	8080030b 	ldhu	r2,12(r16)
   89de0:	10800054 	ori	r2,r2,1
   89de4:	8080030d 	sth	r2,12(r16)
   89de8:	003fde06 	br	89d64 <__ram_exceptions_end+0xfff69b30>
   89dec:	8080030b 	ldhu	r2,12(r16)
   89df0:	10c0800c 	andi	r3,r2,512
   89df4:	183fdb1e 	bne	r3,zero,89d64 <__ram_exceptions_end+0xfff69b30>
   89df8:	10800094 	ori	r2,r2,2
   89dfc:	80c010c4 	addi	r3,r16,67
   89e00:	8080030d 	sth	r2,12(r16)
   89e04:	00800044 	movi	r2,1
   89e08:	80c00015 	stw	r3,0(r16)
   89e0c:	80c00415 	stw	r3,16(r16)
   89e10:	80800515 	stw	r2,20(r16)
   89e14:	003fd306 	br	89d64 <__ram_exceptions_end+0xfff69b30>
   89e18:	04810004 	movi	r18,1024
   89e1c:	003fc306 	br	89d2c <__ram_exceptions_end+0xfff69af8>
   89e20:	0027883a 	mov	r19,zero
   89e24:	04810004 	movi	r18,1024
   89e28:	003fc006 	br	89d2c <__ram_exceptions_end+0xfff69af8>

00089e2c <_mbrtowc_r>:
   89e2c:	defff704 	addi	sp,sp,-36
   89e30:	008002b4 	movhi	r2,10
   89e34:	dc800715 	stw	r18,28(sp)
   89e38:	dc400615 	stw	r17,24(sp)
   89e3c:	dc000515 	stw	r16,20(sp)
   89e40:	10817f04 	addi	r2,r2,1532
   89e44:	dfc00815 	stw	ra,32(sp)
   89e48:	2021883a 	mov	r16,r4
   89e4c:	dc400917 	ldw	r17,36(sp)
   89e50:	14800017 	ldw	r18,0(r2)
   89e54:	30001626 	beq	r6,zero,89eb0 <_mbrtowc_r+0x84>
   89e58:	d9400215 	stw	r5,8(sp)
   89e5c:	d9800315 	stw	r6,12(sp)
   89e60:	d9c00415 	stw	r7,16(sp)
   89e64:	0089bb00 	call	89bb0 <__locale_charset>
   89e68:	d9c00417 	ldw	r7,16(sp)
   89e6c:	d9800317 	ldw	r6,12(sp)
   89e70:	d9400217 	ldw	r5,8(sp)
   89e74:	d8800015 	stw	r2,0(sp)
   89e78:	dc400115 	stw	r17,4(sp)
   89e7c:	8009883a 	mov	r4,r16
   89e80:	903ee83a 	callr	r18
   89e84:	00ffffc4 	movi	r3,-1
   89e88:	10c0031e 	bne	r2,r3,89e98 <_mbrtowc_r+0x6c>
   89e8c:	88000015 	stw	zero,0(r17)
   89e90:	00c02284 	movi	r3,138
   89e94:	80c00015 	stw	r3,0(r16)
   89e98:	dfc00817 	ldw	ra,32(sp)
   89e9c:	dc800717 	ldw	r18,28(sp)
   89ea0:	dc400617 	ldw	r17,24(sp)
   89ea4:	dc000517 	ldw	r16,20(sp)
   89ea8:	dec00904 	addi	sp,sp,36
   89eac:	f800283a 	ret
   89eb0:	0089bb00 	call	89bb0 <__locale_charset>
   89eb4:	018002b4 	movhi	r6,10
   89eb8:	31b87e04 	addi	r6,r6,-7688
   89ebc:	dc400115 	stw	r17,4(sp)
   89ec0:	d8800015 	stw	r2,0(sp)
   89ec4:	01c00044 	movi	r7,1
   89ec8:	000b883a 	mov	r5,zero
   89ecc:	8009883a 	mov	r4,r16
   89ed0:	903ee83a 	callr	r18
   89ed4:	003feb06 	br	89e84 <__ram_exceptions_end+0xfff69c50>

00089ed8 <mbrtowc>:
   89ed8:	defff704 	addi	sp,sp,-36
   89edc:	008002b4 	movhi	r2,10
   89ee0:	dc800415 	stw	r18,16(sp)
   89ee4:	dc400315 	stw	r17,12(sp)
   89ee8:	10817a04 	addi	r2,r2,1512
   89eec:	dfc00815 	stw	ra,32(sp)
   89ef0:	dd400715 	stw	r21,28(sp)
   89ef4:	dd000615 	stw	r20,24(sp)
   89ef8:	dcc00515 	stw	r19,20(sp)
   89efc:	dc000215 	stw	r16,8(sp)
   89f00:	3825883a 	mov	r18,r7
   89f04:	14400017 	ldw	r17,0(r2)
   89f08:	28001c26 	beq	r5,zero,89f7c <mbrtowc+0xa4>
   89f0c:	008002b4 	movhi	r2,10
   89f10:	10817f04 	addi	r2,r2,1532
   89f14:	15400017 	ldw	r21,0(r2)
   89f18:	2821883a 	mov	r16,r5
   89f1c:	2027883a 	mov	r19,r4
   89f20:	3029883a 	mov	r20,r6
   89f24:	0089bb00 	call	89bb0 <__locale_charset>
   89f28:	d8800015 	stw	r2,0(sp)
   89f2c:	dc800115 	stw	r18,4(sp)
   89f30:	a00f883a 	mov	r7,r20
   89f34:	800d883a 	mov	r6,r16
   89f38:	980b883a 	mov	r5,r19
   89f3c:	8809883a 	mov	r4,r17
   89f40:	a83ee83a 	callr	r21
   89f44:	00ffffc4 	movi	r3,-1
   89f48:	10c0031e 	bne	r2,r3,89f58 <mbrtowc+0x80>
   89f4c:	90000015 	stw	zero,0(r18)
   89f50:	00c02284 	movi	r3,138
   89f54:	88c00015 	stw	r3,0(r17)
   89f58:	dfc00817 	ldw	ra,32(sp)
   89f5c:	dd400717 	ldw	r21,28(sp)
   89f60:	dd000617 	ldw	r20,24(sp)
   89f64:	dcc00517 	ldw	r19,20(sp)
   89f68:	dc800417 	ldw	r18,16(sp)
   89f6c:	dc400317 	ldw	r17,12(sp)
   89f70:	dc000217 	ldw	r16,8(sp)
   89f74:	dec00904 	addi	sp,sp,36
   89f78:	f800283a 	ret
   89f7c:	008002b4 	movhi	r2,10
   89f80:	10817f04 	addi	r2,r2,1532
   89f84:	14000017 	ldw	r16,0(r2)
   89f88:	0089bb00 	call	89bb0 <__locale_charset>
   89f8c:	018002b4 	movhi	r6,10
   89f90:	31b87e04 	addi	r6,r6,-7688
   89f94:	dc800115 	stw	r18,4(sp)
   89f98:	d8800015 	stw	r2,0(sp)
   89f9c:	01c00044 	movi	r7,1
   89fa0:	000b883a 	mov	r5,zero
   89fa4:	8809883a 	mov	r4,r17
   89fa8:	803ee83a 	callr	r16
   89fac:	003fe506 	br	89f44 <__ram_exceptions_end+0xfff69d10>

00089fb0 <__ascii_mbtowc>:
   89fb0:	deffff04 	addi	sp,sp,-4
   89fb4:	28000826 	beq	r5,zero,89fd8 <__ascii_mbtowc+0x28>
   89fb8:	30000926 	beq	r6,zero,89fe0 <__ascii_mbtowc+0x30>
   89fbc:	38000b26 	beq	r7,zero,89fec <__ascii_mbtowc+0x3c>
   89fc0:	30800003 	ldbu	r2,0(r6)
   89fc4:	28800015 	stw	r2,0(r5)
   89fc8:	30800003 	ldbu	r2,0(r6)
   89fcc:	1004c03a 	cmpne	r2,r2,zero
   89fd0:	dec00104 	addi	sp,sp,4
   89fd4:	f800283a 	ret
   89fd8:	d80b883a 	mov	r5,sp
   89fdc:	303ff71e 	bne	r6,zero,89fbc <__ram_exceptions_end+0xfff69d88>
   89fe0:	0005883a 	mov	r2,zero
   89fe4:	dec00104 	addi	sp,sp,4
   89fe8:	f800283a 	ret
   89fec:	00bfff84 	movi	r2,-2
   89ff0:	003ff706 	br	89fd0 <__ram_exceptions_end+0xfff69d9c>

00089ff4 <_mbtowc_r>:
   89ff4:	008002b4 	movhi	r2,10
   89ff8:	defff804 	addi	sp,sp,-32
   89ffc:	10817f04 	addi	r2,r2,1532
   8a000:	dfc00715 	stw	ra,28(sp)
   8a004:	dc000615 	stw	r16,24(sp)
   8a008:	14000017 	ldw	r16,0(r2)
   8a00c:	d9000215 	stw	r4,8(sp)
   8a010:	d9400315 	stw	r5,12(sp)
   8a014:	d9800415 	stw	r6,16(sp)
   8a018:	d9c00515 	stw	r7,20(sp)
   8a01c:	0089bb00 	call	89bb0 <__locale_charset>
   8a020:	d8800015 	stw	r2,0(sp)
   8a024:	d8800817 	ldw	r2,32(sp)
   8a028:	d9c00517 	ldw	r7,20(sp)
   8a02c:	d9800417 	ldw	r6,16(sp)
   8a030:	d9400317 	ldw	r5,12(sp)
   8a034:	d9000217 	ldw	r4,8(sp)
   8a038:	d8800115 	stw	r2,4(sp)
   8a03c:	803ee83a 	callr	r16
   8a040:	dfc00717 	ldw	ra,28(sp)
   8a044:	dc000617 	ldw	r16,24(sp)
   8a048:	dec00804 	addi	sp,sp,32
   8a04c:	f800283a 	ret

0008a050 <memchr>:
   8a050:	208000cc 	andi	r2,r4,3
   8a054:	280f883a 	mov	r7,r5
   8a058:	10003426 	beq	r2,zero,8a12c <memchr+0xdc>
   8a05c:	30bfffc4 	addi	r2,r6,-1
   8a060:	30001a26 	beq	r6,zero,8a0cc <memchr+0x7c>
   8a064:	20c00003 	ldbu	r3,0(r4)
   8a068:	29803fcc 	andi	r6,r5,255
   8a06c:	30c0051e 	bne	r6,r3,8a084 <memchr+0x34>
   8a070:	00001806 	br	8a0d4 <memchr+0x84>
   8a074:	10001526 	beq	r2,zero,8a0cc <memchr+0x7c>
   8a078:	20c00003 	ldbu	r3,0(r4)
   8a07c:	10bfffc4 	addi	r2,r2,-1
   8a080:	30c01426 	beq	r6,r3,8a0d4 <memchr+0x84>
   8a084:	21000044 	addi	r4,r4,1
   8a088:	20c000cc 	andi	r3,r4,3
   8a08c:	183ff91e 	bne	r3,zero,8a074 <__ram_exceptions_end+0xfff69e40>
   8a090:	020000c4 	movi	r8,3
   8a094:	40801136 	bltu	r8,r2,8a0dc <memchr+0x8c>
   8a098:	10000c26 	beq	r2,zero,8a0cc <memchr+0x7c>
   8a09c:	20c00003 	ldbu	r3,0(r4)
   8a0a0:	29403fcc 	andi	r5,r5,255
   8a0a4:	28c00b26 	beq	r5,r3,8a0d4 <memchr+0x84>
   8a0a8:	20c00044 	addi	r3,r4,1
   8a0ac:	39803fcc 	andi	r6,r7,255
   8a0b0:	2089883a 	add	r4,r4,r2
   8a0b4:	00000306 	br	8a0c4 <memchr+0x74>
   8a0b8:	18c00044 	addi	r3,r3,1
   8a0bc:	197fffc3 	ldbu	r5,-1(r3)
   8a0c0:	31400526 	beq	r6,r5,8a0d8 <memchr+0x88>
   8a0c4:	1805883a 	mov	r2,r3
   8a0c8:	20fffb1e 	bne	r4,r3,8a0b8 <__ram_exceptions_end+0xfff69e84>
   8a0cc:	0005883a 	mov	r2,zero
   8a0d0:	f800283a 	ret
   8a0d4:	2005883a 	mov	r2,r4
   8a0d8:	f800283a 	ret
   8a0dc:	28c03fcc 	andi	r3,r5,255
   8a0e0:	1812923a 	slli	r9,r3,8
   8a0e4:	02ffbff4 	movhi	r11,65279
   8a0e8:	02a02074 	movhi	r10,32897
   8a0ec:	48d2b03a 	or	r9,r9,r3
   8a0f0:	4806943a 	slli	r3,r9,16
   8a0f4:	5affbfc4 	addi	r11,r11,-257
   8a0f8:	52a02004 	addi	r10,r10,-32640
   8a0fc:	48d2b03a 	or	r9,r9,r3
   8a100:	20c00017 	ldw	r3,0(r4)
   8a104:	48c6f03a 	xor	r3,r9,r3
   8a108:	1acd883a 	add	r6,r3,r11
   8a10c:	00c6303a 	nor	r3,zero,r3
   8a110:	30c6703a 	and	r3,r6,r3
   8a114:	1a86703a 	and	r3,r3,r10
   8a118:	183fe01e 	bne	r3,zero,8a09c <__ram_exceptions_end+0xfff69e68>
   8a11c:	10bfff04 	addi	r2,r2,-4
   8a120:	21000104 	addi	r4,r4,4
   8a124:	40bff636 	bltu	r8,r2,8a100 <__ram_exceptions_end+0xfff69ecc>
   8a128:	003fdb06 	br	8a098 <__ram_exceptions_end+0xfff69e64>
   8a12c:	3005883a 	mov	r2,r6
   8a130:	003fd706 	br	8a090 <__ram_exceptions_end+0xfff69e5c>

0008a134 <memmove>:
   8a134:	2005883a 	mov	r2,r4
   8a138:	29000b2e 	bgeu	r5,r4,8a168 <memmove+0x34>
   8a13c:	298f883a 	add	r7,r5,r6
   8a140:	21c0092e 	bgeu	r4,r7,8a168 <memmove+0x34>
   8a144:	2187883a 	add	r3,r4,r6
   8a148:	198bc83a 	sub	r5,r3,r6
   8a14c:	30004826 	beq	r6,zero,8a270 <memmove+0x13c>
   8a150:	39ffffc4 	addi	r7,r7,-1
   8a154:	39000003 	ldbu	r4,0(r7)
   8a158:	18ffffc4 	addi	r3,r3,-1
   8a15c:	19000005 	stb	r4,0(r3)
   8a160:	28fffb1e 	bne	r5,r3,8a150 <__ram_exceptions_end+0xfff69f1c>
   8a164:	f800283a 	ret
   8a168:	00c003c4 	movi	r3,15
   8a16c:	1980412e 	bgeu	r3,r6,8a274 <memmove+0x140>
   8a170:	2886b03a 	or	r3,r5,r2
   8a174:	18c000cc 	andi	r3,r3,3
   8a178:	1800401e 	bne	r3,zero,8a27c <memmove+0x148>
   8a17c:	33fffc04 	addi	r15,r6,-16
   8a180:	781ed13a 	srli	r15,r15,4
   8a184:	28c00104 	addi	r3,r5,4
   8a188:	13400104 	addi	r13,r2,4
   8a18c:	781c913a 	slli	r14,r15,4
   8a190:	2b000204 	addi	r12,r5,8
   8a194:	12c00204 	addi	r11,r2,8
   8a198:	73800504 	addi	r14,r14,20
   8a19c:	2a800304 	addi	r10,r5,12
   8a1a0:	12400304 	addi	r9,r2,12
   8a1a4:	2b9d883a 	add	r14,r5,r14
   8a1a8:	2811883a 	mov	r8,r5
   8a1ac:	100f883a 	mov	r7,r2
   8a1b0:	41000017 	ldw	r4,0(r8)
   8a1b4:	39c00404 	addi	r7,r7,16
   8a1b8:	18c00404 	addi	r3,r3,16
   8a1bc:	393ffc15 	stw	r4,-16(r7)
   8a1c0:	193ffc17 	ldw	r4,-16(r3)
   8a1c4:	6b400404 	addi	r13,r13,16
   8a1c8:	5ac00404 	addi	r11,r11,16
   8a1cc:	693ffc15 	stw	r4,-16(r13)
   8a1d0:	61000017 	ldw	r4,0(r12)
   8a1d4:	4a400404 	addi	r9,r9,16
   8a1d8:	42000404 	addi	r8,r8,16
   8a1dc:	593ffc15 	stw	r4,-16(r11)
   8a1e0:	51000017 	ldw	r4,0(r10)
   8a1e4:	63000404 	addi	r12,r12,16
   8a1e8:	52800404 	addi	r10,r10,16
   8a1ec:	493ffc15 	stw	r4,-16(r9)
   8a1f0:	1bbfef1e 	bne	r3,r14,8a1b0 <__ram_exceptions_end+0xfff69f7c>
   8a1f4:	79000044 	addi	r4,r15,1
   8a1f8:	2008913a 	slli	r4,r4,4
   8a1fc:	328003cc 	andi	r10,r6,15
   8a200:	02c000c4 	movi	r11,3
   8a204:	1107883a 	add	r3,r2,r4
   8a208:	290b883a 	add	r5,r5,r4
   8a20c:	5a801e2e 	bgeu	r11,r10,8a288 <memmove+0x154>
   8a210:	1813883a 	mov	r9,r3
   8a214:	2811883a 	mov	r8,r5
   8a218:	500f883a 	mov	r7,r10
   8a21c:	41000017 	ldw	r4,0(r8)
   8a220:	4a400104 	addi	r9,r9,4
   8a224:	39ffff04 	addi	r7,r7,-4
   8a228:	493fff15 	stw	r4,-4(r9)
   8a22c:	42000104 	addi	r8,r8,4
   8a230:	59fffa36 	bltu	r11,r7,8a21c <__ram_exceptions_end+0xfff69fe8>
   8a234:	513fff04 	addi	r4,r10,-4
   8a238:	2008d0ba 	srli	r4,r4,2
   8a23c:	318000cc 	andi	r6,r6,3
   8a240:	21000044 	addi	r4,r4,1
   8a244:	2109883a 	add	r4,r4,r4
   8a248:	2109883a 	add	r4,r4,r4
   8a24c:	1907883a 	add	r3,r3,r4
   8a250:	290b883a 	add	r5,r5,r4
   8a254:	30000b26 	beq	r6,zero,8a284 <memmove+0x150>
   8a258:	198d883a 	add	r6,r3,r6
   8a25c:	29c00003 	ldbu	r7,0(r5)
   8a260:	18c00044 	addi	r3,r3,1
   8a264:	29400044 	addi	r5,r5,1
   8a268:	19ffffc5 	stb	r7,-1(r3)
   8a26c:	19bffb1e 	bne	r3,r6,8a25c <__ram_exceptions_end+0xfff6a028>
   8a270:	f800283a 	ret
   8a274:	1007883a 	mov	r3,r2
   8a278:	003ff606 	br	8a254 <__ram_exceptions_end+0xfff6a020>
   8a27c:	1007883a 	mov	r3,r2
   8a280:	003ff506 	br	8a258 <__ram_exceptions_end+0xfff6a024>
   8a284:	f800283a 	ret
   8a288:	500d883a 	mov	r6,r10
   8a28c:	003ff106 	br	8a254 <__ram_exceptions_end+0xfff6a020>

0008a290 <memset>:
   8a290:	20c000cc 	andi	r3,r4,3
   8a294:	2005883a 	mov	r2,r4
   8a298:	18004426 	beq	r3,zero,8a3ac <memset+0x11c>
   8a29c:	31ffffc4 	addi	r7,r6,-1
   8a2a0:	30004026 	beq	r6,zero,8a3a4 <memset+0x114>
   8a2a4:	2813883a 	mov	r9,r5
   8a2a8:	200d883a 	mov	r6,r4
   8a2ac:	2007883a 	mov	r3,r4
   8a2b0:	00000406 	br	8a2c4 <memset+0x34>
   8a2b4:	3a3fffc4 	addi	r8,r7,-1
   8a2b8:	31800044 	addi	r6,r6,1
   8a2bc:	38003926 	beq	r7,zero,8a3a4 <memset+0x114>
   8a2c0:	400f883a 	mov	r7,r8
   8a2c4:	18c00044 	addi	r3,r3,1
   8a2c8:	32400005 	stb	r9,0(r6)
   8a2cc:	1a0000cc 	andi	r8,r3,3
   8a2d0:	403ff81e 	bne	r8,zero,8a2b4 <__ram_exceptions_end+0xfff6a080>
   8a2d4:	010000c4 	movi	r4,3
   8a2d8:	21c02d2e 	bgeu	r4,r7,8a390 <memset+0x100>
   8a2dc:	29003fcc 	andi	r4,r5,255
   8a2e0:	200c923a 	slli	r6,r4,8
   8a2e4:	3108b03a 	or	r4,r6,r4
   8a2e8:	200c943a 	slli	r6,r4,16
   8a2ec:	218cb03a 	or	r6,r4,r6
   8a2f0:	010003c4 	movi	r4,15
   8a2f4:	21c0182e 	bgeu	r4,r7,8a358 <memset+0xc8>
   8a2f8:	3b3ffc04 	addi	r12,r7,-16
   8a2fc:	6018d13a 	srli	r12,r12,4
   8a300:	1a000104 	addi	r8,r3,4
   8a304:	1ac00204 	addi	r11,r3,8
   8a308:	6008913a 	slli	r4,r12,4
   8a30c:	1a800304 	addi	r10,r3,12
   8a310:	1813883a 	mov	r9,r3
   8a314:	21000504 	addi	r4,r4,20
   8a318:	1909883a 	add	r4,r3,r4
   8a31c:	49800015 	stw	r6,0(r9)
   8a320:	41800015 	stw	r6,0(r8)
   8a324:	59800015 	stw	r6,0(r11)
   8a328:	51800015 	stw	r6,0(r10)
   8a32c:	42000404 	addi	r8,r8,16
   8a330:	4a400404 	addi	r9,r9,16
   8a334:	5ac00404 	addi	r11,r11,16
   8a338:	52800404 	addi	r10,r10,16
   8a33c:	413ff71e 	bne	r8,r4,8a31c <__ram_exceptions_end+0xfff6a0e8>
   8a340:	63000044 	addi	r12,r12,1
   8a344:	6018913a 	slli	r12,r12,4
   8a348:	39c003cc 	andi	r7,r7,15
   8a34c:	010000c4 	movi	r4,3
   8a350:	1b07883a 	add	r3,r3,r12
   8a354:	21c00e2e 	bgeu	r4,r7,8a390 <memset+0x100>
   8a358:	1813883a 	mov	r9,r3
   8a35c:	3811883a 	mov	r8,r7
   8a360:	010000c4 	movi	r4,3
   8a364:	49800015 	stw	r6,0(r9)
   8a368:	423fff04 	addi	r8,r8,-4
   8a36c:	4a400104 	addi	r9,r9,4
   8a370:	223ffc36 	bltu	r4,r8,8a364 <__ram_exceptions_end+0xfff6a130>
   8a374:	393fff04 	addi	r4,r7,-4
   8a378:	2008d0ba 	srli	r4,r4,2
   8a37c:	39c000cc 	andi	r7,r7,3
   8a380:	21000044 	addi	r4,r4,1
   8a384:	2109883a 	add	r4,r4,r4
   8a388:	2109883a 	add	r4,r4,r4
   8a38c:	1907883a 	add	r3,r3,r4
   8a390:	38000526 	beq	r7,zero,8a3a8 <memset+0x118>
   8a394:	19cf883a 	add	r7,r3,r7
   8a398:	19400005 	stb	r5,0(r3)
   8a39c:	18c00044 	addi	r3,r3,1
   8a3a0:	38fffd1e 	bne	r7,r3,8a398 <__ram_exceptions_end+0xfff6a164>
   8a3a4:	f800283a 	ret
   8a3a8:	f800283a 	ret
   8a3ac:	2007883a 	mov	r3,r4
   8a3b0:	300f883a 	mov	r7,r6
   8a3b4:	003fc706 	br	8a2d4 <__ram_exceptions_end+0xfff6a0a0>

0008a3b8 <_Balloc>:
   8a3b8:	20801317 	ldw	r2,76(r4)
   8a3bc:	defffc04 	addi	sp,sp,-16
   8a3c0:	dc400115 	stw	r17,4(sp)
   8a3c4:	dc000015 	stw	r16,0(sp)
   8a3c8:	dfc00315 	stw	ra,12(sp)
   8a3cc:	dc800215 	stw	r18,8(sp)
   8a3d0:	2023883a 	mov	r17,r4
   8a3d4:	2821883a 	mov	r16,r5
   8a3d8:	10000f26 	beq	r2,zero,8a418 <_Balloc+0x60>
   8a3dc:	8407883a 	add	r3,r16,r16
   8a3e0:	18c7883a 	add	r3,r3,r3
   8a3e4:	10c7883a 	add	r3,r2,r3
   8a3e8:	18800017 	ldw	r2,0(r3)
   8a3ec:	10001126 	beq	r2,zero,8a434 <_Balloc+0x7c>
   8a3f0:	11000017 	ldw	r4,0(r2)
   8a3f4:	19000015 	stw	r4,0(r3)
   8a3f8:	10000415 	stw	zero,16(r2)
   8a3fc:	10000315 	stw	zero,12(r2)
   8a400:	dfc00317 	ldw	ra,12(sp)
   8a404:	dc800217 	ldw	r18,8(sp)
   8a408:	dc400117 	ldw	r17,4(sp)
   8a40c:	dc000017 	ldw	r16,0(sp)
   8a410:	dec00404 	addi	sp,sp,16
   8a414:	f800283a 	ret
   8a418:	01800844 	movi	r6,33
   8a41c:	01400104 	movi	r5,4
   8a420:	00934540 	call	93454 <_calloc_r>
   8a424:	88801315 	stw	r2,76(r17)
   8a428:	103fec1e 	bne	r2,zero,8a3dc <__ram_exceptions_end+0xfff6a1a8>
   8a42c:	0005883a 	mov	r2,zero
   8a430:	003ff306 	br	8a400 <__ram_exceptions_end+0xfff6a1cc>
   8a434:	01400044 	movi	r5,1
   8a438:	2c24983a 	sll	r18,r5,r16
   8a43c:	8809883a 	mov	r4,r17
   8a440:	91800144 	addi	r6,r18,5
   8a444:	318d883a 	add	r6,r6,r6
   8a448:	318d883a 	add	r6,r6,r6
   8a44c:	00934540 	call	93454 <_calloc_r>
   8a450:	103ff626 	beq	r2,zero,8a42c <__ram_exceptions_end+0xfff6a1f8>
   8a454:	14000115 	stw	r16,4(r2)
   8a458:	14800215 	stw	r18,8(r2)
   8a45c:	003fe606 	br	8a3f8 <__ram_exceptions_end+0xfff6a1c4>

0008a460 <_Bfree>:
   8a460:	28000826 	beq	r5,zero,8a484 <_Bfree+0x24>
   8a464:	28c00117 	ldw	r3,4(r5)
   8a468:	20801317 	ldw	r2,76(r4)
   8a46c:	18c7883a 	add	r3,r3,r3
   8a470:	18c7883a 	add	r3,r3,r3
   8a474:	10c5883a 	add	r2,r2,r3
   8a478:	10c00017 	ldw	r3,0(r2)
   8a47c:	28c00015 	stw	r3,0(r5)
   8a480:	11400015 	stw	r5,0(r2)
   8a484:	f800283a 	ret

0008a488 <__multadd>:
   8a488:	defff704 	addi	sp,sp,-36
   8a48c:	dc800215 	stw	r18,8(sp)
   8a490:	2c800417 	ldw	r18,16(r5)
   8a494:	dd800615 	stw	r22,24(sp)
   8a498:	dd400515 	stw	r21,20(sp)
   8a49c:	dd000415 	stw	r20,16(sp)
   8a4a0:	dcc00315 	stw	r19,12(sp)
   8a4a4:	dc400115 	stw	r17,4(sp)
   8a4a8:	dc000015 	stw	r16,0(sp)
   8a4ac:	dfc00815 	stw	ra,32(sp)
   8a4b0:	ddc00715 	stw	r23,28(sp)
   8a4b4:	2827883a 	mov	r19,r5
   8a4b8:	2029883a 	mov	r20,r4
   8a4bc:	3023883a 	mov	r17,r6
   8a4c0:	3821883a 	mov	r16,r7
   8a4c4:	2d400504 	addi	r21,r5,20
   8a4c8:	002d883a 	mov	r22,zero
   8a4cc:	adc00017 	ldw	r23,0(r21)
   8a4d0:	880b883a 	mov	r5,r17
   8a4d4:	ad400104 	addi	r21,r21,4
   8a4d8:	b93fffcc 	andi	r4,r23,65535
   8a4dc:	00822140 	call	82214 <__mulsi3>
   8a4e0:	b808d43a 	srli	r4,r23,16
   8a4e4:	880b883a 	mov	r5,r17
   8a4e8:	1421883a 	add	r16,r2,r16
   8a4ec:	00822140 	call	82214 <__mulsi3>
   8a4f0:	800ed43a 	srli	r7,r16,16
   8a4f4:	80ffffcc 	andi	r3,r16,65535
   8a4f8:	b5800044 	addi	r22,r22,1
   8a4fc:	11c5883a 	add	r2,r2,r7
   8a500:	100e943a 	slli	r7,r2,16
   8a504:	1020d43a 	srli	r16,r2,16
   8a508:	38c7883a 	add	r3,r7,r3
   8a50c:	a8ffff15 	stw	r3,-4(r21)
   8a510:	b4bfee16 	blt	r22,r18,8a4cc <__ram_exceptions_end+0xfff6a298>
   8a514:	80000926 	beq	r16,zero,8a53c <__multadd+0xb4>
   8a518:	98800217 	ldw	r2,8(r19)
   8a51c:	9080130e 	bge	r18,r2,8a56c <__multadd+0xe4>
   8a520:	90800144 	addi	r2,r18,5
   8a524:	1085883a 	add	r2,r2,r2
   8a528:	1085883a 	add	r2,r2,r2
   8a52c:	9885883a 	add	r2,r19,r2
   8a530:	14000015 	stw	r16,0(r2)
   8a534:	94800044 	addi	r18,r18,1
   8a538:	9c800415 	stw	r18,16(r19)
   8a53c:	9805883a 	mov	r2,r19
   8a540:	dfc00817 	ldw	ra,32(sp)
   8a544:	ddc00717 	ldw	r23,28(sp)
   8a548:	dd800617 	ldw	r22,24(sp)
   8a54c:	dd400517 	ldw	r21,20(sp)
   8a550:	dd000417 	ldw	r20,16(sp)
   8a554:	dcc00317 	ldw	r19,12(sp)
   8a558:	dc800217 	ldw	r18,8(sp)
   8a55c:	dc400117 	ldw	r17,4(sp)
   8a560:	dc000017 	ldw	r16,0(sp)
   8a564:	dec00904 	addi	sp,sp,36
   8a568:	f800283a 	ret
   8a56c:	99400117 	ldw	r5,4(r19)
   8a570:	a009883a 	mov	r4,r20
   8a574:	29400044 	addi	r5,r5,1
   8a578:	008a3b80 	call	8a3b8 <_Balloc>
   8a57c:	99800417 	ldw	r6,16(r19)
   8a580:	99400304 	addi	r5,r19,12
   8a584:	11000304 	addi	r4,r2,12
   8a588:	31800084 	addi	r6,r6,2
   8a58c:	318d883a 	add	r6,r6,r6
   8a590:	318d883a 	add	r6,r6,r6
   8a594:	1023883a 	mov	r17,r2
   8a598:	0082be40 	call	82be4 <memcpy>
   8a59c:	98000a26 	beq	r19,zero,8a5c8 <__multadd+0x140>
   8a5a0:	98c00117 	ldw	r3,4(r19)
   8a5a4:	a0801317 	ldw	r2,76(r20)
   8a5a8:	18c7883a 	add	r3,r3,r3
   8a5ac:	18c7883a 	add	r3,r3,r3
   8a5b0:	10c5883a 	add	r2,r2,r3
   8a5b4:	10c00017 	ldw	r3,0(r2)
   8a5b8:	98c00015 	stw	r3,0(r19)
   8a5bc:	14c00015 	stw	r19,0(r2)
   8a5c0:	8827883a 	mov	r19,r17
   8a5c4:	003fd606 	br	8a520 <__ram_exceptions_end+0xfff6a2ec>
   8a5c8:	8827883a 	mov	r19,r17
   8a5cc:	003fd406 	br	8a520 <__ram_exceptions_end+0xfff6a2ec>

0008a5d0 <__s2b>:
   8a5d0:	defff904 	addi	sp,sp,-28
   8a5d4:	dc400115 	stw	r17,4(sp)
   8a5d8:	dc000015 	stw	r16,0(sp)
   8a5dc:	2023883a 	mov	r17,r4
   8a5e0:	2821883a 	mov	r16,r5
   8a5e4:	39000204 	addi	r4,r7,8
   8a5e8:	01400244 	movi	r5,9
   8a5ec:	dcc00315 	stw	r19,12(sp)
   8a5f0:	dc800215 	stw	r18,8(sp)
   8a5f4:	dfc00615 	stw	ra,24(sp)
   8a5f8:	dd400515 	stw	r21,20(sp)
   8a5fc:	dd000415 	stw	r20,16(sp)
   8a600:	3825883a 	mov	r18,r7
   8a604:	3027883a 	mov	r19,r6
   8a608:	00820600 	call	82060 <__divsi3>
   8a60c:	00c00044 	movi	r3,1
   8a610:	000b883a 	mov	r5,zero
   8a614:	1880030e 	bge	r3,r2,8a624 <__s2b+0x54>
   8a618:	18c7883a 	add	r3,r3,r3
   8a61c:	29400044 	addi	r5,r5,1
   8a620:	18bffd16 	blt	r3,r2,8a618 <__ram_exceptions_end+0xfff6a3e4>
   8a624:	8809883a 	mov	r4,r17
   8a628:	008a3b80 	call	8a3b8 <_Balloc>
   8a62c:	d8c00717 	ldw	r3,28(sp)
   8a630:	10c00515 	stw	r3,20(r2)
   8a634:	00c00044 	movi	r3,1
   8a638:	10c00415 	stw	r3,16(r2)
   8a63c:	00c00244 	movi	r3,9
   8a640:	1cc0210e 	bge	r3,r19,8a6c8 <__s2b+0xf8>
   8a644:	80eb883a 	add	r21,r16,r3
   8a648:	a829883a 	mov	r20,r21
   8a64c:	84e1883a 	add	r16,r16,r19
   8a650:	a1c00007 	ldb	r7,0(r20)
   8a654:	01800284 	movi	r6,10
   8a658:	a5000044 	addi	r20,r20,1
   8a65c:	100b883a 	mov	r5,r2
   8a660:	39fff404 	addi	r7,r7,-48
   8a664:	8809883a 	mov	r4,r17
   8a668:	008a4880 	call	8a488 <__multadd>
   8a66c:	a43ff81e 	bne	r20,r16,8a650 <__ram_exceptions_end+0xfff6a41c>
   8a670:	ace1883a 	add	r16,r21,r19
   8a674:	843ffe04 	addi	r16,r16,-8
   8a678:	9c800a0e 	bge	r19,r18,8a6a4 <__s2b+0xd4>
   8a67c:	94e5c83a 	sub	r18,r18,r19
   8a680:	84a5883a 	add	r18,r16,r18
   8a684:	81c00007 	ldb	r7,0(r16)
   8a688:	01800284 	movi	r6,10
   8a68c:	84000044 	addi	r16,r16,1
   8a690:	100b883a 	mov	r5,r2
   8a694:	39fff404 	addi	r7,r7,-48
   8a698:	8809883a 	mov	r4,r17
   8a69c:	008a4880 	call	8a488 <__multadd>
   8a6a0:	84bff81e 	bne	r16,r18,8a684 <__ram_exceptions_end+0xfff6a450>
   8a6a4:	dfc00617 	ldw	ra,24(sp)
   8a6a8:	dd400517 	ldw	r21,20(sp)
   8a6ac:	dd000417 	ldw	r20,16(sp)
   8a6b0:	dcc00317 	ldw	r19,12(sp)
   8a6b4:	dc800217 	ldw	r18,8(sp)
   8a6b8:	dc400117 	ldw	r17,4(sp)
   8a6bc:	dc000017 	ldw	r16,0(sp)
   8a6c0:	dec00704 	addi	sp,sp,28
   8a6c4:	f800283a 	ret
   8a6c8:	84000284 	addi	r16,r16,10
   8a6cc:	1827883a 	mov	r19,r3
   8a6d0:	003fe906 	br	8a678 <__ram_exceptions_end+0xfff6a444>

0008a6d4 <__hi0bits>:
   8a6d4:	20bfffec 	andhi	r2,r4,65535
   8a6d8:	1000141e 	bne	r2,zero,8a72c <__hi0bits+0x58>
   8a6dc:	2008943a 	slli	r4,r4,16
   8a6e0:	00800404 	movi	r2,16
   8a6e4:	20ffc02c 	andhi	r3,r4,65280
   8a6e8:	1800021e 	bne	r3,zero,8a6f4 <__hi0bits+0x20>
   8a6ec:	2008923a 	slli	r4,r4,8
   8a6f0:	10800204 	addi	r2,r2,8
   8a6f4:	20fc002c 	andhi	r3,r4,61440
   8a6f8:	1800021e 	bne	r3,zero,8a704 <__hi0bits+0x30>
   8a6fc:	2008913a 	slli	r4,r4,4
   8a700:	10800104 	addi	r2,r2,4
   8a704:	20f0002c 	andhi	r3,r4,49152
   8a708:	1800031e 	bne	r3,zero,8a718 <__hi0bits+0x44>
   8a70c:	2109883a 	add	r4,r4,r4
   8a710:	10800084 	addi	r2,r2,2
   8a714:	2109883a 	add	r4,r4,r4
   8a718:	20000316 	blt	r4,zero,8a728 <__hi0bits+0x54>
   8a71c:	2110002c 	andhi	r4,r4,16384
   8a720:	2000041e 	bne	r4,zero,8a734 <__hi0bits+0x60>
   8a724:	00800804 	movi	r2,32
   8a728:	f800283a 	ret
   8a72c:	0005883a 	mov	r2,zero
   8a730:	003fec06 	br	8a6e4 <__ram_exceptions_end+0xfff6a4b0>
   8a734:	10800044 	addi	r2,r2,1
   8a738:	f800283a 	ret

0008a73c <__lo0bits>:
   8a73c:	20c00017 	ldw	r3,0(r4)
   8a740:	188001cc 	andi	r2,r3,7
   8a744:	10000826 	beq	r2,zero,8a768 <__lo0bits+0x2c>
   8a748:	1880004c 	andi	r2,r3,1
   8a74c:	1000211e 	bne	r2,zero,8a7d4 <__lo0bits+0x98>
   8a750:	1880008c 	andi	r2,r3,2
   8a754:	1000211e 	bne	r2,zero,8a7dc <__lo0bits+0xa0>
   8a758:	1806d0ba 	srli	r3,r3,2
   8a75c:	00800084 	movi	r2,2
   8a760:	20c00015 	stw	r3,0(r4)
   8a764:	f800283a 	ret
   8a768:	18bfffcc 	andi	r2,r3,65535
   8a76c:	10001326 	beq	r2,zero,8a7bc <__lo0bits+0x80>
   8a770:	0005883a 	mov	r2,zero
   8a774:	19403fcc 	andi	r5,r3,255
   8a778:	2800021e 	bne	r5,zero,8a784 <__lo0bits+0x48>
   8a77c:	1806d23a 	srli	r3,r3,8
   8a780:	10800204 	addi	r2,r2,8
   8a784:	194003cc 	andi	r5,r3,15
   8a788:	2800021e 	bne	r5,zero,8a794 <__lo0bits+0x58>
   8a78c:	1806d13a 	srli	r3,r3,4
   8a790:	10800104 	addi	r2,r2,4
   8a794:	194000cc 	andi	r5,r3,3
   8a798:	2800021e 	bne	r5,zero,8a7a4 <__lo0bits+0x68>
   8a79c:	1806d0ba 	srli	r3,r3,2
   8a7a0:	10800084 	addi	r2,r2,2
   8a7a4:	1940004c 	andi	r5,r3,1
   8a7a8:	2800081e 	bne	r5,zero,8a7cc <__lo0bits+0x90>
   8a7ac:	1806d07a 	srli	r3,r3,1
   8a7b0:	1800051e 	bne	r3,zero,8a7c8 <__lo0bits+0x8c>
   8a7b4:	00800804 	movi	r2,32
   8a7b8:	f800283a 	ret
   8a7bc:	1806d43a 	srli	r3,r3,16
   8a7c0:	00800404 	movi	r2,16
   8a7c4:	003feb06 	br	8a774 <__ram_exceptions_end+0xfff6a540>
   8a7c8:	10800044 	addi	r2,r2,1
   8a7cc:	20c00015 	stw	r3,0(r4)
   8a7d0:	f800283a 	ret
   8a7d4:	0005883a 	mov	r2,zero
   8a7d8:	f800283a 	ret
   8a7dc:	1806d07a 	srli	r3,r3,1
   8a7e0:	00800044 	movi	r2,1
   8a7e4:	20c00015 	stw	r3,0(r4)
   8a7e8:	f800283a 	ret

0008a7ec <__i2b>:
   8a7ec:	defffd04 	addi	sp,sp,-12
   8a7f0:	dc000015 	stw	r16,0(sp)
   8a7f4:	04000044 	movi	r16,1
   8a7f8:	dc400115 	stw	r17,4(sp)
   8a7fc:	2823883a 	mov	r17,r5
   8a800:	800b883a 	mov	r5,r16
   8a804:	dfc00215 	stw	ra,8(sp)
   8a808:	008a3b80 	call	8a3b8 <_Balloc>
   8a80c:	14400515 	stw	r17,20(r2)
   8a810:	14000415 	stw	r16,16(r2)
   8a814:	dfc00217 	ldw	ra,8(sp)
   8a818:	dc400117 	ldw	r17,4(sp)
   8a81c:	dc000017 	ldw	r16,0(sp)
   8a820:	dec00304 	addi	sp,sp,12
   8a824:	f800283a 	ret

0008a828 <__multiply>:
   8a828:	deffef04 	addi	sp,sp,-68
   8a82c:	dc400815 	stw	r17,32(sp)
   8a830:	dc000715 	stw	r16,28(sp)
   8a834:	34400417 	ldw	r17,16(r6)
   8a838:	2c000417 	ldw	r16,16(r5)
   8a83c:	dd800d15 	stw	r22,52(sp)
   8a840:	dc800915 	stw	r18,36(sp)
   8a844:	dfc01015 	stw	ra,64(sp)
   8a848:	df000f15 	stw	fp,60(sp)
   8a84c:	ddc00e15 	stw	r23,56(sp)
   8a850:	dd400c15 	stw	r21,48(sp)
   8a854:	dd000b15 	stw	r20,44(sp)
   8a858:	dcc00a15 	stw	r19,40(sp)
   8a85c:	2825883a 	mov	r18,r5
   8a860:	302d883a 	mov	r22,r6
   8a864:	8440050e 	bge	r16,r17,8a87c <__multiply+0x54>
   8a868:	8007883a 	mov	r3,r16
   8a86c:	3025883a 	mov	r18,r6
   8a870:	8821883a 	mov	r16,r17
   8a874:	282d883a 	mov	r22,r5
   8a878:	1823883a 	mov	r17,r3
   8a87c:	90800217 	ldw	r2,8(r18)
   8a880:	8447883a 	add	r3,r16,r17
   8a884:	d8c00215 	stw	r3,8(sp)
   8a888:	91400117 	ldw	r5,4(r18)
   8a88c:	10c0010e 	bge	r2,r3,8a894 <__multiply+0x6c>
   8a890:	29400044 	addi	r5,r5,1
   8a894:	008a3b80 	call	8a3b8 <_Balloc>
   8a898:	d8c00217 	ldw	r3,8(sp)
   8a89c:	d8800615 	stw	r2,24(sp)
   8a8a0:	18eb883a 	add	r21,r3,r3
   8a8a4:	ad6b883a 	add	r21,r21,r21
   8a8a8:	10c00504 	addi	r3,r2,20
   8a8ac:	1d6b883a 	add	r21,r3,r21
   8a8b0:	d8c00115 	stw	r3,4(sp)
   8a8b4:	dd400315 	stw	r21,12(sp)
   8a8b8:	1805883a 	mov	r2,r3
   8a8bc:	1d40042e 	bgeu	r3,r21,8a8d0 <__multiply+0xa8>
   8a8c0:	d8c00317 	ldw	r3,12(sp)
   8a8c4:	10000015 	stw	zero,0(r2)
   8a8c8:	10800104 	addi	r2,r2,4
   8a8cc:	10fffc36 	bltu	r2,r3,8a8c0 <__ram_exceptions_end+0xfff6a68c>
   8a8d0:	8c63883a 	add	r17,r17,r17
   8a8d4:	b5800504 	addi	r22,r22,20
   8a8d8:	8c63883a 	add	r17,r17,r17
   8a8dc:	94800504 	addi	r18,r18,20
   8a8e0:	8421883a 	add	r16,r16,r16
   8a8e4:	b463883a 	add	r17,r22,r17
   8a8e8:	8421883a 	add	r16,r16,r16
   8a8ec:	dd800015 	stw	r22,0(sp)
   8a8f0:	dc800415 	stw	r18,16(sp)
   8a8f4:	dc400515 	stw	r17,20(sp)
   8a8f8:	9429883a 	add	r20,r18,r16
   8a8fc:	b4404f2e 	bgeu	r22,r17,8aa3c <__multiply+0x214>
   8a900:	d8c00017 	ldw	r3,0(sp)
   8a904:	1c800017 	ldw	r18,0(r3)
   8a908:	947fffcc 	andi	r17,r18,65535
   8a90c:	88001e26 	beq	r17,zero,8a988 <__multiply+0x160>
   8a910:	dd800117 	ldw	r22,4(sp)
   8a914:	dd400417 	ldw	r21,16(sp)
   8a918:	0027883a 	mov	r19,zero
   8a91c:	ac800017 	ldw	r18,0(r21)
   8a920:	b4000017 	ldw	r16,0(r22)
   8a924:	880b883a 	mov	r5,r17
   8a928:	913fffcc 	andi	r4,r18,65535
   8a92c:	00822140 	call	82214 <__mulsi3>
   8a930:	9008d43a 	srli	r4,r18,16
   8a934:	84bfffcc 	andi	r18,r16,65535
   8a938:	1485883a 	add	r2,r2,r18
   8a93c:	14e5883a 	add	r18,r2,r19
   8a940:	8020d43a 	srli	r16,r16,16
   8a944:	9026d43a 	srli	r19,r18,16
   8a948:	880b883a 	mov	r5,r17
   8a94c:	00822140 	call	82214 <__mulsi3>
   8a950:	1405883a 	add	r2,r2,r16
   8a954:	14e1883a 	add	r16,r2,r19
   8a958:	90ffffcc 	andi	r3,r18,65535
   8a95c:	8024943a 	slli	r18,r16,16
   8a960:	ad400104 	addi	r21,r21,4
   8a964:	b005883a 	mov	r2,r22
   8a968:	90c6b03a 	or	r3,r18,r3
   8a96c:	b0c00015 	stw	r3,0(r22)
   8a970:	8026d43a 	srli	r19,r16,16
   8a974:	b5800104 	addi	r22,r22,4
   8a978:	ad3fe836 	bltu	r21,r20,8a91c <__ram_exceptions_end+0xfff6a6e8>
   8a97c:	d8c00017 	ldw	r3,0(sp)
   8a980:	14c00115 	stw	r19,4(r2)
   8a984:	1c800017 	ldw	r18,0(r3)
   8a988:	9024d43a 	srli	r18,r18,16
   8a98c:	90002226 	beq	r18,zero,8aa18 <__multiply+0x1f0>
   8a990:	d8c00117 	ldw	r3,4(sp)
   8a994:	dd800417 	ldw	r22,16(sp)
   8a998:	002f883a 	mov	r23,zero
   8a99c:	1f000017 	ldw	fp,0(r3)
   8a9a0:	1823883a 	mov	r17,r3
   8a9a4:	182b883a 	mov	r21,r3
   8a9a8:	e021883a 	mov	r16,fp
   8a9ac:	00000106 	br	8a9b4 <__multiply+0x18c>
   8a9b0:	982b883a 	mov	r21,r19
   8a9b4:	b100000b 	ldhu	r4,0(r22)
   8a9b8:	8020d43a 	srli	r16,r16,16
   8a9bc:	900b883a 	mov	r5,r18
   8a9c0:	00822140 	call	82214 <__mulsi3>
   8a9c4:	1405883a 	add	r2,r2,r16
   8a9c8:	15ef883a 	add	r23,r2,r23
   8a9cc:	b804943a 	slli	r2,r23,16
   8a9d0:	e0ffffcc 	andi	r3,fp,65535
   8a9d4:	8c400104 	addi	r17,r17,4
   8a9d8:	10c6b03a 	or	r3,r2,r3
   8a9dc:	88ffff15 	stw	r3,-4(r17)
   8a9e0:	b5800104 	addi	r22,r22,4
   8a9e4:	b13fff17 	ldw	r4,-4(r22)
   8a9e8:	acc00104 	addi	r19,r21,4
   8a9ec:	900b883a 	mov	r5,r18
   8a9f0:	2008d43a 	srli	r4,r4,16
   8a9f4:	9c000017 	ldw	r16,0(r19)
   8a9f8:	00822140 	call	82214 <__mulsi3>
   8a9fc:	b806d43a 	srli	r3,r23,16
   8aa00:	813fffcc 	andi	r4,r16,65535
   8aa04:	1105883a 	add	r2,r2,r4
   8aa08:	10f9883a 	add	fp,r2,r3
   8aa0c:	e02ed43a 	srli	r23,fp,16
   8aa10:	b53fe736 	bltu	r22,r20,8a9b0 <__ram_exceptions_end+0xfff6a77c>
   8aa14:	af000115 	stw	fp,4(r21)
   8aa18:	d8c00017 	ldw	r3,0(sp)
   8aa1c:	d9000517 	ldw	r4,20(sp)
   8aa20:	18c00104 	addi	r3,r3,4
   8aa24:	d8c00015 	stw	r3,0(sp)
   8aa28:	d8c00117 	ldw	r3,4(sp)
   8aa2c:	18c00104 	addi	r3,r3,4
   8aa30:	d8c00115 	stw	r3,4(sp)
   8aa34:	d8c00017 	ldw	r3,0(sp)
   8aa38:	193fb136 	bltu	r3,r4,8a900 <__ram_exceptions_end+0xfff6a6cc>
   8aa3c:	d8c00217 	ldw	r3,8(sp)
   8aa40:	00c00c0e 	bge	zero,r3,8aa74 <__multiply+0x24c>
   8aa44:	d8c00317 	ldw	r3,12(sp)
   8aa48:	18bfff17 	ldw	r2,-4(r3)
   8aa4c:	1d7fff04 	addi	r21,r3,-4
   8aa50:	10000326 	beq	r2,zero,8aa60 <__multiply+0x238>
   8aa54:	00000706 	br	8aa74 <__multiply+0x24c>
   8aa58:	a8800017 	ldw	r2,0(r21)
   8aa5c:	1000051e 	bne	r2,zero,8aa74 <__multiply+0x24c>
   8aa60:	d8c00217 	ldw	r3,8(sp)
   8aa64:	ad7fff04 	addi	r21,r21,-4
   8aa68:	18ffffc4 	addi	r3,r3,-1
   8aa6c:	d8c00215 	stw	r3,8(sp)
   8aa70:	183ff91e 	bne	r3,zero,8aa58 <__ram_exceptions_end+0xfff6a824>
   8aa74:	d8c00617 	ldw	r3,24(sp)
   8aa78:	d9000217 	ldw	r4,8(sp)
   8aa7c:	1805883a 	mov	r2,r3
   8aa80:	19000415 	stw	r4,16(r3)
   8aa84:	dfc01017 	ldw	ra,64(sp)
   8aa88:	df000f17 	ldw	fp,60(sp)
   8aa8c:	ddc00e17 	ldw	r23,56(sp)
   8aa90:	dd800d17 	ldw	r22,52(sp)
   8aa94:	dd400c17 	ldw	r21,48(sp)
   8aa98:	dd000b17 	ldw	r20,44(sp)
   8aa9c:	dcc00a17 	ldw	r19,40(sp)
   8aaa0:	dc800917 	ldw	r18,36(sp)
   8aaa4:	dc400817 	ldw	r17,32(sp)
   8aaa8:	dc000717 	ldw	r16,28(sp)
   8aaac:	dec01104 	addi	sp,sp,68
   8aab0:	f800283a 	ret

0008aab4 <__pow5mult>:
   8aab4:	defffa04 	addi	sp,sp,-24
   8aab8:	dcc00315 	stw	r19,12(sp)
   8aabc:	dc000015 	stw	r16,0(sp)
   8aac0:	dfc00515 	stw	ra,20(sp)
   8aac4:	dd000415 	stw	r20,16(sp)
   8aac8:	dc800215 	stw	r18,8(sp)
   8aacc:	dc400115 	stw	r17,4(sp)
   8aad0:	308000cc 	andi	r2,r6,3
   8aad4:	3021883a 	mov	r16,r6
   8aad8:	2027883a 	mov	r19,r4
   8aadc:	10002f1e 	bne	r2,zero,8ab9c <__pow5mult+0xe8>
   8aae0:	2825883a 	mov	r18,r5
   8aae4:	8021d0ba 	srai	r16,r16,2
   8aae8:	80001a26 	beq	r16,zero,8ab54 <__pow5mult+0xa0>
   8aaec:	9c401217 	ldw	r17,72(r19)
   8aaf0:	8800061e 	bne	r17,zero,8ab0c <__pow5mult+0x58>
   8aaf4:	00003406 	br	8abc8 <__pow5mult+0x114>
   8aaf8:	8021d07a 	srai	r16,r16,1
   8aafc:	80001526 	beq	r16,zero,8ab54 <__pow5mult+0xa0>
   8ab00:	88800017 	ldw	r2,0(r17)
   8ab04:	10001c26 	beq	r2,zero,8ab78 <__pow5mult+0xc4>
   8ab08:	1023883a 	mov	r17,r2
   8ab0c:	8080004c 	andi	r2,r16,1
   8ab10:	103ff926 	beq	r2,zero,8aaf8 <__ram_exceptions_end+0xfff6a8c4>
   8ab14:	880d883a 	mov	r6,r17
   8ab18:	900b883a 	mov	r5,r18
   8ab1c:	9809883a 	mov	r4,r19
   8ab20:	008a8280 	call	8a828 <__multiply>
   8ab24:	90001b26 	beq	r18,zero,8ab94 <__pow5mult+0xe0>
   8ab28:	91000117 	ldw	r4,4(r18)
   8ab2c:	98c01317 	ldw	r3,76(r19)
   8ab30:	8021d07a 	srai	r16,r16,1
   8ab34:	2109883a 	add	r4,r4,r4
   8ab38:	2109883a 	add	r4,r4,r4
   8ab3c:	1907883a 	add	r3,r3,r4
   8ab40:	19000017 	ldw	r4,0(r3)
   8ab44:	91000015 	stw	r4,0(r18)
   8ab48:	1c800015 	stw	r18,0(r3)
   8ab4c:	1025883a 	mov	r18,r2
   8ab50:	803feb1e 	bne	r16,zero,8ab00 <__ram_exceptions_end+0xfff6a8cc>
   8ab54:	9005883a 	mov	r2,r18
   8ab58:	dfc00517 	ldw	ra,20(sp)
   8ab5c:	dd000417 	ldw	r20,16(sp)
   8ab60:	dcc00317 	ldw	r19,12(sp)
   8ab64:	dc800217 	ldw	r18,8(sp)
   8ab68:	dc400117 	ldw	r17,4(sp)
   8ab6c:	dc000017 	ldw	r16,0(sp)
   8ab70:	dec00604 	addi	sp,sp,24
   8ab74:	f800283a 	ret
   8ab78:	880d883a 	mov	r6,r17
   8ab7c:	880b883a 	mov	r5,r17
   8ab80:	9809883a 	mov	r4,r19
   8ab84:	008a8280 	call	8a828 <__multiply>
   8ab88:	88800015 	stw	r2,0(r17)
   8ab8c:	10000015 	stw	zero,0(r2)
   8ab90:	003fdd06 	br	8ab08 <__ram_exceptions_end+0xfff6a8d4>
   8ab94:	1025883a 	mov	r18,r2
   8ab98:	003fd706 	br	8aaf8 <__ram_exceptions_end+0xfff6a8c4>
   8ab9c:	10bfffc4 	addi	r2,r2,-1
   8aba0:	1085883a 	add	r2,r2,r2
   8aba4:	00c002b4 	movhi	r3,10
   8aba8:	18f93604 	addi	r3,r3,-6952
   8abac:	1085883a 	add	r2,r2,r2
   8abb0:	1885883a 	add	r2,r3,r2
   8abb4:	11800017 	ldw	r6,0(r2)
   8abb8:	000f883a 	mov	r7,zero
   8abbc:	008a4880 	call	8a488 <__multadd>
   8abc0:	1025883a 	mov	r18,r2
   8abc4:	003fc706 	br	8aae4 <__ram_exceptions_end+0xfff6a8b0>
   8abc8:	05000044 	movi	r20,1
   8abcc:	a00b883a 	mov	r5,r20
   8abd0:	9809883a 	mov	r4,r19
   8abd4:	008a3b80 	call	8a3b8 <_Balloc>
   8abd8:	1023883a 	mov	r17,r2
   8abdc:	00809c44 	movi	r2,625
   8abe0:	88800515 	stw	r2,20(r17)
   8abe4:	8d000415 	stw	r20,16(r17)
   8abe8:	9c401215 	stw	r17,72(r19)
   8abec:	88000015 	stw	zero,0(r17)
   8abf0:	003fc606 	br	8ab0c <__ram_exceptions_end+0xfff6a8d8>

0008abf4 <__lshift>:
   8abf4:	defff904 	addi	sp,sp,-28
   8abf8:	dd400515 	stw	r21,20(sp)
   8abfc:	dcc00315 	stw	r19,12(sp)
   8ac00:	302bd17a 	srai	r21,r6,5
   8ac04:	2cc00417 	ldw	r19,16(r5)
   8ac08:	28800217 	ldw	r2,8(r5)
   8ac0c:	dd000415 	stw	r20,16(sp)
   8ac10:	ace7883a 	add	r19,r21,r19
   8ac14:	dc800215 	stw	r18,8(sp)
   8ac18:	dc400115 	stw	r17,4(sp)
   8ac1c:	dc000015 	stw	r16,0(sp)
   8ac20:	dfc00615 	stw	ra,24(sp)
   8ac24:	9c000044 	addi	r16,r19,1
   8ac28:	2823883a 	mov	r17,r5
   8ac2c:	3029883a 	mov	r20,r6
   8ac30:	2025883a 	mov	r18,r4
   8ac34:	29400117 	ldw	r5,4(r5)
   8ac38:	1400030e 	bge	r2,r16,8ac48 <__lshift+0x54>
   8ac3c:	1085883a 	add	r2,r2,r2
   8ac40:	29400044 	addi	r5,r5,1
   8ac44:	143ffd16 	blt	r2,r16,8ac3c <__ram_exceptions_end+0xfff6aa08>
   8ac48:	9009883a 	mov	r4,r18
   8ac4c:	008a3b80 	call	8a3b8 <_Balloc>
   8ac50:	10c00504 	addi	r3,r2,20
   8ac54:	0540070e 	bge	zero,r21,8ac74 <__lshift+0x80>
   8ac58:	ad6b883a 	add	r21,r21,r21
   8ac5c:	ad6b883a 	add	r21,r21,r21
   8ac60:	1809883a 	mov	r4,r3
   8ac64:	1d47883a 	add	r3,r3,r21
   8ac68:	20000015 	stw	zero,0(r4)
   8ac6c:	21000104 	addi	r4,r4,4
   8ac70:	193ffd1e 	bne	r3,r4,8ac68 <__ram_exceptions_end+0xfff6aa34>
   8ac74:	8a000417 	ldw	r8,16(r17)
   8ac78:	89000504 	addi	r4,r17,20
   8ac7c:	a18007cc 	andi	r6,r20,31
   8ac80:	4211883a 	add	r8,r8,r8
   8ac84:	4211883a 	add	r8,r8,r8
   8ac88:	2211883a 	add	r8,r4,r8
   8ac8c:	30002326 	beq	r6,zero,8ad1c <__lshift+0x128>
   8ac90:	02400804 	movi	r9,32
   8ac94:	4993c83a 	sub	r9,r9,r6
   8ac98:	000b883a 	mov	r5,zero
   8ac9c:	21c00017 	ldw	r7,0(r4)
   8aca0:	1815883a 	mov	r10,r3
   8aca4:	18c00104 	addi	r3,r3,4
   8aca8:	398e983a 	sll	r7,r7,r6
   8acac:	21000104 	addi	r4,r4,4
   8acb0:	394ab03a 	or	r5,r7,r5
   8acb4:	197fff15 	stw	r5,-4(r3)
   8acb8:	217fff17 	ldw	r5,-4(r4)
   8acbc:	2a4ad83a 	srl	r5,r5,r9
   8acc0:	223ff636 	bltu	r4,r8,8ac9c <__ram_exceptions_end+0xfff6aa68>
   8acc4:	51400115 	stw	r5,4(r10)
   8acc8:	28001a1e 	bne	r5,zero,8ad34 <__lshift+0x140>
   8accc:	843fffc4 	addi	r16,r16,-1
   8acd0:	14000415 	stw	r16,16(r2)
   8acd4:	88000826 	beq	r17,zero,8acf8 <__lshift+0x104>
   8acd8:	89000117 	ldw	r4,4(r17)
   8acdc:	90c01317 	ldw	r3,76(r18)
   8ace0:	2109883a 	add	r4,r4,r4
   8ace4:	2109883a 	add	r4,r4,r4
   8ace8:	1907883a 	add	r3,r3,r4
   8acec:	19000017 	ldw	r4,0(r3)
   8acf0:	89000015 	stw	r4,0(r17)
   8acf4:	1c400015 	stw	r17,0(r3)
   8acf8:	dfc00617 	ldw	ra,24(sp)
   8acfc:	dd400517 	ldw	r21,20(sp)
   8ad00:	dd000417 	ldw	r20,16(sp)
   8ad04:	dcc00317 	ldw	r19,12(sp)
   8ad08:	dc800217 	ldw	r18,8(sp)
   8ad0c:	dc400117 	ldw	r17,4(sp)
   8ad10:	dc000017 	ldw	r16,0(sp)
   8ad14:	dec00704 	addi	sp,sp,28
   8ad18:	f800283a 	ret
   8ad1c:	21400017 	ldw	r5,0(r4)
   8ad20:	18c00104 	addi	r3,r3,4
   8ad24:	21000104 	addi	r4,r4,4
   8ad28:	197fff15 	stw	r5,-4(r3)
   8ad2c:	223ffb36 	bltu	r4,r8,8ad1c <__ram_exceptions_end+0xfff6aae8>
   8ad30:	003fe606 	br	8accc <__ram_exceptions_end+0xfff6aa98>
   8ad34:	9c000084 	addi	r16,r19,2
   8ad38:	003fe406 	br	8accc <__ram_exceptions_end+0xfff6aa98>

0008ad3c <__mcmp>:
   8ad3c:	20800417 	ldw	r2,16(r4)
   8ad40:	28c00417 	ldw	r3,16(r5)
   8ad44:	10c5c83a 	sub	r2,r2,r3
   8ad48:	1000111e 	bne	r2,zero,8ad90 <__mcmp+0x54>
   8ad4c:	18c7883a 	add	r3,r3,r3
   8ad50:	18c7883a 	add	r3,r3,r3
   8ad54:	21000504 	addi	r4,r4,20
   8ad58:	29400504 	addi	r5,r5,20
   8ad5c:	20c5883a 	add	r2,r4,r3
   8ad60:	28cb883a 	add	r5,r5,r3
   8ad64:	00000106 	br	8ad6c <__mcmp+0x30>
   8ad68:	20800a2e 	bgeu	r4,r2,8ad94 <__mcmp+0x58>
   8ad6c:	10bfff04 	addi	r2,r2,-4
   8ad70:	297fff04 	addi	r5,r5,-4
   8ad74:	11800017 	ldw	r6,0(r2)
   8ad78:	28c00017 	ldw	r3,0(r5)
   8ad7c:	30fffa26 	beq	r6,r3,8ad68 <__ram_exceptions_end+0xfff6ab34>
   8ad80:	30c00236 	bltu	r6,r3,8ad8c <__mcmp+0x50>
   8ad84:	00800044 	movi	r2,1
   8ad88:	f800283a 	ret
   8ad8c:	00bfffc4 	movi	r2,-1
   8ad90:	f800283a 	ret
   8ad94:	0005883a 	mov	r2,zero
   8ad98:	f800283a 	ret

0008ad9c <__mdiff>:
   8ad9c:	28c00417 	ldw	r3,16(r5)
   8ada0:	30800417 	ldw	r2,16(r6)
   8ada4:	defffa04 	addi	sp,sp,-24
   8ada8:	dcc00315 	stw	r19,12(sp)
   8adac:	dc800215 	stw	r18,8(sp)
   8adb0:	dfc00515 	stw	ra,20(sp)
   8adb4:	dd000415 	stw	r20,16(sp)
   8adb8:	dc400115 	stw	r17,4(sp)
   8adbc:	dc000015 	stw	r16,0(sp)
   8adc0:	1887c83a 	sub	r3,r3,r2
   8adc4:	2825883a 	mov	r18,r5
   8adc8:	3027883a 	mov	r19,r6
   8adcc:	1800141e 	bne	r3,zero,8ae20 <__mdiff+0x84>
   8add0:	1085883a 	add	r2,r2,r2
   8add4:	1085883a 	add	r2,r2,r2
   8add8:	2a000504 	addi	r8,r5,20
   8addc:	34000504 	addi	r16,r6,20
   8ade0:	4087883a 	add	r3,r8,r2
   8ade4:	8085883a 	add	r2,r16,r2
   8ade8:	00000106 	br	8adf0 <__mdiff+0x54>
   8adec:	40c0592e 	bgeu	r8,r3,8af54 <__mdiff+0x1b8>
   8adf0:	18ffff04 	addi	r3,r3,-4
   8adf4:	10bfff04 	addi	r2,r2,-4
   8adf8:	19c00017 	ldw	r7,0(r3)
   8adfc:	11400017 	ldw	r5,0(r2)
   8ae00:	397ffa26 	beq	r7,r5,8adec <__ram_exceptions_end+0xfff6abb8>
   8ae04:	3940592e 	bgeu	r7,r5,8af6c <__mdiff+0x1d0>
   8ae08:	9005883a 	mov	r2,r18
   8ae0c:	4023883a 	mov	r17,r8
   8ae10:	9825883a 	mov	r18,r19
   8ae14:	05000044 	movi	r20,1
   8ae18:	1027883a 	mov	r19,r2
   8ae1c:	00000406 	br	8ae30 <__mdiff+0x94>
   8ae20:	18005616 	blt	r3,zero,8af7c <__mdiff+0x1e0>
   8ae24:	34400504 	addi	r17,r6,20
   8ae28:	2c000504 	addi	r16,r5,20
   8ae2c:	0029883a 	mov	r20,zero
   8ae30:	91400117 	ldw	r5,4(r18)
   8ae34:	008a3b80 	call	8a3b8 <_Balloc>
   8ae38:	92400417 	ldw	r9,16(r18)
   8ae3c:	9b000417 	ldw	r12,16(r19)
   8ae40:	12c00504 	addi	r11,r2,20
   8ae44:	4a51883a 	add	r8,r9,r9
   8ae48:	6319883a 	add	r12,r12,r12
   8ae4c:	4211883a 	add	r8,r8,r8
   8ae50:	6319883a 	add	r12,r12,r12
   8ae54:	15000315 	stw	r20,12(r2)
   8ae58:	8211883a 	add	r8,r16,r8
   8ae5c:	8b19883a 	add	r12,r17,r12
   8ae60:	0007883a 	mov	r3,zero
   8ae64:	81400017 	ldw	r5,0(r16)
   8ae68:	89c00017 	ldw	r7,0(r17)
   8ae6c:	59800104 	addi	r6,r11,4
   8ae70:	293fffcc 	andi	r4,r5,65535
   8ae74:	20c7883a 	add	r3,r4,r3
   8ae78:	393fffcc 	andi	r4,r7,65535
   8ae7c:	1909c83a 	sub	r4,r3,r4
   8ae80:	280ad43a 	srli	r5,r5,16
   8ae84:	380ed43a 	srli	r7,r7,16
   8ae88:	2007d43a 	srai	r3,r4,16
   8ae8c:	213fffcc 	andi	r4,r4,65535
   8ae90:	29cbc83a 	sub	r5,r5,r7
   8ae94:	28c7883a 	add	r3,r5,r3
   8ae98:	180a943a 	slli	r5,r3,16
   8ae9c:	8c400104 	addi	r17,r17,4
   8aea0:	84000104 	addi	r16,r16,4
   8aea4:	2908b03a 	or	r4,r5,r4
   8aea8:	59000015 	stw	r4,0(r11)
   8aeac:	1807d43a 	srai	r3,r3,16
   8aeb0:	3015883a 	mov	r10,r6
   8aeb4:	3017883a 	mov	r11,r6
   8aeb8:	8b3fea36 	bltu	r17,r12,8ae64 <__ram_exceptions_end+0xfff6ac30>
   8aebc:	8200162e 	bgeu	r16,r8,8af18 <__mdiff+0x17c>
   8aec0:	8017883a 	mov	r11,r16
   8aec4:	59400017 	ldw	r5,0(r11)
   8aec8:	31800104 	addi	r6,r6,4
   8aecc:	5ac00104 	addi	r11,r11,4
   8aed0:	293fffcc 	andi	r4,r5,65535
   8aed4:	20c7883a 	add	r3,r4,r3
   8aed8:	280ed43a 	srli	r7,r5,16
   8aedc:	180bd43a 	srai	r5,r3,16
   8aee0:	193fffcc 	andi	r4,r3,65535
   8aee4:	3947883a 	add	r3,r7,r5
   8aee8:	180a943a 	slli	r5,r3,16
   8aeec:	1807d43a 	srai	r3,r3,16
   8aef0:	2908b03a 	or	r4,r5,r4
   8aef4:	313fff15 	stw	r4,-4(r6)
   8aef8:	5a3ff236 	bltu	r11,r8,8aec4 <__ram_exceptions_end+0xfff6ac90>
   8aefc:	0406303a 	nor	r3,zero,r16
   8af00:	1a07883a 	add	r3,r3,r8
   8af04:	1806d0ba 	srli	r3,r3,2
   8af08:	18c00044 	addi	r3,r3,1
   8af0c:	18c7883a 	add	r3,r3,r3
   8af10:	18c7883a 	add	r3,r3,r3
   8af14:	50d5883a 	add	r10,r10,r3
   8af18:	50ffff04 	addi	r3,r10,-4
   8af1c:	2000041e 	bne	r4,zero,8af30 <__mdiff+0x194>
   8af20:	18ffff04 	addi	r3,r3,-4
   8af24:	19000017 	ldw	r4,0(r3)
   8af28:	4a7fffc4 	addi	r9,r9,-1
   8af2c:	203ffc26 	beq	r4,zero,8af20 <__ram_exceptions_end+0xfff6acec>
   8af30:	12400415 	stw	r9,16(r2)
   8af34:	dfc00517 	ldw	ra,20(sp)
   8af38:	dd000417 	ldw	r20,16(sp)
   8af3c:	dcc00317 	ldw	r19,12(sp)
   8af40:	dc800217 	ldw	r18,8(sp)
   8af44:	dc400117 	ldw	r17,4(sp)
   8af48:	dc000017 	ldw	r16,0(sp)
   8af4c:	dec00604 	addi	sp,sp,24
   8af50:	f800283a 	ret
   8af54:	000b883a 	mov	r5,zero
   8af58:	008a3b80 	call	8a3b8 <_Balloc>
   8af5c:	00c00044 	movi	r3,1
   8af60:	10c00415 	stw	r3,16(r2)
   8af64:	10000515 	stw	zero,20(r2)
   8af68:	003ff206 	br	8af34 <__ram_exceptions_end+0xfff6ad00>
   8af6c:	8023883a 	mov	r17,r16
   8af70:	0029883a 	mov	r20,zero
   8af74:	4021883a 	mov	r16,r8
   8af78:	003fad06 	br	8ae30 <__ram_exceptions_end+0xfff6abfc>
   8af7c:	9005883a 	mov	r2,r18
   8af80:	94400504 	addi	r17,r18,20
   8af84:	9c000504 	addi	r16,r19,20
   8af88:	9825883a 	mov	r18,r19
   8af8c:	05000044 	movi	r20,1
   8af90:	1027883a 	mov	r19,r2
   8af94:	003fa606 	br	8ae30 <__ram_exceptions_end+0xfff6abfc>

0008af98 <__ulp>:
   8af98:	295ffc2c 	andhi	r5,r5,32752
   8af9c:	00bf3034 	movhi	r2,64704
   8afa0:	2887883a 	add	r3,r5,r2
   8afa4:	00c0020e 	bge	zero,r3,8afb0 <__ulp+0x18>
   8afa8:	0005883a 	mov	r2,zero
   8afac:	f800283a 	ret
   8afb0:	00c7c83a 	sub	r3,zero,r3
   8afb4:	1807d53a 	srai	r3,r3,20
   8afb8:	008004c4 	movi	r2,19
   8afbc:	10c00b0e 	bge	r2,r3,8afec <__ulp+0x54>
   8afc0:	18bffb04 	addi	r2,r3,-20
   8afc4:	01000784 	movi	r4,30
   8afc8:	0007883a 	mov	r3,zero
   8afcc:	20800516 	blt	r4,r2,8afe4 <__ulp+0x4c>
   8afd0:	010007c4 	movi	r4,31
   8afd4:	2089c83a 	sub	r4,r4,r2
   8afd8:	00800044 	movi	r2,1
   8afdc:	1104983a 	sll	r2,r2,r4
   8afe0:	f800283a 	ret
   8afe4:	00800044 	movi	r2,1
   8afe8:	f800283a 	ret
   8afec:	01400234 	movhi	r5,8
   8aff0:	28c7d83a 	sra	r3,r5,r3
   8aff4:	0005883a 	mov	r2,zero
   8aff8:	f800283a 	ret

0008affc <__b2d>:
   8affc:	defffa04 	addi	sp,sp,-24
   8b000:	dc000015 	stw	r16,0(sp)
   8b004:	24000417 	ldw	r16,16(r4)
   8b008:	dc400115 	stw	r17,4(sp)
   8b00c:	24400504 	addi	r17,r4,20
   8b010:	8421883a 	add	r16,r16,r16
   8b014:	8421883a 	add	r16,r16,r16
   8b018:	8c21883a 	add	r16,r17,r16
   8b01c:	dc800215 	stw	r18,8(sp)
   8b020:	84bfff17 	ldw	r18,-4(r16)
   8b024:	dd000415 	stw	r20,16(sp)
   8b028:	dcc00315 	stw	r19,12(sp)
   8b02c:	9009883a 	mov	r4,r18
   8b030:	2829883a 	mov	r20,r5
   8b034:	dfc00515 	stw	ra,20(sp)
   8b038:	008a6d40 	call	8a6d4 <__hi0bits>
   8b03c:	00c00804 	movi	r3,32
   8b040:	1889c83a 	sub	r4,r3,r2
   8b044:	a1000015 	stw	r4,0(r20)
   8b048:	01000284 	movi	r4,10
   8b04c:	84ffff04 	addi	r19,r16,-4
   8b050:	20801216 	blt	r4,r2,8b09c <__b2d+0xa0>
   8b054:	018002c4 	movi	r6,11
   8b058:	308dc83a 	sub	r6,r6,r2
   8b05c:	9186d83a 	srl	r3,r18,r6
   8b060:	18cffc34 	orhi	r3,r3,16368
   8b064:	8cc0212e 	bgeu	r17,r19,8b0ec <__b2d+0xf0>
   8b068:	813ffe17 	ldw	r4,-8(r16)
   8b06c:	218cd83a 	srl	r6,r4,r6
   8b070:	10800544 	addi	r2,r2,21
   8b074:	9084983a 	sll	r2,r18,r2
   8b078:	1184b03a 	or	r2,r2,r6
   8b07c:	dfc00517 	ldw	ra,20(sp)
   8b080:	dd000417 	ldw	r20,16(sp)
   8b084:	dcc00317 	ldw	r19,12(sp)
   8b088:	dc800217 	ldw	r18,8(sp)
   8b08c:	dc400117 	ldw	r17,4(sp)
   8b090:	dc000017 	ldw	r16,0(sp)
   8b094:	dec00604 	addi	sp,sp,24
   8b098:	f800283a 	ret
   8b09c:	8cc00f2e 	bgeu	r17,r19,8b0dc <__b2d+0xe0>
   8b0a0:	117ffd44 	addi	r5,r2,-11
   8b0a4:	80bffe17 	ldw	r2,-8(r16)
   8b0a8:	28000e26 	beq	r5,zero,8b0e4 <__b2d+0xe8>
   8b0ac:	1949c83a 	sub	r4,r3,r5
   8b0b0:	9164983a 	sll	r18,r18,r5
   8b0b4:	1106d83a 	srl	r3,r2,r4
   8b0b8:	81bffe04 	addi	r6,r16,-8
   8b0bc:	948ffc34 	orhi	r18,r18,16368
   8b0c0:	90c6b03a 	or	r3,r18,r3
   8b0c4:	89800e2e 	bgeu	r17,r6,8b100 <__b2d+0x104>
   8b0c8:	81bffd17 	ldw	r6,-12(r16)
   8b0cc:	1144983a 	sll	r2,r2,r5
   8b0d0:	310ad83a 	srl	r5,r6,r4
   8b0d4:	2884b03a 	or	r2,r5,r2
   8b0d8:	003fe806 	br	8b07c <__ram_exceptions_end+0xfff6ae48>
   8b0dc:	10bffd44 	addi	r2,r2,-11
   8b0e0:	1000041e 	bne	r2,zero,8b0f4 <__b2d+0xf8>
   8b0e4:	90cffc34 	orhi	r3,r18,16368
   8b0e8:	003fe406 	br	8b07c <__ram_exceptions_end+0xfff6ae48>
   8b0ec:	000d883a 	mov	r6,zero
   8b0f0:	003fdf06 	br	8b070 <__ram_exceptions_end+0xfff6ae3c>
   8b0f4:	90a4983a 	sll	r18,r18,r2
   8b0f8:	0005883a 	mov	r2,zero
   8b0fc:	003ff906 	br	8b0e4 <__ram_exceptions_end+0xfff6aeb0>
   8b100:	1144983a 	sll	r2,r2,r5
   8b104:	003fdd06 	br	8b07c <__ram_exceptions_end+0xfff6ae48>

0008b108 <__d2b>:
   8b108:	defff804 	addi	sp,sp,-32
   8b10c:	dc000215 	stw	r16,8(sp)
   8b110:	3021883a 	mov	r16,r6
   8b114:	dc400315 	stw	r17,12(sp)
   8b118:	8022907a 	slli	r17,r16,1
   8b11c:	dd000615 	stw	r20,24(sp)
   8b120:	2829883a 	mov	r20,r5
   8b124:	01400044 	movi	r5,1
   8b128:	dcc00515 	stw	r19,20(sp)
   8b12c:	dc800415 	stw	r18,16(sp)
   8b130:	dfc00715 	stw	ra,28(sp)
   8b134:	3825883a 	mov	r18,r7
   8b138:	8822d57a 	srli	r17,r17,21
   8b13c:	008a3b80 	call	8a3b8 <_Balloc>
   8b140:	1027883a 	mov	r19,r2
   8b144:	00800434 	movhi	r2,16
   8b148:	10bfffc4 	addi	r2,r2,-1
   8b14c:	808c703a 	and	r6,r16,r2
   8b150:	88000126 	beq	r17,zero,8b158 <__d2b+0x50>
   8b154:	31800434 	orhi	r6,r6,16
   8b158:	d9800015 	stw	r6,0(sp)
   8b15c:	a0002426 	beq	r20,zero,8b1f0 <__d2b+0xe8>
   8b160:	d9000104 	addi	r4,sp,4
   8b164:	dd000115 	stw	r20,4(sp)
   8b168:	008a73c0 	call	8a73c <__lo0bits>
   8b16c:	d8c00017 	ldw	r3,0(sp)
   8b170:	10002f1e 	bne	r2,zero,8b230 <__d2b+0x128>
   8b174:	d9000117 	ldw	r4,4(sp)
   8b178:	99000515 	stw	r4,20(r19)
   8b17c:	1821003a 	cmpeq	r16,r3,zero
   8b180:	01000084 	movi	r4,2
   8b184:	2421c83a 	sub	r16,r4,r16
   8b188:	98c00615 	stw	r3,24(r19)
   8b18c:	9c000415 	stw	r16,16(r19)
   8b190:	88001f1e 	bne	r17,zero,8b210 <__d2b+0x108>
   8b194:	10bef384 	addi	r2,r2,-1074
   8b198:	90800015 	stw	r2,0(r18)
   8b19c:	00900034 	movhi	r2,16384
   8b1a0:	10bfffc4 	addi	r2,r2,-1
   8b1a4:	8085883a 	add	r2,r16,r2
   8b1a8:	1085883a 	add	r2,r2,r2
   8b1ac:	1085883a 	add	r2,r2,r2
   8b1b0:	9885883a 	add	r2,r19,r2
   8b1b4:	11000517 	ldw	r4,20(r2)
   8b1b8:	8020917a 	slli	r16,r16,5
   8b1bc:	008a6d40 	call	8a6d4 <__hi0bits>
   8b1c0:	d8c00817 	ldw	r3,32(sp)
   8b1c4:	8085c83a 	sub	r2,r16,r2
   8b1c8:	18800015 	stw	r2,0(r3)
   8b1cc:	9805883a 	mov	r2,r19
   8b1d0:	dfc00717 	ldw	ra,28(sp)
   8b1d4:	dd000617 	ldw	r20,24(sp)
   8b1d8:	dcc00517 	ldw	r19,20(sp)
   8b1dc:	dc800417 	ldw	r18,16(sp)
   8b1e0:	dc400317 	ldw	r17,12(sp)
   8b1e4:	dc000217 	ldw	r16,8(sp)
   8b1e8:	dec00804 	addi	sp,sp,32
   8b1ec:	f800283a 	ret
   8b1f0:	d809883a 	mov	r4,sp
   8b1f4:	008a73c0 	call	8a73c <__lo0bits>
   8b1f8:	d8c00017 	ldw	r3,0(sp)
   8b1fc:	04000044 	movi	r16,1
   8b200:	9c000415 	stw	r16,16(r19)
   8b204:	98c00515 	stw	r3,20(r19)
   8b208:	10800804 	addi	r2,r2,32
   8b20c:	883fe126 	beq	r17,zero,8b194 <__ram_exceptions_end+0xfff6af60>
   8b210:	00c00d44 	movi	r3,53
   8b214:	8c7ef344 	addi	r17,r17,-1075
   8b218:	88a3883a 	add	r17,r17,r2
   8b21c:	1885c83a 	sub	r2,r3,r2
   8b220:	d8c00817 	ldw	r3,32(sp)
   8b224:	94400015 	stw	r17,0(r18)
   8b228:	18800015 	stw	r2,0(r3)
   8b22c:	003fe706 	br	8b1cc <__ram_exceptions_end+0xfff6af98>
   8b230:	01000804 	movi	r4,32
   8b234:	2089c83a 	sub	r4,r4,r2
   8b238:	1908983a 	sll	r4,r3,r4
   8b23c:	d9400117 	ldw	r5,4(sp)
   8b240:	1886d83a 	srl	r3,r3,r2
   8b244:	2148b03a 	or	r4,r4,r5
   8b248:	99000515 	stw	r4,20(r19)
   8b24c:	d8c00015 	stw	r3,0(sp)
   8b250:	003fca06 	br	8b17c <__ram_exceptions_end+0xfff6af48>

0008b254 <__ratio>:
   8b254:	defff904 	addi	sp,sp,-28
   8b258:	dc400315 	stw	r17,12(sp)
   8b25c:	2823883a 	mov	r17,r5
   8b260:	d9400104 	addi	r5,sp,4
   8b264:	dfc00615 	stw	ra,24(sp)
   8b268:	dcc00515 	stw	r19,20(sp)
   8b26c:	dc800415 	stw	r18,16(sp)
   8b270:	2027883a 	mov	r19,r4
   8b274:	dc000215 	stw	r16,8(sp)
   8b278:	008affc0 	call	8affc <__b2d>
   8b27c:	d80b883a 	mov	r5,sp
   8b280:	8809883a 	mov	r4,r17
   8b284:	1025883a 	mov	r18,r2
   8b288:	1821883a 	mov	r16,r3
   8b28c:	008affc0 	call	8affc <__b2d>
   8b290:	8a000417 	ldw	r8,16(r17)
   8b294:	99000417 	ldw	r4,16(r19)
   8b298:	d9400117 	ldw	r5,4(sp)
   8b29c:	2209c83a 	sub	r4,r4,r8
   8b2a0:	2010917a 	slli	r8,r4,5
   8b2a4:	d9000017 	ldw	r4,0(sp)
   8b2a8:	2909c83a 	sub	r4,r5,r4
   8b2ac:	4109883a 	add	r4,r8,r4
   8b2b0:	01000e0e 	bge	zero,r4,8b2ec <__ratio+0x98>
   8b2b4:	2008953a 	slli	r4,r4,20
   8b2b8:	2421883a 	add	r16,r4,r16
   8b2bc:	100d883a 	mov	r6,r2
   8b2c0:	180f883a 	mov	r7,r3
   8b2c4:	9009883a 	mov	r4,r18
   8b2c8:	800b883a 	mov	r5,r16
   8b2cc:	00974a80 	call	974a8 <__divdf3>
   8b2d0:	dfc00617 	ldw	ra,24(sp)
   8b2d4:	dcc00517 	ldw	r19,20(sp)
   8b2d8:	dc800417 	ldw	r18,16(sp)
   8b2dc:	dc400317 	ldw	r17,12(sp)
   8b2e0:	dc000217 	ldw	r16,8(sp)
   8b2e4:	dec00704 	addi	sp,sp,28
   8b2e8:	f800283a 	ret
   8b2ec:	2008953a 	slli	r4,r4,20
   8b2f0:	1907c83a 	sub	r3,r3,r4
   8b2f4:	003ff106 	br	8b2bc <__ram_exceptions_end+0xfff6b088>

0008b2f8 <_mprec_log10>:
   8b2f8:	defffe04 	addi	sp,sp,-8
   8b2fc:	dc000015 	stw	r16,0(sp)
   8b300:	dfc00115 	stw	ra,4(sp)
   8b304:	008005c4 	movi	r2,23
   8b308:	2021883a 	mov	r16,r4
   8b30c:	11000d0e 	bge	r2,r4,8b344 <_mprec_log10+0x4c>
   8b310:	0005883a 	mov	r2,zero
   8b314:	00cffc34 	movhi	r3,16368
   8b318:	843fffc4 	addi	r16,r16,-1
   8b31c:	000d883a 	mov	r6,zero
   8b320:	01d00934 	movhi	r7,16420
   8b324:	1009883a 	mov	r4,r2
   8b328:	180b883a 	mov	r5,r3
   8b32c:	00980d00 	call	980d0 <__muldf3>
   8b330:	803ff91e 	bne	r16,zero,8b318 <__ram_exceptions_end+0xfff6b0e4>
   8b334:	dfc00117 	ldw	ra,4(sp)
   8b338:	dc000017 	ldw	r16,0(sp)
   8b33c:	dec00204 	addi	sp,sp,8
   8b340:	f800283a 	ret
   8b344:	202090fa 	slli	r16,r4,3
   8b348:	008002b4 	movhi	r2,10
   8b34c:	10b94d04 	addi	r2,r2,-6860
   8b350:	1421883a 	add	r16,r2,r16
   8b354:	80800017 	ldw	r2,0(r16)
   8b358:	80c00117 	ldw	r3,4(r16)
   8b35c:	dfc00117 	ldw	ra,4(sp)
   8b360:	dc000017 	ldw	r16,0(sp)
   8b364:	dec00204 	addi	sp,sp,8
   8b368:	f800283a 	ret

0008b36c <__copybits>:
   8b36c:	297fffc4 	addi	r5,r5,-1
   8b370:	280fd17a 	srai	r7,r5,5
   8b374:	30c00417 	ldw	r3,16(r6)
   8b378:	30800504 	addi	r2,r6,20
   8b37c:	39c00044 	addi	r7,r7,1
   8b380:	18c7883a 	add	r3,r3,r3
   8b384:	39cf883a 	add	r7,r7,r7
   8b388:	18c7883a 	add	r3,r3,r3
   8b38c:	39cf883a 	add	r7,r7,r7
   8b390:	10c7883a 	add	r3,r2,r3
   8b394:	21cf883a 	add	r7,r4,r7
   8b398:	10c00d2e 	bgeu	r2,r3,8b3d0 <__copybits+0x64>
   8b39c:	200b883a 	mov	r5,r4
   8b3a0:	12000017 	ldw	r8,0(r2)
   8b3a4:	29400104 	addi	r5,r5,4
   8b3a8:	10800104 	addi	r2,r2,4
   8b3ac:	2a3fff15 	stw	r8,-4(r5)
   8b3b0:	10fffb36 	bltu	r2,r3,8b3a0 <__ram_exceptions_end+0xfff6b16c>
   8b3b4:	1985c83a 	sub	r2,r3,r6
   8b3b8:	10bffac4 	addi	r2,r2,-21
   8b3bc:	1004d0ba 	srli	r2,r2,2
   8b3c0:	10800044 	addi	r2,r2,1
   8b3c4:	1085883a 	add	r2,r2,r2
   8b3c8:	1085883a 	add	r2,r2,r2
   8b3cc:	2089883a 	add	r4,r4,r2
   8b3d0:	21c0032e 	bgeu	r4,r7,8b3e0 <__copybits+0x74>
   8b3d4:	20000015 	stw	zero,0(r4)
   8b3d8:	21000104 	addi	r4,r4,4
   8b3dc:	21fffd36 	bltu	r4,r7,8b3d4 <__ram_exceptions_end+0xfff6b1a0>
   8b3e0:	f800283a 	ret

0008b3e4 <__any_on>:
   8b3e4:	20c00417 	ldw	r3,16(r4)
   8b3e8:	2805d17a 	srai	r2,r5,5
   8b3ec:	21000504 	addi	r4,r4,20
   8b3f0:	18800d0e 	bge	r3,r2,8b428 <__any_on+0x44>
   8b3f4:	18c7883a 	add	r3,r3,r3
   8b3f8:	18c7883a 	add	r3,r3,r3
   8b3fc:	20c7883a 	add	r3,r4,r3
   8b400:	20c0192e 	bgeu	r4,r3,8b468 <__any_on+0x84>
   8b404:	18bfff17 	ldw	r2,-4(r3)
   8b408:	18ffff04 	addi	r3,r3,-4
   8b40c:	1000041e 	bne	r2,zero,8b420 <__any_on+0x3c>
   8b410:	20c0142e 	bgeu	r4,r3,8b464 <__any_on+0x80>
   8b414:	18ffff04 	addi	r3,r3,-4
   8b418:	19400017 	ldw	r5,0(r3)
   8b41c:	283ffc26 	beq	r5,zero,8b410 <__ram_exceptions_end+0xfff6b1dc>
   8b420:	00800044 	movi	r2,1
   8b424:	f800283a 	ret
   8b428:	10c00a0e 	bge	r2,r3,8b454 <__any_on+0x70>
   8b42c:	1085883a 	add	r2,r2,r2
   8b430:	1085883a 	add	r2,r2,r2
   8b434:	294007cc 	andi	r5,r5,31
   8b438:	2087883a 	add	r3,r4,r2
   8b43c:	283ff026 	beq	r5,zero,8b400 <__ram_exceptions_end+0xfff6b1cc>
   8b440:	19800017 	ldw	r6,0(r3)
   8b444:	3144d83a 	srl	r2,r6,r5
   8b448:	114a983a 	sll	r5,r2,r5
   8b44c:	317ff41e 	bne	r6,r5,8b420 <__ram_exceptions_end+0xfff6b1ec>
   8b450:	003feb06 	br	8b400 <__ram_exceptions_end+0xfff6b1cc>
   8b454:	1085883a 	add	r2,r2,r2
   8b458:	1085883a 	add	r2,r2,r2
   8b45c:	2087883a 	add	r3,r4,r2
   8b460:	003fe706 	br	8b400 <__ram_exceptions_end+0xfff6b1cc>
   8b464:	f800283a 	ret
   8b468:	0005883a 	mov	r2,zero
   8b46c:	f800283a 	ret

0008b470 <_putc_r>:
   8b470:	defffc04 	addi	sp,sp,-16
   8b474:	dc000215 	stw	r16,8(sp)
   8b478:	dfc00315 	stw	ra,12(sp)
   8b47c:	2021883a 	mov	r16,r4
   8b480:	20000226 	beq	r4,zero,8b48c <_putc_r+0x1c>
   8b484:	20800e17 	ldw	r2,56(r4)
   8b488:	10001b26 	beq	r2,zero,8b4f8 <_putc_r+0x88>
   8b48c:	30800217 	ldw	r2,8(r6)
   8b490:	10bfffc4 	addi	r2,r2,-1
   8b494:	30800215 	stw	r2,8(r6)
   8b498:	10000a16 	blt	r2,zero,8b4c4 <_putc_r+0x54>
   8b49c:	30800017 	ldw	r2,0(r6)
   8b4a0:	11400005 	stb	r5,0(r2)
   8b4a4:	30800017 	ldw	r2,0(r6)
   8b4a8:	10c00044 	addi	r3,r2,1
   8b4ac:	30c00015 	stw	r3,0(r6)
   8b4b0:	10800003 	ldbu	r2,0(r2)
   8b4b4:	dfc00317 	ldw	ra,12(sp)
   8b4b8:	dc000217 	ldw	r16,8(sp)
   8b4bc:	dec00404 	addi	sp,sp,16
   8b4c0:	f800283a 	ret
   8b4c4:	30c00617 	ldw	r3,24(r6)
   8b4c8:	10c00616 	blt	r2,r3,8b4e4 <_putc_r+0x74>
   8b4cc:	30800017 	ldw	r2,0(r6)
   8b4d0:	00c00284 	movi	r3,10
   8b4d4:	11400005 	stb	r5,0(r2)
   8b4d8:	30800017 	ldw	r2,0(r6)
   8b4dc:	11400003 	ldbu	r5,0(r2)
   8b4e0:	28fff11e 	bne	r5,r3,8b4a8 <__ram_exceptions_end+0xfff6b274>
   8b4e4:	8009883a 	mov	r4,r16
   8b4e8:	dfc00317 	ldw	ra,12(sp)
   8b4ec:	dc000217 	ldw	r16,8(sp)
   8b4f0:	dec00404 	addi	sp,sp,16
   8b4f4:	00932fc1 	jmpi	932fc <__swbuf_r>
   8b4f8:	d9400015 	stw	r5,0(sp)
   8b4fc:	d9800115 	stw	r6,4(sp)
   8b500:	00890300 	call	89030 <__sinit>
   8b504:	d9800117 	ldw	r6,4(sp)
   8b508:	d9400017 	ldw	r5,0(sp)
   8b50c:	003fdf06 	br	8b48c <__ram_exceptions_end+0xfff6b258>

0008b510 <putc>:
   8b510:	008002b4 	movhi	r2,10
   8b514:	defffc04 	addi	sp,sp,-16
   8b518:	10817a04 	addi	r2,r2,1512
   8b51c:	dc000115 	stw	r16,4(sp)
   8b520:	14000017 	ldw	r16,0(r2)
   8b524:	dc400215 	stw	r17,8(sp)
   8b528:	dfc00315 	stw	ra,12(sp)
   8b52c:	2023883a 	mov	r17,r4
   8b530:	80000226 	beq	r16,zero,8b53c <putc+0x2c>
   8b534:	80800e17 	ldw	r2,56(r16)
   8b538:	10001a26 	beq	r2,zero,8b5a4 <putc+0x94>
   8b53c:	28800217 	ldw	r2,8(r5)
   8b540:	10bfffc4 	addi	r2,r2,-1
   8b544:	28800215 	stw	r2,8(r5)
   8b548:	10000b16 	blt	r2,zero,8b578 <putc+0x68>
   8b54c:	28800017 	ldw	r2,0(r5)
   8b550:	14400005 	stb	r17,0(r2)
   8b554:	28800017 	ldw	r2,0(r5)
   8b558:	10c00044 	addi	r3,r2,1
   8b55c:	28c00015 	stw	r3,0(r5)
   8b560:	10800003 	ldbu	r2,0(r2)
   8b564:	dfc00317 	ldw	ra,12(sp)
   8b568:	dc400217 	ldw	r17,8(sp)
   8b56c:	dc000117 	ldw	r16,4(sp)
   8b570:	dec00404 	addi	sp,sp,16
   8b574:	f800283a 	ret
   8b578:	28c00617 	ldw	r3,24(r5)
   8b57c:	10c00e16 	blt	r2,r3,8b5b8 <putc+0xa8>
   8b580:	28800017 	ldw	r2,0(r5)
   8b584:	01000284 	movi	r4,10
   8b588:	14400005 	stb	r17,0(r2)
   8b58c:	28800017 	ldw	r2,0(r5)
   8b590:	10c00003 	ldbu	r3,0(r2)
   8b594:	193ff01e 	bne	r3,r4,8b558 <__ram_exceptions_end+0xfff6b324>
   8b598:	280d883a 	mov	r6,r5
   8b59c:	180b883a 	mov	r5,r3
   8b5a0:	00000706 	br	8b5c0 <putc+0xb0>
   8b5a4:	8009883a 	mov	r4,r16
   8b5a8:	d9400015 	stw	r5,0(sp)
   8b5ac:	00890300 	call	89030 <__sinit>
   8b5b0:	d9400017 	ldw	r5,0(sp)
   8b5b4:	003fe106 	br	8b53c <__ram_exceptions_end+0xfff6b308>
   8b5b8:	280d883a 	mov	r6,r5
   8b5bc:	880b883a 	mov	r5,r17
   8b5c0:	8009883a 	mov	r4,r16
   8b5c4:	dfc00317 	ldw	ra,12(sp)
   8b5c8:	dc400217 	ldw	r17,8(sp)
   8b5cc:	dc000117 	ldw	r16,4(sp)
   8b5d0:	dec00404 	addi	sp,sp,16
   8b5d4:	00932fc1 	jmpi	932fc <__swbuf_r>

0008b5d8 <_read_r>:
   8b5d8:	defffd04 	addi	sp,sp,-12
   8b5dc:	2805883a 	mov	r2,r5
   8b5e0:	dc000015 	stw	r16,0(sp)
   8b5e4:	040002b4 	movhi	r16,10
   8b5e8:	dc400115 	stw	r17,4(sp)
   8b5ec:	300b883a 	mov	r5,r6
   8b5f0:	8408d104 	addi	r16,r16,9028
   8b5f4:	2023883a 	mov	r17,r4
   8b5f8:	380d883a 	mov	r6,r7
   8b5fc:	1009883a 	mov	r4,r2
   8b600:	dfc00215 	stw	ra,8(sp)
   8b604:	80000015 	stw	zero,0(r16)
   8b608:	0099d240 	call	99d24 <read>
   8b60c:	00ffffc4 	movi	r3,-1
   8b610:	10c00526 	beq	r2,r3,8b628 <_read_r+0x50>
   8b614:	dfc00217 	ldw	ra,8(sp)
   8b618:	dc400117 	ldw	r17,4(sp)
   8b61c:	dc000017 	ldw	r16,0(sp)
   8b620:	dec00304 	addi	sp,sp,12
   8b624:	f800283a 	ret
   8b628:	80c00017 	ldw	r3,0(r16)
   8b62c:	183ff926 	beq	r3,zero,8b614 <__ram_exceptions_end+0xfff6b3e0>
   8b630:	88c00015 	stw	r3,0(r17)
   8b634:	003ff706 	br	8b614 <__ram_exceptions_end+0xfff6b3e0>

0008b638 <_realloc_r>:
   8b638:	defff604 	addi	sp,sp,-40
   8b63c:	dc800215 	stw	r18,8(sp)
   8b640:	dfc00915 	stw	ra,36(sp)
   8b644:	df000815 	stw	fp,32(sp)
   8b648:	ddc00715 	stw	r23,28(sp)
   8b64c:	dd800615 	stw	r22,24(sp)
   8b650:	dd400515 	stw	r21,20(sp)
   8b654:	dd000415 	stw	r20,16(sp)
   8b658:	dcc00315 	stw	r19,12(sp)
   8b65c:	dc400115 	stw	r17,4(sp)
   8b660:	dc000015 	stw	r16,0(sp)
   8b664:	3025883a 	mov	r18,r6
   8b668:	2800b726 	beq	r5,zero,8b948 <_realloc_r+0x310>
   8b66c:	282b883a 	mov	r21,r5
   8b670:	2029883a 	mov	r20,r4
   8b674:	0099ca00 	call	99ca0 <__malloc_lock>
   8b678:	a8bfff17 	ldw	r2,-4(r21)
   8b67c:	043fff04 	movi	r16,-4
   8b680:	90c002c4 	addi	r3,r18,11
   8b684:	01000584 	movi	r4,22
   8b688:	acfffe04 	addi	r19,r21,-8
   8b68c:	1420703a 	and	r16,r2,r16
   8b690:	20c0332e 	bgeu	r4,r3,8b760 <_realloc_r+0x128>
   8b694:	047ffe04 	movi	r17,-8
   8b698:	1c62703a 	and	r17,r3,r17
   8b69c:	8807883a 	mov	r3,r17
   8b6a0:	88005816 	blt	r17,zero,8b804 <_realloc_r+0x1cc>
   8b6a4:	8c805736 	bltu	r17,r18,8b804 <_realloc_r+0x1cc>
   8b6a8:	80c0300e 	bge	r16,r3,8b76c <_realloc_r+0x134>
   8b6ac:	070002b4 	movhi	fp,10
   8b6b0:	e73b5b04 	addi	fp,fp,-4756
   8b6b4:	e1c00217 	ldw	r7,8(fp)
   8b6b8:	9c09883a 	add	r4,r19,r16
   8b6bc:	22000117 	ldw	r8,4(r4)
   8b6c0:	21c06326 	beq	r4,r7,8b850 <_realloc_r+0x218>
   8b6c4:	017fff84 	movi	r5,-2
   8b6c8:	414a703a 	and	r5,r8,r5
   8b6cc:	214b883a 	add	r5,r4,r5
   8b6d0:	29800117 	ldw	r6,4(r5)
   8b6d4:	3180004c 	andi	r6,r6,1
   8b6d8:	30003f26 	beq	r6,zero,8b7d8 <_realloc_r+0x1a0>
   8b6dc:	1080004c 	andi	r2,r2,1
   8b6e0:	10008326 	beq	r2,zero,8b8f0 <_realloc_r+0x2b8>
   8b6e4:	900b883a 	mov	r5,r18
   8b6e8:	a009883a 	mov	r4,r20
   8b6ec:	008235c0 	call	8235c <_malloc_r>
   8b6f0:	1025883a 	mov	r18,r2
   8b6f4:	10011e26 	beq	r2,zero,8bb70 <_realloc_r+0x538>
   8b6f8:	a93fff17 	ldw	r4,-4(r21)
   8b6fc:	10fffe04 	addi	r3,r2,-8
   8b700:	00bfff84 	movi	r2,-2
   8b704:	2084703a 	and	r2,r4,r2
   8b708:	9885883a 	add	r2,r19,r2
   8b70c:	1880ee26 	beq	r3,r2,8bac8 <_realloc_r+0x490>
   8b710:	81bfff04 	addi	r6,r16,-4
   8b714:	00800904 	movi	r2,36
   8b718:	1180b836 	bltu	r2,r6,8b9fc <_realloc_r+0x3c4>
   8b71c:	00c004c4 	movi	r3,19
   8b720:	19809636 	bltu	r3,r6,8b97c <_realloc_r+0x344>
   8b724:	9005883a 	mov	r2,r18
   8b728:	a807883a 	mov	r3,r21
   8b72c:	19000017 	ldw	r4,0(r3)
   8b730:	11000015 	stw	r4,0(r2)
   8b734:	19000117 	ldw	r4,4(r3)
   8b738:	11000115 	stw	r4,4(r2)
   8b73c:	18c00217 	ldw	r3,8(r3)
   8b740:	10c00215 	stw	r3,8(r2)
   8b744:	a80b883a 	mov	r5,r21
   8b748:	a009883a 	mov	r4,r20
   8b74c:	00891a40 	call	891a4 <_free_r>
   8b750:	a009883a 	mov	r4,r20
   8b754:	0099cc40 	call	99cc4 <__malloc_unlock>
   8b758:	9005883a 	mov	r2,r18
   8b75c:	00001206 	br	8b7a8 <_realloc_r+0x170>
   8b760:	00c00404 	movi	r3,16
   8b764:	1823883a 	mov	r17,r3
   8b768:	003fce06 	br	8b6a4 <__ram_exceptions_end+0xfff6b470>
   8b76c:	a825883a 	mov	r18,r21
   8b770:	8445c83a 	sub	r2,r16,r17
   8b774:	00c003c4 	movi	r3,15
   8b778:	18802636 	bltu	r3,r2,8b814 <_realloc_r+0x1dc>
   8b77c:	99800117 	ldw	r6,4(r19)
   8b780:	9c07883a 	add	r3,r19,r16
   8b784:	3180004c 	andi	r6,r6,1
   8b788:	3420b03a 	or	r16,r6,r16
   8b78c:	9c000115 	stw	r16,4(r19)
   8b790:	18800117 	ldw	r2,4(r3)
   8b794:	10800054 	ori	r2,r2,1
   8b798:	18800115 	stw	r2,4(r3)
   8b79c:	a009883a 	mov	r4,r20
   8b7a0:	0099cc40 	call	99cc4 <__malloc_unlock>
   8b7a4:	9005883a 	mov	r2,r18
   8b7a8:	dfc00917 	ldw	ra,36(sp)
   8b7ac:	df000817 	ldw	fp,32(sp)
   8b7b0:	ddc00717 	ldw	r23,28(sp)
   8b7b4:	dd800617 	ldw	r22,24(sp)
   8b7b8:	dd400517 	ldw	r21,20(sp)
   8b7bc:	dd000417 	ldw	r20,16(sp)
   8b7c0:	dcc00317 	ldw	r19,12(sp)
   8b7c4:	dc800217 	ldw	r18,8(sp)
   8b7c8:	dc400117 	ldw	r17,4(sp)
   8b7cc:	dc000017 	ldw	r16,0(sp)
   8b7d0:	dec00a04 	addi	sp,sp,40
   8b7d4:	f800283a 	ret
   8b7d8:	017fff04 	movi	r5,-4
   8b7dc:	414a703a 	and	r5,r8,r5
   8b7e0:	814d883a 	add	r6,r16,r5
   8b7e4:	30c01f16 	blt	r6,r3,8b864 <_realloc_r+0x22c>
   8b7e8:	20800317 	ldw	r2,12(r4)
   8b7ec:	20c00217 	ldw	r3,8(r4)
   8b7f0:	a825883a 	mov	r18,r21
   8b7f4:	3021883a 	mov	r16,r6
   8b7f8:	18800315 	stw	r2,12(r3)
   8b7fc:	10c00215 	stw	r3,8(r2)
   8b800:	003fdb06 	br	8b770 <__ram_exceptions_end+0xfff6b53c>
   8b804:	00800304 	movi	r2,12
   8b808:	a0800015 	stw	r2,0(r20)
   8b80c:	0005883a 	mov	r2,zero
   8b810:	003fe506 	br	8b7a8 <__ram_exceptions_end+0xfff6b574>
   8b814:	98c00117 	ldw	r3,4(r19)
   8b818:	9c4b883a 	add	r5,r19,r17
   8b81c:	11000054 	ori	r4,r2,1
   8b820:	18c0004c 	andi	r3,r3,1
   8b824:	1c62b03a 	or	r17,r3,r17
   8b828:	9c400115 	stw	r17,4(r19)
   8b82c:	29000115 	stw	r4,4(r5)
   8b830:	2885883a 	add	r2,r5,r2
   8b834:	10c00117 	ldw	r3,4(r2)
   8b838:	29400204 	addi	r5,r5,8
   8b83c:	a009883a 	mov	r4,r20
   8b840:	18c00054 	ori	r3,r3,1
   8b844:	10c00115 	stw	r3,4(r2)
   8b848:	00891a40 	call	891a4 <_free_r>
   8b84c:	003fd306 	br	8b79c <__ram_exceptions_end+0xfff6b568>
   8b850:	017fff04 	movi	r5,-4
   8b854:	414a703a 	and	r5,r8,r5
   8b858:	89800404 	addi	r6,r17,16
   8b85c:	8151883a 	add	r8,r16,r5
   8b860:	4180590e 	bge	r8,r6,8b9c8 <_realloc_r+0x390>
   8b864:	1080004c 	andi	r2,r2,1
   8b868:	103f9e1e 	bne	r2,zero,8b6e4 <__ram_exceptions_end+0xfff6b4b0>
   8b86c:	adbffe17 	ldw	r22,-8(r21)
   8b870:	00bfff04 	movi	r2,-4
   8b874:	9dadc83a 	sub	r22,r19,r22
   8b878:	b1800117 	ldw	r6,4(r22)
   8b87c:	3084703a 	and	r2,r6,r2
   8b880:	20002026 	beq	r4,zero,8b904 <_realloc_r+0x2cc>
   8b884:	80af883a 	add	r23,r16,r2
   8b888:	b96f883a 	add	r23,r23,r5
   8b88c:	21c05f26 	beq	r4,r7,8ba0c <_realloc_r+0x3d4>
   8b890:	b8c01c16 	blt	r23,r3,8b904 <_realloc_r+0x2cc>
   8b894:	20800317 	ldw	r2,12(r4)
   8b898:	20c00217 	ldw	r3,8(r4)
   8b89c:	81bfff04 	addi	r6,r16,-4
   8b8a0:	01000904 	movi	r4,36
   8b8a4:	18800315 	stw	r2,12(r3)
   8b8a8:	10c00215 	stw	r3,8(r2)
   8b8ac:	b0c00217 	ldw	r3,8(r22)
   8b8b0:	b0800317 	ldw	r2,12(r22)
   8b8b4:	b4800204 	addi	r18,r22,8
   8b8b8:	18800315 	stw	r2,12(r3)
   8b8bc:	10c00215 	stw	r3,8(r2)
   8b8c0:	21801b36 	bltu	r4,r6,8b930 <_realloc_r+0x2f8>
   8b8c4:	008004c4 	movi	r2,19
   8b8c8:	1180352e 	bgeu	r2,r6,8b9a0 <_realloc_r+0x368>
   8b8cc:	a8800017 	ldw	r2,0(r21)
   8b8d0:	b0800215 	stw	r2,8(r22)
   8b8d4:	a8800117 	ldw	r2,4(r21)
   8b8d8:	b0800315 	stw	r2,12(r22)
   8b8dc:	008006c4 	movi	r2,27
   8b8e0:	11807f36 	bltu	r2,r6,8bae0 <_realloc_r+0x4a8>
   8b8e4:	b0800404 	addi	r2,r22,16
   8b8e8:	ad400204 	addi	r21,r21,8
   8b8ec:	00002d06 	br	8b9a4 <_realloc_r+0x36c>
   8b8f0:	adbffe17 	ldw	r22,-8(r21)
   8b8f4:	00bfff04 	movi	r2,-4
   8b8f8:	9dadc83a 	sub	r22,r19,r22
   8b8fc:	b1000117 	ldw	r4,4(r22)
   8b900:	2084703a 	and	r2,r4,r2
   8b904:	b03f7726 	beq	r22,zero,8b6e4 <__ram_exceptions_end+0xfff6b4b0>
   8b908:	80af883a 	add	r23,r16,r2
   8b90c:	b8ff7516 	blt	r23,r3,8b6e4 <__ram_exceptions_end+0xfff6b4b0>
   8b910:	b0800317 	ldw	r2,12(r22)
   8b914:	b0c00217 	ldw	r3,8(r22)
   8b918:	81bfff04 	addi	r6,r16,-4
   8b91c:	01000904 	movi	r4,36
   8b920:	18800315 	stw	r2,12(r3)
   8b924:	10c00215 	stw	r3,8(r2)
   8b928:	b4800204 	addi	r18,r22,8
   8b92c:	21bfe52e 	bgeu	r4,r6,8b8c4 <__ram_exceptions_end+0xfff6b690>
   8b930:	a80b883a 	mov	r5,r21
   8b934:	9009883a 	mov	r4,r18
   8b938:	008a1340 	call	8a134 <memmove>
   8b93c:	b821883a 	mov	r16,r23
   8b940:	b027883a 	mov	r19,r22
   8b944:	003f8a06 	br	8b770 <__ram_exceptions_end+0xfff6b53c>
   8b948:	300b883a 	mov	r5,r6
   8b94c:	dfc00917 	ldw	ra,36(sp)
   8b950:	df000817 	ldw	fp,32(sp)
   8b954:	ddc00717 	ldw	r23,28(sp)
   8b958:	dd800617 	ldw	r22,24(sp)
   8b95c:	dd400517 	ldw	r21,20(sp)
   8b960:	dd000417 	ldw	r20,16(sp)
   8b964:	dcc00317 	ldw	r19,12(sp)
   8b968:	dc800217 	ldw	r18,8(sp)
   8b96c:	dc400117 	ldw	r17,4(sp)
   8b970:	dc000017 	ldw	r16,0(sp)
   8b974:	dec00a04 	addi	sp,sp,40
   8b978:	008235c1 	jmpi	8235c <_malloc_r>
   8b97c:	a8c00017 	ldw	r3,0(r21)
   8b980:	90c00015 	stw	r3,0(r18)
   8b984:	a8c00117 	ldw	r3,4(r21)
   8b988:	90c00115 	stw	r3,4(r18)
   8b98c:	00c006c4 	movi	r3,27
   8b990:	19804536 	bltu	r3,r6,8baa8 <_realloc_r+0x470>
   8b994:	90800204 	addi	r2,r18,8
   8b998:	a8c00204 	addi	r3,r21,8
   8b99c:	003f6306 	br	8b72c <__ram_exceptions_end+0xfff6b4f8>
   8b9a0:	9005883a 	mov	r2,r18
   8b9a4:	a8c00017 	ldw	r3,0(r21)
   8b9a8:	b821883a 	mov	r16,r23
   8b9ac:	b027883a 	mov	r19,r22
   8b9b0:	10c00015 	stw	r3,0(r2)
   8b9b4:	a8c00117 	ldw	r3,4(r21)
   8b9b8:	10c00115 	stw	r3,4(r2)
   8b9bc:	a8c00217 	ldw	r3,8(r21)
   8b9c0:	10c00215 	stw	r3,8(r2)
   8b9c4:	003f6a06 	br	8b770 <__ram_exceptions_end+0xfff6b53c>
   8b9c8:	9c67883a 	add	r19,r19,r17
   8b9cc:	4445c83a 	sub	r2,r8,r17
   8b9d0:	e4c00215 	stw	r19,8(fp)
   8b9d4:	10800054 	ori	r2,r2,1
   8b9d8:	98800115 	stw	r2,4(r19)
   8b9dc:	a8bfff17 	ldw	r2,-4(r21)
   8b9e0:	a009883a 	mov	r4,r20
   8b9e4:	1080004c 	andi	r2,r2,1
   8b9e8:	1462b03a 	or	r17,r2,r17
   8b9ec:	ac7fff15 	stw	r17,-4(r21)
   8b9f0:	0099cc40 	call	99cc4 <__malloc_unlock>
   8b9f4:	a805883a 	mov	r2,r21
   8b9f8:	003f6b06 	br	8b7a8 <__ram_exceptions_end+0xfff6b574>
   8b9fc:	a80b883a 	mov	r5,r21
   8ba00:	9009883a 	mov	r4,r18
   8ba04:	008a1340 	call	8a134 <memmove>
   8ba08:	003f4e06 	br	8b744 <__ram_exceptions_end+0xfff6b510>
   8ba0c:	89000404 	addi	r4,r17,16
   8ba10:	b93fbc16 	blt	r23,r4,8b904 <__ram_exceptions_end+0xfff6b6d0>
   8ba14:	b0800317 	ldw	r2,12(r22)
   8ba18:	b0c00217 	ldw	r3,8(r22)
   8ba1c:	81bfff04 	addi	r6,r16,-4
   8ba20:	01000904 	movi	r4,36
   8ba24:	18800315 	stw	r2,12(r3)
   8ba28:	10c00215 	stw	r3,8(r2)
   8ba2c:	b4800204 	addi	r18,r22,8
   8ba30:	21804336 	bltu	r4,r6,8bb40 <_realloc_r+0x508>
   8ba34:	008004c4 	movi	r2,19
   8ba38:	11803f2e 	bgeu	r2,r6,8bb38 <_realloc_r+0x500>
   8ba3c:	a8800017 	ldw	r2,0(r21)
   8ba40:	b0800215 	stw	r2,8(r22)
   8ba44:	a8800117 	ldw	r2,4(r21)
   8ba48:	b0800315 	stw	r2,12(r22)
   8ba4c:	008006c4 	movi	r2,27
   8ba50:	11803f36 	bltu	r2,r6,8bb50 <_realloc_r+0x518>
   8ba54:	b0800404 	addi	r2,r22,16
   8ba58:	ad400204 	addi	r21,r21,8
   8ba5c:	a8c00017 	ldw	r3,0(r21)
   8ba60:	10c00015 	stw	r3,0(r2)
   8ba64:	a8c00117 	ldw	r3,4(r21)
   8ba68:	10c00115 	stw	r3,4(r2)
   8ba6c:	a8c00217 	ldw	r3,8(r21)
   8ba70:	10c00215 	stw	r3,8(r2)
   8ba74:	b447883a 	add	r3,r22,r17
   8ba78:	bc45c83a 	sub	r2,r23,r17
   8ba7c:	e0c00215 	stw	r3,8(fp)
   8ba80:	10800054 	ori	r2,r2,1
   8ba84:	18800115 	stw	r2,4(r3)
   8ba88:	b0800117 	ldw	r2,4(r22)
   8ba8c:	a009883a 	mov	r4,r20
   8ba90:	1080004c 	andi	r2,r2,1
   8ba94:	1462b03a 	or	r17,r2,r17
   8ba98:	b4400115 	stw	r17,4(r22)
   8ba9c:	0099cc40 	call	99cc4 <__malloc_unlock>
   8baa0:	9005883a 	mov	r2,r18
   8baa4:	003f4006 	br	8b7a8 <__ram_exceptions_end+0xfff6b574>
   8baa8:	a8c00217 	ldw	r3,8(r21)
   8baac:	90c00215 	stw	r3,8(r18)
   8bab0:	a8c00317 	ldw	r3,12(r21)
   8bab4:	90c00315 	stw	r3,12(r18)
   8bab8:	30801126 	beq	r6,r2,8bb00 <_realloc_r+0x4c8>
   8babc:	90800404 	addi	r2,r18,16
   8bac0:	a8c00404 	addi	r3,r21,16
   8bac4:	003f1906 	br	8b72c <__ram_exceptions_end+0xfff6b4f8>
   8bac8:	90ffff17 	ldw	r3,-4(r18)
   8bacc:	00bfff04 	movi	r2,-4
   8bad0:	a825883a 	mov	r18,r21
   8bad4:	1884703a 	and	r2,r3,r2
   8bad8:	80a1883a 	add	r16,r16,r2
   8badc:	003f2406 	br	8b770 <__ram_exceptions_end+0xfff6b53c>
   8bae0:	a8800217 	ldw	r2,8(r21)
   8bae4:	b0800415 	stw	r2,16(r22)
   8bae8:	a8800317 	ldw	r2,12(r21)
   8baec:	b0800515 	stw	r2,20(r22)
   8baf0:	31000a26 	beq	r6,r4,8bb1c <_realloc_r+0x4e4>
   8baf4:	b0800604 	addi	r2,r22,24
   8baf8:	ad400404 	addi	r21,r21,16
   8bafc:	003fa906 	br	8b9a4 <__ram_exceptions_end+0xfff6b770>
   8bb00:	a9000417 	ldw	r4,16(r21)
   8bb04:	90800604 	addi	r2,r18,24
   8bb08:	a8c00604 	addi	r3,r21,24
   8bb0c:	91000415 	stw	r4,16(r18)
   8bb10:	a9000517 	ldw	r4,20(r21)
   8bb14:	91000515 	stw	r4,20(r18)
   8bb18:	003f0406 	br	8b72c <__ram_exceptions_end+0xfff6b4f8>
   8bb1c:	a8c00417 	ldw	r3,16(r21)
   8bb20:	ad400604 	addi	r21,r21,24
   8bb24:	b0800804 	addi	r2,r22,32
   8bb28:	b0c00615 	stw	r3,24(r22)
   8bb2c:	a8ffff17 	ldw	r3,-4(r21)
   8bb30:	b0c00715 	stw	r3,28(r22)
   8bb34:	003f9b06 	br	8b9a4 <__ram_exceptions_end+0xfff6b770>
   8bb38:	9005883a 	mov	r2,r18
   8bb3c:	003fc706 	br	8ba5c <__ram_exceptions_end+0xfff6b828>
   8bb40:	a80b883a 	mov	r5,r21
   8bb44:	9009883a 	mov	r4,r18
   8bb48:	008a1340 	call	8a134 <memmove>
   8bb4c:	003fc906 	br	8ba74 <__ram_exceptions_end+0xfff6b840>
   8bb50:	a8800217 	ldw	r2,8(r21)
   8bb54:	b0800415 	stw	r2,16(r22)
   8bb58:	a8800317 	ldw	r2,12(r21)
   8bb5c:	b0800515 	stw	r2,20(r22)
   8bb60:	31000726 	beq	r6,r4,8bb80 <_realloc_r+0x548>
   8bb64:	b0800604 	addi	r2,r22,24
   8bb68:	ad400404 	addi	r21,r21,16
   8bb6c:	003fbb06 	br	8ba5c <__ram_exceptions_end+0xfff6b828>
   8bb70:	a009883a 	mov	r4,r20
   8bb74:	0099cc40 	call	99cc4 <__malloc_unlock>
   8bb78:	0005883a 	mov	r2,zero
   8bb7c:	003f0a06 	br	8b7a8 <__ram_exceptions_end+0xfff6b574>
   8bb80:	a8c00417 	ldw	r3,16(r21)
   8bb84:	ad400604 	addi	r21,r21,24
   8bb88:	b0800804 	addi	r2,r22,32
   8bb8c:	b0c00615 	stw	r3,24(r22)
   8bb90:	a8ffff17 	ldw	r3,-4(r21)
   8bb94:	b0c00715 	stw	r3,28(r22)
   8bb98:	003fb006 	br	8ba5c <__ram_exceptions_end+0xfff6b828>

0008bb9c <lflush>:
   8bb9c:	2080030b 	ldhu	r2,12(r4)
   8bba0:	00c00244 	movi	r3,9
   8bba4:	1080024c 	andi	r2,r2,9
   8bba8:	10c00226 	beq	r2,r3,8bbb4 <lflush+0x18>
   8bbac:	0005883a 	mov	r2,zero
   8bbb0:	f800283a 	ret
   8bbb4:	0088ca01 	jmpi	88ca0 <fflush>

0008bbb8 <__srefill_r>:
   8bbb8:	defffc04 	addi	sp,sp,-16
   8bbbc:	dc400115 	stw	r17,4(sp)
   8bbc0:	dc000015 	stw	r16,0(sp)
   8bbc4:	dfc00315 	stw	ra,12(sp)
   8bbc8:	dc800215 	stw	r18,8(sp)
   8bbcc:	2023883a 	mov	r17,r4
   8bbd0:	2821883a 	mov	r16,r5
   8bbd4:	20000226 	beq	r4,zero,8bbe0 <__srefill_r+0x28>
   8bbd8:	20800e17 	ldw	r2,56(r4)
   8bbdc:	10003c26 	beq	r2,zero,8bcd0 <__srefill_r+0x118>
   8bbe0:	80c0030b 	ldhu	r3,12(r16)
   8bbe4:	1908000c 	andi	r4,r3,8192
   8bbe8:	1805883a 	mov	r2,r3
   8bbec:	2000071e 	bne	r4,zero,8bc0c <__srefill_r+0x54>
   8bbf0:	81001917 	ldw	r4,100(r16)
   8bbf4:	18880014 	ori	r2,r3,8192
   8bbf8:	00f7ffc4 	movi	r3,-8193
   8bbfc:	20c8703a 	and	r4,r4,r3
   8bc00:	8080030d 	sth	r2,12(r16)
   8bc04:	1007883a 	mov	r3,r2
   8bc08:	81001915 	stw	r4,100(r16)
   8bc0c:	80000115 	stw	zero,4(r16)
   8bc10:	1100080c 	andi	r4,r2,32
   8bc14:	2000571e 	bne	r4,zero,8bd74 <__srefill_r+0x1bc>
   8bc18:	1100010c 	andi	r4,r2,4
   8bc1c:	20001f26 	beq	r4,zero,8bc9c <__srefill_r+0xe4>
   8bc20:	81400c17 	ldw	r5,48(r16)
   8bc24:	28000826 	beq	r5,zero,8bc48 <__srefill_r+0x90>
   8bc28:	80801004 	addi	r2,r16,64
   8bc2c:	28800226 	beq	r5,r2,8bc38 <__srefill_r+0x80>
   8bc30:	8809883a 	mov	r4,r17
   8bc34:	00891a40 	call	891a4 <_free_r>
   8bc38:	80800f17 	ldw	r2,60(r16)
   8bc3c:	80000c15 	stw	zero,48(r16)
   8bc40:	80800115 	stw	r2,4(r16)
   8bc44:	1000391e 	bne	r2,zero,8bd2c <__srefill_r+0x174>
   8bc48:	80800417 	ldw	r2,16(r16)
   8bc4c:	10004b26 	beq	r2,zero,8bd7c <__srefill_r+0x1c4>
   8bc50:	8480030b 	ldhu	r18,12(r16)
   8bc54:	908000cc 	andi	r2,r18,3
   8bc58:	10001f1e 	bne	r2,zero,8bcd8 <__srefill_r+0x120>
   8bc5c:	81800417 	ldw	r6,16(r16)
   8bc60:	80800817 	ldw	r2,32(r16)
   8bc64:	81c00517 	ldw	r7,20(r16)
   8bc68:	81400717 	ldw	r5,28(r16)
   8bc6c:	81800015 	stw	r6,0(r16)
   8bc70:	8809883a 	mov	r4,r17
   8bc74:	103ee83a 	callr	r2
   8bc78:	80800115 	stw	r2,4(r16)
   8bc7c:	00800e0e 	bge	zero,r2,8bcb8 <__srefill_r+0x100>
   8bc80:	0005883a 	mov	r2,zero
   8bc84:	dfc00317 	ldw	ra,12(sp)
   8bc88:	dc800217 	ldw	r18,8(sp)
   8bc8c:	dc400117 	ldw	r17,4(sp)
   8bc90:	dc000017 	ldw	r16,0(sp)
   8bc94:	dec00404 	addi	sp,sp,16
   8bc98:	f800283a 	ret
   8bc9c:	1100040c 	andi	r4,r2,16
   8bca0:	20003026 	beq	r4,zero,8bd64 <__srefill_r+0x1ac>
   8bca4:	1080020c 	andi	r2,r2,8
   8bca8:	1000241e 	bne	r2,zero,8bd3c <__srefill_r+0x184>
   8bcac:	18c00114 	ori	r3,r3,4
   8bcb0:	80c0030d 	sth	r3,12(r16)
   8bcb4:	003fe406 	br	8bc48 <__ram_exceptions_end+0xfff6ba14>
   8bcb8:	80c0030b 	ldhu	r3,12(r16)
   8bcbc:	1000161e 	bne	r2,zero,8bd18 <__srefill_r+0x160>
   8bcc0:	18c00814 	ori	r3,r3,32
   8bcc4:	00bfffc4 	movi	r2,-1
   8bcc8:	80c0030d 	sth	r3,12(r16)
   8bccc:	003fed06 	br	8bc84 <__ram_exceptions_end+0xfff6ba50>
   8bcd0:	00890300 	call	89030 <__sinit>
   8bcd4:	003fc206 	br	8bbe0 <__ram_exceptions_end+0xfff6b9ac>
   8bcd8:	008002b4 	movhi	r2,10
   8bcdc:	10817904 	addi	r2,r2,1508
   8bce0:	11000017 	ldw	r4,0(r2)
   8bce4:	01400274 	movhi	r5,9
   8bce8:	00800044 	movi	r2,1
   8bcec:	296ee704 	addi	r5,r5,-17508
   8bcf0:	8080030d 	sth	r2,12(r16)
   8bcf4:	008997c0 	call	8997c <_fwalk>
   8bcf8:	00800244 	movi	r2,9
   8bcfc:	8480030d 	sth	r18,12(r16)
   8bd00:	9480024c 	andi	r18,r18,9
   8bd04:	90bfd51e 	bne	r18,r2,8bc5c <__ram_exceptions_end+0xfff6ba28>
   8bd08:	800b883a 	mov	r5,r16
   8bd0c:	8809883a 	mov	r4,r17
   8bd10:	0088a280 	call	88a28 <__sflush_r>
   8bd14:	003fd106 	br	8bc5c <__ram_exceptions_end+0xfff6ba28>
   8bd18:	18c01014 	ori	r3,r3,64
   8bd1c:	80000115 	stw	zero,4(r16)
   8bd20:	00bfffc4 	movi	r2,-1
   8bd24:	80c0030d 	sth	r3,12(r16)
   8bd28:	003fd606 	br	8bc84 <__ram_exceptions_end+0xfff6ba50>
   8bd2c:	80c00e17 	ldw	r3,56(r16)
   8bd30:	0005883a 	mov	r2,zero
   8bd34:	80c00015 	stw	r3,0(r16)
   8bd38:	003fd206 	br	8bc84 <__ram_exceptions_end+0xfff6ba50>
   8bd3c:	800b883a 	mov	r5,r16
   8bd40:	8809883a 	mov	r4,r17
   8bd44:	0088c440 	call	88c44 <_fflush_r>
   8bd48:	10000a1e 	bne	r2,zero,8bd74 <__srefill_r+0x1bc>
   8bd4c:	8080030b 	ldhu	r2,12(r16)
   8bd50:	00fffdc4 	movi	r3,-9
   8bd54:	80000215 	stw	zero,8(r16)
   8bd58:	1886703a 	and	r3,r3,r2
   8bd5c:	80000615 	stw	zero,24(r16)
   8bd60:	003fd206 	br	8bcac <__ram_exceptions_end+0xfff6ba78>
   8bd64:	00800244 	movi	r2,9
   8bd68:	88800015 	stw	r2,0(r17)
   8bd6c:	18c01014 	ori	r3,r3,64
   8bd70:	80c0030d 	sth	r3,12(r16)
   8bd74:	00bfffc4 	movi	r2,-1
   8bd78:	003fc206 	br	8bc84 <__ram_exceptions_end+0xfff6ba50>
   8bd7c:	800b883a 	mov	r5,r16
   8bd80:	8809883a 	mov	r4,r17
   8bd84:	0089c700 	call	89c70 <__smakebuf_r>
   8bd88:	003fb106 	br	8bc50 <__ram_exceptions_end+0xfff6ba1c>

0008bd8c <__fpclassifyd>:
   8bd8c:	00a00034 	movhi	r2,32768
   8bd90:	10bfffc4 	addi	r2,r2,-1
   8bd94:	2884703a 	and	r2,r5,r2
   8bd98:	10000726 	beq	r2,zero,8bdb8 <__fpclassifyd+0x2c>
   8bd9c:	00fffc34 	movhi	r3,65520
   8bda0:	019ff834 	movhi	r6,32736
   8bda4:	28c7883a 	add	r3,r5,r3
   8bda8:	31bfffc4 	addi	r6,r6,-1
   8bdac:	30c00536 	bltu	r6,r3,8bdc4 <__fpclassifyd+0x38>
   8bdb0:	00800104 	movi	r2,4
   8bdb4:	f800283a 	ret
   8bdb8:	2000021e 	bne	r4,zero,8bdc4 <__fpclassifyd+0x38>
   8bdbc:	00800084 	movi	r2,2
   8bdc0:	f800283a 	ret
   8bdc4:	00dffc34 	movhi	r3,32752
   8bdc8:	019ff834 	movhi	r6,32736
   8bdcc:	28cb883a 	add	r5,r5,r3
   8bdd0:	31bfffc4 	addi	r6,r6,-1
   8bdd4:	317ff62e 	bgeu	r6,r5,8bdb0 <__ram_exceptions_end+0xfff6bb7c>
   8bdd8:	01400434 	movhi	r5,16
   8bddc:	297fffc4 	addi	r5,r5,-1
   8bde0:	28800236 	bltu	r5,r2,8bdec <__fpclassifyd+0x60>
   8bde4:	008000c4 	movi	r2,3
   8bde8:	f800283a 	ret
   8bdec:	10c00226 	beq	r2,r3,8bdf8 <__fpclassifyd+0x6c>
   8bdf0:	0005883a 	mov	r2,zero
   8bdf4:	f800283a 	ret
   8bdf8:	2005003a 	cmpeq	r2,r4,zero
   8bdfc:	f800283a 	ret

0008be00 <__sccl>:
   8be00:	2a000003 	ldbu	r8,0(r5)
   8be04:	00801784 	movi	r2,94
   8be08:	40802a26 	beq	r8,r2,8beb4 <__sccl+0xb4>
   8be0c:	29400044 	addi	r5,r5,1
   8be10:	000f883a 	mov	r7,zero
   8be14:	0013883a 	mov	r9,zero
   8be18:	2007883a 	mov	r3,r4
   8be1c:	21804004 	addi	r6,r4,256
   8be20:	19c00005 	stb	r7,0(r3)
   8be24:	18c00044 	addi	r3,r3,1
   8be28:	19bffd1e 	bne	r3,r6,8be20 <__ram_exceptions_end+0xfff6bbec>
   8be2c:	40001126 	beq	r8,zero,8be74 <__sccl+0x74>
   8be30:	00800044 	movi	r2,1
   8be34:	124fc83a 	sub	r7,r2,r9
   8be38:	02800b44 	movi	r10,45
   8be3c:	02c01744 	movi	r11,93
   8be40:	2205883a 	add	r2,r4,r8
   8be44:	11c00005 	stb	r7,0(r2)
   8be48:	28800044 	addi	r2,r5,1
   8be4c:	28c00003 	ldbu	r3,0(r5)
   8be50:	1a800a26 	beq	r3,r10,8be7c <__sccl+0x7c>
   8be54:	1ac00426 	beq	r3,r11,8be68 <__sccl+0x68>
   8be58:	18000426 	beq	r3,zero,8be6c <__sccl+0x6c>
   8be5c:	1811883a 	mov	r8,r3
   8be60:	100b883a 	mov	r5,r2
   8be64:	003ff606 	br	8be40 <__ram_exceptions_end+0xfff6bc0c>
   8be68:	f800283a 	ret
   8be6c:	2805883a 	mov	r2,r5
   8be70:	f800283a 	ret
   8be74:	28bfffc4 	addi	r2,r5,-1
   8be78:	f800283a 	ret
   8be7c:	12400003 	ldbu	r9,0(r2)
   8be80:	4ac01126 	beq	r9,r11,8bec8 <__sccl+0xc8>
   8be84:	4a001016 	blt	r9,r8,8bec8 <__sccl+0xc8>
   8be88:	41800044 	addi	r6,r8,1
   8be8c:	29400084 	addi	r5,r5,2
   8be90:	2187883a 	add	r3,r4,r6
   8be94:	00000106 	br	8be9c <__sccl+0x9c>
   8be98:	31800044 	addi	r6,r6,1
   8be9c:	19c00005 	stb	r7,0(r3)
   8bea0:	3011883a 	mov	r8,r6
   8bea4:	18c00044 	addi	r3,r3,1
   8bea8:	327ffb16 	blt	r6,r9,8be98 <__ram_exceptions_end+0xfff6bc64>
   8beac:	10800084 	addi	r2,r2,2
   8beb0:	003fe606 	br	8be4c <__ram_exceptions_end+0xfff6bc18>
   8beb4:	2a000043 	ldbu	r8,1(r5)
   8beb8:	01c00044 	movi	r7,1
   8bebc:	29400084 	addi	r5,r5,2
   8bec0:	02400044 	movi	r9,1
   8bec4:	003fd406 	br	8be18 <__ram_exceptions_end+0xfff6bbe4>
   8bec8:	5011883a 	mov	r8,r10
   8becc:	003fe406 	br	8be60 <__ram_exceptions_end+0xfff6bc2c>

0008bed0 <nanf>:
   8bed0:	009ff034 	movhi	r2,32704
   8bed4:	f800283a 	ret

0008bed8 <_sprintf_r>:
   8bed8:	deffe404 	addi	sp,sp,-112
   8bedc:	2807883a 	mov	r3,r5
   8bee0:	dfc01a15 	stw	ra,104(sp)
   8bee4:	d9c01b15 	stw	r7,108(sp)
   8bee8:	00a00034 	movhi	r2,32768
   8beec:	10bfffc4 	addi	r2,r2,-1
   8bef0:	02008204 	movi	r8,520
   8bef4:	d8800215 	stw	r2,8(sp)
   8bef8:	d8800515 	stw	r2,20(sp)
   8befc:	d9c01b04 	addi	r7,sp,108
   8bf00:	d80b883a 	mov	r5,sp
   8bf04:	00bfffc4 	movi	r2,-1
   8bf08:	d8c00015 	stw	r3,0(sp)
   8bf0c:	d8c00415 	stw	r3,16(sp)
   8bf10:	da00030d 	sth	r8,12(sp)
   8bf14:	d880038d 	sth	r2,14(sp)
   8bf18:	008f6c80 	call	8f6c8 <___svfprintf_internal_r>
   8bf1c:	d8c00017 	ldw	r3,0(sp)
   8bf20:	18000005 	stb	zero,0(r3)
   8bf24:	dfc01a17 	ldw	ra,104(sp)
   8bf28:	dec01c04 	addi	sp,sp,112
   8bf2c:	f800283a 	ret

0008bf30 <sprintf>:
   8bf30:	deffe304 	addi	sp,sp,-116
   8bf34:	2007883a 	mov	r3,r4
   8bf38:	dfc01a15 	stw	ra,104(sp)
   8bf3c:	d9801b15 	stw	r6,108(sp)
   8bf40:	d9c01c15 	stw	r7,112(sp)
   8bf44:	010002b4 	movhi	r4,10
   8bf48:	21017a04 	addi	r4,r4,1512
   8bf4c:	21000017 	ldw	r4,0(r4)
   8bf50:	00a00034 	movhi	r2,32768
   8bf54:	10bfffc4 	addi	r2,r2,-1
   8bf58:	280d883a 	mov	r6,r5
   8bf5c:	02008204 	movi	r8,520
   8bf60:	d8800215 	stw	r2,8(sp)
   8bf64:	d8800515 	stw	r2,20(sp)
   8bf68:	d9c01b04 	addi	r7,sp,108
   8bf6c:	d80b883a 	mov	r5,sp
   8bf70:	00bfffc4 	movi	r2,-1
   8bf74:	d8c00015 	stw	r3,0(sp)
   8bf78:	d8c00415 	stw	r3,16(sp)
   8bf7c:	da00030d 	sth	r8,12(sp)
   8bf80:	d880038d 	sth	r2,14(sp)
   8bf84:	008f6c80 	call	8f6c8 <___svfprintf_internal_r>
   8bf88:	d8c00017 	ldw	r3,0(sp)
   8bf8c:	18000005 	stb	zero,0(r3)
   8bf90:	dfc01a17 	ldw	ra,104(sp)
   8bf94:	dec01d04 	addi	sp,sp,116
   8bf98:	f800283a 	ret

0008bf9c <strcmp>:
   8bf9c:	2144b03a 	or	r2,r4,r5
   8bfa0:	108000cc 	andi	r2,r2,3
   8bfa4:	1000171e 	bne	r2,zero,8c004 <strcmp+0x68>
   8bfa8:	20800017 	ldw	r2,0(r4)
   8bfac:	28c00017 	ldw	r3,0(r5)
   8bfb0:	10c0141e 	bne	r2,r3,8c004 <strcmp+0x68>
   8bfb4:	027fbff4 	movhi	r9,65279
   8bfb8:	4a7fbfc4 	addi	r9,r9,-257
   8bfbc:	0086303a 	nor	r3,zero,r2
   8bfc0:	02202074 	movhi	r8,32897
   8bfc4:	1245883a 	add	r2,r2,r9
   8bfc8:	42202004 	addi	r8,r8,-32640
   8bfcc:	10c4703a 	and	r2,r2,r3
   8bfd0:	1204703a 	and	r2,r2,r8
   8bfd4:	10000226 	beq	r2,zero,8bfe0 <strcmp+0x44>
   8bfd8:	00002306 	br	8c068 <strcmp+0xcc>
   8bfdc:	1000221e 	bne	r2,zero,8c068 <strcmp+0xcc>
   8bfe0:	21000104 	addi	r4,r4,4
   8bfe4:	20c00017 	ldw	r3,0(r4)
   8bfe8:	29400104 	addi	r5,r5,4
   8bfec:	29800017 	ldw	r6,0(r5)
   8bff0:	1a4f883a 	add	r7,r3,r9
   8bff4:	00c4303a 	nor	r2,zero,r3
   8bff8:	3884703a 	and	r2,r7,r2
   8bffc:	1204703a 	and	r2,r2,r8
   8c000:	19bff626 	beq	r3,r6,8bfdc <__ram_exceptions_end+0xfff6bda8>
   8c004:	20800003 	ldbu	r2,0(r4)
   8c008:	10c03fcc 	andi	r3,r2,255
   8c00c:	18c0201c 	xori	r3,r3,128
   8c010:	18ffe004 	addi	r3,r3,-128
   8c014:	18000c26 	beq	r3,zero,8c048 <strcmp+0xac>
   8c018:	29800007 	ldb	r6,0(r5)
   8c01c:	19800326 	beq	r3,r6,8c02c <strcmp+0x90>
   8c020:	00001306 	br	8c070 <strcmp+0xd4>
   8c024:	29800007 	ldb	r6,0(r5)
   8c028:	11800b1e 	bne	r2,r6,8c058 <strcmp+0xbc>
   8c02c:	21000044 	addi	r4,r4,1
   8c030:	20c00003 	ldbu	r3,0(r4)
   8c034:	29400044 	addi	r5,r5,1
   8c038:	18803fcc 	andi	r2,r3,255
   8c03c:	1080201c 	xori	r2,r2,128
   8c040:	10bfe004 	addi	r2,r2,-128
   8c044:	103ff71e 	bne	r2,zero,8c024 <__ram_exceptions_end+0xfff6bdf0>
   8c048:	0007883a 	mov	r3,zero
   8c04c:	28800003 	ldbu	r2,0(r5)
   8c050:	1885c83a 	sub	r2,r3,r2
   8c054:	f800283a 	ret
   8c058:	28800003 	ldbu	r2,0(r5)
   8c05c:	18c03fcc 	andi	r3,r3,255
   8c060:	1885c83a 	sub	r2,r3,r2
   8c064:	f800283a 	ret
   8c068:	0005883a 	mov	r2,zero
   8c06c:	f800283a 	ret
   8c070:	10c03fcc 	andi	r3,r2,255
   8c074:	003ff506 	br	8c04c <__ram_exceptions_end+0xfff6be18>

0008c078 <sulp>:
   8c078:	defffd04 	addi	sp,sp,-12
   8c07c:	dc400115 	stw	r17,4(sp)
   8c080:	3023883a 	mov	r17,r6
   8c084:	dc000015 	stw	r16,0(sp)
   8c088:	dfc00215 	stw	ra,8(sp)
   8c08c:	2821883a 	mov	r16,r5
   8c090:	008af980 	call	8af98 <__ulp>
   8c094:	88000c26 	beq	r17,zero,8c0c8 <sulp+0x50>
   8c098:	841ffc2c 	andhi	r16,r16,32752
   8c09c:	8020d53a 	srli	r16,r16,20
   8c0a0:	01c01ac4 	movi	r7,107
   8c0a4:	3c21c83a 	sub	r16,r7,r16
   8c0a8:	0400070e 	bge	zero,r16,8c0c8 <sulp+0x50>
   8c0ac:	8020953a 	slli	r16,r16,20
   8c0b0:	01cffc34 	movhi	r7,16368
   8c0b4:	000d883a 	mov	r6,zero
   8c0b8:	81cf883a 	add	r7,r16,r7
   8c0bc:	1009883a 	mov	r4,r2
   8c0c0:	180b883a 	mov	r5,r3
   8c0c4:	00980d00 	call	980d0 <__muldf3>
   8c0c8:	dfc00217 	ldw	ra,8(sp)
   8c0cc:	dc400117 	ldw	r17,4(sp)
   8c0d0:	dc000017 	ldw	r16,0(sp)
   8c0d4:	dec00304 	addi	sp,sp,12
   8c0d8:	f800283a 	ret

0008c0dc <_strtod_r>:
   8c0dc:	deffe204 	addi	sp,sp,-120
   8c0e0:	ddc01b15 	stw	r23,108(sp)
   8c0e4:	dd801a15 	stw	r22,104(sp)
   8c0e8:	dc401515 	stw	r17,84(sp)
   8c0ec:	dfc01d15 	stw	ra,116(sp)
   8c0f0:	df001c15 	stw	fp,112(sp)
   8c0f4:	dd401915 	stw	r21,100(sp)
   8c0f8:	dd001815 	stw	r20,96(sp)
   8c0fc:	dcc01715 	stw	r19,92(sp)
   8c100:	dc801615 	stw	r18,88(sp)
   8c104:	dc001415 	stw	r16,80(sp)
   8c108:	d8000515 	stw	zero,20(sp)
   8c10c:	d9400615 	stw	r5,24(sp)
   8c110:	2807883a 	mov	r3,r5
   8c114:	1f000003 	ldbu	fp,0(r3)
   8c118:	01c00274 	movhi	r7,9
   8c11c:	2023883a 	mov	r17,r4
   8c120:	d9400715 	stw	r5,28(sp)
   8c124:	d9800915 	stw	r6,36(sp)
   8c128:	01000b44 	movi	r4,45
   8c12c:	e0803fcc 	andi	r2,fp,255
   8c130:	39f05404 	addi	r7,r7,-16048
   8c134:	002f883a 	mov	r23,zero
   8c138:	002d883a 	mov	r22,zero
   8c13c:	20809c36 	bltu	r4,r2,8c3b0 <_strtod_r+0x2d4>
   8c140:	100490ba 	slli	r2,r2,2
   8c144:	11c5883a 	add	r2,r2,r7
   8c148:	10800017 	ldw	r2,0(r2)
   8c14c:	1000683a 	jmp	r2
   8c150:	0008c210 	cmplti	zero,zero,8968
   8c154:	0008c3b0 	cmpltui	zero,zero,8974
   8c158:	0008c3b0 	cmpltui	zero,zero,8974
   8c15c:	0008c3b0 	cmpltui	zero,zero,8974
   8c160:	0008c3b0 	cmpltui	zero,zero,8974
   8c164:	0008c3b0 	cmpltui	zero,zero,8974
   8c168:	0008c3b0 	cmpltui	zero,zero,8974
   8c16c:	0008c3b0 	cmpltui	zero,zero,8974
   8c170:	0008c3b0 	cmpltui	zero,zero,8974
   8c174:	0008c39c 	xori	zero,zero,8974
   8c178:	0008c39c 	xori	zero,zero,8974
   8c17c:	0008c39c 	xori	zero,zero,8974
   8c180:	0008c39c 	xori	zero,zero,8974
   8c184:	0008c39c 	xori	zero,zero,8974
   8c188:	0008c3b0 	cmpltui	zero,zero,8974
   8c18c:	0008c3b0 	cmpltui	zero,zero,8974
   8c190:	0008c3b0 	cmpltui	zero,zero,8974
   8c194:	0008c3b0 	cmpltui	zero,zero,8974
   8c198:	0008c3b0 	cmpltui	zero,zero,8974
   8c19c:	0008c3b0 	cmpltui	zero,zero,8974
   8c1a0:	0008c3b0 	cmpltui	zero,zero,8974
   8c1a4:	0008c3b0 	cmpltui	zero,zero,8974
   8c1a8:	0008c3b0 	cmpltui	zero,zero,8974
   8c1ac:	0008c3b0 	cmpltui	zero,zero,8974
   8c1b0:	0008c3b0 	cmpltui	zero,zero,8974
   8c1b4:	0008c3b0 	cmpltui	zero,zero,8974
   8c1b8:	0008c3b0 	cmpltui	zero,zero,8974
   8c1bc:	0008c3b0 	cmpltui	zero,zero,8974
   8c1c0:	0008c3b0 	cmpltui	zero,zero,8974
   8c1c4:	0008c3b0 	cmpltui	zero,zero,8974
   8c1c8:	0008c3b0 	cmpltui	zero,zero,8974
   8c1cc:	0008c3b0 	cmpltui	zero,zero,8974
   8c1d0:	0008c39c 	xori	zero,zero,8974
   8c1d4:	0008c3b0 	cmpltui	zero,zero,8974
   8c1d8:	0008c3b0 	cmpltui	zero,zero,8974
   8c1dc:	0008c3b0 	cmpltui	zero,zero,8974
   8c1e0:	0008c3b0 	cmpltui	zero,zero,8974
   8c1e4:	0008c3b0 	cmpltui	zero,zero,8974
   8c1e8:	0008c3b0 	cmpltui	zero,zero,8974
   8c1ec:	0008c3b0 	cmpltui	zero,zero,8974
   8c1f0:	0008c3b0 	cmpltui	zero,zero,8974
   8c1f4:	0008c3b0 	cmpltui	zero,zero,8974
   8c1f8:	0008c3b0 	cmpltui	zero,zero,8974
   8c1fc:	0008c274 	movhi	zero,8969
   8c200:	0008c3b0 	cmpltui	zero,zero,8974
   8c204:	0008c390 	cmplti	zero,zero,8974
   8c208:	00801244 	movi	r2,73
   8c20c:	b8844726 	beq	r23,r2,8d32c <_strtod_r+0x1250>
   8c210:	d9000917 	ldw	r4,36(sp)
   8c214:	d8000815 	stw	zero,32(sp)
   8c218:	0039883a 	mov	fp,zero
   8c21c:	20000726 	beq	r4,zero,8c23c <_strtod_r+0x160>
   8c220:	dc800717 	ldw	r18,28(sp)
   8c224:	d8000a15 	stw	zero,40(sp)
   8c228:	d9400917 	ldw	r5,36(sp)
   8c22c:	2c800015 	stw	r18,0(r5)
   8c230:	d8800a17 	ldw	r2,40(sp)
   8c234:	10000126 	beq	r2,zero,8c23c <_strtod_r+0x160>
   8c238:	e720003c 	xorhi	fp,fp,32768
   8c23c:	d8800817 	ldw	r2,32(sp)
   8c240:	e007883a 	mov	r3,fp
   8c244:	dfc01d17 	ldw	ra,116(sp)
   8c248:	df001c17 	ldw	fp,112(sp)
   8c24c:	ddc01b17 	ldw	r23,108(sp)
   8c250:	dd801a17 	ldw	r22,104(sp)
   8c254:	dd401917 	ldw	r21,100(sp)
   8c258:	dd001817 	ldw	r20,96(sp)
   8c25c:	dcc01717 	ldw	r19,92(sp)
   8c260:	dc801617 	ldw	r18,88(sp)
   8c264:	dc401517 	ldw	r17,84(sp)
   8c268:	dc001417 	ldw	r16,80(sp)
   8c26c:	dec01e04 	addi	sp,sp,120
   8c270:	f800283a 	ret
   8c274:	d8000a15 	stw	zero,40(sp)
   8c278:	1c000044 	addi	r16,r3,1
   8c27c:	dc000615 	stw	r16,24(sp)
   8c280:	1f000043 	ldbu	fp,1(r3)
   8c284:	e0803fcc 	andi	r2,fp,255
   8c288:	1080201c 	xori	r2,r2,128
   8c28c:	10bfe004 	addi	r2,r2,-128
   8c290:	103fdf26 	beq	r2,zero,8c210 <__ram_exceptions_end+0xfff6bfdc>
   8c294:	e1003fcc 	andi	r4,fp,255
   8c298:	2100201c 	xori	r4,r4,128
   8c29c:	213fe004 	addi	r4,r4,-128
   8c2a0:	00800c04 	movi	r2,48
   8c2a4:	2080d426 	beq	r4,r2,8c5f8 <_strtod_r+0x51c>
   8c2a8:	dc000815 	stw	r16,32(sp)
   8c2ac:	d8000c15 	stw	zero,48(sp)
   8c2b0:	e0bff404 	addi	r2,fp,-48
   8c2b4:	10803fcc 	andi	r2,r2,255
   8c2b8:	05400244 	movi	r21,9
   8c2bc:	a8837836 	bltu	r21,r2,8d0a0 <_strtod_r+0xfc4>
   8c2c0:	dc800817 	ldw	r18,32(sp)
   8c2c4:	0029883a 	mov	r20,zero
   8c2c8:	0027883a 	mov	r19,zero
   8c2cc:	0021883a 	mov	r16,zero
   8c2d0:	05800204 	movi	r22,8
   8c2d4:	b4003916 	blt	r22,r16,8c3bc <_strtod_r+0x2e0>
   8c2d8:	e7003fcc 	andi	fp,fp,255
   8c2dc:	9809883a 	mov	r4,r19
   8c2e0:	01400284 	movi	r5,10
   8c2e4:	e700201c 	xori	fp,fp,128
   8c2e8:	00822140 	call	82214 <__mulsi3>
   8c2ec:	e73fe004 	addi	fp,fp,-128
   8c2f0:	1705883a 	add	r2,r2,fp
   8c2f4:	14fff404 	addi	r19,r2,-48
   8c2f8:	94800044 	addi	r18,r18,1
   8c2fc:	dc800615 	stw	r18,24(sp)
   8c300:	97000003 	ldbu	fp,0(r18)
   8c304:	84000044 	addi	r16,r16,1
   8c308:	e0bff404 	addi	r2,fp,-48
   8c30c:	10803fcc 	andi	r2,r2,255
   8c310:	a8bff02e 	bgeu	r21,r2,8c2d4 <__ram_exceptions_end+0xfff6c0a0>
   8c314:	e5c03fcc 	andi	r23,fp,255
   8c318:	bdc0201c 	xori	r23,r23,128
   8c31c:	bdffe004 	addi	r23,r23,-128
   8c320:	8809883a 	mov	r4,r17
   8c324:	0089be00 	call	89be0 <_localeconv_r>
   8c328:	8809883a 	mov	r4,r17
   8c32c:	15400017 	ldw	r21,0(r2)
   8c330:	0089be00 	call	89be0 <_localeconv_r>
   8c334:	11000017 	ldw	r4,0(r2)
   8c338:	00831980 	call	83198 <strlen>
   8c33c:	100d883a 	mov	r6,r2
   8c340:	a80b883a 	mov	r5,r21
   8c344:	9009883a 	mov	r4,r18
   8c348:	00944980 	call	94498 <strncmp>
   8c34c:	1000bd26 	beq	r2,zero,8c644 <_strtod_r+0x568>
   8c350:	8039883a 	mov	fp,r16
   8c354:	002d883a 	mov	r22,zero
   8c358:	d8000b15 	stw	zero,44(sp)
   8c35c:	0025883a 	mov	r18,zero
   8c360:	00801944 	movi	r2,101
   8c364:	b8806026 	beq	r23,r2,8c4e8 <_strtod_r+0x40c>
   8c368:	00801144 	movi	r2,69
   8c36c:	b8805e26 	beq	r23,r2,8c4e8 <_strtod_r+0x40c>
   8c370:	0009883a 	mov	r4,zero
   8c374:	e0001a1e 	bne	fp,zero,8c3e0 <_strtod_r+0x304>
   8c378:	b000cd26 	beq	r22,zero,8c6b0 <_strtod_r+0x5d4>
   8c37c:	d8000815 	stw	zero,32(sp)
   8c380:	d9000917 	ldw	r4,36(sp)
   8c384:	203faa26 	beq	r4,zero,8c230 <__ram_exceptions_end+0xfff6bffc>
   8c388:	dc800617 	ldw	r18,24(sp)
   8c38c:	003fa606 	br	8c228 <__ram_exceptions_end+0xfff6bff4>
   8c390:	00800044 	movi	r2,1
   8c394:	d8800a15 	stw	r2,40(sp)
   8c398:	003fb706 	br	8c278 <__ram_exceptions_end+0xfff6c044>
   8c39c:	18c00044 	addi	r3,r3,1
   8c3a0:	d8c00615 	stw	r3,24(sp)
   8c3a4:	1f000003 	ldbu	fp,0(r3)
   8c3a8:	e0803fcc 	andi	r2,fp,255
   8c3ac:	20bf642e 	bgeu	r4,r2,8c140 <__ram_exceptions_end+0xfff6bf0c>
   8c3b0:	1821883a 	mov	r16,r3
   8c3b4:	d8000a15 	stw	zero,40(sp)
   8c3b8:	003fb606 	br	8c294 <__ram_exceptions_end+0xfff6c060>
   8c3bc:	e7003fcc 	andi	fp,fp,255
   8c3c0:	a009883a 	mov	r4,r20
   8c3c4:	01400284 	movi	r5,10
   8c3c8:	e700201c 	xori	fp,fp,128
   8c3cc:	00822140 	call	82214 <__mulsi3>
   8c3d0:	e73fe004 	addi	fp,fp,-128
   8c3d4:	1705883a 	add	r2,r2,fp
   8c3d8:	153ff404 	addi	r20,r2,-48
   8c3dc:	003fc606 	br	8c2f8 <__ram_exceptions_end+0xfff6c0c4>
   8c3e0:	d8c00b17 	ldw	r3,44(sp)
   8c3e4:	20ebc83a 	sub	r21,r4,r3
   8c3e8:	8000011e 	bne	r16,zero,8c3f0 <_strtod_r+0x314>
   8c3ec:	e021883a 	mov	r16,fp
   8c3f0:	00800404 	movi	r2,16
   8c3f4:	e025883a 	mov	r18,fp
   8c3f8:	1700010e 	bge	r2,fp,8c400 <_strtod_r+0x324>
   8c3fc:	1025883a 	mov	r18,r2
   8c400:	9809883a 	mov	r4,r19
   8c404:	00993940 	call	99394 <__floatunsidf>
   8c408:	102f883a 	mov	r23,r2
   8c40c:	00800244 	movi	r2,9
   8c410:	182d883a 	mov	r22,r3
   8c414:	1480150e 	bge	r2,r18,8c46c <_strtod_r+0x390>
   8c418:	90bffdc4 	addi	r2,r18,-9
   8c41c:	100490fa 	slli	r2,r2,3
   8c420:	180b883a 	mov	r5,r3
   8c424:	00c002b4 	movhi	r3,10
   8c428:	18f94d04 	addi	r3,r3,-6860
   8c42c:	1885883a 	add	r2,r3,r2
   8c430:	11800017 	ldw	r6,0(r2)
   8c434:	11c00117 	ldw	r7,4(r2)
   8c438:	b809883a 	mov	r4,r23
   8c43c:	00980d00 	call	980d0 <__muldf3>
   8c440:	a009883a 	mov	r4,r20
   8c444:	102f883a 	mov	r23,r2
   8c448:	182d883a 	mov	r22,r3
   8c44c:	00993940 	call	99394 <__floatunsidf>
   8c450:	b809883a 	mov	r4,r23
   8c454:	b00b883a 	mov	r5,r22
   8c458:	100d883a 	mov	r6,r2
   8c45c:	180f883a 	mov	r7,r3
   8c460:	0096bfc0 	call	96bfc <__adddf3>
   8c464:	102f883a 	mov	r23,r2
   8c468:	182d883a 	mov	r22,r3
   8c46c:	008003c4 	movi	r2,15
   8c470:	17009416 	blt	r2,fp,8c6c4 <_strtod_r+0x5e8>
   8c474:	a8001926 	beq	r21,zero,8c4dc <_strtod_r+0x400>
   8c478:	05439c0e 	bge	zero,r21,8d2ec <_strtod_r+0x1210>
   8c47c:	00c00584 	movi	r3,22
   8c480:	1d430f16 	blt	r3,r21,8d0c0 <_strtod_r+0xfe4>
   8c484:	a82a90fa 	slli	r21,r21,3
   8c488:	008002b4 	movhi	r2,10
   8c48c:	10b94d04 	addi	r2,r2,-6860
   8c490:	1545883a 	add	r2,r2,r21
   8c494:	11000017 	ldw	r4,0(r2)
   8c498:	11400117 	ldw	r5,4(r2)
   8c49c:	b80d883a 	mov	r6,r23
   8c4a0:	b00f883a 	mov	r7,r22
   8c4a4:	00980d00 	call	980d0 <__muldf3>
   8c4a8:	d8800815 	stw	r2,32(sp)
   8c4ac:	1839883a 	mov	fp,r3
   8c4b0:	003fb306 	br	8c380 <__ram_exceptions_end+0xfff6c14c>
   8c4b4:	014002b4 	movhi	r5,10
   8c4b8:	29798304 	addi	r5,r5,-6644
   8c4bc:	d9800204 	addi	r6,sp,8
   8c4c0:	d9000604 	addi	r4,sp,24
   8c4c4:	00941e80 	call	941e8 <__hexnan>
   8c4c8:	00c00144 	movi	r3,5
   8c4cc:	10c2161e 	bne	r2,r3,8cd28 <_strtod_r+0xc4c>
   8c4d0:	dd800317 	ldw	r22,12(sp)
   8c4d4:	ddc00217 	ldw	r23,8(sp)
   8c4d8:	b59ffc34 	orhi	r22,r22,32752
   8c4dc:	ddc00815 	stw	r23,32(sp)
   8c4e0:	b039883a 	mov	fp,r22
   8c4e4:	003fa606 	br	8c380 <__ram_exceptions_end+0xfff6c14c>
   8c4e8:	e001a926 	beq	fp,zero,8cb90 <_strtod_r+0xab4>
   8c4ec:	d8c00617 	ldw	r3,24(sp)
   8c4f0:	18800044 	addi	r2,r3,1
   8c4f4:	d8800615 	stw	r2,24(sp)
   8c4f8:	d8c00715 	stw	r3,28(sp)
   8c4fc:	18c00047 	ldb	r3,1(r3)
   8c500:	00800ac4 	movi	r2,43
   8c504:	1881e526 	beq	r3,r2,8cc9c <_strtod_r+0xbc0>
   8c508:	00800b44 	movi	r2,45
   8c50c:	1881dc26 	beq	r3,r2,8cc80 <_strtod_r+0xba4>
   8c510:	182f883a 	mov	r23,r3
   8c514:	d8000e15 	stw	zero,56(sp)
   8c518:	b8bff404 	addi	r2,r23,-48
   8c51c:	01000244 	movi	r4,9
   8c520:	2081ab36 	bltu	r4,r2,8cbd0 <_strtod_r+0xaf4>
   8c524:	00800c04 	movi	r2,48
   8c528:	b880071e 	bne	r23,r2,8c548 <_strtod_r+0x46c>
   8c52c:	d8800617 	ldw	r2,24(sp)
   8c530:	b809883a 	mov	r4,r23
   8c534:	10800044 	addi	r2,r2,1
   8c538:	d8800615 	stw	r2,24(sp)
   8c53c:	15c00007 	ldb	r23,0(r2)
   8c540:	10800044 	addi	r2,r2,1
   8c544:	b93ffc26 	beq	r23,r4,8c538 <__ram_exceptions_end+0xfff6c304>
   8c548:	b8bff3c4 	addi	r2,r23,-49
   8c54c:	01000204 	movi	r4,8
   8c550:	20bf8736 	bltu	r4,r2,8c370 <__ram_exceptions_end+0xfff6c13c>
   8c554:	d8c00617 	ldw	r3,24(sp)
   8c558:	b93ff404 	addi	r4,r23,-48
   8c55c:	01400244 	movi	r5,9
   8c560:	1ac00044 	addi	r11,r3,1
   8c564:	dac00615 	stw	r11,24(sp)
   8c568:	d8c00d15 	stw	r3,52(sp)
   8c56c:	18c00043 	ldbu	r3,1(r3)
   8c570:	18bff404 	addi	r2,r3,-48
   8c574:	1dc03fcc 	andi	r23,r3,255
   8c578:	bdc0201c 	xori	r23,r23,128
   8c57c:	10803fcc 	andi	r2,r2,255
   8c580:	bdffe004 	addi	r23,r23,-128
   8c584:	28801136 	bltu	r5,r2,8c5cc <_strtod_r+0x4f0>
   8c588:	d8c00d17 	ldw	r3,52(sp)
   8c58c:	1d400084 	addi	r21,r3,2
   8c590:	01400284 	movi	r5,10
   8c594:	00822140 	call	82214 <__mulsi3>
   8c598:	dd400615 	stw	r21,24(sp)
   8c59c:	a9400003 	ldbu	r5,0(r21)
   8c5a0:	15c5883a 	add	r2,r2,r23
   8c5a4:	a817883a 	mov	r11,r21
   8c5a8:	28fff404 	addi	r3,r5,-48
   8c5ac:	2dc03fcc 	andi	r23,r5,255
   8c5b0:	bdc0201c 	xori	r23,r23,128
   8c5b4:	18c03fcc 	andi	r3,r3,255
   8c5b8:	01400244 	movi	r5,9
   8c5bc:	113ff404 	addi	r4,r2,-48
   8c5c0:	bdffe004 	addi	r23,r23,-128
   8c5c4:	ad400044 	addi	r21,r21,1
   8c5c8:	28fff12e 	bgeu	r5,r3,8c590 <__ram_exceptions_end+0xfff6c35c>
   8c5cc:	d8c00d17 	ldw	r3,52(sp)
   8c5d0:	00800204 	movi	r2,8
   8c5d4:	58d7c83a 	sub	r11,r11,r3
   8c5d8:	12c2ab16 	blt	r2,r11,8d088 <_strtod_r+0xfac>
   8c5dc:	009387c4 	movi	r2,19999
   8c5e0:	1100010e 	bge	r2,r4,8c5e8 <_strtod_r+0x50c>
   8c5e4:	1009883a 	mov	r4,r2
   8c5e8:	d8c00e17 	ldw	r3,56(sp)
   8c5ec:	183f6126 	beq	r3,zero,8c374 <__ram_exceptions_end+0xfff6c140>
   8c5f0:	0109c83a 	sub	r4,zero,r4
   8c5f4:	003f5f06 	br	8c374 <__ram_exceptions_end+0xfff6c140>
   8c5f8:	80800047 	ldb	r2,1(r16)
   8c5fc:	00c01604 	movi	r3,88
   8c600:	10c20026 	beq	r2,r3,8ce04 <_strtod_r+0xd28>
   8c604:	00c01e04 	movi	r3,120
   8c608:	10c1fe26 	beq	r2,r3,8ce04 <_strtod_r+0xd28>
   8c60c:	80800044 	addi	r2,r16,1
   8c610:	1021883a 	mov	r16,r2
   8c614:	d8800615 	stw	r2,24(sp)
   8c618:	10800044 	addi	r2,r2,1
   8c61c:	173fffc3 	ldbu	fp,-1(r2)
   8c620:	e0c03fcc 	andi	r3,fp,255
   8c624:	18c0201c 	xori	r3,r3,128
   8c628:	18ffe004 	addi	r3,r3,-128
   8c62c:	193ff826 	beq	r3,r4,8c610 <__ram_exceptions_end+0xfff6c3dc>
   8c630:	18002126 	beq	r3,zero,8c6b8 <_strtod_r+0x5dc>
   8c634:	00c00044 	movi	r3,1
   8c638:	dc000815 	stw	r16,32(sp)
   8c63c:	d8c00c15 	stw	r3,48(sp)
   8c640:	003f1b06 	br	8c2b0 <__ram_exceptions_end+0xfff6c07c>
   8c644:	8809883a 	mov	r4,r17
   8c648:	0089be00 	call	89be0 <_localeconv_r>
   8c64c:	11000017 	ldw	r4,0(r2)
   8c650:	00831980 	call	83198 <strlen>
   8c654:	d8c00617 	ldw	r3,24(sp)
   8c658:	1885883a 	add	r2,r3,r2
   8c65c:	d8800615 	stw	r2,24(sp)
   8c660:	15c00007 	ldb	r23,0(r2)
   8c664:	8001771e 	bne	r16,zero,8cc44 <_strtod_r+0xb68>
   8c668:	01000c04 	movi	r4,48
   8c66c:	b903581e 	bne	r23,r4,8d3d0 <_strtod_r+0x12f4>
   8c670:	11000044 	addi	r4,r2,1
   8c674:	b80b883a 	mov	r5,r23
   8c678:	d9000615 	stw	r4,24(sp)
   8c67c:	25c00007 	ldb	r23,0(r4)
   8c680:	20adc83a 	sub	r22,r4,r2
   8c684:	21000044 	addi	r4,r4,1
   8c688:	b97ffb26 	beq	r23,r5,8c678 <__ram_exceptions_end+0xfff6c444>
   8c68c:	b8bff3c4 	addi	r2,r23,-49
   8c690:	01000204 	movi	r4,8
   8c694:	2083002e 	bgeu	r4,r2,8d298 <_strtod_r+0x11bc>
   8c698:	00801944 	movi	r2,101
   8c69c:	b8813a26 	beq	r23,r2,8cb88 <_strtod_r+0xaac>
   8c6a0:	0039883a 	mov	fp,zero
   8c6a4:	d8000b15 	stw	zero,44(sp)
   8c6a8:	04800044 	movi	r18,1
   8c6ac:	003f2e06 	br	8c368 <__ram_exceptions_end+0xfff6c134>
   8c6b0:	d8c00c17 	ldw	r3,48(sp)
   8c6b4:	18017d26 	beq	r3,zero,8ccac <_strtod_r+0xbd0>
   8c6b8:	d8000815 	stw	zero,32(sp)
   8c6bc:	0039883a 	mov	fp,zero
   8c6c0:	003f2f06 	br	8c380 <__ram_exceptions_end+0xfff6c14c>
   8c6c4:	e4a5c83a 	sub	r18,fp,r18
   8c6c8:	9565883a 	add	r18,r18,r21
   8c6cc:	0482370e 	bge	zero,r18,8cfac <_strtod_r+0xed0>
   8c6d0:	908003cc 	andi	r2,r18,15
   8c6d4:	10000b26 	beq	r2,zero,8c704 <_strtod_r+0x628>
   8c6d8:	100490fa 	slli	r2,r2,3
   8c6dc:	00c002b4 	movhi	r3,10
   8c6e0:	18f94d04 	addi	r3,r3,-6860
   8c6e4:	1885883a 	add	r2,r3,r2
   8c6e8:	11000017 	ldw	r4,0(r2)
   8c6ec:	11400117 	ldw	r5,4(r2)
   8c6f0:	b80d883a 	mov	r6,r23
   8c6f4:	b00f883a 	mov	r7,r22
   8c6f8:	00980d00 	call	980d0 <__muldf3>
   8c6fc:	102f883a 	mov	r23,r2
   8c700:	182d883a 	mov	r22,r3
   8c704:	053ffc04 	movi	r20,-16
   8c708:	9524703a 	and	r18,r18,r20
   8c70c:	90003826 	beq	r18,zero,8c7f0 <_strtod_r+0x714>
   8c710:	00804d04 	movi	r2,308
   8c714:	1481eb16 	blt	r2,r18,8cec4 <_strtod_r+0xde8>
   8c718:	9029d13a 	srai	r20,r18,4
   8c71c:	02c00044 	movi	r11,1
   8c720:	5d03900e 	bge	r11,r20,8d564 <_strtod_r+0x1488>
   8c724:	010002b4 	movhi	r4,10
   8c728:	21394304 	addi	r4,r4,-6900
   8c72c:	2011883a 	mov	r8,r4
   8c730:	0025883a 	mov	r18,zero
   8c734:	880b883a 	mov	r5,r17
   8c738:	d9000715 	stw	r4,28(sp)
   8c73c:	dc000b15 	stw	r16,44(sp)
   8c740:	9023883a 	mov	r17,r18
   8c744:	b805883a 	mov	r2,r23
   8c748:	b007883a 	mov	r3,r22
   8c74c:	0009883a 	mov	r4,zero
   8c750:	4021883a 	mov	r16,r8
   8c754:	2825883a 	mov	r18,r5
   8c758:	a180004c 	andi	r6,r20,1
   8c75c:	30000826 	beq	r6,zero,8c780 <_strtod_r+0x6a4>
   8c760:	81800017 	ldw	r6,0(r16)
   8c764:	81c00117 	ldw	r7,4(r16)
   8c768:	1009883a 	mov	r4,r2
   8c76c:	180b883a 	mov	r5,r3
   8c770:	dac01315 	stw	r11,76(sp)
   8c774:	00980d00 	call	980d0 <__muldf3>
   8c778:	dac01317 	ldw	r11,76(sp)
   8c77c:	01000044 	movi	r4,1
   8c780:	a029d07a 	srai	r20,r20,1
   8c784:	8c400044 	addi	r17,r17,1
   8c788:	84000204 	addi	r16,r16,8
   8c78c:	a2fff21e 	bne	r20,r11,8c758 <__ram_exceptions_end+0xfff6c524>
   8c790:	900b883a 	mov	r5,r18
   8c794:	21003fcc 	andi	r4,r4,255
   8c798:	8825883a 	mov	r18,r17
   8c79c:	dc000b17 	ldw	r16,44(sp)
   8c7a0:	2823883a 	mov	r17,r5
   8c7a4:	2003c01e 	bne	r4,zero,8d6a8 <_strtod_r+0x15cc>
   8c7a8:	901490fa 	slli	r10,r18,3
   8c7ac:	d8800717 	ldw	r2,28(sp)
   8c7b0:	01ff2c34 	movhi	r7,64688
   8c7b4:	b80d883a 	mov	r6,r23
   8c7b8:	12a5883a 	add	r18,r2,r10
   8c7bc:	91000017 	ldw	r4,0(r18)
   8c7c0:	91400117 	ldw	r5,4(r18)
   8c7c4:	b1cf883a 	add	r7,r22,r7
   8c7c8:	00980d00 	call	980d0 <__muldf3>
   8c7cc:	102f883a 	mov	r23,r2
   8c7d0:	011f2834 	movhi	r4,31904
   8c7d4:	189ffc2c 	andhi	r2,r3,32752
   8c7d8:	2081ba36 	bltu	r4,r2,8cec4 <_strtod_r+0xde8>
   8c7dc:	011f2434 	movhi	r4,31888
   8c7e0:	20834a2e 	bgeu	r4,r2,8d50c <_strtod_r+0x1430>
   8c7e4:	059ffc34 	movhi	r22,32752
   8c7e8:	b5bfffc4 	addi	r22,r22,-1
   8c7ec:	05ffffc4 	movi	r23,-1
   8c7f0:	d8000715 	stw	zero,28(sp)
   8c7f4:	d9400817 	ldw	r5,32(sp)
   8c7f8:	dcc00015 	stw	r19,0(sp)
   8c7fc:	e00f883a 	mov	r7,fp
   8c800:	800d883a 	mov	r6,r16
   8c804:	8809883a 	mov	r4,r17
   8c808:	008a5d00 	call	8a5d0 <__s2b>
   8c80c:	d8800b15 	stw	r2,44(sp)
   8c810:	1001ac26 	beq	r2,zero,8cec4 <_strtod_r+0xde8>
   8c814:	a807d7fa 	srai	r3,r21,31
   8c818:	0545c83a 	sub	r2,zero,r21
   8c81c:	dd400c15 	stw	r21,48(sp)
   8c820:	1886703a 	and	r3,r3,r2
   8c824:	d8c00e15 	stw	r3,56(sp)
   8c828:	a8015916 	blt	r21,zero,8cd90 <_strtod_r+0xcb4>
   8c82c:	d9400b17 	ldw	r5,44(sp)
   8c830:	0011883a 	mov	r8,zero
   8c834:	0021883a 	mov	r16,zero
   8c838:	29400304 	addi	r5,r5,12
   8c83c:	d9401115 	stw	r5,68(sp)
   8c840:	4025883a 	mov	r18,r8
   8c844:	d8800b17 	ldw	r2,44(sp)
   8c848:	8809883a 	mov	r4,r17
   8c84c:	11400117 	ldw	r5,4(r2)
   8c850:	008a3b80 	call	8a3b8 <_Balloc>
   8c854:	1027883a 	mov	r19,r2
   8c858:	10015226 	beq	r2,zero,8cda4 <_strtod_r+0xcc8>
   8c85c:	d8c00b17 	ldw	r3,44(sp)
   8c860:	d9401117 	ldw	r5,68(sp)
   8c864:	11000304 	addi	r4,r2,12
   8c868:	19800417 	ldw	r6,16(r3)
   8c86c:	31800084 	addi	r6,r6,2
   8c870:	318d883a 	add	r6,r6,r6
   8c874:	318d883a 	add	r6,r6,r6
   8c878:	0082be40 	call	82be4 <memcpy>
   8c87c:	d9000204 	addi	r4,sp,8
   8c880:	d9000015 	stw	r4,0(sp)
   8c884:	d9c00404 	addi	r7,sp,16
   8c888:	b80b883a 	mov	r5,r23
   8c88c:	b00d883a 	mov	r6,r22
   8c890:	8809883a 	mov	r4,r17
   8c894:	008b1080 	call	8b108 <__d2b>
   8c898:	d8800515 	stw	r2,20(sp)
   8c89c:	ddc00815 	stw	r23,32(sp)
   8c8a0:	dd801215 	stw	r22,72(sp)
   8c8a4:	10029f26 	beq	r2,zero,8d324 <_strtod_r+0x1248>
   8c8a8:	01400044 	movi	r5,1
   8c8ac:	8809883a 	mov	r4,r17
   8c8b0:	008a7ec0 	call	8a7ec <__i2b>
   8c8b4:	1021883a 	mov	r16,r2
   8c8b8:	10013a26 	beq	r2,zero,8cda4 <_strtod_r+0xcc8>
   8c8bc:	d8800417 	ldw	r2,16(sp)
   8c8c0:	1000b816 	blt	r2,zero,8cba4 <_strtod_r+0xac8>
   8c8c4:	d9400e17 	ldw	r5,56(sp)
   8c8c8:	d9000c17 	ldw	r4,48(sp)
   8c8cc:	28a9883a 	add	r20,r5,r2
   8c8d0:	d9400717 	ldw	r5,28(sp)
   8c8d4:	dd400217 	ldw	r21,8(sp)
   8c8d8:	073f0084 	movi	fp,-1022
   8c8dc:	1147c83a 	sub	r3,r2,r5
   8c8e0:	1d47883a 	add	r3,r3,r21
   8c8e4:	00800d84 	movi	r2,54
   8c8e8:	18ffffc4 	addi	r3,r3,-1
   8c8ec:	156bc83a 	sub	r21,r2,r21
   8c8f0:	1f00950e 	bge	r3,fp,8cb48 <_strtod_r+0xa6c>
   8c8f4:	e0f9c83a 	sub	fp,fp,r3
   8c8f8:	008007c4 	movi	r2,31
   8c8fc:	af2bc83a 	sub	r21,r21,fp
   8c900:	1700ac16 	blt	r2,fp,8cbb4 <_strtod_r+0xad8>
   8c904:	00800044 	movi	r2,1
   8c908:	1704983a 	sll	r2,r2,fp
   8c90c:	d8000d15 	stw	zero,52(sp)
   8c910:	d8800f15 	stw	r2,60(sp)
   8c914:	2547883a 	add	r3,r4,r21
   8c918:	d9000717 	ldw	r4,28(sp)
   8c91c:	a56b883a 	add	r21,r20,r21
   8c920:	20f9883a 	add	fp,r4,r3
   8c924:	a009883a 	mov	r4,r20
   8c928:	ad00010e 	bge	r21,r20,8c930 <_strtod_r+0x854>
   8c92c:	a809883a 	mov	r4,r21
   8c930:	e005883a 	mov	r2,fp
   8c934:	2700010e 	bge	r4,fp,8c93c <_strtod_r+0x860>
   8c938:	2005883a 	mov	r2,r4
   8c93c:	0080030e 	bge	zero,r2,8c94c <_strtod_r+0x870>
   8c940:	a8abc83a 	sub	r21,r21,r2
   8c944:	e0b9c83a 	sub	fp,fp,r2
   8c948:	a0a9c83a 	sub	r20,r20,r2
   8c94c:	d9400e17 	ldw	r5,56(sp)
   8c950:	28001126 	beq	r5,zero,8c998 <_strtod_r+0x8bc>
   8c954:	280d883a 	mov	r6,r5
   8c958:	8809883a 	mov	r4,r17
   8c95c:	800b883a 	mov	r5,r16
   8c960:	008aab40 	call	8aab4 <__pow5mult>
   8c964:	1021883a 	mov	r16,r2
   8c968:	10010e26 	beq	r2,zero,8cda4 <_strtod_r+0xcc8>
   8c96c:	d9800517 	ldw	r6,20(sp)
   8c970:	100b883a 	mov	r5,r2
   8c974:	8809883a 	mov	r4,r17
   8c978:	008a8280 	call	8a828 <__multiply>
   8c97c:	10010926 	beq	r2,zero,8cda4 <_strtod_r+0xcc8>
   8c980:	d9400517 	ldw	r5,20(sp)
   8c984:	8809883a 	mov	r4,r17
   8c988:	d8801315 	stw	r2,76(sp)
   8c98c:	008a4600 	call	8a460 <_Bfree>
   8c990:	d8801317 	ldw	r2,76(sp)
   8c994:	d8800515 	stw	r2,20(sp)
   8c998:	0540060e 	bge	zero,r21,8c9b4 <_strtod_r+0x8d8>
   8c99c:	d9400517 	ldw	r5,20(sp)
   8c9a0:	a80d883a 	mov	r6,r21
   8c9a4:	8809883a 	mov	r4,r17
   8c9a8:	008abf40 	call	8abf4 <__lshift>
   8c9ac:	d8800515 	stw	r2,20(sp)
   8c9b0:	10025c26 	beq	r2,zero,8d324 <_strtod_r+0x1248>
   8c9b4:	d8800c17 	ldw	r2,48(sp)
   8c9b8:	10000626 	beq	r2,zero,8c9d4 <_strtod_r+0x8f8>
   8c9bc:	d9800c17 	ldw	r6,48(sp)
   8c9c0:	980b883a 	mov	r5,r19
   8c9c4:	8809883a 	mov	r4,r17
   8c9c8:	008aab40 	call	8aab4 <__pow5mult>
   8c9cc:	1027883a 	mov	r19,r2
   8c9d0:	1000f426 	beq	r2,zero,8cda4 <_strtod_r+0xcc8>
   8c9d4:	0700060e 	bge	zero,fp,8c9f0 <_strtod_r+0x914>
   8c9d8:	980b883a 	mov	r5,r19
   8c9dc:	e00d883a 	mov	r6,fp
   8c9e0:	8809883a 	mov	r4,r17
   8c9e4:	008abf40 	call	8abf4 <__lshift>
   8c9e8:	1027883a 	mov	r19,r2
   8c9ec:	1000ed26 	beq	r2,zero,8cda4 <_strtod_r+0xcc8>
   8c9f0:	0500060e 	bge	zero,r20,8ca0c <_strtod_r+0x930>
   8c9f4:	800b883a 	mov	r5,r16
   8c9f8:	a00d883a 	mov	r6,r20
   8c9fc:	8809883a 	mov	r4,r17
   8ca00:	008abf40 	call	8abf4 <__lshift>
   8ca04:	1021883a 	mov	r16,r2
   8ca08:	1000e626 	beq	r2,zero,8cda4 <_strtod_r+0xcc8>
   8ca0c:	d9400517 	ldw	r5,20(sp)
   8ca10:	980d883a 	mov	r6,r19
   8ca14:	8809883a 	mov	r4,r17
   8ca18:	008ad9c0 	call	8ad9c <__mdiff>
   8ca1c:	1025883a 	mov	r18,r2
   8ca20:	1000e026 	beq	r2,zero,8cda4 <_strtod_r+0xcc8>
   8ca24:	15400317 	ldw	r21,12(r2)
   8ca28:	800b883a 	mov	r5,r16
   8ca2c:	10000315 	stw	zero,12(r2)
   8ca30:	1009883a 	mov	r4,r2
   8ca34:	008ad3c0 	call	8ad3c <__mcmp>
   8ca38:	10026716 	blt	r2,zero,8d3d8 <_strtod_r+0x12fc>
   8ca3c:	10029626 	beq	r2,zero,8d498 <_strtod_r+0x13bc>
   8ca40:	800b883a 	mov	r5,r16
   8ca44:	9009883a 	mov	r4,r18
   8ca48:	008b2540 	call	8b254 <__ratio>
   8ca4c:	000d883a 	mov	r6,zero
   8ca50:	01d00034 	movhi	r7,16384
   8ca54:	1009883a 	mov	r4,r2
   8ca58:	180b883a 	mov	r5,r3
   8ca5c:	1039883a 	mov	fp,r2
   8ca60:	1829883a 	mov	r20,r3
   8ca64:	0097fdc0 	call	97fdc <__ledf2>
   8ca68:	00803b16 	blt	zero,r2,8cb58 <_strtod_r+0xa7c>
   8ca6c:	a8005e26 	beq	r21,zero,8cbe8 <_strtod_r+0xb0c>
   8ca70:	050ffc34 	movhi	r20,16368
   8ca74:	d8000f15 	stw	zero,60(sp)
   8ca78:	d8001015 	stw	zero,64(sp)
   8ca7c:	dd000d15 	stw	r20,52(sp)
   8ca80:	b71ffc2c 	andhi	fp,r22,32752
   8ca84:	009ff834 	movhi	r2,32736
   8ca88:	e080f226 	beq	fp,r2,8ce54 <_strtod_r+0xd78>
   8ca8c:	d9000717 	ldw	r4,28(sp)
   8ca90:	20000c26 	beq	r4,zero,8cac4 <_strtod_r+0x9e8>
   8ca94:	0081a834 	movhi	r2,1696
   8ca98:	17000a36 	bltu	r2,fp,8cac4 <_strtod_r+0x9e8>
   8ca9c:	d9001017 	ldw	r4,64(sp)
   8caa0:	d9400d17 	ldw	r5,52(sp)
   8caa4:	01d07834 	movhi	r7,16864
   8caa8:	39ffffc4 	addi	r7,r7,-1
   8caac:	01bff034 	movhi	r6,65472
   8cab0:	0097fdc0 	call	97fdc <__ledf2>
   8cab4:	0080a70e 	bge	zero,r2,8cd54 <_strtod_r+0xc78>
   8cab8:	0081ac34 	movhi	r2,1712
   8cabc:	a091883a 	add	r8,r20,r2
   8cac0:	4729c83a 	sub	r20,r8,fp
   8cac4:	b809883a 	mov	r4,r23
   8cac8:	b00b883a 	mov	r5,r22
   8cacc:	008af980 	call	8af98 <__ulp>
   8cad0:	d9000f17 	ldw	r4,60(sp)
   8cad4:	a00b883a 	mov	r5,r20
   8cad8:	100d883a 	mov	r6,r2
   8cadc:	180f883a 	mov	r7,r3
   8cae0:	00980d00 	call	980d0 <__muldf3>
   8cae4:	b80d883a 	mov	r6,r23
   8cae8:	b00f883a 	mov	r7,r22
   8caec:	1009883a 	mov	r4,r2
   8caf0:	180b883a 	mov	r5,r3
   8caf4:	0096bfc0 	call	96bfc <__adddf3>
   8caf8:	102f883a 	mov	r23,r2
   8cafc:	182d883a 	mov	r22,r3
   8cb00:	1829883a 	mov	r20,r3
   8cb04:	d9000717 	ldw	r4,28(sp)
   8cb08:	2000021e 	bne	r4,zero,8cb14 <_strtod_r+0xa38>
   8cb0c:	a09ffc2c 	andhi	r2,r20,32752
   8cb10:	e080f126 	beq	fp,r2,8ced8 <_strtod_r+0xdfc>
   8cb14:	d9400517 	ldw	r5,20(sp)
   8cb18:	8809883a 	mov	r4,r17
   8cb1c:	008a4600 	call	8a460 <_Bfree>
   8cb20:	980b883a 	mov	r5,r19
   8cb24:	8809883a 	mov	r4,r17
   8cb28:	008a4600 	call	8a460 <_Bfree>
   8cb2c:	800b883a 	mov	r5,r16
   8cb30:	8809883a 	mov	r4,r17
   8cb34:	008a4600 	call	8a460 <_Bfree>
   8cb38:	900b883a 	mov	r5,r18
   8cb3c:	8809883a 	mov	r4,r17
   8cb40:	008a4600 	call	8a460 <_Bfree>
   8cb44:	003f3f06 	br	8c844 <__ram_exceptions_end+0xfff6c610>
   8cb48:	00c00044 	movi	r3,1
   8cb4c:	d8000d15 	stw	zero,52(sp)
   8cb50:	d8c00f15 	stw	r3,60(sp)
   8cb54:	003f6f06 	br	8c914 <__ram_exceptions_end+0xfff6c6e0>
   8cb58:	000d883a 	mov	r6,zero
   8cb5c:	01cff834 	movhi	r7,16352
   8cb60:	e009883a 	mov	r4,fp
   8cb64:	a00b883a 	mov	r5,r20
   8cb68:	00980d00 	call	980d0 <__muldf3>
   8cb6c:	d8801015 	stw	r2,64(sp)
   8cb70:	d8c00d15 	stw	r3,52(sp)
   8cb74:	a8001a1e 	bne	r21,zero,8cbe0 <_strtod_r+0xb04>
   8cb78:	1a20003c 	xorhi	r8,r3,32768
   8cb7c:	d8800f15 	stw	r2,60(sp)
   8cb80:	4029883a 	mov	r20,r8
   8cb84:	003fbe06 	br	8ca80 <__ram_exceptions_end+0xfff6c84c>
   8cb88:	d8000b15 	stw	zero,44(sp)
   8cb8c:	04800044 	movi	r18,1
   8cb90:	b000021e 	bne	r22,zero,8cb9c <_strtod_r+0xac0>
   8cb94:	d8c00c17 	ldw	r3,48(sp)
   8cb98:	183d9d26 	beq	r3,zero,8c210 <__ram_exceptions_end+0xfff6bfdc>
   8cb9c:	0039883a 	mov	fp,zero
   8cba0:	003e5206 	br	8c4ec <__ram_exceptions_end+0xfff6c2b8>
   8cba4:	d8c00c17 	ldw	r3,48(sp)
   8cba8:	dd000e17 	ldw	r20,56(sp)
   8cbac:	1889c83a 	sub	r4,r3,r2
   8cbb0:	003f4706 	br	8c8d0 <__ram_exceptions_end+0xfff6c69c>
   8cbb4:	00bef884 	movi	r2,-1054
   8cbb8:	07000044 	movi	fp,1
   8cbbc:	10c5c83a 	sub	r2,r2,r3
   8cbc0:	e084983a 	sll	r2,fp,r2
   8cbc4:	df000f15 	stw	fp,60(sp)
   8cbc8:	d8800d15 	stw	r2,52(sp)
   8cbcc:	003f5106 	br	8c914 <__ram_exceptions_end+0xfff6c6e0>
   8cbd0:	d8c00717 	ldw	r3,28(sp)
   8cbd4:	0009883a 	mov	r4,zero
   8cbd8:	d8c00615 	stw	r3,24(sp)
   8cbdc:	003de506 	br	8c374 <__ram_exceptions_end+0xfff6c140>
   8cbe0:	da000d17 	ldw	r8,52(sp)
   8cbe4:	003fe506 	br	8cb7c <__ram_exceptions_end+0xfff6c948>
   8cbe8:	b800521e 	bne	r23,zero,8cd34 <_strtod_r+0xc58>
   8cbec:	01000434 	movhi	r4,16
   8cbf0:	213fffc4 	addi	r4,r4,-1
   8cbf4:	b104703a 	and	r2,r22,r4
   8cbf8:	1000501e 	bne	r2,zero,8cd3c <_strtod_r+0xc60>
   8cbfc:	000d883a 	mov	r6,zero
   8cc00:	01cffc34 	movhi	r7,16368
   8cc04:	e009883a 	mov	r4,fp
   8cc08:	a00b883a 	mov	r5,r20
   8cc0c:	0097fdc0 	call	97fdc <__ledf2>
   8cc10:	10024216 	blt	r2,zero,8d51c <_strtod_r+0x1440>
   8cc14:	a00b883a 	mov	r5,r20
   8cc18:	000d883a 	mov	r6,zero
   8cc1c:	01cff834 	movhi	r7,16352
   8cc20:	e009883a 	mov	r4,fp
   8cc24:	00980d00 	call	980d0 <__muldf3>
   8cc28:	d8801015 	stw	r2,64(sp)
   8cc2c:	d8c00d15 	stw	r3,52(sp)
   8cc30:	1029883a 	mov	r20,r2
   8cc34:	1a20003c 	xorhi	r8,r3,32768
   8cc38:	dd000f15 	stw	r20,60(sp)
   8cc3c:	4029883a 	mov	r20,r8
   8cc40:	003f8f06 	br	8ca80 <__ram_exceptions_end+0xfff6c84c>
   8cc44:	8039883a 	mov	fp,r16
   8cc48:	002d883a 	mov	r22,zero
   8cc4c:	d8000b15 	stw	zero,44(sp)
   8cc50:	bd7ff404 	addi	r21,r23,-48
   8cc54:	00800244 	movi	r2,9
   8cc58:	15401236 	bltu	r2,r21,8cca4 <_strtod_r+0xbc8>
   8cc5c:	dd400e15 	stw	r21,56(sp)
   8cc60:	b0800044 	addi	r2,r22,1
   8cc64:	a801701e 	bne	r21,zero,8d228 <_strtod_r+0x114c>
   8cc68:	ddc00617 	ldw	r23,24(sp)
   8cc6c:	102d883a 	mov	r22,r2
   8cc70:	b8800044 	addi	r2,r23,1
   8cc74:	d8800615 	stw	r2,24(sp)
   8cc78:	bdc00047 	ldb	r23,1(r23)
   8cc7c:	003ff406 	br	8cc50 <__ram_exceptions_end+0xfff6ca1c>
   8cc80:	00c00044 	movi	r3,1
   8cc84:	d8c00e15 	stw	r3,56(sp)
   8cc88:	d8c00717 	ldw	r3,28(sp)
   8cc8c:	18800084 	addi	r2,r3,2
   8cc90:	d8800615 	stw	r2,24(sp)
   8cc94:	1dc00087 	ldb	r23,2(r3)
   8cc98:	003e1f06 	br	8c518 <__ram_exceptions_end+0xfff6c2e4>
   8cc9c:	d8000e15 	stw	zero,56(sp)
   8cca0:	003ff906 	br	8cc88 <__ram_exceptions_end+0xfff6ca54>
   8cca4:	04800044 	movi	r18,1
   8cca8:	003dad06 	br	8c360 <__ram_exceptions_end+0xfff6c12c>
   8ccac:	903d581e 	bne	r18,zero,8c210 <__ram_exceptions_end+0xfff6bfdc>
   8ccb0:	00801384 	movi	r2,78
   8ccb4:	b8800526 	beq	r23,r2,8cccc <_strtod_r+0xbf0>
   8ccb8:	15fd530e 	bge	r2,r23,8c208 <__ram_exceptions_end+0xfff6bfd4>
   8ccbc:	00801a44 	movi	r2,105
   8ccc0:	b8819a26 	beq	r23,r2,8d32c <_strtod_r+0x1250>
   8ccc4:	00801b84 	movi	r2,110
   8ccc8:	b8bd511e 	bne	r23,r2,8c210 <__ram_exceptions_end+0xfff6bfdc>
   8cccc:	014002b4 	movhi	r5,10
   8ccd0:	d9000617 	ldw	r4,24(sp)
   8ccd4:	29798204 	addi	r5,r5,-6648
   8ccd8:	01c00644 	movi	r7,25
   8ccdc:	00000b06 	br	8cd0c <_strtod_r+0xc30>
   8cce0:	21000044 	addi	r4,r4,1
   8cce4:	20800003 	ldbu	r2,0(r4)
   8cce8:	10ffefc4 	addi	r3,r2,-65
   8ccec:	10803fcc 	andi	r2,r2,255
   8ccf0:	1080201c 	xori	r2,r2,128
   8ccf4:	18c03fcc 	andi	r3,r3,255
   8ccf8:	10bfe004 	addi	r2,r2,-128
   8ccfc:	38c00136 	bltu	r7,r3,8cd04 <_strtod_r+0xc28>
   8cd00:	10800804 	addi	r2,r2,32
   8cd04:	29400044 	addi	r5,r5,1
   8cd08:	11bd411e 	bne	r2,r6,8c210 <__ram_exceptions_end+0xfff6bfdc>
   8cd0c:	29800007 	ldb	r6,0(r5)
   8cd10:	303ff31e 	bne	r6,zero,8cce0 <__ram_exceptions_end+0xfff6caac>
   8cd14:	20800044 	addi	r2,r4,1
   8cd18:	d8800615 	stw	r2,24(sp)
   8cd1c:	20c00047 	ldb	r3,1(r4)
   8cd20:	00800a04 	movi	r2,40
   8cd24:	18bde326 	beq	r3,r2,8c4b4 <__ram_exceptions_end+0xfff6c280>
   8cd28:	05bffe34 	movhi	r22,65528
   8cd2c:	002f883a 	mov	r23,zero
   8cd30:	003dea06 	br	8c4dc <__ram_exceptions_end+0xfff6c2a8>
   8cd34:	00800044 	movi	r2,1
   8cd38:	b880ff26 	beq	r23,r2,8d138 <_strtod_r+0x105c>
   8cd3c:	014ffc34 	movhi	r5,16368
   8cd40:	d8000f15 	stw	zero,60(sp)
   8cd44:	052ffc34 	movhi	r20,49136
   8cd48:	d8001015 	stw	zero,64(sp)
   8cd4c:	d9400d15 	stw	r5,52(sp)
   8cd50:	003f4b06 	br	8ca80 <__ram_exceptions_end+0xfff6c84c>
   8cd54:	d9001017 	ldw	r4,64(sp)
   8cd58:	d9400d17 	ldw	r5,52(sp)
   8cd5c:	0095dcc0 	call	95dcc <__fixunsdfsi>
   8cd60:	1000f126 	beq	r2,zero,8d128 <_strtod_r+0x104c>
   8cd64:	1009883a 	mov	r4,r2
   8cd68:	00993940 	call	99394 <__floatunsidf>
   8cd6c:	d8801015 	stw	r2,64(sp)
   8cd70:	d8c00d15 	stw	r3,52(sp)
   8cd74:	a800ea1e 	bne	r21,zero,8d120 <_strtod_r+0x1044>
   8cd78:	d8800d17 	ldw	r2,52(sp)
   8cd7c:	1220003c 	xorhi	r8,r2,32768
   8cd80:	d8c01017 	ldw	r3,64(sp)
   8cd84:	4029883a 	mov	r20,r8
   8cd88:	d8c00f15 	stw	r3,60(sp)
   8cd8c:	003f4a06 	br	8cab8 <__ram_exceptions_end+0xfff6c884>
   8cd90:	d8000c15 	stw	zero,48(sp)
   8cd94:	003ea506 	br	8c82c <__ram_exceptions_end+0xfff6c5f8>
   8cd98:	d8c00817 	ldw	r3,32(sp)
   8cd9c:	00bfffc4 	movi	r2,-1
   8cda0:	1880441e 	bne	r3,r2,8ceb4 <_strtod_r+0xdd8>
   8cda4:	9011883a 	mov	r8,r18
   8cda8:	d8800517 	ldw	r2,20(sp)
   8cdac:	00c00884 	movi	r3,34
   8cdb0:	88c00015 	stw	r3,0(r17)
   8cdb4:	d8000815 	stw	zero,32(sp)
   8cdb8:	071ffc34 	movhi	fp,32752
   8cdbc:	100b883a 	mov	r5,r2
   8cdc0:	8809883a 	mov	r4,r17
   8cdc4:	da001315 	stw	r8,76(sp)
   8cdc8:	008a4600 	call	8a460 <_Bfree>
   8cdcc:	980b883a 	mov	r5,r19
   8cdd0:	8809883a 	mov	r4,r17
   8cdd4:	008a4600 	call	8a460 <_Bfree>
   8cdd8:	800b883a 	mov	r5,r16
   8cddc:	8809883a 	mov	r4,r17
   8cde0:	008a4600 	call	8a460 <_Bfree>
   8cde4:	d9400b17 	ldw	r5,44(sp)
   8cde8:	8809883a 	mov	r4,r17
   8cdec:	008a4600 	call	8a460 <_Bfree>
   8cdf0:	da001317 	ldw	r8,76(sp)
   8cdf4:	8809883a 	mov	r4,r17
   8cdf8:	400b883a 	mov	r5,r8
   8cdfc:	008a4600 	call	8a460 <_Bfree>
   8ce00:	003d5f06 	br	8c380 <__ram_exceptions_end+0xfff6c14c>
   8ce04:	d8c00a17 	ldw	r3,40(sp)
   8ce08:	d8800504 	addi	r2,sp,20
   8ce0c:	018002b4 	movhi	r6,10
   8ce10:	31b98804 	addi	r6,r6,-6624
   8ce14:	d8c00115 	stw	r3,4(sp)
   8ce18:	d8800015 	stw	r2,0(sp)
   8ce1c:	d9c00404 	addi	r7,sp,16
   8ce20:	d9400604 	addi	r5,sp,24
   8ce24:	8809883a 	mov	r4,r17
   8ce28:	00939980 	call	93998 <__gethex>
   8ce2c:	148001cc 	andi	r18,r2,7
   8ce30:	903e2126 	beq	r18,zero,8c6b8 <__ram_exceptions_end+0xfff6c484>
   8ce34:	00c00184 	movi	r3,6
   8ce38:	90c0c71e 	bne	r18,r3,8d158 <_strtod_r+0x107c>
   8ce3c:	84000044 	addi	r16,r16,1
   8ce40:	dc000615 	stw	r16,24(sp)
   8ce44:	d8000815 	stw	zero,32(sp)
   8ce48:	0039883a 	mov	fp,zero
   8ce4c:	d8000a15 	stw	zero,40(sp)
   8ce50:	003d4b06 	br	8c380 <__ram_exceptions_end+0xfff6c14c>
   8ce54:	00bf2c34 	movhi	r2,64688
   8ce58:	b0ad883a 	add	r22,r22,r2
   8ce5c:	b809883a 	mov	r4,r23
   8ce60:	b00b883a 	mov	r5,r22
   8ce64:	008af980 	call	8af98 <__ulp>
   8ce68:	d9000f17 	ldw	r4,60(sp)
   8ce6c:	100d883a 	mov	r6,r2
   8ce70:	180f883a 	mov	r7,r3
   8ce74:	a00b883a 	mov	r5,r20
   8ce78:	00980d00 	call	980d0 <__muldf3>
   8ce7c:	b80d883a 	mov	r6,r23
   8ce80:	1009883a 	mov	r4,r2
   8ce84:	b00f883a 	mov	r7,r22
   8ce88:	180b883a 	mov	r5,r3
   8ce8c:	0096bfc0 	call	96bfc <__adddf3>
   8ce90:	011f2834 	movhi	r4,31904
   8ce94:	102f883a 	mov	r23,r2
   8ce98:	213fffc4 	addi	r4,r4,-1
   8ce9c:	189ffc2c 	andhi	r2,r3,32752
   8cea0:	20807b2e 	bgeu	r4,r2,8d090 <_strtod_r+0xfb4>
   8cea4:	d9401217 	ldw	r5,72(sp)
   8cea8:	009ffc34 	movhi	r2,32752
   8ceac:	10bfffc4 	addi	r2,r2,-1
   8ceb0:	28bfb926 	beq	r5,r2,8cd98 <__ram_exceptions_end+0xfff6cb64>
   8ceb4:	059ffc34 	movhi	r22,32752
   8ceb8:	b5bfffc4 	addi	r22,r22,-1
   8cebc:	05ffffc4 	movi	r23,-1
   8cec0:	003f1406 	br	8cb14 <__ram_exceptions_end+0xfff6c8e0>
   8cec4:	00800884 	movi	r2,34
   8cec8:	88800015 	stw	r2,0(r17)
   8cecc:	d8000815 	stw	zero,32(sp)
   8ced0:	071ffc34 	movhi	fp,32752
   8ced4:	003d2a06 	br	8c380 <__ram_exceptions_end+0xfff6c14c>
   8ced8:	d9400d17 	ldw	r5,52(sp)
   8cedc:	d9001017 	ldw	r4,64(sp)
   8cee0:	00992380 	call	99238 <__fixdfsi>
   8cee4:	1009883a 	mov	r4,r2
   8cee8:	00992b80 	call	992b8 <__floatsidf>
   8ceec:	d9001017 	ldw	r4,64(sp)
   8cef0:	d9400d17 	ldw	r5,52(sp)
   8cef4:	100d883a 	mov	r6,r2
   8cef8:	180f883a 	mov	r7,r3
   8cefc:	009893c0 	call	9893c <__subdf3>
   8cf00:	1011883a 	mov	r8,r2
   8cf04:	1839883a 	mov	fp,r3
   8cf08:	a800121e 	bne	r21,zero,8cf54 <_strtod_r+0xe78>
   8cf0c:	b800111e 	bne	r23,zero,8cf54 <_strtod_r+0xe78>
   8cf10:	01400434 	movhi	r5,16
   8cf14:	297fffc4 	addi	r5,r5,-1
   8cf18:	a168703a 	and	r20,r20,r5
   8cf1c:	a0000d1e 	bne	r20,zero,8cf54 <_strtod_r+0xe78>
   8cf20:	01a52834 	movhi	r6,38048
   8cf24:	01cff434 	movhi	r7,16336
   8cf28:	318d6544 	addi	r6,r6,13717
   8cf2c:	39ffffc4 	addi	r7,r7,-1
   8cf30:	1009883a 	mov	r4,r2
   8cf34:	180b883a 	mov	r5,r3
   8cf38:	0097fdc0 	call	97fdc <__ledf2>
   8cf3c:	103ef50e 	bge	r2,zero,8cb14 <__ram_exceptions_end+0xfff6c8e0>
   8cf40:	9011883a 	mov	r8,r18
   8cf44:	d8800517 	ldw	r2,20(sp)
   8cf48:	d8000815 	stw	zero,32(sp)
   8cf4c:	b039883a 	mov	fp,r22
   8cf50:	003f9a06 	br	8cdbc <__ram_exceptions_end+0xfff6cb88>
   8cf54:	01a52834 	movhi	r6,38048
   8cf58:	01cff834 	movhi	r7,16352
   8cf5c:	4009883a 	mov	r4,r8
   8cf60:	318d6544 	addi	r6,r6,13717
   8cf64:	39ffffc4 	addi	r7,r7,-1
   8cf68:	e00b883a 	mov	r5,fp
   8cf6c:	da001315 	stw	r8,76(sp)
   8cf70:	0097fdc0 	call	97fdc <__ledf2>
   8cf74:	da001317 	ldw	r8,76(sp)
   8cf78:	10000716 	blt	r2,zero,8cf98 <_strtod_r+0xebc>
   8cf7c:	018d6c34 	movhi	r6,13744
   8cf80:	31b94d44 	addi	r6,r6,-6859
   8cf84:	01cff834 	movhi	r7,16352
   8cf88:	4009883a 	mov	r4,r8
   8cf8c:	e00b883a 	mov	r5,fp
   8cf90:	0097f000 	call	97f00 <__gedf2>
   8cf94:	00bedf0e 	bge	zero,r2,8cb14 <__ram_exceptions_end+0xfff6c8e0>
   8cf98:	9011883a 	mov	r8,r18
   8cf9c:	d8800517 	ldw	r2,20(sp)
   8cfa0:	ddc00815 	stw	r23,32(sp)
   8cfa4:	b039883a 	mov	fp,r22
   8cfa8:	003f8406 	br	8cdbc <__ram_exceptions_end+0xfff6cb88>
   8cfac:	903e1026 	beq	r18,zero,8c7f0 <__ram_exceptions_end+0xfff6c5bc>
   8cfb0:	04a5c83a 	sub	r18,zero,r18
   8cfb4:	908003cc 	andi	r2,r18,15
   8cfb8:	10000b26 	beq	r2,zero,8cfe8 <_strtod_r+0xf0c>
   8cfbc:	100490fa 	slli	r2,r2,3
   8cfc0:	00c002b4 	movhi	r3,10
   8cfc4:	18f94d04 	addi	r3,r3,-6860
   8cfc8:	1885883a 	add	r2,r3,r2
   8cfcc:	11800017 	ldw	r6,0(r2)
   8cfd0:	11c00117 	ldw	r7,4(r2)
   8cfd4:	b809883a 	mov	r4,r23
   8cfd8:	b00b883a 	mov	r5,r22
   8cfdc:	00974a80 	call	974a8 <__divdf3>
   8cfe0:	102f883a 	mov	r23,r2
   8cfe4:	182d883a 	mov	r22,r3
   8cfe8:	9025d13a 	srai	r18,r18,4
   8cfec:	903e0026 	beq	r18,zero,8c7f0 <__ram_exceptions_end+0xfff6c5bc>
   8cff0:	008007c4 	movi	r2,31
   8cff4:	14801f16 	blt	r2,r18,8d074 <_strtod_r+0xf98>
   8cff8:	9080040c 	andi	r2,r18,16
   8cffc:	10018d26 	beq	r2,zero,8d634 <_strtod_r+0x1558>
   8d000:	00c01a84 	movi	r3,106
   8d004:	d8c00715 	stw	r3,28(sp)
   8d008:	04817e0e 	bge	zero,r18,8d604 <_strtod_r+0x1528>
   8d00c:	050002b4 	movhi	r20,10
   8d010:	a5398d04 	addi	r20,r20,-6604
   8d014:	b805883a 	mov	r2,r23
   8d018:	b007883a 	mov	r3,r22
   8d01c:	0009883a 	mov	r4,zero
   8d020:	9180004c 	andi	r6,r18,1
   8d024:	30000626 	beq	r6,zero,8d040 <_strtod_r+0xf64>
   8d028:	a1800017 	ldw	r6,0(r20)
   8d02c:	a1c00117 	ldw	r7,4(r20)
   8d030:	1009883a 	mov	r4,r2
   8d034:	180b883a 	mov	r5,r3
   8d038:	00980d00 	call	980d0 <__muldf3>
   8d03c:	01000044 	movi	r4,1
   8d040:	9025d07a 	srai	r18,r18,1
   8d044:	a5000204 	addi	r20,r20,8
   8d048:	903ff51e 	bne	r18,zero,8d020 <__ram_exceptions_end+0xfff6cdec>
   8d04c:	21003fcc 	andi	r4,r4,255
   8d050:	2001891e 	bne	r4,zero,8d678 <_strtod_r+0x159c>
   8d054:	d9000717 	ldw	r4,28(sp)
   8d058:	20016a1e 	bne	r4,zero,8d604 <_strtod_r+0x1528>
   8d05c:	000d883a 	mov	r6,zero
   8d060:	000f883a 	mov	r7,zero
   8d064:	b809883a 	mov	r4,r23
   8d068:	b00b883a 	mov	r5,r22
   8d06c:	0097e780 	call	97e78 <__eqdf2>
   8d070:	103de01e 	bne	r2,zero,8c7f4 <__ram_exceptions_end+0xfff6c5c0>
   8d074:	00800884 	movi	r2,34
   8d078:	88800015 	stw	r2,0(r17)
   8d07c:	d8000815 	stw	zero,32(sp)
   8d080:	0039883a 	mov	fp,zero
   8d084:	003cbe06 	br	8c380 <__ram_exceptions_end+0xfff6c14c>
   8d088:	011387c4 	movi	r4,19999
   8d08c:	003d5606 	br	8c5e8 <__ram_exceptions_end+0xfff6c3b4>
   8d090:	0580d434 	movhi	r22,848
   8d094:	1dad883a 	add	r22,r3,r22
   8d098:	b029883a 	mov	r20,r22
   8d09c:	003e9906 	br	8cb04 <__ram_exceptions_end+0xfff6c8d0>
   8d0a0:	e5c03fcc 	andi	r23,fp,255
   8d0a4:	bdc0201c 	xori	r23,r23,128
   8d0a8:	bdffe004 	addi	r23,r23,-128
   8d0ac:	dc800817 	ldw	r18,32(sp)
   8d0b0:	0029883a 	mov	r20,zero
   8d0b4:	0027883a 	mov	r19,zero
   8d0b8:	0021883a 	mov	r16,zero
   8d0bc:	003c9806 	br	8c320 <__ram_exceptions_end+0xfff6c0ec>
   8d0c0:	00c00944 	movi	r3,37
   8d0c4:	1f07c83a 	sub	r3,r3,fp
   8d0c8:	1d7d7e16 	blt	r3,r21,8c6c4 <__ram_exceptions_end+0xfff6c490>
   8d0cc:	1721c83a 	sub	r16,r2,fp
   8d0d0:	800490fa 	slli	r2,r16,3
   8d0d4:	044002b4 	movhi	r17,10
   8d0d8:	8c794d04 	addi	r17,r17,-6860
   8d0dc:	8885883a 	add	r2,r17,r2
   8d0e0:	11000017 	ldw	r4,0(r2)
   8d0e4:	11400117 	ldw	r5,4(r2)
   8d0e8:	b80d883a 	mov	r6,r23
   8d0ec:	b00f883a 	mov	r7,r22
   8d0f0:	00980d00 	call	980d0 <__muldf3>
   8d0f4:	ac2bc83a 	sub	r21,r21,r16
   8d0f8:	a80c90fa 	slli	r6,r21,3
   8d0fc:	1009883a 	mov	r4,r2
   8d100:	180b883a 	mov	r5,r3
   8d104:	8985883a 	add	r2,r17,r6
   8d108:	11800017 	ldw	r6,0(r2)
   8d10c:	11c00117 	ldw	r7,4(r2)
   8d110:	00980d00 	call	980d0 <__muldf3>
   8d114:	d8800815 	stw	r2,32(sp)
   8d118:	1839883a 	mov	fp,r3
   8d11c:	003c9806 	br	8c380 <__ram_exceptions_end+0xfff6c14c>
   8d120:	da000d17 	ldw	r8,52(sp)
   8d124:	003f1606 	br	8cd80 <__ram_exceptions_end+0xfff6cb4c>
   8d128:	014ffc34 	movhi	r5,16368
   8d12c:	d8001015 	stw	zero,64(sp)
   8d130:	d9400d15 	stw	r5,52(sp)
   8d134:	003f0f06 	br	8cd74 <__ram_exceptions_end+0xfff6cb40>
   8d138:	b03f001e 	bne	r22,zero,8cd3c <__ram_exceptions_end+0xfff6cb08>
   8d13c:	9011883a 	mov	r8,r18
   8d140:	00800884 	movi	r2,34
   8d144:	88800015 	stw	r2,0(r17)
   8d148:	d8000815 	stw	zero,32(sp)
   8d14c:	d8800517 	ldw	r2,20(sp)
   8d150:	0039883a 	mov	fp,zero
   8d154:	003f1906 	br	8cdbc <__ram_exceptions_end+0xfff6cb88>
   8d158:	d9800517 	ldw	r6,20(sp)
   8d15c:	30000826 	beq	r6,zero,8d180 <_strtod_r+0x10a4>
   8d160:	01400d44 	movi	r5,53
   8d164:	d9000204 	addi	r4,sp,8
   8d168:	d8801315 	stw	r2,76(sp)
   8d16c:	008b36c0 	call	8b36c <__copybits>
   8d170:	d9400517 	ldw	r5,20(sp)
   8d174:	8809883a 	mov	r4,r17
   8d178:	008a4600 	call	8a460 <_Bfree>
   8d17c:	d8801317 	ldw	r2,76(sp)
   8d180:	00c00184 	movi	r3,6
   8d184:	1c800f36 	bltu	r3,r18,8d1c4 <_strtod_r+0x10e8>
   8d188:	902490ba 	slli	r18,r18,2
   8d18c:	00c00274 	movhi	r3,9
   8d190:	18f46804 	addi	r3,r3,-11872
   8d194:	90e5883a 	add	r18,r18,r3
   8d198:	90c00017 	ldw	r3,0(r18)
   8d19c:	1800683a 	jmp	r3
   8d1a0:	0008d21c 	xori	zero,zero,9032
   8d1a4:	0008d1f4 	movhi	zero,9031
   8d1a8:	0008d1d8 	cmpnei	zero,zero,9031
   8d1ac:	0008d1bc 	xorhi	zero,zero,9030
   8d1b0:	0008d1e4 	muli	zero,zero,9031
   8d1b4:	0008d1f4 	movhi	zero,9031
   8d1b8:	0008d21c 	xori	zero,zero,9032
   8d1bc:	059ffc34 	movhi	r22,32752
   8d1c0:	002f883a 	mov	r23,zero
   8d1c4:	1080020c 	andi	r2,r2,8
   8d1c8:	ddc00815 	stw	r23,32(sp)
   8d1cc:	103cc426 	beq	r2,zero,8c4e0 <__ram_exceptions_end+0xfff6c2ac>
   8d1d0:	b7200034 	orhi	fp,r22,32768
   8d1d4:	003c6a06 	br	8c380 <__ram_exceptions_end+0xfff6c14c>
   8d1d8:	ddc00217 	ldw	r23,8(sp)
   8d1dc:	dd800317 	ldw	r22,12(sp)
   8d1e0:	003ff806 	br	8d1c4 <__ram_exceptions_end+0xfff6cf90>
   8d1e4:	05a00034 	movhi	r22,32768
   8d1e8:	b5bfffc4 	addi	r22,r22,-1
   8d1ec:	05ffffc4 	movi	r23,-1
   8d1f0:	003ff406 	br	8d1c4 <__ram_exceptions_end+0xfff6cf90>
   8d1f4:	d8c00417 	ldw	r3,16(sp)
   8d1f8:	dd800317 	ldw	r22,12(sp)
   8d1fc:	013ffc34 	movhi	r4,65520
   8d200:	18c10cc4 	addi	r3,r3,1075
   8d204:	1806953a 	slli	r3,r3,20
   8d208:	213fffc4 	addi	r4,r4,-1
   8d20c:	b12c703a 	and	r22,r22,r4
   8d210:	ddc00217 	ldw	r23,8(sp)
   8d214:	b0ecb03a 	or	r22,r22,r3
   8d218:	003fea06 	br	8d1c4 <__ram_exceptions_end+0xfff6cf90>
   8d21c:	002d883a 	mov	r22,zero
   8d220:	002f883a 	mov	r23,zero
   8d224:	003fe706 	br	8d1c4 <__ram_exceptions_end+0xfff6cf90>
   8d228:	d8c00b17 	ldw	r3,44(sp)
   8d22c:	b72d883a 	add	r22,r22,fp
   8d230:	1887883a 	add	r3,r3,r2
   8d234:	d8c00b15 	stw	r3,44(sp)
   8d238:	00c00044 	movi	r3,1
   8d23c:	10c11126 	beq	r2,r3,8d684 <_strtod_r+0x15a8>
   8d240:	05c00204 	movi	r23,8
   8d244:	04800404 	movi	r18,16
   8d248:	e7000044 	addi	fp,fp,1
   8d24c:	e0bfffc4 	addi	r2,fp,-1
   8d250:	b8802016 	blt	r23,r2,8d2d4 <_strtod_r+0x11f8>
   8d254:	9809883a 	mov	r4,r19
   8d258:	01400284 	movi	r5,10
   8d25c:	00822140 	call	82214 <__mulsi3>
   8d260:	1027883a 	mov	r19,r2
   8d264:	e5bff81e 	bne	fp,r22,8d248 <__ram_exceptions_end+0xfff6d014>
   8d268:	ddc00617 	ldw	r23,24(sp)
   8d26c:	e7000044 	addi	fp,fp,1
   8d270:	00800204 	movi	r2,8
   8d274:	1580100e 	bge	r2,r22,8d2b8 <_strtod_r+0x11dc>
   8d278:	00800404 	movi	r2,16
   8d27c:	002d883a 	mov	r22,zero
   8d280:	173e7b16 	blt	r2,fp,8cc70 <__ram_exceptions_end+0xfff6ca3c>
   8d284:	a009883a 	mov	r4,r20
   8d288:	01400284 	movi	r5,10
   8d28c:	00822140 	call	82214 <__mulsi3>
   8d290:	a8a9883a 	add	r20,r21,r2
   8d294:	003e7606 	br	8cc70 <__ram_exceptions_end+0xfff6ca3c>
   8d298:	d9000617 	ldw	r4,24(sp)
   8d29c:	bdfff404 	addi	r23,r23,-48
   8d2a0:	b5800044 	addi	r22,r22,1
   8d2a4:	ddc00e15 	stw	r23,56(sp)
   8d2a8:	d9000815 	stw	r4,32(sp)
   8d2ac:	dd800b15 	stw	r22,44(sp)
   8d2b0:	202f883a 	mov	r23,r4
   8d2b4:	07000044 	movi	fp,1
   8d2b8:	9809883a 	mov	r4,r19
   8d2bc:	01400284 	movi	r5,10
   8d2c0:	00822140 	call	82214 <__mulsi3>
   8d2c4:	d8c00e17 	ldw	r3,56(sp)
   8d2c8:	002d883a 	mov	r22,zero
   8d2cc:	18a7883a 	add	r19,r3,r2
   8d2d0:	003e6706 	br	8cc70 <__ram_exceptions_end+0xfff6ca3c>
   8d2d4:	973fe316 	blt	r18,fp,8d264 <__ram_exceptions_end+0xfff6d030>
   8d2d8:	a009883a 	mov	r4,r20
   8d2dc:	01400284 	movi	r5,10
   8d2e0:	00822140 	call	82214 <__mulsi3>
   8d2e4:	1029883a 	mov	r20,r2
   8d2e8:	003fde06 	br	8d264 <__ram_exceptions_end+0xfff6d030>
   8d2ec:	00bffa84 	movi	r2,-22
   8d2f0:	a8bcf416 	blt	r21,r2,8c6c4 <__ram_exceptions_end+0xfff6c490>
   8d2f4:	a82a90fa 	slli	r21,r21,3
   8d2f8:	008002b4 	movhi	r2,10
   8d2fc:	10b94d04 	addi	r2,r2,-6860
   8d300:	1545c83a 	sub	r2,r2,r21
   8d304:	11800017 	ldw	r6,0(r2)
   8d308:	11c00117 	ldw	r7,4(r2)
   8d30c:	b809883a 	mov	r4,r23
   8d310:	b00b883a 	mov	r5,r22
   8d314:	00974a80 	call	974a8 <__divdf3>
   8d318:	d8800815 	stw	r2,32(sp)
   8d31c:	1839883a 	mov	fp,r3
   8d320:	003c1706 	br	8c380 <__ram_exceptions_end+0xfff6c14c>
   8d324:	9011883a 	mov	r8,r18
   8d328:	003ea006 	br	8cdac <__ram_exceptions_end+0xfff6cb78>
   8d32c:	014002b4 	movhi	r5,10
   8d330:	d9000617 	ldw	r4,24(sp)
   8d334:	29797f04 	addi	r5,r5,-6660
   8d338:	01c00644 	movi	r7,25
   8d33c:	00000b06 	br	8d36c <_strtod_r+0x1290>
   8d340:	21000044 	addi	r4,r4,1
   8d344:	20800003 	ldbu	r2,0(r4)
   8d348:	10ffefc4 	addi	r3,r2,-65
   8d34c:	10803fcc 	andi	r2,r2,255
   8d350:	1080201c 	xori	r2,r2,128
   8d354:	18c03fcc 	andi	r3,r3,255
   8d358:	10bfe004 	addi	r2,r2,-128
   8d35c:	38c00136 	bltu	r7,r3,8d364 <_strtod_r+0x1288>
   8d360:	10800804 	addi	r2,r2,32
   8d364:	29400044 	addi	r5,r5,1
   8d368:	11bba91e 	bne	r2,r6,8c210 <__ram_exceptions_end+0xfff6bfdc>
   8d36c:	29800007 	ldb	r6,0(r5)
   8d370:	303ff31e 	bne	r6,zero,8d340 <__ram_exceptions_end+0xfff6d10c>
   8d374:	018002b4 	movhi	r6,10
   8d378:	d9000615 	stw	r4,24(sp)
   8d37c:	31b98004 	addi	r6,r6,-6656
   8d380:	200b883a 	mov	r5,r4
   8d384:	02000644 	movi	r8,25
   8d388:	00000a06 	br	8d3b4 <_strtod_r+0x12d8>
   8d38c:	28800003 	ldbu	r2,0(r5)
   8d390:	10ffefc4 	addi	r3,r2,-65
   8d394:	10803fcc 	andi	r2,r2,255
   8d398:	1080201c 	xori	r2,r2,128
   8d39c:	18c03fcc 	andi	r3,r3,255
   8d3a0:	10bfe004 	addi	r2,r2,-128
   8d3a4:	40c00136 	bltu	r8,r3,8d3ac <_strtod_r+0x12d0>
   8d3a8:	10800804 	addi	r2,r2,32
   8d3ac:	31800044 	addi	r6,r6,1
   8d3b0:	11c0691e 	bne	r2,r7,8d558 <_strtod_r+0x147c>
   8d3b4:	31c00007 	ldb	r7,0(r6)
   8d3b8:	29400044 	addi	r5,r5,1
   8d3bc:	383ff31e 	bne	r7,zero,8d38c <__ram_exceptions_end+0xfff6d158>
   8d3c0:	d9400615 	stw	r5,24(sp)
   8d3c4:	059ffc34 	movhi	r22,32752
   8d3c8:	002f883a 	mov	r23,zero
   8d3cc:	003c4306 	br	8c4dc <__ram_exceptions_end+0xfff6c2a8>
   8d3d0:	002d883a 	mov	r22,zero
   8d3d4:	003cad06 	br	8c68c <__ram_exceptions_end+0xfff6c458>
   8d3d8:	9011883a 	mov	r8,r18
   8d3dc:	df001217 	ldw	fp,72(sp)
   8d3e0:	a800461e 	bne	r21,zero,8d4fc <_strtod_r+0x1420>
   8d3e4:	b800451e 	bne	r23,zero,8d4fc <_strtod_r+0x1420>
   8d3e8:	00800434 	movhi	r2,16
   8d3ec:	10bfffc4 	addi	r2,r2,-1
   8d3f0:	b084703a 	and	r2,r22,r2
   8d3f4:	1000411e 	bne	r2,zero,8d4fc <_strtod_r+0x1420>
   8d3f8:	b49ffc2c 	andhi	r18,r22,32752
   8d3fc:	0081ac34 	movhi	r2,1712
   8d400:	14803e2e 	bgeu	r2,r18,8d4fc <_strtod_r+0x1420>
   8d404:	40800517 	ldw	r2,20(r8)
   8d408:	1000031e 	bne	r2,zero,8d418 <_strtod_r+0x133c>
   8d40c:	40800417 	ldw	r2,16(r8)
   8d410:	00c00044 	movi	r3,1
   8d414:	1880390e 	bge	r3,r2,8d4fc <_strtod_r+0x1420>
   8d418:	400b883a 	mov	r5,r8
   8d41c:	01800044 	movi	r6,1
   8d420:	8809883a 	mov	r4,r17
   8d424:	008abf40 	call	8abf4 <__lshift>
   8d428:	800b883a 	mov	r5,r16
   8d42c:	1009883a 	mov	r4,r2
   8d430:	d8801315 	stw	r2,76(sp)
   8d434:	008ad3c0 	call	8ad3c <__mcmp>
   8d438:	da001317 	ldw	r8,76(sp)
   8d43c:	00802f0e 	bge	zero,r2,8d4fc <_strtod_r+0x1420>
   8d440:	d9000717 	ldw	r4,28(sp)
   8d444:	20008026 	beq	r4,zero,8d648 <_strtod_r+0x156c>
   8d448:	0081ac34 	movhi	r2,1712
   8d44c:	14807e16 	blt	r2,r18,8d648 <_strtod_r+0x156c>
   8d450:	0080dc34 	movhi	r2,880
   8d454:	14bf3a0e 	bge	r2,r18,8d140 <__ram_exceptions_end+0xfff6cf0c>
   8d458:	d9000817 	ldw	r4,32(sp)
   8d45c:	e00b883a 	mov	r5,fp
   8d460:	000d883a 	mov	r6,zero
   8d464:	01ce5434 	movhi	r7,14672
   8d468:	da001315 	stw	r8,76(sp)
   8d46c:	00980d00 	call	980d0 <__muldf3>
   8d470:	d8800815 	stw	r2,32(sp)
   8d474:	1839883a 	mov	fp,r3
   8d478:	da001317 	ldw	r8,76(sp)
   8d47c:	1800211e 	bne	r3,zero,8d504 <_strtod_r+0x1428>
   8d480:	d8c00817 	ldw	r3,32(sp)
   8d484:	d8800517 	ldw	r2,20(sp)
   8d488:	183e4c1e 	bne	r3,zero,8cdbc <__ram_exceptions_end+0xfff6cb88>
   8d48c:	00c00884 	movi	r3,34
   8d490:	88c00015 	stw	r3,0(r17)
   8d494:	003e4906 	br	8cdbc <__ram_exceptions_end+0xfff6cb88>
   8d498:	00800434 	movhi	r2,16
   8d49c:	9011883a 	mov	r8,r18
   8d4a0:	df001217 	ldw	fp,72(sp)
   8d4a4:	10bfffc4 	addi	r2,r2,-1
   8d4a8:	a8002226 	beq	r21,zero,8d534 <_strtod_r+0x1458>
   8d4ac:	b086703a 	and	r3,r22,r2
   8d4b0:	18804126 	beq	r3,r2,8d5b8 <_strtod_r+0x14dc>
   8d4b4:	d8c00d17 	ldw	r3,52(sp)
   8d4b8:	18002326 	beq	r3,zero,8d548 <_strtod_r+0x146c>
   8d4bc:	1da4703a 	and	r18,r3,r22
   8d4c0:	90000e26 	beq	r18,zero,8d4fc <_strtod_r+0x1420>
   8d4c4:	da001315 	stw	r8,76(sp)
   8d4c8:	d9800717 	ldw	r6,28(sp)
   8d4cc:	b809883a 	mov	r4,r23
   8d4d0:	b00b883a 	mov	r5,r22
   8d4d4:	a8002826 	beq	r21,zero,8d578 <_strtod_r+0x149c>
   8d4d8:	008c0780 	call	8c078 <sulp>
   8d4dc:	100d883a 	mov	r6,r2
   8d4e0:	180f883a 	mov	r7,r3
   8d4e4:	b809883a 	mov	r4,r23
   8d4e8:	b00b883a 	mov	r5,r22
   8d4ec:	0096bfc0 	call	96bfc <__adddf3>
   8d4f0:	da001317 	ldw	r8,76(sp)
   8d4f4:	d8800815 	stw	r2,32(sp)
   8d4f8:	1839883a 	mov	fp,r3
   8d4fc:	d8800717 	ldw	r2,28(sp)
   8d500:	103fd51e 	bne	r2,zero,8d458 <__ram_exceptions_end+0xfff6d224>
   8d504:	d8800517 	ldw	r2,20(sp)
   8d508:	003e2c06 	br	8cdbc <__ram_exceptions_end+0xfff6cb88>
   8d50c:	0580d434 	movhi	r22,848
   8d510:	1dad883a 	add	r22,r3,r22
   8d514:	d8000715 	stw	zero,28(sp)
   8d518:	003cb606 	br	8c7f4 <__ram_exceptions_end+0xfff6c5c0>
   8d51c:	008ff834 	movhi	r2,16352
   8d520:	0029883a 	mov	r20,zero
   8d524:	022ff834 	movhi	r8,49120
   8d528:	d8001015 	stw	zero,64(sp)
   8d52c:	d8800d15 	stw	r2,52(sp)
   8d530:	003dc106 	br	8cc38 <__ram_exceptions_end+0xfff6ca04>
   8d534:	b084703a 	and	r2,r22,r2
   8d538:	103fde1e 	bne	r2,zero,8d4b4 <__ram_exceptions_end+0xfff6d280>
   8d53c:	b83fdd1e 	bne	r23,zero,8d4b4 <__ram_exceptions_end+0xfff6d280>
   8d540:	b49ffc2c 	andhi	r18,r22,32752
   8d544:	003fbe06 	br	8d440 <__ram_exceptions_end+0xfff6d20c>
   8d548:	d8c00f17 	ldw	r3,60(sp)
   8d54c:	1de8703a 	and	r20,r3,r23
   8d550:	a03fea26 	beq	r20,zero,8d4fc <__ram_exceptions_end+0xfff6d2c8>
   8d554:	003fdb06 	br	8d4c4 <__ram_exceptions_end+0xfff6d290>
   8d558:	21000044 	addi	r4,r4,1
   8d55c:	d9000615 	stw	r4,24(sp)
   8d560:	003f9806 	br	8d3c4 <__ram_exceptions_end+0xfff6d190>
   8d564:	014002b4 	movhi	r5,10
   8d568:	29794304 	addi	r5,r5,-6900
   8d56c:	d9400715 	stw	r5,28(sp)
   8d570:	0025883a 	mov	r18,zero
   8d574:	003c8c06 	br	8c7a8 <__ram_exceptions_end+0xfff6c574>
   8d578:	008c0780 	call	8c078 <sulp>
   8d57c:	100d883a 	mov	r6,r2
   8d580:	180f883a 	mov	r7,r3
   8d584:	b809883a 	mov	r4,r23
   8d588:	b00b883a 	mov	r5,r22
   8d58c:	009893c0 	call	9893c <__subdf3>
   8d590:	000d883a 	mov	r6,zero
   8d594:	000f883a 	mov	r7,zero
   8d598:	1009883a 	mov	r4,r2
   8d59c:	180b883a 	mov	r5,r3
   8d5a0:	d8800815 	stw	r2,32(sp)
   8d5a4:	1839883a 	mov	fp,r3
   8d5a8:	0097e780 	call	97e78 <__eqdf2>
   8d5ac:	da001317 	ldw	r8,76(sp)
   8d5b0:	103ee326 	beq	r2,zero,8d140 <__ram_exceptions_end+0xfff6cf0c>
   8d5b4:	003fd106 	br	8d4fc <__ram_exceptions_end+0xfff6d2c8>
   8d5b8:	d8c00717 	ldw	r3,28(sp)
   8d5bc:	18002026 	beq	r3,zero,8d640 <_strtod_r+0x1564>
   8d5c0:	b09ffc2c 	andhi	r2,r22,32752
   8d5c4:	00c1a834 	movhi	r3,1696
   8d5c8:	18801d36 	bltu	r3,r2,8d640 <_strtod_r+0x1564>
   8d5cc:	1004d53a 	srli	r2,r2,20
   8d5d0:	00c01ac4 	movi	r3,107
   8d5d4:	1887c83a 	sub	r3,r3,r2
   8d5d8:	00bfffc4 	movi	r2,-1
   8d5dc:	10c4983a 	sll	r2,r2,r3
   8d5e0:	15ffb41e 	bne	r2,r23,8d4b4 <__ram_exceptions_end+0xfff6d280>
   8d5e4:	00dffc34 	movhi	r3,32752
   8d5e8:	18ffffc4 	addi	r3,r3,-1
   8d5ec:	b0c03126 	beq	r22,r3,8d6b4 <_strtod_r+0x15d8>
   8d5f0:	b59ffc2c 	andhi	r22,r22,32752
   8d5f4:	00800434 	movhi	r2,16
   8d5f8:	d8000815 	stw	zero,32(sp)
   8d5fc:	b0b9883a 	add	fp,r22,r2
   8d600:	003fbe06 	br	8d4fc <__ram_exceptions_end+0xfff6d2c8>
   8d604:	b49ffc2c 	andhi	r18,r22,32752
   8d608:	9024d53a 	srli	r18,r18,20
   8d60c:	00801ac4 	movi	r2,107
   8d610:	14a5c83a 	sub	r18,r2,r18
   8d614:	04be910e 	bge	zero,r18,8d05c <__ram_exceptions_end+0xfff6ce28>
   8d618:	008007c4 	movi	r2,31
   8d61c:	1480120e 	bge	r2,r18,8d668 <_strtod_r+0x158c>
   8d620:	00800d04 	movi	r2,52
   8d624:	002f883a 	mov	r23,zero
   8d628:	14801a0e 	bge	r2,r18,8d694 <_strtod_r+0x15b8>
   8d62c:	0580dc34 	movhi	r22,880
   8d630:	003e8a06 	br	8d05c <__ram_exceptions_end+0xfff6ce28>
   8d634:	d8000715 	stw	zero,28(sp)
   8d638:	04be7416 	blt	zero,r18,8d00c <__ram_exceptions_end+0xfff6cdd8>
   8d63c:	003e8706 	br	8d05c <__ram_exceptions_end+0xfff6ce28>
   8d640:	00bfffc4 	movi	r2,-1
   8d644:	003fe606 	br	8d5e0 <__ram_exceptions_end+0xfff6d3ac>
   8d648:	073ffc34 	movhi	fp,65520
   8d64c:	9725883a 	add	r18,r18,fp
   8d650:	017fffc4 	movi	r5,-1
   8d654:	07000434 	movhi	fp,16
   8d658:	e179883a 	add	fp,fp,r5
   8d65c:	d9400815 	stw	r5,32(sp)
   8d660:	9738b03a 	or	fp,r18,fp
   8d664:	003fa506 	br	8d4fc <__ram_exceptions_end+0xfff6d2c8>
   8d668:	00bfffc4 	movi	r2,-1
   8d66c:	14a4983a 	sll	r18,r2,r18
   8d670:	95ee703a 	and	r23,r18,r23
   8d674:	003e7906 	br	8d05c <__ram_exceptions_end+0xfff6ce28>
   8d678:	102f883a 	mov	r23,r2
   8d67c:	182d883a 	mov	r22,r3
   8d680:	003e7406 	br	8d054 <__ram_exceptions_end+0xfff6ce20>
   8d684:	e02d883a 	mov	r22,fp
   8d688:	ddc00617 	ldw	r23,24(sp)
   8d68c:	e0f9883a 	add	fp,fp,r3
   8d690:	003ef706 	br	8d270 <__ram_exceptions_end+0xfff6d03c>
   8d694:	94bff804 	addi	r18,r18,-32
   8d698:	00bfffc4 	movi	r2,-1
   8d69c:	14a4983a 	sll	r18,r2,r18
   8d6a0:	95ac703a 	and	r22,r18,r22
   8d6a4:	003e6d06 	br	8d05c <__ram_exceptions_end+0xfff6ce28>
   8d6a8:	102f883a 	mov	r23,r2
   8d6ac:	182d883a 	mov	r22,r3
   8d6b0:	003c3d06 	br	8c7a8 <__ram_exceptions_end+0xfff6c574>
   8d6b4:	00ffffc4 	movi	r3,-1
   8d6b8:	10ffcd1e 	bne	r2,r3,8d5f0 <__ram_exceptions_end+0xfff6d3bc>
   8d6bc:	003dba06 	br	8cda8 <__ram_exceptions_end+0xfff6cb74>

0008d6c0 <strtod>:
   8d6c0:	008002b4 	movhi	r2,10
   8d6c4:	10817a04 	addi	r2,r2,1512
   8d6c8:	280d883a 	mov	r6,r5
   8d6cc:	200b883a 	mov	r5,r4
   8d6d0:	11000017 	ldw	r4,0(r2)
   8d6d4:	008c0dc1 	jmpi	8c0dc <_strtod_r>

0008d6d8 <strtof>:
   8d6d8:	defffb04 	addi	sp,sp,-20
   8d6dc:	dcc00315 	stw	r19,12(sp)
   8d6e0:	04c002b4 	movhi	r19,10
   8d6e4:	9cc17a04 	addi	r19,r19,1512
   8d6e8:	280d883a 	mov	r6,r5
   8d6ec:	200b883a 	mov	r5,r4
   8d6f0:	99000017 	ldw	r4,0(r19)
   8d6f4:	dfc00415 	stw	ra,16(sp)
   8d6f8:	dc800215 	stw	r18,8(sp)
   8d6fc:	dc400115 	stw	r17,4(sp)
   8d700:	dc000015 	stw	r16,0(sp)
   8d704:	008c0dc0 	call	8c0dc <_strtod_r>
   8d708:	1009883a 	mov	r4,r2
   8d70c:	180b883a 	mov	r5,r3
   8d710:	1025883a 	mov	r18,r2
   8d714:	1823883a 	mov	r17,r3
   8d718:	009943c0 	call	9943c <__truncdfsf2>
   8d71c:	000b883a 	mov	r5,zero
   8d720:	1009883a 	mov	r4,r2
   8d724:	1021883a 	mov	r16,r2
   8d728:	0096a000 	call	96a00 <__eqsf2>
   8d72c:	1000111e 	bne	r2,zero,8d774 <strtof+0x9c>
   8d730:	000d883a 	mov	r6,zero
   8d734:	000f883a 	mov	r7,zero
   8d738:	9009883a 	mov	r4,r18
   8d73c:	880b883a 	mov	r5,r17
   8d740:	0097e780 	call	97e78 <__eqdf2>
   8d744:	10000b26 	beq	r2,zero,8d774 <strtof+0x9c>
   8d748:	98800017 	ldw	r2,0(r19)
   8d74c:	00c00884 	movi	r3,34
   8d750:	10c00015 	stw	r3,0(r2)
   8d754:	8005883a 	mov	r2,r16
   8d758:	dfc00417 	ldw	ra,16(sp)
   8d75c:	dcc00317 	ldw	r19,12(sp)
   8d760:	dc800217 	ldw	r18,8(sp)
   8d764:	dc400117 	ldw	r17,4(sp)
   8d768:	dc000017 	ldw	r16,0(sp)
   8d76c:	dec00504 	addi	sp,sp,20
   8d770:	f800283a 	ret
   8d774:	015fe034 	movhi	r5,32640
   8d778:	297fffc4 	addi	r5,r5,-1
   8d77c:	8009883a 	mov	r4,r16
   8d780:	0096a780 	call	96a78 <__gesf2>
   8d784:	0080070e 	bge	zero,r2,8d7a4 <strtof+0xcc>
   8d788:	01dffc34 	movhi	r7,32752
   8d78c:	39ffffc4 	addi	r7,r7,-1
   8d790:	01bfffc4 	movi	r6,-1
   8d794:	9009883a 	mov	r4,r18
   8d798:	880b883a 	mov	r5,r17
   8d79c:	0097f000 	call	97f00 <__gedf2>
   8d7a0:	00bfe90e 	bge	zero,r2,8d748 <__ram_exceptions_end+0xfff6d514>
   8d7a4:	017fe034 	movhi	r5,65408
   8d7a8:	297fffc4 	addi	r5,r5,-1
   8d7ac:	8009883a 	mov	r4,r16
   8d7b0:	0096b340 	call	96b34 <__lesf2>
   8d7b4:	103fe70e 	bge	r2,zero,8d754 <__ram_exceptions_end+0xfff6d520>
   8d7b8:	01fffc34 	movhi	r7,65520
   8d7bc:	39ffffc4 	addi	r7,r7,-1
   8d7c0:	01bfffc4 	movi	r6,-1
   8d7c4:	9009883a 	mov	r4,r18
   8d7c8:	880b883a 	mov	r5,r17
   8d7cc:	0097fdc0 	call	97fdc <__ledf2>
   8d7d0:	103fdd0e 	bge	r2,zero,8d748 <__ram_exceptions_end+0xfff6d514>
   8d7d4:	003fdf06 	br	8d754 <__ram_exceptions_end+0xfff6d520>

0008d7d8 <_strtol_r>:
   8d7d8:	008002b4 	movhi	r2,10
   8d7dc:	defff204 	addi	sp,sp,-56
   8d7e0:	10817d04 	addi	r2,r2,1524
   8d7e4:	dd800a15 	stw	r22,40(sp)
   8d7e8:	15800017 	ldw	r22,0(r2)
   8d7ec:	df000c15 	stw	fp,48(sp)
   8d7f0:	d9000315 	stw	r4,12(sp)
   8d7f4:	dfc00d15 	stw	ra,52(sp)
   8d7f8:	ddc00b15 	stw	r23,44(sp)
   8d7fc:	dd400915 	stw	r21,36(sp)
   8d800:	dd000815 	stw	r20,32(sp)
   8d804:	dcc00715 	stw	r19,28(sp)
   8d808:	dc800615 	stw	r18,24(sp)
   8d80c:	dc400515 	stw	r17,20(sp)
   8d810:	dc000415 	stw	r16,16(sp)
   8d814:	d9400215 	stw	r5,8(sp)
   8d818:	d9800015 	stw	r6,0(sp)
   8d81c:	3839883a 	mov	fp,r7
   8d820:	2809883a 	mov	r4,r5
   8d824:	24000003 	ldbu	r16,0(r4)
   8d828:	24400044 	addi	r17,r4,1
   8d82c:	2007883a 	mov	r3,r4
   8d830:	b405883a 	add	r2,r22,r16
   8d834:	10800043 	ldbu	r2,1(r2)
   8d838:	8809883a 	mov	r4,r17
   8d83c:	1080020c 	andi	r2,r2,8
   8d840:	103ff81e 	bne	r2,zero,8d824 <__ram_exceptions_end+0xfff6d5f0>
   8d844:	00800b44 	movi	r2,45
   8d848:	80805526 	beq	r16,r2,8d9a0 <_strtol_r+0x1c8>
   8d84c:	00800ac4 	movi	r2,43
   8d850:	80806026 	beq	r16,r2,8d9d4 <_strtol_r+0x1fc>
   8d854:	0029883a 	mov	r20,zero
   8d858:	e0004726 	beq	fp,zero,8d978 <_strtol_r+0x1a0>
   8d85c:	00800404 	movi	r2,16
   8d860:	e0806626 	beq	fp,r2,8d9fc <_strtol_r+0x224>
   8d864:	e027883a 	mov	r19,fp
   8d868:	00a00034 	movhi	r2,32768
   8d86c:	a025003a 	cmpeq	r18,r20,zero
   8d870:	14a5c83a 	sub	r18,r2,r18
   8d874:	9009883a 	mov	r4,r18
   8d878:	980b883a 	mov	r5,r19
   8d87c:	00821bc0 	call	821bc <__umodsi3>
   8d880:	9009883a 	mov	r4,r18
   8d884:	980b883a 	mov	r5,r19
   8d888:	d8800115 	stw	r2,4(sp)
   8d88c:	00821580 	call	82158 <__udivsi3>
   8d890:	b407883a 	add	r3,r22,r16
   8d894:	18c00043 	ldbu	r3,1(r3)
   8d898:	102b883a 	mov	r21,r2
   8d89c:	0009883a 	mov	r4,zero
   8d8a0:	1940010c 	andi	r5,r3,4
   8d8a4:	0005883a 	mov	r2,zero
   8d8a8:	04800044 	movi	r18,1
   8d8ac:	05ffffc4 	movi	r23,-1
   8d8b0:	28000f26 	beq	r5,zero,8d8f0 <_strtol_r+0x118>
   8d8b4:	843ff404 	addi	r16,r16,-48
   8d8b8:	8700130e 	bge	r16,fp,8d908 <_strtol_r+0x130>
   8d8bc:	15c00626 	beq	r2,r23,8d8d8 <_strtol_r+0x100>
   8d8c0:	a9002936 	bltu	r21,r4,8d968 <_strtol_r+0x190>
   8d8c4:	25402626 	beq	r4,r21,8d960 <_strtol_r+0x188>
   8d8c8:	980b883a 	mov	r5,r19
   8d8cc:	00822140 	call	82214 <__mulsi3>
   8d8d0:	8089883a 	add	r4,r16,r2
   8d8d4:	00800044 	movi	r2,1
   8d8d8:	8c000003 	ldbu	r16,0(r17)
   8d8dc:	8c400044 	addi	r17,r17,1
   8d8e0:	b407883a 	add	r3,r22,r16
   8d8e4:	18c00043 	ldbu	r3,1(r3)
   8d8e8:	1940010c 	andi	r5,r3,4
   8d8ec:	283ff11e 	bne	r5,zero,8d8b4 <__ram_exceptions_end+0xfff6d680>
   8d8f0:	18c000cc 	andi	r3,r3,3
   8d8f4:	18000426 	beq	r3,zero,8d908 <_strtol_r+0x130>
   8d8f8:	1c801d26 	beq	r3,r18,8d970 <_strtol_r+0x198>
   8d8fc:	00c015c4 	movi	r3,87
   8d900:	80e1c83a 	sub	r16,r16,r3
   8d904:	873fed16 	blt	r16,fp,8d8bc <__ram_exceptions_end+0xfff6d688>
   8d908:	00ffffc4 	movi	r3,-1
   8d90c:	10c02826 	beq	r2,r3,8d9b0 <_strtol_r+0x1d8>
   8d910:	a0001e1e 	bne	r20,zero,8d98c <_strtol_r+0x1b4>
   8d914:	d8c00017 	ldw	r3,0(sp)
   8d918:	18004326 	beq	r3,zero,8da28 <_strtol_r+0x250>
   8d91c:	10001d1e 	bne	r2,zero,8d994 <_strtol_r+0x1bc>
   8d920:	dd800217 	ldw	r22,8(sp)
   8d924:	2005883a 	mov	r2,r4
   8d928:	d8c00017 	ldw	r3,0(sp)
   8d92c:	1d800015 	stw	r22,0(r3)
   8d930:	dfc00d17 	ldw	ra,52(sp)
   8d934:	df000c17 	ldw	fp,48(sp)
   8d938:	ddc00b17 	ldw	r23,44(sp)
   8d93c:	dd800a17 	ldw	r22,40(sp)
   8d940:	dd400917 	ldw	r21,36(sp)
   8d944:	dd000817 	ldw	r20,32(sp)
   8d948:	dcc00717 	ldw	r19,28(sp)
   8d94c:	dc800617 	ldw	r18,24(sp)
   8d950:	dc400517 	ldw	r17,20(sp)
   8d954:	dc000417 	ldw	r16,16(sp)
   8d958:	dec00e04 	addi	sp,sp,56
   8d95c:	f800283a 	ret
   8d960:	d8c00117 	ldw	r3,4(sp)
   8d964:	1c3fd80e 	bge	r3,r16,8d8c8 <__ram_exceptions_end+0xfff6d694>
   8d968:	00bfffc4 	movi	r2,-1
   8d96c:	003fda06 	br	8d8d8 <__ram_exceptions_end+0xfff6d6a4>
   8d970:	00c00dc4 	movi	r3,55
   8d974:	003fe206 	br	8d900 <__ram_exceptions_end+0xfff6d6cc>
   8d978:	00800c04 	movi	r2,48
   8d97c:	80801926 	beq	r16,r2,8d9e4 <_strtol_r+0x20c>
   8d980:	07000284 	movi	fp,10
   8d984:	e027883a 	mov	r19,fp
   8d988:	003fb706 	br	8d868 <__ram_exceptions_end+0xfff6d634>
   8d98c:	0109c83a 	sub	r4,zero,r4
   8d990:	003fe006 	br	8d914 <__ram_exceptions_end+0xfff6d6e0>
   8d994:	2005883a 	mov	r2,r4
   8d998:	8dbfffc4 	addi	r22,r17,-1
   8d99c:	003fe206 	br	8d928 <__ram_exceptions_end+0xfff6d6f4>
   8d9a0:	1c400084 	addi	r17,r3,2
   8d9a4:	1c000043 	ldbu	r16,1(r3)
   8d9a8:	05000044 	movi	r20,1
   8d9ac:	003faa06 	br	8d858 <__ram_exceptions_end+0xfff6d624>
   8d9b0:	d9000317 	ldw	r4,12(sp)
   8d9b4:	00c00884 	movi	r3,34
   8d9b8:	a005003a 	cmpeq	r2,r20,zero
   8d9bc:	20c00015 	stw	r3,0(r4)
   8d9c0:	00e00034 	movhi	r3,32768
   8d9c4:	1885c83a 	sub	r2,r3,r2
   8d9c8:	d8c00017 	ldw	r3,0(sp)
   8d9cc:	183ff21e 	bne	r3,zero,8d998 <__ram_exceptions_end+0xfff6d764>
   8d9d0:	003fd706 	br	8d930 <__ram_exceptions_end+0xfff6d6fc>
   8d9d4:	1c400084 	addi	r17,r3,2
   8d9d8:	1c000043 	ldbu	r16,1(r3)
   8d9dc:	0029883a 	mov	r20,zero
   8d9e0:	003f9d06 	br	8d858 <__ram_exceptions_end+0xfff6d624>
   8d9e4:	88800003 	ldbu	r2,0(r17)
   8d9e8:	00c01604 	movi	r3,88
   8d9ec:	108037cc 	andi	r2,r2,223
   8d9f0:	10c00826 	beq	r2,r3,8da14 <_strtol_r+0x23c>
   8d9f4:	07000204 	movi	fp,8
   8d9f8:	003f9a06 	br	8d864 <__ram_exceptions_end+0xfff6d630>
   8d9fc:	00800c04 	movi	r2,48
   8da00:	80bf981e 	bne	r16,r2,8d864 <__ram_exceptions_end+0xfff6d630>
   8da04:	88800003 	ldbu	r2,0(r17)
   8da08:	00c01604 	movi	r3,88
   8da0c:	108037cc 	andi	r2,r2,223
   8da10:	10ff941e 	bne	r2,r3,8d864 <__ram_exceptions_end+0xfff6d630>
   8da14:	04c00404 	movi	r19,16
   8da18:	8c000043 	ldbu	r16,1(r17)
   8da1c:	9839883a 	mov	fp,r19
   8da20:	8c400084 	addi	r17,r17,2
   8da24:	003f9006 	br	8d868 <__ram_exceptions_end+0xfff6d634>
   8da28:	2005883a 	mov	r2,r4
   8da2c:	003fc006 	br	8d930 <__ram_exceptions_end+0xfff6d6fc>

0008da30 <strtol>:
   8da30:	008002b4 	movhi	r2,10
   8da34:	10817a04 	addi	r2,r2,1512
   8da38:	300f883a 	mov	r7,r6
   8da3c:	280d883a 	mov	r6,r5
   8da40:	200b883a 	mov	r5,r4
   8da44:	11000017 	ldw	r4,0(r2)
   8da48:	008d7d81 	jmpi	8d7d8 <_strtol_r>

0008da4c <_strtoll_r>:
   8da4c:	008002b4 	movhi	r2,10
   8da50:	deffef04 	addi	sp,sp,-68
   8da54:	10817d04 	addi	r2,r2,1524
   8da58:	dd800d15 	stw	r22,52(sp)
   8da5c:	15800017 	ldw	r22,0(r2)
   8da60:	df000f15 	stw	fp,60(sp)
   8da64:	d9000515 	stw	r4,20(sp)
   8da68:	dfc01015 	stw	ra,64(sp)
   8da6c:	ddc00e15 	stw	r23,56(sp)
   8da70:	dd400c15 	stw	r21,48(sp)
   8da74:	dd000b15 	stw	r20,44(sp)
   8da78:	dcc00a15 	stw	r19,40(sp)
   8da7c:	dc800915 	stw	r18,36(sp)
   8da80:	dc400815 	stw	r17,32(sp)
   8da84:	dc000715 	stw	r16,28(sp)
   8da88:	d9400415 	stw	r5,16(sp)
   8da8c:	d9800215 	stw	r6,8(sp)
   8da90:	3839883a 	mov	fp,r7
   8da94:	2809883a 	mov	r4,r5
   8da98:	22000003 	ldbu	r8,0(r4)
   8da9c:	24400044 	addi	r17,r4,1
   8daa0:	2007883a 	mov	r3,r4
   8daa4:	b205883a 	add	r2,r22,r8
   8daa8:	10800043 	ldbu	r2,1(r2)
   8daac:	8809883a 	mov	r4,r17
   8dab0:	1080020c 	andi	r2,r2,8
   8dab4:	103ff81e 	bne	r2,zero,8da98 <__ram_exceptions_end+0xfff6d864>
   8dab8:	00800b44 	movi	r2,45
   8dabc:	40807e26 	beq	r8,r2,8dcb8 <_strtoll_r+0x26c>
   8dac0:	00800ac4 	movi	r2,43
   8dac4:	40808126 	beq	r8,r2,8dccc <_strtoll_r+0x280>
   8dac8:	d8000115 	stw	zero,4(sp)
   8dacc:	e0000b26 	beq	fp,zero,8dafc <_strtoll_r+0xb0>
   8dad0:	00800404 	movi	r2,16
   8dad4:	e0808926 	beq	fp,r2,8dcfc <_strtoll_r+0x2b0>
   8dad8:	e00bd7fa 	srai	r5,fp,31
   8dadc:	d9000117 	ldw	r4,4(sp)
   8dae0:	e025883a 	mov	r18,fp
   8dae4:	d9400015 	stw	r5,0(sp)
   8dae8:	20000b1e 	bne	r4,zero,8db18 <_strtoll_r+0xcc>
   8daec:	04200034 	movhi	r16,32768
   8daf0:	843fffc4 	addi	r16,r16,-1
   8daf4:	053fffc4 	movi	r20,-1
   8daf8:	00000906 	br	8db20 <_strtoll_r+0xd4>
   8dafc:	00800c04 	movi	r2,48
   8db00:	40807626 	beq	r8,r2,8dcdc <_strtoll_r+0x290>
   8db04:	04800284 	movi	r18,10
   8db08:	d8000015 	stw	zero,0(sp)
   8db0c:	9039883a 	mov	fp,r18
   8db10:	d9000117 	ldw	r4,4(sp)
   8db14:	203ff526 	beq	r4,zero,8daec <__ram_exceptions_end+0xfff6d8b8>
   8db18:	0029883a 	mov	r20,zero
   8db1c:	04200034 	movhi	r16,32768
   8db20:	d9c00017 	ldw	r7,0(sp)
   8db24:	a009883a 	mov	r4,r20
   8db28:	800b883a 	mov	r5,r16
   8db2c:	900d883a 	mov	r6,r18
   8db30:	da000615 	stw	r8,24(sp)
   8db34:	009643c0 	call	9643c <__umoddi3>
   8db38:	d9c00017 	ldw	r7,0(sp)
   8db3c:	a009883a 	mov	r4,r20
   8db40:	800b883a 	mov	r5,r16
   8db44:	900d883a 	mov	r6,r18
   8db48:	d8800315 	stw	r2,12(sp)
   8db4c:	0095e400 	call	95e40 <__udivdi3>
   8db50:	da000617 	ldw	r8,24(sp)
   8db54:	1829883a 	mov	r20,r3
   8db58:	882f883a 	mov	r23,r17
   8db5c:	b207883a 	add	r3,r22,r8
   8db60:	19800043 	ldbu	r6,1(r3)
   8db64:	1021883a 	mov	r16,r2
   8db68:	000f883a 	mov	r7,zero
   8db6c:	30c0010c 	andi	r3,r6,4
   8db70:	0009883a 	mov	r4,zero
   8db74:	000b883a 	mov	r5,zero
   8db78:	04400044 	movi	r17,1
   8db7c:	057fffc4 	movi	r21,-1
   8db80:	18000d26 	beq	r3,zero,8dbb8 <_strtoll_r+0x16c>
   8db84:	44fff404 	addi	r19,r8,-48
   8db88:	9f00110e 	bge	r19,fp,8dbd0 <_strtoll_r+0x184>
   8db8c:	3d400426 	beq	r7,r21,8dba0 <_strtoll_r+0x154>
   8db90:	a1400236 	bltu	r20,r5,8db9c <_strtoll_r+0x150>
   8db94:	2d002a1e 	bne	r5,r20,8dc40 <_strtoll_r+0x1f4>
   8db98:	8100292e 	bgeu	r16,r4,8dc40 <_strtoll_r+0x1f4>
   8db9c:	01ffffc4 	movi	r7,-1
   8dba0:	ba000003 	ldbu	r8,0(r23)
   8dba4:	bdc00044 	addi	r23,r23,1
   8dba8:	b207883a 	add	r3,r22,r8
   8dbac:	19800043 	ldbu	r6,1(r3)
   8dbb0:	30c0010c 	andi	r3,r6,4
   8dbb4:	183ff31e 	bne	r3,zero,8db84 <__ram_exceptions_end+0xfff6d950>
   8dbb8:	318000cc 	andi	r6,r6,3
   8dbbc:	30000426 	beq	r6,zero,8dbd0 <_strtoll_r+0x184>
   8dbc0:	34402b26 	beq	r6,r17,8dc70 <_strtoll_r+0x224>
   8dbc4:	00c015c4 	movi	r3,87
   8dbc8:	40e7c83a 	sub	r19,r8,r3
   8dbcc:	9f3fef16 	blt	r19,fp,8db8c <__ram_exceptions_end+0xfff6d958>
   8dbd0:	00bfffc4 	movi	r2,-1
   8dbd4:	38802c26 	beq	r7,r2,8dc88 <_strtoll_r+0x23c>
   8dbd8:	d8800117 	ldw	r2,4(sp)
   8dbdc:	10000426 	beq	r2,zero,8dbf0 <_strtoll_r+0x1a4>
   8dbe0:	0109c83a 	sub	r4,zero,r4
   8dbe4:	2004c03a 	cmpne	r2,r4,zero
   8dbe8:	0151c83a 	sub	r8,zero,r5
   8dbec:	408bc83a 	sub	r5,r8,r2
   8dbf0:	d8800217 	ldw	r2,8(sp)
   8dbf4:	10005026 	beq	r2,zero,8dd38 <_strtoll_r+0x2ec>
   8dbf8:	2005883a 	mov	r2,r4
   8dbfc:	2807883a 	mov	r3,r5
   8dc00:	38002b1e 	bne	r7,zero,8dcb0 <_strtoll_r+0x264>
   8dc04:	dd800417 	ldw	r22,16(sp)
   8dc08:	d9000217 	ldw	r4,8(sp)
   8dc0c:	25800015 	stw	r22,0(r4)
   8dc10:	dfc01017 	ldw	ra,64(sp)
   8dc14:	df000f17 	ldw	fp,60(sp)
   8dc18:	ddc00e17 	ldw	r23,56(sp)
   8dc1c:	dd800d17 	ldw	r22,52(sp)
   8dc20:	dd400c17 	ldw	r21,48(sp)
   8dc24:	dd000b17 	ldw	r20,44(sp)
   8dc28:	dcc00a17 	ldw	r19,40(sp)
   8dc2c:	dc800917 	ldw	r18,36(sp)
   8dc30:	dc400817 	ldw	r17,32(sp)
   8dc34:	dc000717 	ldw	r16,28(sp)
   8dc38:	dec01104 	addi	sp,sp,68
   8dc3c:	f800283a 	ret
   8dc40:	24000d26 	beq	r4,r16,8dc78 <_strtoll_r+0x22c>
   8dc44:	d9c00017 	ldw	r7,0(sp)
   8dc48:	900d883a 	mov	r6,r18
   8dc4c:	0095cc00 	call	95cc0 <__muldi3>
   8dc50:	980bd7fa 	srai	r5,r19,31
   8dc54:	9885883a 	add	r2,r19,r2
   8dc58:	14d1803a 	cmpltu	r8,r2,r19
   8dc5c:	28c7883a 	add	r3,r5,r3
   8dc60:	1009883a 	mov	r4,r2
   8dc64:	40cb883a 	add	r5,r8,r3
   8dc68:	01c00044 	movi	r7,1
   8dc6c:	003fcc06 	br	8dba0 <__ram_exceptions_end+0xfff6d96c>
   8dc70:	00c00dc4 	movi	r3,55
   8dc74:	003fd406 	br	8dbc8 <__ram_exceptions_end+0xfff6d994>
   8dc78:	2d3ff21e 	bne	r5,r20,8dc44 <__ram_exceptions_end+0xfff6da10>
   8dc7c:	d8800317 	ldw	r2,12(sp)
   8dc80:	14ffc616 	blt	r2,r19,8db9c <__ram_exceptions_end+0xfff6d968>
   8dc84:	003fef06 	br	8dc44 <__ram_exceptions_end+0xfff6da10>
   8dc88:	d9000117 	ldw	r4,4(sp)
   8dc8c:	2000271e 	bne	r4,zero,8dd2c <_strtoll_r+0x2e0>
   8dc90:	00e00034 	movhi	r3,32768
   8dc94:	18ffffc4 	addi	r3,r3,-1
   8dc98:	3805883a 	mov	r2,r7
   8dc9c:	d9400517 	ldw	r5,20(sp)
   8dca0:	01000884 	movi	r4,34
   8dca4:	29000015 	stw	r4,0(r5)
   8dca8:	d9000217 	ldw	r4,8(sp)
   8dcac:	203fd826 	beq	r4,zero,8dc10 <__ram_exceptions_end+0xfff6d9dc>
   8dcb0:	bdbfffc4 	addi	r22,r23,-1
   8dcb4:	003fd406 	br	8dc08 <__ram_exceptions_end+0xfff6d9d4>
   8dcb8:	00800044 	movi	r2,1
   8dcbc:	1c400084 	addi	r17,r3,2
   8dcc0:	1a000043 	ldbu	r8,1(r3)
   8dcc4:	d8800115 	stw	r2,4(sp)
   8dcc8:	003f8006 	br	8dacc <__ram_exceptions_end+0xfff6d898>
   8dccc:	1c400084 	addi	r17,r3,2
   8dcd0:	1a000043 	ldbu	r8,1(r3)
   8dcd4:	d8000115 	stw	zero,4(sp)
   8dcd8:	003f7c06 	br	8dacc <__ram_exceptions_end+0xfff6d898>
   8dcdc:	88800003 	ldbu	r2,0(r17)
   8dce0:	00c01604 	movi	r3,88
   8dce4:	108037cc 	andi	r2,r2,223
   8dce8:	10c00a26 	beq	r2,r3,8dd14 <_strtoll_r+0x2c8>
   8dcec:	04800204 	movi	r18,8
   8dcf0:	d8000015 	stw	zero,0(sp)
   8dcf4:	9039883a 	mov	fp,r18
   8dcf8:	003f8506 	br	8db10 <__ram_exceptions_end+0xfff6d8dc>
   8dcfc:	00800c04 	movi	r2,48
   8dd00:	4080101e 	bne	r8,r2,8dd44 <_strtoll_r+0x2f8>
   8dd04:	88800003 	ldbu	r2,0(r17)
   8dd08:	00c01604 	movi	r3,88
   8dd0c:	108037cc 	andi	r2,r2,223
   8dd10:	10c00c1e 	bne	r2,r3,8dd44 <_strtoll_r+0x2f8>
   8dd14:	04800404 	movi	r18,16
   8dd18:	8a000043 	ldbu	r8,1(r17)
   8dd1c:	d8000015 	stw	zero,0(sp)
   8dd20:	8c400084 	addi	r17,r17,2
   8dd24:	9039883a 	mov	fp,r18
   8dd28:	003f7906 	br	8db10 <__ram_exceptions_end+0xfff6d8dc>
   8dd2c:	0005883a 	mov	r2,zero
   8dd30:	00e00034 	movhi	r3,32768
   8dd34:	003fd906 	br	8dc9c <__ram_exceptions_end+0xfff6da68>
   8dd38:	2005883a 	mov	r2,r4
   8dd3c:	2807883a 	mov	r3,r5
   8dd40:	003fb306 	br	8dc10 <__ram_exceptions_end+0xfff6d9dc>
   8dd44:	e025883a 	mov	r18,fp
   8dd48:	d8000015 	stw	zero,0(sp)
   8dd4c:	003f7006 	br	8db10 <__ram_exceptions_end+0xfff6d8dc>

0008dd50 <_strtoul_r>:
   8dd50:	008002b4 	movhi	r2,10
   8dd54:	defff204 	addi	sp,sp,-56
   8dd58:	10817d04 	addi	r2,r2,1524
   8dd5c:	dd800a15 	stw	r22,40(sp)
   8dd60:	15800017 	ldw	r22,0(r2)
   8dd64:	df000c15 	stw	fp,48(sp)
   8dd68:	dd400915 	stw	r21,36(sp)
   8dd6c:	d9000315 	stw	r4,12(sp)
   8dd70:	dfc00d15 	stw	ra,52(sp)
   8dd74:	ddc00b15 	stw	r23,44(sp)
   8dd78:	dd000815 	stw	r20,32(sp)
   8dd7c:	dcc00715 	stw	r19,28(sp)
   8dd80:	dc800615 	stw	r18,24(sp)
   8dd84:	dc400515 	stw	r17,20(sp)
   8dd88:	dc000415 	stw	r16,16(sp)
   8dd8c:	d9400015 	stw	r5,0(sp)
   8dd90:	302b883a 	mov	r21,r6
   8dd94:	3839883a 	mov	fp,r7
   8dd98:	2809883a 	mov	r4,r5
   8dd9c:	24000003 	ldbu	r16,0(r4)
   8dda0:	24400044 	addi	r17,r4,1
   8dda4:	2007883a 	mov	r3,r4
   8dda8:	b405883a 	add	r2,r22,r16
   8ddac:	10800043 	ldbu	r2,1(r2)
   8ddb0:	8809883a 	mov	r4,r17
   8ddb4:	1080020c 	andi	r2,r2,8
   8ddb8:	103ff81e 	bne	r2,zero,8dd9c <__ram_exceptions_end+0xfff6db68>
   8ddbc:	00800b44 	movi	r2,45
   8ddc0:	80805826 	beq	r16,r2,8df24 <_strtoul_r+0x1d4>
   8ddc4:	00800ac4 	movi	r2,43
   8ddc8:	80805b26 	beq	r16,r2,8df38 <_strtoul_r+0x1e8>
   8ddcc:	d8000215 	stw	zero,8(sp)
   8ddd0:	e0000d26 	beq	fp,zero,8de08 <_strtoul_r+0xb8>
   8ddd4:	00800404 	movi	r2,16
   8ddd8:	e0806626 	beq	fp,r2,8df74 <_strtoul_r+0x224>
   8dddc:	013fffc4 	movi	r4,-1
   8dde0:	e00b883a 	mov	r5,fp
   8dde4:	00821580 	call	82158 <__udivsi3>
   8dde8:	e00b883a 	mov	r5,fp
   8ddec:	013fffc4 	movi	r4,-1
   8ddf0:	1025883a 	mov	r18,r2
   8ddf4:	00821bc0 	call	821bc <__umodsi3>
   8ddf8:	d8800115 	stw	r2,4(sp)
   8ddfc:	e027883a 	mov	r19,fp
   8de00:	902f883a 	mov	r23,r18
   8de04:	00000806 	br	8de28 <_strtoul_r+0xd8>
   8de08:	00800c04 	movi	r2,48
   8de0c:	80804e26 	beq	r16,r2,8df48 <_strtoul_r+0x1f8>
   8de10:	07000284 	movi	fp,10
   8de14:	00c00144 	movi	r3,5
   8de18:	05c666b4 	movhi	r23,6554
   8de1c:	d8c00115 	stw	r3,4(sp)
   8de20:	bde66644 	addi	r23,r23,-26215
   8de24:	e027883a 	mov	r19,fp
   8de28:	b407883a 	add	r3,r22,r16
   8de2c:	18c00043 	ldbu	r3,1(r3)
   8de30:	0005883a 	mov	r2,zero
   8de34:	0009883a 	mov	r4,zero
   8de38:	1940010c 	andi	r5,r3,4
   8de3c:	04800044 	movi	r18,1
   8de40:	053fffc4 	movi	r20,-1
   8de44:	28000f26 	beq	r5,zero,8de84 <_strtoul_r+0x134>
   8de48:	843ff404 	addi	r16,r16,-48
   8de4c:	8700130e 	bge	r16,fp,8de9c <_strtoul_r+0x14c>
   8de50:	15000626 	beq	r2,r20,8de6c <_strtoul_r+0x11c>
   8de54:	b9002836 	bltu	r23,r4,8def8 <_strtoul_r+0x1a8>
   8de58:	25c02526 	beq	r4,r23,8def0 <_strtoul_r+0x1a0>
   8de5c:	980b883a 	mov	r5,r19
   8de60:	00822140 	call	82214 <__mulsi3>
   8de64:	8089883a 	add	r4,r16,r2
   8de68:	00800044 	movi	r2,1
   8de6c:	8c000003 	ldbu	r16,0(r17)
   8de70:	8c400044 	addi	r17,r17,1
   8de74:	b407883a 	add	r3,r22,r16
   8de78:	18c00043 	ldbu	r3,1(r3)
   8de7c:	1940010c 	andi	r5,r3,4
   8de80:	283ff11e 	bne	r5,zero,8de48 <__ram_exceptions_end+0xfff6dc14>
   8de84:	18c000cc 	andi	r3,r3,3
   8de88:	18000426 	beq	r3,zero,8de9c <_strtoul_r+0x14c>
   8de8c:	1c801c26 	beq	r3,r18,8df00 <_strtoul_r+0x1b0>
   8de90:	00c015c4 	movi	r3,87
   8de94:	80e1c83a 	sub	r16,r16,r3
   8de98:	873fed16 	blt	r16,fp,8de50 <__ram_exceptions_end+0xfff6dc1c>
   8de9c:	10001a16 	blt	r2,zero,8df08 <_strtoul_r+0x1b8>
   8dea0:	d8c00217 	ldw	r3,8(sp)
   8dea4:	18000126 	beq	r3,zero,8deac <_strtoul_r+0x15c>
   8dea8:	0109c83a 	sub	r4,zero,r4
   8deac:	a8000326 	beq	r21,zero,8debc <_strtoul_r+0x16c>
   8deb0:	dd000017 	ldw	r20,0(sp)
   8deb4:	1000191e 	bne	r2,zero,8df1c <_strtoul_r+0x1cc>
   8deb8:	ad000015 	stw	r20,0(r21)
   8debc:	2005883a 	mov	r2,r4
   8dec0:	dfc00d17 	ldw	ra,52(sp)
   8dec4:	df000c17 	ldw	fp,48(sp)
   8dec8:	ddc00b17 	ldw	r23,44(sp)
   8decc:	dd800a17 	ldw	r22,40(sp)
   8ded0:	dd400917 	ldw	r21,36(sp)
   8ded4:	dd000817 	ldw	r20,32(sp)
   8ded8:	dcc00717 	ldw	r19,28(sp)
   8dedc:	dc800617 	ldw	r18,24(sp)
   8dee0:	dc400517 	ldw	r17,20(sp)
   8dee4:	dc000417 	ldw	r16,16(sp)
   8dee8:	dec00e04 	addi	sp,sp,56
   8deec:	f800283a 	ret
   8def0:	d8c00117 	ldw	r3,4(sp)
   8def4:	1c3fd90e 	bge	r3,r16,8de5c <__ram_exceptions_end+0xfff6dc28>
   8def8:	00bfffc4 	movi	r2,-1
   8defc:	003fdb06 	br	8de6c <__ram_exceptions_end+0xfff6dc38>
   8df00:	00c00dc4 	movi	r3,55
   8df04:	003fe306 	br	8de94 <__ram_exceptions_end+0xfff6dc60>
   8df08:	d8c00317 	ldw	r3,12(sp)
   8df0c:	00800884 	movi	r2,34
   8df10:	013fffc4 	movi	r4,-1
   8df14:	18800015 	stw	r2,0(r3)
   8df18:	a83fe826 	beq	r21,zero,8debc <__ram_exceptions_end+0xfff6dc88>
   8df1c:	8d3fffc4 	addi	r20,r17,-1
   8df20:	003fe506 	br	8deb8 <__ram_exceptions_end+0xfff6dc84>
   8df24:	1c400084 	addi	r17,r3,2
   8df28:	1c000043 	ldbu	r16,1(r3)
   8df2c:	00c00044 	movi	r3,1
   8df30:	d8c00215 	stw	r3,8(sp)
   8df34:	003fa606 	br	8ddd0 <__ram_exceptions_end+0xfff6db9c>
   8df38:	1c400084 	addi	r17,r3,2
   8df3c:	1c000043 	ldbu	r16,1(r3)
   8df40:	d8000215 	stw	zero,8(sp)
   8df44:	003fa206 	br	8ddd0 <__ram_exceptions_end+0xfff6db9c>
   8df48:	88800003 	ldbu	r2,0(r17)
   8df4c:	00c01604 	movi	r3,88
   8df50:	108037cc 	andi	r2,r2,223
   8df54:	10c00d26 	beq	r2,r3,8df8c <_strtoul_r+0x23c>
   8df58:	07000204 	movi	fp,8
   8df5c:	00c001c4 	movi	r3,7
   8df60:	05c80034 	movhi	r23,8192
   8df64:	d8c00115 	stw	r3,4(sp)
   8df68:	bdffffc4 	addi	r23,r23,-1
   8df6c:	e027883a 	mov	r19,fp
   8df70:	003fad06 	br	8de28 <__ram_exceptions_end+0xfff6dbf4>
   8df74:	00800c04 	movi	r2,48
   8df78:	80800d1e 	bne	r16,r2,8dfb0 <_strtoul_r+0x260>
   8df7c:	88800003 	ldbu	r2,0(r17)
   8df80:	00c01604 	movi	r3,88
   8df84:	108037cc 	andi	r2,r2,223
   8df88:	10c0091e 	bne	r2,r3,8dfb0 <_strtoul_r+0x260>
   8df8c:	04c00404 	movi	r19,16
   8df90:	00c003c4 	movi	r3,15
   8df94:	04840034 	movhi	r18,4096
   8df98:	8c000043 	ldbu	r16,1(r17)
   8df9c:	d8c00115 	stw	r3,4(sp)
   8dfa0:	8c400084 	addi	r17,r17,2
   8dfa4:	94bfffc4 	addi	r18,r18,-1
   8dfa8:	9839883a 	mov	fp,r19
   8dfac:	003f9406 	br	8de00 <__ram_exceptions_end+0xfff6dbcc>
   8dfb0:	00c003c4 	movi	r3,15
   8dfb4:	05c40034 	movhi	r23,4096
   8dfb8:	d8c00115 	stw	r3,4(sp)
   8dfbc:	bdffffc4 	addi	r23,r23,-1
   8dfc0:	e027883a 	mov	r19,fp
   8dfc4:	003f9806 	br	8de28 <__ram_exceptions_end+0xfff6dbf4>

0008dfc8 <strtoul>:
   8dfc8:	008002b4 	movhi	r2,10
   8dfcc:	10817a04 	addi	r2,r2,1512
   8dfd0:	300f883a 	mov	r7,r6
   8dfd4:	280d883a 	mov	r6,r5
   8dfd8:	200b883a 	mov	r5,r4
   8dfdc:	11000017 	ldw	r4,0(r2)
   8dfe0:	008dd501 	jmpi	8dd50 <_strtoul_r>

0008dfe4 <_strtoull_r>:
   8dfe4:	008002b4 	movhi	r2,10
   8dfe8:	deffef04 	addi	sp,sp,-68
   8dfec:	10817d04 	addi	r2,r2,1524
   8dff0:	dd800d15 	stw	r22,52(sp)
   8dff4:	15800017 	ldw	r22,0(r2)
   8dff8:	df000f15 	stw	fp,60(sp)
   8dffc:	d9000515 	stw	r4,20(sp)
   8e000:	dfc01015 	stw	ra,64(sp)
   8e004:	ddc00e15 	stw	r23,56(sp)
   8e008:	dd400c15 	stw	r21,48(sp)
   8e00c:	dd000b15 	stw	r20,44(sp)
   8e010:	dcc00a15 	stw	r19,40(sp)
   8e014:	dc800915 	stw	r18,36(sp)
   8e018:	dc400815 	stw	r17,32(sp)
   8e01c:	dc000715 	stw	r16,28(sp)
   8e020:	d9400215 	stw	r5,8(sp)
   8e024:	d9800115 	stw	r6,4(sp)
   8e028:	3839883a 	mov	fp,r7
   8e02c:	2809883a 	mov	r4,r5
   8e030:	22000003 	ldbu	r8,0(r4)
   8e034:	24400044 	addi	r17,r4,1
   8e038:	2007883a 	mov	r3,r4
   8e03c:	b205883a 	add	r2,r22,r8
   8e040:	10800043 	ldbu	r2,1(r2)
   8e044:	8809883a 	mov	r4,r17
   8e048:	1080020c 	andi	r2,r2,8
   8e04c:	103ff81e 	bne	r2,zero,8e030 <__ram_exceptions_end+0xfff6ddfc>
   8e050:	00800b44 	movi	r2,45
   8e054:	40807726 	beq	r8,r2,8e234 <_strtoull_r+0x250>
   8e058:	00800ac4 	movi	r2,43
   8e05c:	40807a26 	beq	r8,r2,8e248 <_strtoull_r+0x264>
   8e060:	d8000415 	stw	zero,16(sp)
   8e064:	e0001426 	beq	fp,zero,8e0b8 <_strtoull_r+0xd4>
   8e068:	00800404 	movi	r2,16
   8e06c:	e0808826 	beq	fp,r2,8e290 <_strtoull_r+0x2ac>
   8e070:	e025d7fa 	srai	r18,fp,31
   8e074:	013fffc4 	movi	r4,-1
   8e078:	200b883a 	mov	r5,r4
   8e07c:	e00d883a 	mov	r6,fp
   8e080:	900f883a 	mov	r7,r18
   8e084:	da000615 	stw	r8,24(sp)
   8e088:	0095e400 	call	95e40 <__udivdi3>
   8e08c:	013fffc4 	movi	r4,-1
   8e090:	e00d883a 	mov	r6,fp
   8e094:	900f883a 	mov	r7,r18
   8e098:	200b883a 	mov	r5,r4
   8e09c:	1021883a 	mov	r16,r2
   8e0a0:	182f883a 	mov	r23,r3
   8e0a4:	009643c0 	call	9643c <__umoddi3>
   8e0a8:	d8800315 	stw	r2,12(sp)
   8e0ac:	df000015 	stw	fp,0(sp)
   8e0b0:	da000617 	ldw	r8,24(sp)
   8e0b4:	00000c06 	br	8e0e8 <_strtoull_r+0x104>
   8e0b8:	00800c04 	movi	r2,48
   8e0bc:	40806626 	beq	r8,r2,8e258 <_strtoull_r+0x274>
   8e0c0:	00800284 	movi	r2,10
   8e0c4:	00c00144 	movi	r3,5
   8e0c8:	042666b4 	movhi	r16,39322
   8e0cc:	05c666b4 	movhi	r23,6554
   8e0d0:	d8800015 	stw	r2,0(sp)
   8e0d4:	d8c00315 	stw	r3,12(sp)
   8e0d8:	84266644 	addi	r16,r16,-26215
   8e0dc:	bde66644 	addi	r23,r23,-26215
   8e0e0:	0025883a 	mov	r18,zero
   8e0e4:	1039883a 	mov	fp,r2
   8e0e8:	b205883a 	add	r2,r22,r8
   8e0ec:	11800043 	ldbu	r6,1(r2)
   8e0f0:	882b883a 	mov	r21,r17
   8e0f4:	000f883a 	mov	r7,zero
   8e0f8:	3080010c 	andi	r2,r6,4
   8e0fc:	0009883a 	mov	r4,zero
   8e100:	000b883a 	mov	r5,zero
   8e104:	04400044 	movi	r17,1
   8e108:	053fffc4 	movi	r20,-1
   8e10c:	10000d26 	beq	r2,zero,8e144 <_strtoull_r+0x160>
   8e110:	44fff404 	addi	r19,r8,-48
   8e114:	9f00110e 	bge	r19,fp,8e15c <_strtoull_r+0x178>
   8e118:	3d000426 	beq	r7,r20,8e12c <_strtoull_r+0x148>
   8e11c:	b9400236 	bltu	r23,r5,8e128 <_strtoull_r+0x144>
   8e120:	2dc0291e 	bne	r5,r23,8e1c8 <_strtoull_r+0x1e4>
   8e124:	8100282e 	bgeu	r16,r4,8e1c8 <_strtoull_r+0x1e4>
   8e128:	01ffffc4 	movi	r7,-1
   8e12c:	aa000003 	ldbu	r8,0(r21)
   8e130:	ad400044 	addi	r21,r21,1
   8e134:	b205883a 	add	r2,r22,r8
   8e138:	11800043 	ldbu	r6,1(r2)
   8e13c:	3080010c 	andi	r2,r6,4
   8e140:	103ff31e 	bne	r2,zero,8e110 <__ram_exceptions_end+0xfff6dedc>
   8e144:	318000cc 	andi	r6,r6,3
   8e148:	30000426 	beq	r6,zero,8e15c <_strtoull_r+0x178>
   8e14c:	34402a26 	beq	r6,r17,8e1f8 <_strtoull_r+0x214>
   8e150:	00c015c4 	movi	r3,87
   8e154:	40e7c83a 	sub	r19,r8,r3
   8e158:	9f3fef16 	blt	r19,fp,8e118 <__ram_exceptions_end+0xfff6dee4>
   8e15c:	38002c16 	blt	r7,zero,8e210 <_strtoull_r+0x22c>
   8e160:	d8c00417 	ldw	r3,16(sp)
   8e164:	18000426 	beq	r3,zero,8e178 <_strtoull_r+0x194>
   8e168:	0109c83a 	sub	r4,zero,r4
   8e16c:	2004c03a 	cmpne	r2,r4,zero
   8e170:	0151c83a 	sub	r8,zero,r5
   8e174:	408bc83a 	sub	r5,r8,r2
   8e178:	d8800117 	ldw	r2,4(sp)
   8e17c:	10000426 	beq	r2,zero,8e190 <_strtoull_r+0x1ac>
   8e180:	dd000217 	ldw	r20,8(sp)
   8e184:	3800291e 	bne	r7,zero,8e22c <_strtoull_r+0x248>
   8e188:	d8c00117 	ldw	r3,4(sp)
   8e18c:	1d000015 	stw	r20,0(r3)
   8e190:	2005883a 	mov	r2,r4
   8e194:	2807883a 	mov	r3,r5
   8e198:	dfc01017 	ldw	ra,64(sp)
   8e19c:	df000f17 	ldw	fp,60(sp)
   8e1a0:	ddc00e17 	ldw	r23,56(sp)
   8e1a4:	dd800d17 	ldw	r22,52(sp)
   8e1a8:	dd400c17 	ldw	r21,48(sp)
   8e1ac:	dd000b17 	ldw	r20,44(sp)
   8e1b0:	dcc00a17 	ldw	r19,40(sp)
   8e1b4:	dc800917 	ldw	r18,36(sp)
   8e1b8:	dc400817 	ldw	r17,32(sp)
   8e1bc:	dc000717 	ldw	r16,28(sp)
   8e1c0:	dec01104 	addi	sp,sp,68
   8e1c4:	f800283a 	ret
   8e1c8:	24000d26 	beq	r4,r16,8e200 <_strtoull_r+0x21c>
   8e1cc:	d9800017 	ldw	r6,0(sp)
   8e1d0:	900f883a 	mov	r7,r18
   8e1d4:	0095cc00 	call	95cc0 <__muldi3>
   8e1d8:	980bd7fa 	srai	r5,r19,31
   8e1dc:	9885883a 	add	r2,r19,r2
   8e1e0:	14d1803a 	cmpltu	r8,r2,r19
   8e1e4:	28c7883a 	add	r3,r5,r3
   8e1e8:	1009883a 	mov	r4,r2
   8e1ec:	40cb883a 	add	r5,r8,r3
   8e1f0:	01c00044 	movi	r7,1
   8e1f4:	003fcd06 	br	8e12c <__ram_exceptions_end+0xfff6def8>
   8e1f8:	00c00dc4 	movi	r3,55
   8e1fc:	003fd506 	br	8e154 <__ram_exceptions_end+0xfff6df20>
   8e200:	2dfff21e 	bne	r5,r23,8e1cc <__ram_exceptions_end+0xfff6df98>
   8e204:	d8c00317 	ldw	r3,12(sp)
   8e208:	1cffc716 	blt	r3,r19,8e128 <__ram_exceptions_end+0xfff6def4>
   8e20c:	003fef06 	br	8e1cc <__ram_exceptions_end+0xfff6df98>
   8e210:	d8c00517 	ldw	r3,20(sp)
   8e214:	00800884 	movi	r2,34
   8e218:	013fffc4 	movi	r4,-1
   8e21c:	18800015 	stw	r2,0(r3)
   8e220:	d8800117 	ldw	r2,4(sp)
   8e224:	200b883a 	mov	r5,r4
   8e228:	103fd926 	beq	r2,zero,8e190 <__ram_exceptions_end+0xfff6df5c>
   8e22c:	ad3fffc4 	addi	r20,r21,-1
   8e230:	003fd506 	br	8e188 <__ram_exceptions_end+0xfff6df54>
   8e234:	00800044 	movi	r2,1
   8e238:	1c400084 	addi	r17,r3,2
   8e23c:	1a000043 	ldbu	r8,1(r3)
   8e240:	d8800415 	stw	r2,16(sp)
   8e244:	003f8706 	br	8e064 <__ram_exceptions_end+0xfff6de30>
   8e248:	1c400084 	addi	r17,r3,2
   8e24c:	1a000043 	ldbu	r8,1(r3)
   8e250:	d8000415 	stw	zero,16(sp)
   8e254:	003f8306 	br	8e064 <__ram_exceptions_end+0xfff6de30>
   8e258:	88800003 	ldbu	r2,0(r17)
   8e25c:	00c01604 	movi	r3,88
   8e260:	108037cc 	andi	r2,r2,223
   8e264:	10c01026 	beq	r2,r3,8e2a8 <_strtoull_r+0x2c4>
   8e268:	00c00204 	movi	r3,8
   8e26c:	008001c4 	movi	r2,7
   8e270:	043fffc4 	movi	r16,-1
   8e274:	05c80034 	movhi	r23,8192
   8e278:	d8c00015 	stw	r3,0(sp)
   8e27c:	d8800315 	stw	r2,12(sp)
   8e280:	bc2f883a 	add	r23,r23,r16
   8e284:	0025883a 	mov	r18,zero
   8e288:	1839883a 	mov	fp,r3
   8e28c:	003f9606 	br	8e0e8 <__ram_exceptions_end+0xfff6deb4>
   8e290:	00800c04 	movi	r2,48
   8e294:	4080101e 	bne	r8,r2,8e2d8 <_strtoull_r+0x2f4>
   8e298:	88800003 	ldbu	r2,0(r17)
   8e29c:	00c01604 	movi	r3,88
   8e2a0:	108037cc 	andi	r2,r2,223
   8e2a4:	10c0141e 	bne	r2,r3,8e2f8 <_strtoull_r+0x314>
   8e2a8:	00c00404 	movi	r3,16
   8e2ac:	008003c4 	movi	r2,15
   8e2b0:	043fffc4 	movi	r16,-1
   8e2b4:	05c40034 	movhi	r23,4096
   8e2b8:	8a000043 	ldbu	r8,1(r17)
   8e2bc:	d8c00015 	stw	r3,0(sp)
   8e2c0:	d8800315 	stw	r2,12(sp)
   8e2c4:	8c400084 	addi	r17,r17,2
   8e2c8:	bc2f883a 	add	r23,r23,r16
   8e2cc:	0025883a 	mov	r18,zero
   8e2d0:	1839883a 	mov	fp,r3
   8e2d4:	003f8406 	br	8e0e8 <__ram_exceptions_end+0xfff6deb4>
   8e2d8:	008003c4 	movi	r2,15
   8e2dc:	d8800315 	stw	r2,12(sp)
   8e2e0:	043fffc4 	movi	r16,-1
   8e2e4:	05c40034 	movhi	r23,4096
   8e2e8:	bc2f883a 	add	r23,r23,r16
   8e2ec:	df000015 	stw	fp,0(sp)
   8e2f0:	0025883a 	mov	r18,zero
   8e2f4:	003f7c06 	br	8e0e8 <__ram_exceptions_end+0xfff6deb4>
   8e2f8:	00c003c4 	movi	r3,15
   8e2fc:	d8c00315 	stw	r3,12(sp)
   8e300:	003ff706 	br	8e2e0 <__ram_exceptions_end+0xfff6e0ac>

0008e304 <_sungetc_r>:
   8e304:	00bfffc4 	movi	r2,-1
   8e308:	28803726 	beq	r5,r2,8e3e8 <_sungetc_r+0xe4>
   8e30c:	3080030b 	ldhu	r2,12(r6)
   8e310:	30c00c17 	ldw	r3,48(r6)
   8e314:	defffc04 	addi	sp,sp,-16
   8e318:	10bff7cc 	andi	r2,r2,65503
   8e31c:	dc800215 	stw	r18,8(sp)
   8e320:	dfc00315 	stw	ra,12(sp)
   8e324:	dc400115 	stw	r17,4(sp)
   8e328:	dc000015 	stw	r16,0(sp)
   8e32c:	3080030d 	sth	r2,12(r6)
   8e330:	2c803fcc 	andi	r18,r5,255
   8e334:	18001826 	beq	r3,zero,8e398 <_sungetc_r+0x94>
   8e338:	30c00117 	ldw	r3,4(r6)
   8e33c:	30800d17 	ldw	r2,52(r6)
   8e340:	3021883a 	mov	r16,r6
   8e344:	2823883a 	mov	r17,r5
   8e348:	18800e0e 	bge	r3,r2,8e384 <_sungetc_r+0x80>
   8e34c:	80c00017 	ldw	r3,0(r16)
   8e350:	9005883a 	mov	r2,r18
   8e354:	193fffc4 	addi	r4,r3,-1
   8e358:	81000015 	stw	r4,0(r16)
   8e35c:	1c7fffc5 	stb	r17,-1(r3)
   8e360:	80c00117 	ldw	r3,4(r16)
   8e364:	18c00044 	addi	r3,r3,1
   8e368:	80c00115 	stw	r3,4(r16)
   8e36c:	dfc00317 	ldw	ra,12(sp)
   8e370:	dc800217 	ldw	r18,8(sp)
   8e374:	dc400117 	ldw	r17,4(sp)
   8e378:	dc000017 	ldw	r16,0(sp)
   8e37c:	dec00404 	addi	sp,sp,16
   8e380:	f800283a 	ret
   8e384:	300b883a 	mov	r5,r6
   8e388:	00919840 	call	91984 <__submore>
   8e38c:	103fef26 	beq	r2,zero,8e34c <__ram_exceptions_end+0xfff6e118>
   8e390:	00bfffc4 	movi	r2,-1
   8e394:	003ff506 	br	8e36c <__ram_exceptions_end+0xfff6e138>
   8e398:	30c00417 	ldw	r3,16(r6)
   8e39c:	30800017 	ldw	r2,0(r6)
   8e3a0:	18000326 	beq	r3,zero,8e3b0 <_sungetc_r+0xac>
   8e3a4:	1880022e 	bgeu	r3,r2,8e3b0 <_sungetc_r+0xac>
   8e3a8:	10ffffc3 	ldbu	r3,-1(r2)
   8e3ac:	90c01026 	beq	r18,r3,8e3f0 <_sungetc_r+0xec>
   8e3b0:	31c00117 	ldw	r7,4(r6)
   8e3b4:	30800e15 	stw	r2,56(r6)
   8e3b8:	008000c4 	movi	r2,3
   8e3bc:	31001004 	addi	r4,r6,64
   8e3c0:	30c01084 	addi	r3,r6,66
   8e3c4:	30800d15 	stw	r2,52(r6)
   8e3c8:	00800044 	movi	r2,1
   8e3cc:	30800115 	stw	r2,4(r6)
   8e3d0:	31c00f15 	stw	r7,60(r6)
   8e3d4:	31000c15 	stw	r4,48(r6)
   8e3d8:	31401085 	stb	r5,66(r6)
   8e3dc:	30c00015 	stw	r3,0(r6)
   8e3e0:	9005883a 	mov	r2,r18
   8e3e4:	003fe106 	br	8e36c <__ram_exceptions_end+0xfff6e138>
   8e3e8:	00bfffc4 	movi	r2,-1
   8e3ec:	f800283a 	ret
   8e3f0:	30c00117 	ldw	r3,4(r6)
   8e3f4:	10bfffc4 	addi	r2,r2,-1
   8e3f8:	30800015 	stw	r2,0(r6)
   8e3fc:	18800044 	addi	r2,r3,1
   8e400:	30800115 	stw	r2,4(r6)
   8e404:	9005883a 	mov	r2,r18
   8e408:	003fd806 	br	8e36c <__ram_exceptions_end+0xfff6e138>

0008e40c <__ssrefill_r>:
   8e40c:	defffe04 	addi	sp,sp,-8
   8e410:	dc000015 	stw	r16,0(sp)
   8e414:	2821883a 	mov	r16,r5
   8e418:	29400c17 	ldw	r5,48(r5)
   8e41c:	dfc00115 	stw	ra,4(sp)
   8e420:	28000e26 	beq	r5,zero,8e45c <__ssrefill_r+0x50>
   8e424:	80801004 	addi	r2,r16,64
   8e428:	28800126 	beq	r5,r2,8e430 <__ssrefill_r+0x24>
   8e42c:	00891a40 	call	891a4 <_free_r>
   8e430:	80800f17 	ldw	r2,60(r16)
   8e434:	80000c15 	stw	zero,48(r16)
   8e438:	80800115 	stw	r2,4(r16)
   8e43c:	10000726 	beq	r2,zero,8e45c <__ssrefill_r+0x50>
   8e440:	80c00e17 	ldw	r3,56(r16)
   8e444:	0005883a 	mov	r2,zero
   8e448:	80c00015 	stw	r3,0(r16)
   8e44c:	dfc00117 	ldw	ra,4(sp)
   8e450:	dc000017 	ldw	r16,0(sp)
   8e454:	dec00204 	addi	sp,sp,8
   8e458:	f800283a 	ret
   8e45c:	8080030b 	ldhu	r2,12(r16)
   8e460:	80c00417 	ldw	r3,16(r16)
   8e464:	80000115 	stw	zero,4(r16)
   8e468:	10800814 	ori	r2,r2,32
   8e46c:	8080030d 	sth	r2,12(r16)
   8e470:	80c00015 	stw	r3,0(r16)
   8e474:	00bfffc4 	movi	r2,-1
   8e478:	003ff406 	br	8e44c <__ram_exceptions_end+0xfff6e218>

0008e47c <_sfread_r>:
   8e47c:	defff704 	addi	sp,sp,-36
   8e480:	dd000415 	stw	r20,16(sp)
   8e484:	dcc00315 	stw	r19,12(sp)
   8e488:	2029883a 	mov	r20,r4
   8e48c:	2827883a 	mov	r19,r5
   8e490:	3809883a 	mov	r4,r7
   8e494:	300b883a 	mov	r5,r6
   8e498:	ddc00715 	stw	r23,28(sp)
   8e49c:	dd400515 	stw	r21,20(sp)
   8e4a0:	dc400115 	stw	r17,4(sp)
   8e4a4:	dfc00815 	stw	ra,32(sp)
   8e4a8:	dd800615 	stw	r22,24(sp)
   8e4ac:	dc800215 	stw	r18,8(sp)
   8e4b0:	dc000015 	stw	r16,0(sp)
   8e4b4:	302f883a 	mov	r23,r6
   8e4b8:	382b883a 	mov	r21,r7
   8e4bc:	00822140 	call	82214 <__mulsi3>
   8e4c0:	dc400917 	ldw	r17,36(sp)
   8e4c4:	10002726 	beq	r2,zero,8e564 <_sfread_r+0xe8>
   8e4c8:	102d883a 	mov	r22,r2
   8e4cc:	1025883a 	mov	r18,r2
   8e4d0:	00000b06 	br	8e500 <_sfread_r+0x84>
   8e4d4:	0082be40 	call	82be4 <memcpy>
   8e4d8:	88800017 	ldw	r2,0(r17)
   8e4dc:	9c27883a 	add	r19,r19,r16
   8e4e0:	9425c83a 	sub	r18,r18,r16
   8e4e4:	1421883a 	add	r16,r2,r16
   8e4e8:	88000115 	stw	zero,4(r17)
   8e4ec:	880b883a 	mov	r5,r17
   8e4f0:	8c000015 	stw	r16,0(r17)
   8e4f4:	a009883a 	mov	r4,r20
   8e4f8:	008e40c0 	call	8e40c <__ssrefill_r>
   8e4fc:	10001b1e 	bne	r2,zero,8e56c <_sfread_r+0xf0>
   8e500:	8c000117 	ldw	r16,4(r17)
   8e504:	9809883a 	mov	r4,r19
   8e508:	89400017 	ldw	r5,0(r17)
   8e50c:	800d883a 	mov	r6,r16
   8e510:	84bff036 	bltu	r16,r18,8e4d4 <__ram_exceptions_end+0xfff6e2a0>
   8e514:	900d883a 	mov	r6,r18
   8e518:	0082be40 	call	82be4 <memcpy>
   8e51c:	88c00117 	ldw	r3,4(r17)
   8e520:	89000017 	ldw	r4,0(r17)
   8e524:	a805883a 	mov	r2,r21
   8e528:	1c87c83a 	sub	r3,r3,r18
   8e52c:	24a5883a 	add	r18,r4,r18
   8e530:	88c00115 	stw	r3,4(r17)
   8e534:	8c800015 	stw	r18,0(r17)
   8e538:	dfc00817 	ldw	ra,32(sp)
   8e53c:	ddc00717 	ldw	r23,28(sp)
   8e540:	dd800617 	ldw	r22,24(sp)
   8e544:	dd400517 	ldw	r21,20(sp)
   8e548:	dd000417 	ldw	r20,16(sp)
   8e54c:	dcc00317 	ldw	r19,12(sp)
   8e550:	dc800217 	ldw	r18,8(sp)
   8e554:	dc400117 	ldw	r17,4(sp)
   8e558:	dc000017 	ldw	r16,0(sp)
   8e55c:	dec00904 	addi	sp,sp,36
   8e560:	f800283a 	ret
   8e564:	0005883a 	mov	r2,zero
   8e568:	003ff306 	br	8e538 <__ram_exceptions_end+0xfff6e304>
   8e56c:	b80b883a 	mov	r5,r23
   8e570:	b489c83a 	sub	r4,r22,r18
   8e574:	00821580 	call	82158 <__udivsi3>
   8e578:	003fef06 	br	8e538 <__ram_exceptions_end+0xfff6e304>

0008e57c <__ssvfiscanf_r>:
   8e57c:	2880030b 	ldhu	r2,12(r5)
   8e580:	deff9b04 	addi	sp,sp,-404
   8e584:	dd005f15 	stw	r20,380(sp)
   8e588:	dc405c15 	stw	r17,368(sp)
   8e58c:	dfc06415 	stw	ra,400(sp)
   8e590:	df006315 	stw	fp,396(sp)
   8e594:	ddc06215 	stw	r23,392(sp)
   8e598:	dd806115 	stw	r22,388(sp)
   8e59c:	dd406015 	stw	r21,384(sp)
   8e5a0:	dcc05e15 	stw	r19,376(sp)
   8e5a4:	dc805d15 	stw	r18,372(sp)
   8e5a8:	dc005b15 	stw	r16,364(sp)
   8e5ac:	10c8000c 	andi	r3,r2,8192
   8e5b0:	d9c04f15 	stw	r7,316(sp)
   8e5b4:	2829883a 	mov	r20,r5
   8e5b8:	2023883a 	mov	r17,r4
   8e5bc:	1800061e 	bne	r3,zero,8e5d8 <__ssvfiscanf_r+0x5c>
   8e5c0:	29001917 	ldw	r4,100(r5)
   8e5c4:	00f7ffc4 	movi	r3,-8193
   8e5c8:	10880014 	ori	r2,r2,8192
   8e5cc:	20c6703a 	and	r3,r4,r3
   8e5d0:	2880030d 	sth	r2,12(r5)
   8e5d4:	28c01915 	stw	r3,100(r5)
   8e5d8:	30800003 	ldbu	r2,0(r6)
   8e5dc:	dac04104 	addi	r11,sp,260
   8e5e0:	0039883a 	mov	fp,zero
   8e5e4:	048002b4 	movhi	r18,10
   8e5e8:	d8005215 	stw	zero,328(sp)
   8e5ec:	d8005015 	stw	zero,320(sp)
   8e5f0:	d8005115 	stw	zero,324(sp)
   8e5f4:	dac04e15 	stw	r11,312(sp)
   8e5f8:	d8804d15 	stw	r2,308(sp)
   8e5fc:	e027883a 	mov	r19,fp
   8e600:	94817d04 	addi	r18,r18,1524
   8e604:	a039883a 	mov	fp,r20
   8e608:	35000044 	addi	r20,r6,1
   8e60c:	10001e26 	beq	r2,zero,8e688 <__ssvfiscanf_r+0x10c>
   8e610:	95800017 	ldw	r22,0(r18)
   8e614:	b087883a 	add	r3,r22,r2
   8e618:	18c00043 	ldbu	r3,1(r3)
   8e61c:	18c0020c 	andi	r3,r3,8
   8e620:	18001b26 	beq	r3,zero,8e690 <__ssvfiscanf_r+0x114>
   8e624:	e0800117 	ldw	r2,4(fp)
   8e628:	00800e0e 	bge	zero,r2,8e664 <__ssvfiscanf_r+0xe8>
   8e62c:	e0c00017 	ldw	r3,0(fp)
   8e630:	91000017 	ldw	r4,0(r18)
   8e634:	18800003 	ldbu	r2,0(r3)
   8e638:	2085883a 	add	r2,r4,r2
   8e63c:	10800043 	ldbu	r2,1(r2)
   8e640:	1080020c 	andi	r2,r2,8
   8e644:	10000b26 	beq	r2,zero,8e674 <__ssvfiscanf_r+0xf8>
   8e648:	e0800117 	ldw	r2,4(fp)
   8e64c:	18c00044 	addi	r3,r3,1
   8e650:	e0c00015 	stw	r3,0(fp)
   8e654:	10bfffc4 	addi	r2,r2,-1
   8e658:	e0800115 	stw	r2,4(fp)
   8e65c:	9cc00044 	addi	r19,r19,1
   8e660:	00bff216 	blt	zero,r2,8e62c <__ram_exceptions_end+0xfff6e3f8>
   8e664:	e00b883a 	mov	r5,fp
   8e668:	8809883a 	mov	r4,r17
   8e66c:	008e40c0 	call	8e40c <__ssrefill_r>
   8e670:	103fee26 	beq	r2,zero,8e62c <__ram_exceptions_end+0xfff6e3f8>
   8e674:	a00d883a 	mov	r6,r20
   8e678:	30800003 	ldbu	r2,0(r6)
   8e67c:	35000044 	addi	r20,r6,1
   8e680:	d8804d15 	stw	r2,308(sp)
   8e684:	103fe21e 	bne	r2,zero,8e610 <__ram_exceptions_end+0xfff6e3dc>
   8e688:	d8805117 	ldw	r2,324(sp)
   8e68c:	00009a06 	br	8e8f8 <__ssvfiscanf_r+0x37c>
   8e690:	00c00944 	movi	r3,37
   8e694:	10c0891e 	bne	r2,r3,8e8bc <__ssvfiscanf_r+0x340>
   8e698:	31800043 	ldbu	r6,1(r6)
   8e69c:	002f883a 	mov	r23,zero
   8e6a0:	b809883a 	mov	r4,r23
   8e6a4:	0021883a 	mov	r16,zero
   8e6a8:	01c01e04 	movi	r7,120
   8e6ac:	00c01b04 	movi	r3,108
   8e6b0:	302f883a 	mov	r23,r6
   8e6b4:	a5400044 	addi	r21,r20,1
   8e6b8:	3dc0e436 	bltu	r7,r23,8ea4c <__ssvfiscanf_r+0x4d0>
   8e6bc:	b80490ba 	slli	r2,r23,2
   8e6c0:	01400274 	movhi	r5,9
   8e6c4:	2979b504 	addi	r5,r5,-6444
   8e6c8:	1145883a 	add	r2,r2,r5
   8e6cc:	10800017 	ldw	r2,0(r2)
   8e6d0:	1000683a 	jmp	r2
   8e6d4:	0008e8f4 	movhi	zero,9123
   8e6d8:	0008ea4c 	andi	zero,zero,9129
   8e6dc:	0008ea4c 	andi	zero,zero,9129
   8e6e0:	0008ea4c 	andi	zero,zero,9129
   8e6e4:	0008ea4c 	andi	zero,zero,9129
   8e6e8:	0008ea4c 	andi	zero,zero,9129
   8e6ec:	0008ea4c 	andi	zero,zero,9129
   8e6f0:	0008ea4c 	andi	zero,zero,9129
   8e6f4:	0008ea4c 	andi	zero,zero,9129
   8e6f8:	0008ea4c 	andi	zero,zero,9129
   8e6fc:	0008ea4c 	andi	zero,zero,9129
   8e700:	0008ea4c 	andi	zero,zero,9129
   8e704:	0008ea4c 	andi	zero,zero,9129
   8e708:	0008ea4c 	andi	zero,zero,9129
   8e70c:	0008ea4c 	andi	zero,zero,9129
   8e710:	0008ea4c 	andi	zero,zero,9129
   8e714:	0008ea4c 	andi	zero,zero,9129
   8e718:	0008ea4c 	andi	zero,zero,9129
   8e71c:	0008ea4c 	andi	zero,zero,9129
   8e720:	0008ea4c 	andi	zero,zero,9129
   8e724:	0008ea4c 	andi	zero,zero,9129
   8e728:	0008ea4c 	andi	zero,zero,9129
   8e72c:	0008ea4c 	andi	zero,zero,9129
   8e730:	0008ea4c 	andi	zero,zero,9129
   8e734:	0008ea4c 	andi	zero,zero,9129
   8e738:	0008ea4c 	andi	zero,zero,9129
   8e73c:	0008ea4c 	andi	zero,zero,9129
   8e740:	0008ea4c 	andi	zero,zero,9129
   8e744:	0008ea4c 	andi	zero,zero,9129
   8e748:	0008ea4c 	andi	zero,zero,9129
   8e74c:	0008ea4c 	andi	zero,zero,9129
   8e750:	0008ea4c 	andi	zero,zero,9129
   8e754:	0008ea4c 	andi	zero,zero,9129
   8e758:	0008ea4c 	andi	zero,zero,9129
   8e75c:	0008ea4c 	andi	zero,zero,9129
   8e760:	0008ea4c 	andi	zero,zero,9129
   8e764:	0008ea4c 	andi	zero,zero,9129
   8e768:	0008e8b8 	rdprs	zero,zero,9122
   8e76c:	0008ea4c 	andi	zero,zero,9129
   8e770:	0008ea4c 	andi	zero,zero,9129
   8e774:	0008ea4c 	andi	zero,zero,9129
   8e778:	0008ea4c 	andi	zero,zero,9129
   8e77c:	0008ec90 	cmplti	zero,zero,9138
   8e780:	0008ea4c 	andi	zero,zero,9129
   8e784:	0008ea4c 	andi	zero,zero,9129
   8e788:	0008ea4c 	andi	zero,zero,9129
   8e78c:	0008ea4c 	andi	zero,zero,9129
   8e790:	0008ea4c 	andi	zero,zero,9129
   8e794:	0008ebfc 	xorhi	zero,zero,9135
   8e798:	0008ebfc 	xorhi	zero,zero,9135
   8e79c:	0008ebfc 	xorhi	zero,zero,9135
   8e7a0:	0008ebfc 	xorhi	zero,zero,9135
   8e7a4:	0008ebfc 	xorhi	zero,zero,9135
   8e7a8:	0008ebfc 	xorhi	zero,zero,9135
   8e7ac:	0008ebfc 	xorhi	zero,zero,9135
   8e7b0:	0008ebfc 	xorhi	zero,zero,9135
   8e7b4:	0008ebfc 	xorhi	zero,zero,9135
   8e7b8:	0008ebfc 	xorhi	zero,zero,9135
   8e7bc:	0008ea4c 	andi	zero,zero,9129
   8e7c0:	0008ea4c 	andi	zero,zero,9129
   8e7c4:	0008ea4c 	andi	zero,zero,9129
   8e7c8:	0008ea4c 	andi	zero,zero,9129
   8e7cc:	0008ea4c 	andi	zero,zero,9129
   8e7d0:	0008ea4c 	andi	zero,zero,9129
   8e7d4:	0008ea4c 	andi	zero,zero,9129
   8e7d8:	0008ea4c 	andi	zero,zero,9129
   8e7dc:	0008ea4c 	andi	zero,zero,9129
   8e7e0:	0008ea4c 	andi	zero,zero,9129
   8e7e4:	0008ebd0 	cmplti	zero,zero,9135
   8e7e8:	0008ea4c 	andi	zero,zero,9129
   8e7ec:	0008ea4c 	andi	zero,zero,9129
   8e7f0:	0008ea4c 	andi	zero,zero,9129
   8e7f4:	0008ea4c 	andi	zero,zero,9129
   8e7f8:	0008ea4c 	andi	zero,zero,9129
   8e7fc:	0008ea4c 	andi	zero,zero,9129
   8e800:	0008ea4c 	andi	zero,zero,9129
   8e804:	0008ec54 	movui	zero,9137
   8e808:	0008ea4c 	andi	zero,zero,9129
   8e80c:	0008ea4c 	andi	zero,zero,9129
   8e810:	0008ec2c 	andhi	zero,zero,9136
   8e814:	0008ea4c 	andi	zero,zero,9129
   8e818:	0008ea4c 	andi	zero,zero,9129
   8e81c:	0008ea4c 	andi	zero,zero,9129
   8e820:	0008ea4c 	andi	zero,zero,9129
   8e824:	0008ea4c 	andi	zero,zero,9129
   8e828:	0008ea4c 	andi	zero,zero,9129
   8e82c:	0008ea4c 	andi	zero,zero,9129
   8e830:	0008ea4c 	andi	zero,zero,9129
   8e834:	0008ec68 	cmpgeui	zero,zero,9137
   8e838:	0008ea4c 	andi	zero,zero,9129
   8e83c:	0008ea4c 	andi	zero,zero,9129
   8e840:	0008eb44 	movi	zero,9133
   8e844:	0008ea4c 	andi	zero,zero,9129
   8e848:	0008ea4c 	andi	zero,zero,9129
   8e84c:	0008ea4c 	andi	zero,zero,9129
   8e850:	0008ea4c 	andi	zero,zero,9129
   8e854:	0008ea4c 	andi	zero,zero,9129
   8e858:	0008ea4c 	andi	zero,zero,9129
   8e85c:	0008ea4c 	andi	zero,zero,9129
   8e860:	0008eac8 	cmpgei	zero,zero,9131
   8e864:	0008eaa0 	cmpeqi	zero,zero,9130
   8e868:	0008ea4c 	andi	zero,zero,9129
   8e86c:	0008ea4c 	andi	zero,zero,9129
   8e870:	0008ea4c 	andi	zero,zero,9129
   8e874:	0008ea8c 	andi	zero,zero,9130
   8e878:	0008eca4 	muli	zero,zero,9138
   8e87c:	0008ea4c 	andi	zero,zero,9129
   8e880:	0008ea4c 	andi	zero,zero,9129
   8e884:	0008ea34 	movhi	zero,9128
   8e888:	0008ea4c 	andi	zero,zero,9129
   8e88c:	0008ea08 	cmpgei	zero,zero,9128
   8e890:	0008e9e0 	cmpeqi	zero,zero,9127
   8e894:	0008e9b4 	movhi	zero,9126
   8e898:	0008ea4c 	andi	zero,zero,9129
   8e89c:	0008ea4c 	andi	zero,zero,9129
   8e8a0:	0008e9a0 	cmpeqi	zero,zero,9126
   8e8a4:	0008ea4c 	andi	zero,zero,9129
   8e8a8:	0008e928 	cmpgeui	zero,zero,9124
   8e8ac:	0008ea4c 	andi	zero,zero,9129
   8e8b0:	0008ea4c 	andi	zero,zero,9129
   8e8b4:	0008ec68 	cmpgeui	zero,zero,9137
   8e8b8:	a829883a 	mov	r20,r21
   8e8bc:	e0800117 	ldw	r2,4(fp)
   8e8c0:	0081e40e 	bge	zero,r2,8f054 <__ssvfiscanf_r+0xad8>
   8e8c4:	e0800017 	ldw	r2,0(fp)
   8e8c8:	a0ffffc3 	ldbu	r3,-1(r20)
   8e8cc:	11000003 	ldbu	r4,0(r2)
   8e8d0:	20ff6d1e 	bne	r4,r3,8e688 <__ram_exceptions_end+0xfff6e454>
   8e8d4:	e0c00117 	ldw	r3,4(fp)
   8e8d8:	10800044 	addi	r2,r2,1
   8e8dc:	e0800015 	stw	r2,0(fp)
   8e8e0:	18bfffc4 	addi	r2,r3,-1
   8e8e4:	e0800115 	stw	r2,4(fp)
   8e8e8:	9cc00044 	addi	r19,r19,1
   8e8ec:	a00d883a 	mov	r6,r20
   8e8f0:	003f6106 	br	8e678 <__ram_exceptions_end+0xfff6e444>
   8e8f4:	00bfffc4 	movi	r2,-1
   8e8f8:	dfc06417 	ldw	ra,400(sp)
   8e8fc:	df006317 	ldw	fp,396(sp)
   8e900:	ddc06217 	ldw	r23,392(sp)
   8e904:	dd806117 	ldw	r22,388(sp)
   8e908:	dd406017 	ldw	r21,384(sp)
   8e90c:	dd005f17 	ldw	r20,380(sp)
   8e910:	dcc05e17 	ldw	r19,376(sp)
   8e914:	dc805d17 	ldw	r18,372(sp)
   8e918:	dc405c17 	ldw	r17,368(sp)
   8e91c:	dc005b17 	ldw	r16,364(sp)
   8e920:	dec06504 	addi	sp,sp,404
   8e924:	f800283a 	ret
   8e928:	e0800117 	ldw	r2,4(fp)
   8e92c:	202f883a 	mov	r23,r4
   8e930:	0081f20e 	bge	zero,r2,8f0fc <__ssvfiscanf_r+0xb80>
   8e934:	00800274 	movhi	r2,9
   8e938:	10b75404 	addi	r2,r2,-8880
   8e93c:	02c00284 	movi	r11,10
   8e940:	d8805215 	stw	r2,328(sp)
   8e944:	dac05015 	stw	r11,320(sp)
   8e948:	050000c4 	movi	r20,3
   8e94c:	e0800017 	ldw	r2,0(fp)
   8e950:	00000206 	br	8e95c <__ssvfiscanf_r+0x3e0>
   8e954:	10800044 	addi	r2,r2,1
   8e958:	e0800015 	stw	r2,0(fp)
   8e95c:	11000003 	ldbu	r4,0(r2)
   8e960:	20c03fcc 	andi	r3,r4,255
   8e964:	b0c7883a 	add	r3,r22,r3
   8e968:	18c00043 	ldbu	r3,1(r3)
   8e96c:	1940020c 	andi	r5,r3,8
   8e970:	2801ee26 	beq	r5,zero,8f12c <__ssvfiscanf_r+0xbb0>
   8e974:	e0c00117 	ldw	r3,4(fp)
   8e978:	9cc00044 	addi	r19,r19,1
   8e97c:	18ffffc4 	addi	r3,r3,-1
   8e980:	e0c00115 	stw	r3,4(fp)
   8e984:	00fff316 	blt	zero,r3,8e954 <__ram_exceptions_end+0xfff6e720>
   8e988:	e00b883a 	mov	r5,fp
   8e98c:	8809883a 	mov	r4,r17
   8e990:	008e40c0 	call	8e40c <__ssrefill_r>
   8e994:	10016a1e 	bne	r2,zero,8ef40 <__ssvfiscanf_r+0x9c4>
   8e998:	95800017 	ldw	r22,0(r18)
   8e99c:	003feb06 	br	8e94c <__ram_exceptions_end+0xfff6e718>
   8e9a0:	e0800117 	ldw	r2,4(fp)
   8e9a4:	202f883a 	mov	r23,r4
   8e9a8:	0081c80e 	bge	zero,r2,8f0cc <__ssvfiscanf_r+0xb50>
   8e9ac:	05000084 	movi	r20,2
   8e9b0:	003fe606 	br	8e94c <__ram_exceptions_end+0xfff6e718>
   8e9b4:	e0800117 	ldw	r2,4(fp)
   8e9b8:	202f883a 	mov	r23,r4
   8e9bc:	84008814 	ori	r16,r16,544
   8e9c0:	0080ad0e 	bge	zero,r2,8ec78 <__ssvfiscanf_r+0x6fc>
   8e9c4:	00800274 	movhi	r2,9
   8e9c8:	10b75404 	addi	r2,r2,-8880
   8e9cc:	02c00404 	movi	r11,16
   8e9d0:	d8805215 	stw	r2,328(sp)
   8e9d4:	dac05015 	stw	r11,320(sp)
   8e9d8:	050000c4 	movi	r20,3
   8e9dc:	003fdb06 	br	8e94c <__ram_exceptions_end+0xfff6e718>
   8e9e0:	e0800117 	ldw	r2,4(fp)
   8e9e4:	202f883a 	mov	r23,r4
   8e9e8:	0080940e 	bge	zero,r2,8ec3c <__ssvfiscanf_r+0x6c0>
   8e9ec:	00800274 	movhi	r2,9
   8e9f0:	10b75404 	addi	r2,r2,-8880
   8e9f4:	02c00204 	movi	r11,8
   8e9f8:	d8805215 	stw	r2,328(sp)
   8e9fc:	dac05015 	stw	r11,320(sp)
   8ea00:	050000c4 	movi	r20,3
   8ea04:	003fd106 	br	8e94c <__ram_exceptions_end+0xfff6e718>
   8ea08:	8080040c 	andi	r2,r16,16
   8ea0c:	1000e41e 	bne	r2,zero,8eda0 <__ssvfiscanf_r+0x824>
   8ea10:	8080010c 	andi	r2,r16,4
   8ea14:	10019926 	beq	r2,zero,8f07c <__ssvfiscanf_r+0xb00>
   8ea18:	dac04f17 	ldw	r11,316(sp)
   8ea1c:	a829883a 	mov	r20,r21
   8ea20:	58800017 	ldw	r2,0(r11)
   8ea24:	5ac00104 	addi	r11,r11,4
   8ea28:	dac04f15 	stw	r11,316(sp)
   8ea2c:	14c0000d 	sth	r19,0(r2)
   8ea30:	003f1006 	br	8e674 <__ram_exceptions_end+0xfff6e440>
   8ea34:	a5c00043 	ldbu	r23,1(r20)
   8ea38:	b8c18b26 	beq	r23,r3,8f068 <__ssvfiscanf_r+0xaec>
   8ea3c:	a829883a 	mov	r20,r21
   8ea40:	84000054 	ori	r16,r16,1
   8ea44:	a5400044 	addi	r21,r20,1
   8ea48:	3dff1c2e 	bgeu	r7,r23,8e6bc <__ram_exceptions_end+0xfff6e488>
   8ea4c:	b80d883a 	mov	r6,r23
   8ea50:	b185883a 	add	r2,r22,r6
   8ea54:	10800043 	ldbu	r2,1(r2)
   8ea58:	00c00044 	movi	r3,1
   8ea5c:	202f883a 	mov	r23,r4
   8ea60:	108000cc 	andi	r2,r2,3
   8ea64:	10c17226 	beq	r2,r3,8f030 <__ssvfiscanf_r+0xab4>
   8ea68:	e0800117 	ldw	r2,4(fp)
   8ea6c:	0081730e 	bge	zero,r2,8f03c <__ssvfiscanf_r+0xac0>
   8ea70:	00800274 	movhi	r2,9
   8ea74:	10b5f604 	addi	r2,r2,-10280
   8ea78:	02c00284 	movi	r11,10
   8ea7c:	d8805215 	stw	r2,328(sp)
   8ea80:	dac05015 	stw	r11,320(sp)
   8ea84:	050000c4 	movi	r20,3
   8ea88:	003fb006 	br	8e94c <__ram_exceptions_end+0xfff6e718>
   8ea8c:	a1400043 	ldbu	r5,1(r20)
   8ea90:	84000114 	ori	r16,r16,4
   8ea94:	a829883a 	mov	r20,r21
   8ea98:	2dc03fcc 	andi	r23,r5,255
   8ea9c:	003f0506 	br	8e6b4 <__ram_exceptions_end+0xfff6e480>
   8eaa0:	e0800117 	ldw	r2,4(fp)
   8eaa4:	202f883a 	mov	r23,r4
   8eaa8:	0081640e 	bge	zero,r2,8f03c <__ssvfiscanf_r+0xac0>
   8eaac:	02c00274 	movhi	r11,9
   8eab0:	5af5f604 	addi	r11,r11,-10280
   8eab4:	dac05215 	stw	r11,328(sp)
   8eab8:	02c00284 	movi	r11,10
   8eabc:	dac05015 	stw	r11,320(sp)
   8eac0:	050000c4 	movi	r20,3
   8eac4:	003fa106 	br	8e94c <__ram_exceptions_end+0xfff6e718>
   8eac8:	e0800117 	ldw	r2,4(fp)
   8eacc:	202f883a 	mov	r23,r4
   8ead0:	00812c0e 	bge	zero,r2,8ef84 <__ssvfiscanf_r+0xa08>
   8ead4:	b800011e 	bne	r23,zero,8eadc <__ssvfiscanf_r+0x560>
   8ead8:	05c00044 	movi	r23,1
   8eadc:	8080004c 	andi	r2,r16,1
   8eae0:	1000791e 	bne	r2,zero,8ecc8 <__ssvfiscanf_r+0x74c>
   8eae4:	8400040c 	andi	r16,r16,16
   8eae8:	80013f26 	beq	r16,zero,8efe8 <__ssvfiscanf_r+0xa6c>
   8eaec:	0021883a 	mov	r16,zero
   8eaf0:	00000806 	br	8eb14 <__ssvfiscanf_r+0x598>
   8eaf4:	1887883a 	add	r3,r3,r2
   8eaf8:	e00b883a 	mov	r5,fp
   8eafc:	8809883a 	mov	r4,r17
   8eb00:	e0c00015 	stw	r3,0(fp)
   8eb04:	80a1883a 	add	r16,r16,r2
   8eb08:	b8afc83a 	sub	r23,r23,r2
   8eb0c:	008e40c0 	call	8e40c <__ssrefill_r>
   8eb10:	1001331e 	bne	r2,zero,8efe0 <__ssvfiscanf_r+0xa64>
   8eb14:	e0800117 	ldw	r2,4(fp)
   8eb18:	e0c00017 	ldw	r3,0(fp)
   8eb1c:	15fff516 	blt	r2,r23,8eaf4 <__ram_exceptions_end+0xfff6e8c0>
   8eb20:	15c5c83a 	sub	r2,r2,r23
   8eb24:	1dd5883a 	add	r10,r3,r23
   8eb28:	85e1883a 	add	r16,r16,r23
   8eb2c:	e0800115 	stw	r2,4(fp)
   8eb30:	e2800015 	stw	r10,0(fp)
   8eb34:	a829883a 	mov	r20,r21
   8eb38:	9c27883a 	add	r19,r19,r16
   8eb3c:	a00d883a 	mov	r6,r20
   8eb40:	003ecd06 	br	8e678 <__ram_exceptions_end+0xfff6e444>
   8eb44:	202f883a 	mov	r23,r4
   8eb48:	a80b883a 	mov	r5,r21
   8eb4c:	d9000104 	addi	r4,sp,4
   8eb50:	008be000 	call	8be00 <__sccl>
   8eb54:	1029883a 	mov	r20,r2
   8eb58:	e0800117 	ldw	r2,4(fp)
   8eb5c:	0081620e 	bge	zero,r2,8f0e8 <__ssvfiscanf_r+0xb6c>
   8eb60:	e1000017 	ldw	r4,0(fp)
   8eb64:	20800003 	ldbu	r2,0(r4)
   8eb68:	b8009026 	beq	r23,zero,8edac <__ssvfiscanf_r+0x830>
   8eb6c:	8400040c 	andi	r16,r16,16
   8eb70:	80009126 	beq	r16,zero,8edb8 <__ssvfiscanf_r+0x83c>
   8eb74:	b821883a 	mov	r16,r23
   8eb78:	002b883a 	mov	r21,zero
   8eb7c:	00000106 	br	8eb84 <__ssvfiscanf_r+0x608>
   8eb80:	20800003 	ldbu	r2,0(r4)
   8eb84:	10803fcc 	andi	r2,r2,255
   8eb88:	d8c00104 	addi	r3,sp,4
   8eb8c:	1885883a 	add	r2,r3,r2
   8eb90:	10800007 	ldb	r2,0(r2)
   8eb94:	10011026 	beq	r2,zero,8efd8 <__ssvfiscanf_r+0xa5c>
   8eb98:	e0800117 	ldw	r2,4(fp)
   8eb9c:	21000044 	addi	r4,r4,1
   8eba0:	ad400044 	addi	r21,r21,1
   8eba4:	10bfffc4 	addi	r2,r2,-1
   8eba8:	e0800115 	stw	r2,4(fp)
   8ebac:	e1000015 	stw	r4,0(fp)
   8ebb0:	adc0eb26 	beq	r21,r23,8ef60 <__ssvfiscanf_r+0x9e4>
   8ebb4:	00bff216 	blt	zero,r2,8eb80 <__ram_exceptions_end+0xfff6e94c>
   8ebb8:	e00b883a 	mov	r5,fp
   8ebbc:	8809883a 	mov	r4,r17
   8ebc0:	008e40c0 	call	8e40c <__ssrefill_r>
   8ebc4:	1000e51e 	bne	r2,zero,8ef5c <__ssvfiscanf_r+0x9e0>
   8ebc8:	e1000017 	ldw	r4,0(fp)
   8ebcc:	003fec06 	br	8eb80 <__ram_exceptions_end+0xfff6e94c>
   8ebd0:	e0800117 	ldw	r2,4(fp)
   8ebd4:	202f883a 	mov	r23,r4
   8ebd8:	84000054 	ori	r16,r16,1
   8ebdc:	0081170e 	bge	zero,r2,8f03c <__ssvfiscanf_r+0xac0>
   8ebe0:	00c00274 	movhi	r3,9
   8ebe4:	18f5f604 	addi	r3,r3,-10280
   8ebe8:	02c00284 	movi	r11,10
   8ebec:	d8c05215 	stw	r3,328(sp)
   8ebf0:	dac05015 	stw	r11,320(sp)
   8ebf4:	050000c4 	movi	r20,3
   8ebf8:	003f5406 	br	8e94c <__ram_exceptions_end+0xfff6e718>
   8ebfc:	01400284 	movi	r5,10
   8ec00:	d8c05a15 	stw	r3,360(sp)
   8ec04:	d9c05915 	stw	r7,356(sp)
   8ec08:	00822140 	call	82214 <__mulsi3>
   8ec0c:	a1400043 	ldbu	r5,1(r20)
   8ec10:	15c5883a 	add	r2,r2,r23
   8ec14:	113ff404 	addi	r4,r2,-48
   8ec18:	a829883a 	mov	r20,r21
   8ec1c:	2dc03fcc 	andi	r23,r5,255
   8ec20:	d8c05a17 	ldw	r3,360(sp)
   8ec24:	d9c05917 	ldw	r7,356(sp)
   8ec28:	003ea206 	br	8e6b4 <__ram_exceptions_end+0xfff6e480>
   8ec2c:	e0800117 	ldw	r2,4(fp)
   8ec30:	202f883a 	mov	r23,r4
   8ec34:	84000054 	ori	r16,r16,1
   8ec38:	00bf6c16 	blt	zero,r2,8e9ec <__ram_exceptions_end+0xfff6e7b8>
   8ec3c:	e00b883a 	mov	r5,fp
   8ec40:	8809883a 	mov	r4,r17
   8ec44:	008e40c0 	call	8e40c <__ssrefill_r>
   8ec48:	1000bd1e 	bne	r2,zero,8ef40 <__ssvfiscanf_r+0x9c4>
   8ec4c:	95800017 	ldw	r22,0(r18)
   8ec50:	003f6606 	br	8e9ec <__ram_exceptions_end+0xfff6e7b8>
   8ec54:	a1400043 	ldbu	r5,1(r20)
   8ec58:	84000094 	ori	r16,r16,2
   8ec5c:	a829883a 	mov	r20,r21
   8ec60:	2dc03fcc 	andi	r23,r5,255
   8ec64:	003e9306 	br	8e6b4 <__ram_exceptions_end+0xfff6e480>
   8ec68:	e0800117 	ldw	r2,4(fp)
   8ec6c:	202f883a 	mov	r23,r4
   8ec70:	84008014 	ori	r16,r16,512
   8ec74:	00bf5316 	blt	zero,r2,8e9c4 <__ram_exceptions_end+0xfff6e790>
   8ec78:	e00b883a 	mov	r5,fp
   8ec7c:	8809883a 	mov	r4,r17
   8ec80:	008e40c0 	call	8e40c <__ssrefill_r>
   8ec84:	1000ae1e 	bne	r2,zero,8ef40 <__ssvfiscanf_r+0x9c4>
   8ec88:	95800017 	ldw	r22,0(r18)
   8ec8c:	003f4d06 	br	8e9c4 <__ram_exceptions_end+0xfff6e790>
   8ec90:	a1400043 	ldbu	r5,1(r20)
   8ec94:	84000414 	ori	r16,r16,16
   8ec98:	a829883a 	mov	r20,r21
   8ec9c:	2dc03fcc 	andi	r23,r5,255
   8eca0:	003e8406 	br	8e6b4 <__ram_exceptions_end+0xfff6e480>
   8eca4:	e0800117 	ldw	r2,4(fp)
   8eca8:	202f883a 	mov	r23,r4
   8ecac:	0081190e 	bge	zero,r2,8f114 <__ssvfiscanf_r+0xb98>
   8ecb0:	00800274 	movhi	r2,9
   8ecb4:	10b5f604 	addi	r2,r2,-10280
   8ecb8:	d8805215 	stw	r2,328(sp)
   8ecbc:	d8005015 	stw	zero,320(sp)
   8ecc0:	050000c4 	movi	r20,3
   8ecc4:	003f2106 	br	8e94c <__ram_exceptions_end+0xfff6e718>
   8ecc8:	d8c04b04 	addi	r3,sp,300
   8eccc:	8400040c 	andi	r16,r16,16
   8ecd0:	01800204 	movi	r6,8
   8ecd4:	000b883a 	mov	r5,zero
   8ecd8:	1809883a 	mov	r4,r3
   8ecdc:	dc005415 	stw	r16,336(sp)
   8ece0:	d8c05315 	stw	r3,332(sp)
   8ece4:	008a2900 	call	8a290 <memset>
   8ece8:	dc005417 	ldw	r16,336(sp)
   8ecec:	8000a026 	beq	r16,zero,8ef70 <__ssvfiscanf_r+0x9f4>
   8ecf0:	002d883a 	mov	r22,zero
   8ecf4:	0021883a 	mov	r16,zero
   8ecf8:	0089bbc0 	call	89bbc <__locale_mb_cur_max>
   8ecfc:	14009026 	beq	r2,r16,8ef40 <__ssvfiscanf_r+0x9c4>
   8ed00:	e0800017 	ldw	r2,0(fp)
   8ed04:	e0c00117 	ldw	r3,4(fp)
   8ed08:	dac05317 	ldw	r11,332(sp)
   8ed0c:	12000003 	ldbu	r8,0(r2)
   8ed10:	18ffffc4 	addi	r3,r3,-1
   8ed14:	10800044 	addi	r2,r2,1
   8ed18:	d9004104 	addi	r4,sp,260
   8ed1c:	e0c00115 	stw	r3,4(fp)
   8ed20:	e0800015 	stw	r2,0(fp)
   8ed24:	85000044 	addi	r20,r16,1
   8ed28:	dac00015 	stw	r11,0(sp)
   8ed2c:	2421883a 	add	r16,r4,r16
   8ed30:	200d883a 	mov	r6,r4
   8ed34:	a00f883a 	mov	r7,r20
   8ed38:	b00b883a 	mov	r5,r22
   8ed3c:	8809883a 	mov	r4,r17
   8ed40:	82000005 	stb	r8,0(r16)
   8ed44:	0089e2c0 	call	89e2c <_mbrtowc_r>
   8ed48:	00ffffc4 	movi	r3,-1
   8ed4c:	10c07c26 	beq	r2,r3,8ef40 <__ssvfiscanf_r+0x9c4>
   8ed50:	1000911e 	bne	r2,zero,8ef98 <__ssvfiscanf_r+0xa1c>
   8ed54:	dac05417 	ldw	r11,336(sp)
   8ed58:	5800951e 	bne	r11,zero,8efb0 <__ssvfiscanf_r+0xa34>
   8ed5c:	b0000015 	stw	zero,0(r22)
   8ed60:	9d27883a 	add	r19,r19,r20
   8ed64:	b8ef883a 	add	r23,r23,r3
   8ed68:	b5800104 	addi	r22,r22,4
   8ed6c:	e0800117 	ldw	r2,4(fp)
   8ed70:	0021883a 	mov	r16,zero
   8ed74:	00807c16 	blt	zero,r2,8ef68 <__ssvfiscanf_r+0x9ec>
   8ed78:	e00b883a 	mov	r5,fp
   8ed7c:	8809883a 	mov	r4,r17
   8ed80:	008e40c0 	call	8e40c <__ssrefill_r>
   8ed84:	10007826 	beq	r2,zero,8ef68 <__ssvfiscanf_r+0x9ec>
   8ed88:	80006d1e 	bne	r16,zero,8ef40 <__ssvfiscanf_r+0x9c4>
   8ed8c:	d8c05417 	ldw	r3,336(sp)
   8ed90:	1800031e 	bne	r3,zero,8eda0 <__ssvfiscanf_r+0x824>
   8ed94:	dac05117 	ldw	r11,324(sp)
   8ed98:	5ac00044 	addi	r11,r11,1
   8ed9c:	dac05115 	stw	r11,324(sp)
   8eda0:	a829883a 	mov	r20,r21
   8eda4:	a00d883a 	mov	r6,r20
   8eda8:	003e3306 	br	8e678 <__ram_exceptions_end+0xfff6e444>
   8edac:	8400040c 	andi	r16,r16,16
   8edb0:	05ffffc4 	movi	r23,-1
   8edb4:	803f6f1e 	bne	r16,zero,8eb74 <__ram_exceptions_end+0xfff6e940>
   8edb8:	dac04f17 	ldw	r11,316(sp)
   8edbc:	babfffc4 	addi	r10,r23,-1
   8edc0:	5d400017 	ldw	r21,0(r11)
   8edc4:	5c000104 	addi	r16,r11,4
   8edc8:	a807883a 	mov	r3,r21
   8edcc:	aaaf883a 	add	r23,r21,r10
   8edd0:	00000306 	br	8ede0 <__ssvfiscanf_r+0x864>
   8edd4:	e1000017 	ldw	r4,0(fp)
   8edd8:	b007883a 	mov	r3,r22
   8eddc:	20800003 	ldbu	r2,0(r4)
   8ede0:	10803fcc 	andi	r2,r2,255
   8ede4:	d9400104 	addi	r5,sp,4
   8ede8:	2885883a 	add	r2,r5,r2
   8edec:	10800007 	ldb	r2,0(r2)
   8edf0:	10007726 	beq	r2,zero,8efd0 <__ssvfiscanf_r+0xa54>
   8edf4:	e0800117 	ldw	r2,4(fp)
   8edf8:	21400044 	addi	r5,r4,1
   8edfc:	e1400015 	stw	r5,0(fp)
   8ee00:	10bfffc4 	addi	r2,r2,-1
   8ee04:	e0800115 	stw	r2,4(fp)
   8ee08:	20800003 	ldbu	r2,0(r4)
   8ee0c:	1d800044 	addi	r22,r3,1
   8ee10:	18800005 	stb	r2,0(r3)
   8ee14:	1dc00726 	beq	r3,r23,8ee34 <__ssvfiscanf_r+0x8b8>
   8ee18:	e0800117 	ldw	r2,4(fp)
   8ee1c:	00bfed16 	blt	zero,r2,8edd4 <__ram_exceptions_end+0xfff6eba0>
   8ee20:	e00b883a 	mov	r5,fp
   8ee24:	8809883a 	mov	r4,r17
   8ee28:	008e40c0 	call	8e40c <__ssrefill_r>
   8ee2c:	103fe926 	beq	r2,zero,8edd4 <__ram_exceptions_end+0xfff6eba0>
   8ee30:	ad804326 	beq	r21,r22,8ef40 <__ssvfiscanf_r+0x9c4>
   8ee34:	b56bc83a 	sub	r21,r22,r21
   8ee38:	a83e1326 	beq	r21,zero,8e688 <__ram_exceptions_end+0xfff6e454>
   8ee3c:	dac05117 	ldw	r11,324(sp)
   8ee40:	b0000005 	stb	zero,0(r22)
   8ee44:	dc004f15 	stw	r16,316(sp)
   8ee48:	5ac00044 	addi	r11,r11,1
   8ee4c:	dac05115 	stw	r11,324(sp)
   8ee50:	9d67883a 	add	r19,r19,r21
   8ee54:	a00d883a 	mov	r6,r20
   8ee58:	003e0706 	br	8e678 <__ram_exceptions_end+0xfff6e444>
   8ee5c:	d8c04b04 	addi	r3,sp,300
   8ee60:	8400040c 	andi	r16,r16,16
   8ee64:	01800204 	movi	r6,8
   8ee68:	000b883a 	mov	r5,zero
   8ee6c:	1809883a 	mov	r4,r3
   8ee70:	d8c05315 	stw	r3,332(sp)
   8ee74:	008a2900 	call	8a290 <memset>
   8ee78:	8001eb1e 	bne	r16,zero,8f628 <__ssvfiscanf_r+0x10ac>
   8ee7c:	dac04f17 	ldw	r11,316(sp)
   8ee80:	5d800017 	ldw	r22,0(r11)
   8ee84:	5ac00104 	addi	r11,r11,4
   8ee88:	dac04f15 	stw	r11,316(sp)
   8ee8c:	000d883a 	mov	r6,zero
   8ee90:	3029883a 	mov	r20,r6
   8ee94:	e0800017 	ldw	r2,0(fp)
   8ee98:	90c00017 	ldw	r3,0(r18)
   8ee9c:	10800003 	ldbu	r2,0(r2)
   8eea0:	1885883a 	add	r2,r3,r2
   8eea4:	10800043 	ldbu	r2,1(r2)
   8eea8:	1080020c 	andi	r2,r2,8
   8eeac:	1001ce1e 	bne	r2,zero,8f5e8 <__ssvfiscanf_r+0x106c>
   8eeb0:	b801cd26 	beq	r23,zero,8f5e8 <__ssvfiscanf_r+0x106c>
   8eeb4:	0089bbc0 	call	89bbc <__locale_mb_cur_max>
   8eeb8:	a0802126 	beq	r20,r2,8ef40 <__ssvfiscanf_r+0x9c4>
   8eebc:	e0800017 	ldw	r2,0(fp)
   8eec0:	e1000117 	ldw	r4,4(fp)
   8eec4:	dac05317 	ldw	r11,332(sp)
   8eec8:	12000003 	ldbu	r8,0(r2)
   8eecc:	213fffc4 	addi	r4,r4,-1
   8eed0:	10800044 	addi	r2,r2,1
   8eed4:	e1000115 	stw	r4,4(fp)
   8eed8:	d9404104 	addi	r5,sp,260
   8eedc:	e0800015 	stw	r2,0(fp)
   8eee0:	a0c00044 	addi	r3,r20,1
   8eee4:	dac00015 	stw	r11,0(sp)
   8eee8:	2d29883a 	add	r20,r5,r20
   8eeec:	180f883a 	mov	r7,r3
   8eef0:	280d883a 	mov	r6,r5
   8eef4:	8809883a 	mov	r4,r17
   8eef8:	a2000005 	stb	r8,0(r20)
   8eefc:	b00b883a 	mov	r5,r22
   8ef00:	d8c05a15 	stw	r3,360(sp)
   8ef04:	0089e2c0 	call	89e2c <_mbrtowc_r>
   8ef08:	013fffc4 	movi	r4,-1
   8ef0c:	d8c05a17 	ldw	r3,360(sp)
   8ef10:	11000b26 	beq	r2,r4,8ef40 <__ssvfiscanf_r+0x9c4>
   8ef14:	1001a226 	beq	r2,zero,8f5a0 <__ssvfiscanf_r+0x1024>
   8ef18:	017fff84 	movi	r5,-2
   8ef1c:	1829883a 	mov	r20,r3
   8ef20:	1141e51e 	bne	r2,r5,8f6b8 <__ssvfiscanf_r+0x113c>
   8ef24:	e0800117 	ldw	r2,4(fp)
   8ef28:	00bfda16 	blt	zero,r2,8ee94 <__ram_exceptions_end+0xfff6ec60>
   8ef2c:	e00b883a 	mov	r5,fp
   8ef30:	8809883a 	mov	r4,r17
   8ef34:	008e40c0 	call	8e40c <__ssrefill_r>
   8ef38:	103fd626 	beq	r2,zero,8ee94 <__ram_exceptions_end+0xfff6ec60>
   8ef3c:	a001aa26 	beq	r20,zero,8f5e8 <__ssvfiscanf_r+0x106c>
   8ef40:	dac05117 	ldw	r11,324(sp)
   8ef44:	583e6b26 	beq	r11,zero,8e8f4 <__ram_exceptions_end+0xfff6e6c0>
   8ef48:	e080030b 	ldhu	r2,12(fp)
   8ef4c:	1080100c 	andi	r2,r2,64
   8ef50:	103e681e 	bne	r2,zero,8e8f4 <__ram_exceptions_end+0xfff6e6c0>
   8ef54:	5805883a 	mov	r2,r11
   8ef58:	003e6706 	br	8e8f8 <__ram_exceptions_end+0xfff6e6c4>
   8ef5c:	a821883a 	mov	r16,r21
   8ef60:	802b883a 	mov	r21,r16
   8ef64:	003fba06 	br	8ee50 <__ram_exceptions_end+0xfff6ec1c>
   8ef68:	b83f631e 	bne	r23,zero,8ecf8 <__ram_exceptions_end+0xfff6eac4>
   8ef6c:	003f8706 	br	8ed8c <__ram_exceptions_end+0xfff6eb58>
   8ef70:	dac04f17 	ldw	r11,316(sp)
   8ef74:	5d800017 	ldw	r22,0(r11)
   8ef78:	5ac00104 	addi	r11,r11,4
   8ef7c:	dac04f15 	stw	r11,316(sp)
   8ef80:	003f5c06 	br	8ecf4 <__ram_exceptions_end+0xfff6eac0>
   8ef84:	e00b883a 	mov	r5,fp
   8ef88:	8809883a 	mov	r4,r17
   8ef8c:	008e40c0 	call	8e40c <__ssrefill_r>
   8ef90:	103ed026 	beq	r2,zero,8ead4 <__ram_exceptions_end+0xfff6e8a0>
   8ef94:	003fea06 	br	8ef40 <__ram_exceptions_end+0xfff6ed0c>
   8ef98:	00ffff84 	movi	r3,-2
   8ef9c:	10c0071e 	bne	r2,r3,8efbc <__ssvfiscanf_r+0xa40>
   8efa0:	e0800117 	ldw	r2,4(fp)
   8efa4:	a021883a 	mov	r16,r20
   8efa8:	00bf5316 	blt	zero,r2,8ecf8 <__ram_exceptions_end+0xfff6eac4>
   8efac:	003f7206 	br	8ed78 <__ram_exceptions_end+0xfff6eb44>
   8efb0:	9d27883a 	add	r19,r19,r20
   8efb4:	bdffffc4 	addi	r23,r23,-1
   8efb8:	003f6c06 	br	8ed6c <__ram_exceptions_end+0xfff6eb38>
   8efbc:	dac05417 	ldw	r11,336(sp)
   8efc0:	9d27883a 	add	r19,r19,r20
   8efc4:	bdffffc4 	addi	r23,r23,-1
   8efc8:	583f6726 	beq	r11,zero,8ed68 <__ram_exceptions_end+0xfff6eb34>
   8efcc:	003f6706 	br	8ed6c <__ram_exceptions_end+0xfff6eb38>
   8efd0:	182d883a 	mov	r22,r3
   8efd4:	003f9706 	br	8ee34 <__ram_exceptions_end+0xfff6ec00>
   8efd8:	a83f9d1e 	bne	r21,zero,8ee50 <__ram_exceptions_end+0xfff6ec1c>
   8efdc:	003daa06 	br	8e688 <__ram_exceptions_end+0xfff6e454>
   8efe0:	803ed41e 	bne	r16,zero,8eb34 <__ram_exceptions_end+0xfff6e900>
   8efe4:	003fd606 	br	8ef40 <__ram_exceptions_end+0xfff6ed0c>
   8efe8:	dac04f17 	ldw	r11,316(sp)
   8efec:	df000015 	stw	fp,0(sp)
   8eff0:	b80f883a 	mov	r7,r23
   8eff4:	59400017 	ldw	r5,0(r11)
   8eff8:	01800044 	movi	r6,1
   8effc:	8809883a 	mov	r4,r17
   8f000:	008e47c0 	call	8e47c <_sfread_r>
   8f004:	dac04f17 	ldw	r11,316(sp)
   8f008:	58c00104 	addi	r3,r11,4
   8f00c:	103fcc26 	beq	r2,zero,8ef40 <__ram_exceptions_end+0xfff6ed0c>
   8f010:	dac05117 	ldw	r11,324(sp)
   8f014:	a829883a 	mov	r20,r21
   8f018:	98a7883a 	add	r19,r19,r2
   8f01c:	5ac00044 	addi	r11,r11,1
   8f020:	dac05115 	stw	r11,324(sp)
   8f024:	d8c04f15 	stw	r3,316(sp)
   8f028:	a00d883a 	mov	r6,r20
   8f02c:	003d9206 	br	8e678 <__ram_exceptions_end+0xfff6e444>
   8f030:	e0800117 	ldw	r2,4(fp)
   8f034:	80e0b03a 	or	r16,r16,r3
   8f038:	00be8d16 	blt	zero,r2,8ea70 <__ram_exceptions_end+0xfff6e83c>
   8f03c:	e00b883a 	mov	r5,fp
   8f040:	8809883a 	mov	r4,r17
   8f044:	008e40c0 	call	8e40c <__ssrefill_r>
   8f048:	103fbd1e 	bne	r2,zero,8ef40 <__ram_exceptions_end+0xfff6ed0c>
   8f04c:	95800017 	ldw	r22,0(r18)
   8f050:	003e8706 	br	8ea70 <__ram_exceptions_end+0xfff6e83c>
   8f054:	e00b883a 	mov	r5,fp
   8f058:	8809883a 	mov	r4,r17
   8f05c:	008e40c0 	call	8e40c <__ssrefill_r>
   8f060:	103e1826 	beq	r2,zero,8e8c4 <__ram_exceptions_end+0xfff6e690>
   8f064:	003fb606 	br	8ef40 <__ram_exceptions_end+0xfff6ed0c>
   8f068:	a1400083 	ldbu	r5,2(r20)
   8f06c:	84000094 	ori	r16,r16,2
   8f070:	a5000084 	addi	r20,r20,2
   8f074:	2dc03fcc 	andi	r23,r5,255
   8f078:	003d8e06 	br	8e6b4 <__ram_exceptions_end+0xfff6e480>
   8f07c:	8080004c 	andi	r2,r16,1
   8f080:	10000b1e 	bne	r2,zero,8f0b0 <__ssvfiscanf_r+0xb34>
   8f084:	8400008c 	andi	r16,r16,2
   8f088:	80000926 	beq	r16,zero,8f0b0 <__ssvfiscanf_r+0xb34>
   8f08c:	dac04f17 	ldw	r11,316(sp)
   8f090:	9807d7fa 	srai	r3,r19,31
   8f094:	a829883a 	mov	r20,r21
   8f098:	58800017 	ldw	r2,0(r11)
   8f09c:	5ac00104 	addi	r11,r11,4
   8f0a0:	dac04f15 	stw	r11,316(sp)
   8f0a4:	14c00015 	stw	r19,0(r2)
   8f0a8:	10c00115 	stw	r3,4(r2)
   8f0ac:	003d7106 	br	8e674 <__ram_exceptions_end+0xfff6e440>
   8f0b0:	dac04f17 	ldw	r11,316(sp)
   8f0b4:	a829883a 	mov	r20,r21
   8f0b8:	58800017 	ldw	r2,0(r11)
   8f0bc:	5ac00104 	addi	r11,r11,4
   8f0c0:	dac04f15 	stw	r11,316(sp)
   8f0c4:	14c00015 	stw	r19,0(r2)
   8f0c8:	003d6a06 	br	8e674 <__ram_exceptions_end+0xfff6e440>
   8f0cc:	e00b883a 	mov	r5,fp
   8f0d0:	8809883a 	mov	r4,r17
   8f0d4:	008e40c0 	call	8e40c <__ssrefill_r>
   8f0d8:	103f991e 	bne	r2,zero,8ef40 <__ram_exceptions_end+0xfff6ed0c>
   8f0dc:	95800017 	ldw	r22,0(r18)
   8f0e0:	05000084 	movi	r20,2
   8f0e4:	003e1906 	br	8e94c <__ram_exceptions_end+0xfff6e718>
   8f0e8:	e00b883a 	mov	r5,fp
   8f0ec:	8809883a 	mov	r4,r17
   8f0f0:	008e40c0 	call	8e40c <__ssrefill_r>
   8f0f4:	103e9a26 	beq	r2,zero,8eb60 <__ram_exceptions_end+0xfff6e92c>
   8f0f8:	003f9106 	br	8ef40 <__ram_exceptions_end+0xfff6ed0c>
   8f0fc:	e00b883a 	mov	r5,fp
   8f100:	8809883a 	mov	r4,r17
   8f104:	008e40c0 	call	8e40c <__ssrefill_r>
   8f108:	103f8d1e 	bne	r2,zero,8ef40 <__ram_exceptions_end+0xfff6ed0c>
   8f10c:	95800017 	ldw	r22,0(r18)
   8f110:	003e0806 	br	8e934 <__ram_exceptions_end+0xfff6e700>
   8f114:	e00b883a 	mov	r5,fp
   8f118:	8809883a 	mov	r4,r17
   8f11c:	008e40c0 	call	8e40c <__ssrefill_r>
   8f120:	103f871e 	bne	r2,zero,8ef40 <__ram_exceptions_end+0xfff6ed0c>
   8f124:	95800017 	ldw	r22,0(r18)
   8f128:	003ee106 	br	8ecb0 <__ram_exceptions_end+0xfff6ea7c>
   8f12c:	014000c4 	movi	r5,3
   8f130:	a140ae1e 	bne	r20,r5,8f3ec <__ssvfiscanf_r+0xe70>
   8f134:	b8ffffc4 	addi	r3,r23,-1
   8f138:	01400984 	movi	r5,38
   8f13c:	28c0d82e 	bgeu	r5,r3,8f4a0 <__ssvfiscanf_r+0xf24>
   8f140:	b9bff644 	addi	r6,r23,-39
   8f144:	05c009c4 	movi	r23,39
   8f148:	85836014 	ori	r22,r16,3456
   8f14c:	0021883a 	mov	r16,zero
   8f150:	a815883a 	mov	r10,r21
   8f154:	982b883a 	mov	r21,r19
   8f158:	8027883a 	mov	r19,r16
   8f15c:	dc005017 	ldw	r16,320(sp)
   8f160:	dd004104 	addi	r20,sp,260
   8f164:	02401344 	movi	r9,77
   8f168:	01c08004 	movi	r7,512
   8f16c:	00ff7fc4 	movi	r3,-513
   8f170:	023fdfc4 	movi	r8,-129
   8f174:	217ff544 	addi	r5,r4,-43
   8f178:	29403fcc 	andi	r5,r5,255
   8f17c:	49408836 	bltu	r9,r5,8f3a0 <__ssvfiscanf_r+0xe24>
   8f180:	280a90ba 	slli	r5,r5,2
   8f184:	02c00274 	movhi	r11,9
   8f188:	5afc6604 	addi	r11,r11,-3688
   8f18c:	2acb883a 	add	r5,r5,r11
   8f190:	29400017 	ldw	r5,0(r5)
   8f194:	2800683a 	jmp	r5
   8f198:	0008f32c 	andhi	zero,zero,9164
   8f19c:	0008f3a0 	cmpeqi	zero,zero,9166
   8f1a0:	0008f32c 	andhi	zero,zero,9164
   8f1a4:	0008f3a0 	cmpeqi	zero,zero,9166
   8f1a8:	0008f3a0 	cmpeqi	zero,zero,9166
   8f1ac:	0008f35c 	xori	zero,zero,9165
   8f1b0:	0008f33c 	xorhi	zero,zero,9164
   8f1b4:	0008f33c 	xorhi	zero,zero,9164
   8f1b8:	0008f33c 	xorhi	zero,zero,9164
   8f1bc:	0008f33c 	xorhi	zero,zero,9164
   8f1c0:	0008f33c 	xorhi	zero,zero,9164
   8f1c4:	0008f33c 	xorhi	zero,zero,9164
   8f1c8:	0008f33c 	xorhi	zero,zero,9164
   8f1cc:	0008f384 	movi	zero,9166
   8f1d0:	0008f384 	movi	zero,9166
   8f1d4:	0008f3a0 	cmpeqi	zero,zero,9166
   8f1d8:	0008f3a0 	cmpeqi	zero,zero,9166
   8f1dc:	0008f3a0 	cmpeqi	zero,zero,9166
   8f1e0:	0008f3a0 	cmpeqi	zero,zero,9166
   8f1e4:	0008f3a0 	cmpeqi	zero,zero,9166
   8f1e8:	0008f3a0 	cmpeqi	zero,zero,9166
   8f1ec:	0008f3a0 	cmpeqi	zero,zero,9166
   8f1f0:	0008f318 	cmpnei	zero,zero,9164
   8f1f4:	0008f318 	cmpnei	zero,zero,9164
   8f1f8:	0008f318 	cmpnei	zero,zero,9164
   8f1fc:	0008f318 	cmpnei	zero,zero,9164
   8f200:	0008f318 	cmpnei	zero,zero,9164
   8f204:	0008f318 	cmpnei	zero,zero,9164
   8f208:	0008f3a0 	cmpeqi	zero,zero,9166
   8f20c:	0008f3a0 	cmpeqi	zero,zero,9166
   8f210:	0008f3a0 	cmpeqi	zero,zero,9166
   8f214:	0008f3a0 	cmpeqi	zero,zero,9166
   8f218:	0008f3a0 	cmpeqi	zero,zero,9166
   8f21c:	0008f3a0 	cmpeqi	zero,zero,9166
   8f220:	0008f3a0 	cmpeqi	zero,zero,9166
   8f224:	0008f3a0 	cmpeqi	zero,zero,9166
   8f228:	0008f3a0 	cmpeqi	zero,zero,9166
   8f22c:	0008f3a0 	cmpeqi	zero,zero,9166
   8f230:	0008f3a0 	cmpeqi	zero,zero,9166
   8f234:	0008f3a0 	cmpeqi	zero,zero,9166
   8f238:	0008f3a0 	cmpeqi	zero,zero,9166
   8f23c:	0008f3a0 	cmpeqi	zero,zero,9166
   8f240:	0008f3a0 	cmpeqi	zero,zero,9166
   8f244:	0008f3a0 	cmpeqi	zero,zero,9166
   8f248:	0008f3a0 	cmpeqi	zero,zero,9166
   8f24c:	0008f2d0 	cmplti	zero,zero,9163
   8f250:	0008f3a0 	cmpeqi	zero,zero,9166
   8f254:	0008f3a0 	cmpeqi	zero,zero,9166
   8f258:	0008f3a0 	cmpeqi	zero,zero,9166
   8f25c:	0008f3a0 	cmpeqi	zero,zero,9166
   8f260:	0008f3a0 	cmpeqi	zero,zero,9166
   8f264:	0008f3a0 	cmpeqi	zero,zero,9166
   8f268:	0008f3a0 	cmpeqi	zero,zero,9166
   8f26c:	0008f3a0 	cmpeqi	zero,zero,9166
   8f270:	0008f318 	cmpnei	zero,zero,9164
   8f274:	0008f318 	cmpnei	zero,zero,9164
   8f278:	0008f318 	cmpnei	zero,zero,9164
   8f27c:	0008f318 	cmpnei	zero,zero,9164
   8f280:	0008f318 	cmpnei	zero,zero,9164
   8f284:	0008f318 	cmpnei	zero,zero,9164
   8f288:	0008f3a0 	cmpeqi	zero,zero,9166
   8f28c:	0008f3a0 	cmpeqi	zero,zero,9166
   8f290:	0008f3a0 	cmpeqi	zero,zero,9166
   8f294:	0008f3a0 	cmpeqi	zero,zero,9166
   8f298:	0008f3a0 	cmpeqi	zero,zero,9166
   8f29c:	0008f3a0 	cmpeqi	zero,zero,9166
   8f2a0:	0008f3a0 	cmpeqi	zero,zero,9166
   8f2a4:	0008f3a0 	cmpeqi	zero,zero,9166
   8f2a8:	0008f3a0 	cmpeqi	zero,zero,9166
   8f2ac:	0008f3a0 	cmpeqi	zero,zero,9166
   8f2b0:	0008f3a0 	cmpeqi	zero,zero,9166
   8f2b4:	0008f3a0 	cmpeqi	zero,zero,9166
   8f2b8:	0008f3a0 	cmpeqi	zero,zero,9166
   8f2bc:	0008f3a0 	cmpeqi	zero,zero,9166
   8f2c0:	0008f3a0 	cmpeqi	zero,zero,9166
   8f2c4:	0008f3a0 	cmpeqi	zero,zero,9166
   8f2c8:	0008f3a0 	cmpeqi	zero,zero,9166
   8f2cc:	0008f2d0 	cmplti	zero,zero,9163
   8f2d0:	b141800c 	andi	r5,r22,1536
   8f2d4:	29c0321e 	bne	r5,r7,8f3a0 <__ssvfiscanf_r+0xe24>
   8f2d8:	b0ec703a 	and	r22,r22,r3
   8f2dc:	b5814014 	ori	r22,r22,1280
   8f2e0:	04000404 	movi	r16,16
   8f2e4:	a1000005 	stb	r4,0(r20)
   8f2e8:	a5000044 	addi	r20,r20,1
   8f2ec:	e1000117 	ldw	r4,4(fp)
   8f2f0:	213fffc4 	addi	r4,r4,-1
   8f2f4:	e1000115 	stw	r4,4(fp)
   8f2f8:	0100580e 	bge	zero,r4,8f45c <__ssvfiscanf_r+0xee0>
   8f2fc:	10800044 	addi	r2,r2,1
   8f300:	e0800015 	stw	r2,0(fp)
   8f304:	bdffffc4 	addi	r23,r23,-1
   8f308:	b8002526 	beq	r23,zero,8f3a0 <__ssvfiscanf_r+0xe24>
   8f30c:	e0800017 	ldw	r2,0(fp)
   8f310:	11000003 	ldbu	r4,0(r2)
   8f314:	003f9706 	br	8f174 <__ram_exceptions_end+0xfff6ef40>
   8f318:	01400284 	movi	r5,10
   8f31c:	2c00200e 	bge	r5,r16,8f3a0 <__ssvfiscanf_r+0xe24>
   8f320:	017d1fc4 	movi	r5,-2945
   8f324:	b16c703a 	and	r22,r22,r5
   8f328:	003fee06 	br	8f2e4 <__ram_exceptions_end+0xfff6f0b0>
   8f32c:	b140200c 	andi	r5,r22,128
   8f330:	28001b26 	beq	r5,zero,8f3a0 <__ssvfiscanf_r+0xe24>
   8f334:	b22c703a 	and	r22,r22,r8
   8f338:	003fea06 	br	8f2e4 <__ram_exceptions_end+0xfff6f0b0>
   8f33c:	02c002b4 	movhi	r11,10
   8f340:	8421883a 	add	r16,r16,r16
   8f344:	5af99704 	addi	r11,r11,-6564
   8f348:	5c0b883a 	add	r5,r11,r16
   8f34c:	2c00000f 	ldh	r16,0(r5)
   8f350:	017d1fc4 	movi	r5,-2945
   8f354:	b16c703a 	and	r22,r22,r5
   8f358:	003fe206 	br	8f2e4 <__ram_exceptions_end+0xfff6f0b0>
   8f35c:	b142000c 	andi	r5,r22,2048
   8f360:	283fe026 	beq	r5,zero,8f2e4 <__ram_exceptions_end+0xfff6f0b0>
   8f364:	8000021e 	bne	r16,zero,8f370 <__ssvfiscanf_r+0xdf4>
   8f368:	b5808014 	ori	r22,r22,512
   8f36c:	04000204 	movi	r16,8
   8f370:	b141000c 	andi	r5,r22,1024
   8f374:	28009f26 	beq	r5,zero,8f5f4 <__ssvfiscanf_r+0x1078>
   8f378:	017e9fc4 	movi	r5,-1409
   8f37c:	b16c703a 	and	r22,r22,r5
   8f380:	003fd806 	br	8f2e4 <__ram_exceptions_end+0xfff6f0b0>
   8f384:	02c002b4 	movhi	r11,10
   8f388:	8421883a 	add	r16,r16,r16
   8f38c:	5af99704 	addi	r11,r11,-6564
   8f390:	5c0b883a 	add	r5,r11,r16
   8f394:	2c00000f 	ldh	r16,0(r5)
   8f398:	01400204 	movi	r5,8
   8f39c:	2c3fe016 	blt	r5,r16,8f320 <__ram_exceptions_end+0xfff6f0ec>
   8f3a0:	dc005015 	stw	r16,320(sp)
   8f3a4:	b080400c 	andi	r2,r22,256
   8f3a8:	9821883a 	mov	r16,r19
   8f3ac:	a827883a 	mov	r19,r21
   8f3b0:	502b883a 	mov	r21,r10
   8f3b4:	10000426 	beq	r2,zero,8f3c8 <__ssvfiscanf_r+0xe4c>
   8f3b8:	dac04e17 	ldw	r11,312(sp)
   8f3bc:	5d009c36 	bltu	r11,r20,8f630 <__ssvfiscanf_r+0x10b4>
   8f3c0:	dac04e17 	ldw	r11,312(sp)
   8f3c4:	a2fcb026 	beq	r20,r11,8e688 <__ram_exceptions_end+0xfff6e454>
   8f3c8:	b080040c 	andi	r2,r22,16
   8f3cc:	10006026 	beq	r2,zero,8f550 <__ssvfiscanf_r+0xfd4>
   8f3d0:	dac04e17 	ldw	r11,312(sp)
   8f3d4:	a2e9c83a 	sub	r20,r20,r11
   8f3d8:	a429883a 	add	r20,r20,r16
   8f3dc:	9d27883a 	add	r19,r19,r20
   8f3e0:	a829883a 	mov	r20,r21
   8f3e4:	a00d883a 	mov	r6,r20
   8f3e8:	003ca306 	br	8e678 <__ram_exceptions_end+0xfff6e444>
   8f3ec:	b800011e 	bne	r23,zero,8f3f4 <__ssvfiscanf_r+0xe78>
   8f3f0:	05ffffc4 	movi	r23,-1
   8f3f4:	8100004c 	andi	r4,r16,1
   8f3f8:	203e981e 	bne	r4,zero,8ee5c <__ram_exceptions_end+0xfff6ec28>
   8f3fc:	8400040c 	andi	r16,r16,16
   8f400:	80002926 	beq	r16,zero,8f4a8 <__ssvfiscanf_r+0xf2c>
   8f404:	0021883a 	mov	r16,zero
   8f408:	00000306 	br	8f418 <__ssvfiscanf_r+0xe9c>
   8f40c:	10c00003 	ldbu	r3,0(r2)
   8f410:	b0c7883a 	add	r3,r22,r3
   8f414:	18c00043 	ldbu	r3,1(r3)
   8f418:	18c0020c 	andi	r3,r3,8
   8f41c:	183dc51e 	bne	r3,zero,8eb34 <__ram_exceptions_end+0xfff6e900>
   8f420:	e0c00117 	ldw	r3,4(fp)
   8f424:	10800044 	addi	r2,r2,1
   8f428:	84000044 	addi	r16,r16,1
   8f42c:	18ffffc4 	addi	r3,r3,-1
   8f430:	e0c00115 	stw	r3,4(fp)
   8f434:	e0800015 	stw	r2,0(fp)
   8f438:	85fdbe26 	beq	r16,r23,8eb34 <__ram_exceptions_end+0xfff6e900>
   8f43c:	00fff316 	blt	zero,r3,8f40c <__ram_exceptions_end+0xfff6f1d8>
   8f440:	e00b883a 	mov	r5,fp
   8f444:	8809883a 	mov	r4,r17
   8f448:	008e40c0 	call	8e40c <__ssrefill_r>
   8f44c:	103db91e 	bne	r2,zero,8eb34 <__ram_exceptions_end+0xfff6e900>
   8f450:	95800017 	ldw	r22,0(r18)
   8f454:	e0800017 	ldw	r2,0(fp)
   8f458:	003fec06 	br	8f40c <__ram_exceptions_end+0xfff6f1d8>
   8f45c:	e00b883a 	mov	r5,fp
   8f460:	8809883a 	mov	r4,r17
   8f464:	d8c05a15 	stw	r3,360(sp)
   8f468:	d9805715 	stw	r6,348(sp)
   8f46c:	d9c05915 	stw	r7,356(sp)
   8f470:	da005615 	stw	r8,344(sp)
   8f474:	da405515 	stw	r9,340(sp)
   8f478:	da805815 	stw	r10,352(sp)
   8f47c:	008e40c0 	call	8e40c <__ssrefill_r>
   8f480:	d8c05a17 	ldw	r3,360(sp)
   8f484:	d9805717 	ldw	r6,348(sp)
   8f488:	d9c05917 	ldw	r7,356(sp)
   8f48c:	da005617 	ldw	r8,344(sp)
   8f490:	da405517 	ldw	r9,340(sp)
   8f494:	da805817 	ldw	r10,352(sp)
   8f498:	103f9a26 	beq	r2,zero,8f304 <__ram_exceptions_end+0xfff6f0d0>
   8f49c:	003fc006 	br	8f3a0 <__ram_exceptions_end+0xfff6f16c>
   8f4a0:	000d883a 	mov	r6,zero
   8f4a4:	003f2806 	br	8f148 <__ram_exceptions_end+0xfff6ef14>
   8f4a8:	dac04f17 	ldw	r11,316(sp)
   8f4ac:	babfffc4 	addi	r10,r23,-1
   8f4b0:	5d000017 	ldw	r20,0(r11)
   8f4b4:	5c000104 	addi	r16,r11,4
   8f4b8:	a00b883a 	mov	r5,r20
   8f4bc:	a2ad883a 	add	r22,r20,r10
   8f4c0:	00000606 	br	8f4dc <__ssvfiscanf_r+0xf60>
   8f4c4:	e0800017 	ldw	r2,0(fp)
   8f4c8:	91000017 	ldw	r4,0(r18)
   8f4cc:	b80b883a 	mov	r5,r23
   8f4d0:	10c00003 	ldbu	r3,0(r2)
   8f4d4:	20c7883a 	add	r3,r4,r3
   8f4d8:	18c00043 	ldbu	r3,1(r3)
   8f4dc:	18c0020c 	andi	r3,r3,8
   8f4e0:	2809883a 	mov	r4,r5
   8f4e4:	1800101e 	bne	r3,zero,8f528 <__ssvfiscanf_r+0xfac>
   8f4e8:	e0c00117 	ldw	r3,4(fp)
   8f4ec:	11800044 	addi	r6,r2,1
   8f4f0:	e1800015 	stw	r6,0(fp)
   8f4f4:	18ffffc4 	addi	r3,r3,-1
   8f4f8:	e0c00115 	stw	r3,4(fp)
   8f4fc:	10800003 	ldbu	r2,0(r2)
   8f500:	25c00044 	addi	r23,r4,1
   8f504:	28800005 	stb	r2,0(r5)
   8f508:	25800626 	beq	r4,r22,8f524 <__ssvfiscanf_r+0xfa8>
   8f50c:	e0800117 	ldw	r2,4(fp)
   8f510:	00bfec16 	blt	zero,r2,8f4c4 <__ram_exceptions_end+0xfff6f290>
   8f514:	e00b883a 	mov	r5,fp
   8f518:	8809883a 	mov	r4,r17
   8f51c:	008e40c0 	call	8e40c <__ssrefill_r>
   8f520:	103fe826 	beq	r2,zero,8f4c4 <__ram_exceptions_end+0xfff6f290>
   8f524:	b809883a 	mov	r4,r23
   8f528:	dac05117 	ldw	r11,324(sp)
   8f52c:	2529c83a 	sub	r20,r4,r20
   8f530:	9d27883a 	add	r19,r19,r20
   8f534:	5ac00044 	addi	r11,r11,1
   8f538:	a829883a 	mov	r20,r21
   8f53c:	20000005 	stb	zero,0(r4)
   8f540:	dac05115 	stw	r11,324(sp)
   8f544:	dc004f15 	stw	r16,316(sp)
   8f548:	a00d883a 	mov	r6,r20
   8f54c:	003c4a06 	br	8e678 <__ram_exceptions_end+0xfff6e444>
   8f550:	d9c05017 	ldw	r7,320(sp)
   8f554:	dac05217 	ldw	r11,328(sp)
   8f558:	000d883a 	mov	r6,zero
   8f55c:	d9404104 	addi	r5,sp,260
   8f560:	8809883a 	mov	r4,r17
   8f564:	a0000005 	stb	zero,0(r20)
   8f568:	583ee83a 	callr	r11
   8f56c:	b0c0080c 	andi	r3,r22,32
   8f570:	1800271e 	bne	r3,zero,8f610 <__ssvfiscanf_r+0x1094>
   8f574:	b0c0010c 	andi	r3,r22,4
   8f578:	18003326 	beq	r3,zero,8f648 <__ssvfiscanf_r+0x10cc>
   8f57c:	dac04f17 	ldw	r11,316(sp)
   8f580:	58c00017 	ldw	r3,0(r11)
   8f584:	5ac00104 	addi	r11,r11,4
   8f588:	dac04f15 	stw	r11,316(sp)
   8f58c:	1880000d 	sth	r2,0(r3)
   8f590:	dac05117 	ldw	r11,324(sp)
   8f594:	5ac00044 	addi	r11,r11,1
   8f598:	dac05115 	stw	r11,324(sp)
   8f59c:	003f8c06 	br	8f3d0 <__ram_exceptions_end+0xfff6f19c>
   8f5a0:	b0000015 	stw	zero,0(r22)
   8f5a4:	0009883a 	mov	r4,zero
   8f5a8:	d8c05a15 	stw	r3,360(sp)
   8f5ac:	0089b040 	call	89b04 <iswspace>
   8f5b0:	d8c05a17 	ldw	r3,360(sp)
   8f5b4:	10003826 	beq	r2,zero,8f698 <__ssvfiscanf_r+0x111c>
   8f5b8:	18000b26 	beq	r3,zero,8f5e8 <__ssvfiscanf_r+0x106c>
   8f5bc:	1d3fffc4 	addi	r20,r3,-1
   8f5c0:	dac04104 	addi	r11,sp,260
   8f5c4:	5d2f883a 	add	r23,r11,r20
   8f5c8:	00000106 	br	8f5d0 <__ssvfiscanf_r+0x1054>
   8f5cc:	a53fffc4 	addi	r20,r20,-1
   8f5d0:	b9400003 	ldbu	r5,0(r23)
   8f5d4:	e00d883a 	mov	r6,fp
   8f5d8:	8809883a 	mov	r4,r17
   8f5dc:	008e3040 	call	8e304 <_sungetc_r>
   8f5e0:	bdffffc4 	addi	r23,r23,-1
   8f5e4:	a03ff91e 	bne	r20,zero,8f5cc <__ram_exceptions_end+0xfff6f398>
   8f5e8:	803ded1e 	bne	r16,zero,8eda0 <__ram_exceptions_end+0xfff6eb6c>
   8f5ec:	b0000015 	stw	zero,0(r22)
   8f5f0:	003de806 	br	8ed94 <__ram_exceptions_end+0xfff6eb60>
   8f5f4:	013f1fc4 	movi	r4,-897
   8f5f8:	b12c703a 	and	r22,r22,r4
   8f5fc:	30000226 	beq	r6,zero,8f608 <__ssvfiscanf_r+0x108c>
   8f600:	31bfffc4 	addi	r6,r6,-1
   8f604:	bdc00044 	addi	r23,r23,1
   8f608:	9cc00044 	addi	r19,r19,1
   8f60c:	003f3706 	br	8f2ec <__ram_exceptions_end+0xfff6f0b8>
   8f610:	dac04f17 	ldw	r11,316(sp)
   8f614:	58c00017 	ldw	r3,0(r11)
   8f618:	5ac00104 	addi	r11,r11,4
   8f61c:	dac04f15 	stw	r11,316(sp)
   8f620:	18800015 	stw	r2,0(r3)
   8f624:	003fda06 	br	8f590 <__ram_exceptions_end+0xfff6f35c>
   8f628:	dd804d04 	addi	r22,sp,308
   8f62c:	003e1706 	br	8ee8c <__ram_exceptions_end+0xfff6ec58>
   8f630:	a17fffc7 	ldb	r5,-1(r20)
   8f634:	e00d883a 	mov	r6,fp
   8f638:	8809883a 	mov	r4,r17
   8f63c:	a53fffc4 	addi	r20,r20,-1
   8f640:	008e3040 	call	8e304 <_sungetc_r>
   8f644:	003f5e06 	br	8f3c0 <__ram_exceptions_end+0xfff6f18c>
   8f648:	b0c0004c 	andi	r3,r22,1
   8f64c:	183ff01e 	bne	r3,zero,8f610 <__ram_exceptions_end+0xfff6f3dc>
   8f650:	b580008c 	andi	r22,r22,2
   8f654:	b03fee26 	beq	r22,zero,8f610 <__ram_exceptions_end+0xfff6f3dc>
   8f658:	dac05217 	ldw	r11,328(sp)
   8f65c:	00800274 	movhi	r2,9
   8f660:	10b75404 	addi	r2,r2,-8880
   8f664:	d9c05017 	ldw	r7,320(sp)
   8f668:	000d883a 	mov	r6,zero
   8f66c:	d9404104 	addi	r5,sp,260
   8f670:	8809883a 	mov	r4,r17
   8f674:	58801226 	beq	r11,r2,8f6c0 <__ssvfiscanf_r+0x1144>
   8f678:	008da4c0 	call	8da4c <_strtoll_r>
   8f67c:	dac04f17 	ldw	r11,316(sp)
   8f680:	59000017 	ldw	r4,0(r11)
   8f684:	5ac00104 	addi	r11,r11,4
   8f688:	dac04f15 	stw	r11,316(sp)
   8f68c:	20800015 	stw	r2,0(r4)
   8f690:	20c00115 	stw	r3,4(r4)
   8f694:	003fbe06 	br	8f590 <__ram_exceptions_end+0xfff6f35c>
   8f698:	98e7883a 	add	r19,r19,r3
   8f69c:	bdffffc4 	addi	r23,r23,-1
   8f6a0:	8000031e 	bne	r16,zero,8f6b0 <__ssvfiscanf_r+0x1134>
   8f6a4:	b5800104 	addi	r22,r22,4
   8f6a8:	0029883a 	mov	r20,zero
   8f6ac:	003e1d06 	br	8ef24 <__ram_exceptions_end+0xfff6ecf0>
   8f6b0:	0029883a 	mov	r20,zero
   8f6b4:	003e1b06 	br	8ef24 <__ram_exceptions_end+0xfff6ecf0>
   8f6b8:	b1000017 	ldw	r4,0(r22)
   8f6bc:	003fba06 	br	8f5a8 <__ram_exceptions_end+0xfff6f374>
   8f6c0:	008dfe40 	call	8dfe4 <_strtoull_r>
   8f6c4:	003fed06 	br	8f67c <__ram_exceptions_end+0xfff6f448>

0008f6c8 <___svfprintf_internal_r>:
   8f6c8:	deffb704 	addi	sp,sp,-292
   8f6cc:	dfc04815 	stw	ra,288(sp)
   8f6d0:	ddc04615 	stw	r23,280(sp)
   8f6d4:	d9402d15 	stw	r5,180(sp)
   8f6d8:	d9003915 	stw	r4,228(sp)
   8f6dc:	302f883a 	mov	r23,r6
   8f6e0:	d9c02e15 	stw	r7,184(sp)
   8f6e4:	df004715 	stw	fp,284(sp)
   8f6e8:	dd804515 	stw	r22,276(sp)
   8f6ec:	dd404415 	stw	r21,272(sp)
   8f6f0:	dd004315 	stw	r20,268(sp)
   8f6f4:	dcc04215 	stw	r19,264(sp)
   8f6f8:	dc804115 	stw	r18,260(sp)
   8f6fc:	dc404015 	stw	r17,256(sp)
   8f700:	dc003f15 	stw	r16,252(sp)
   8f704:	0089be00 	call	89be0 <_localeconv_r>
   8f708:	10800017 	ldw	r2,0(r2)
   8f70c:	1009883a 	mov	r4,r2
   8f710:	d8803415 	stw	r2,208(sp)
   8f714:	00831980 	call	83198 <strlen>
   8f718:	d8c02d17 	ldw	r3,180(sp)
   8f71c:	d8803815 	stw	r2,224(sp)
   8f720:	1880030b 	ldhu	r2,12(r3)
   8f724:	1080200c 	andi	r2,r2,128
   8f728:	10000226 	beq	r2,zero,8f734 <___svfprintf_internal_r+0x6c>
   8f72c:	18800417 	ldw	r2,16(r3)
   8f730:	1006b126 	beq	r2,zero,911f8 <___svfprintf_internal_r+0x1b30>
   8f734:	dcc03917 	ldw	r19,228(sp)
   8f738:	d8c00404 	addi	r3,sp,16
   8f73c:	054002b4 	movhi	r21,10
   8f740:	d9001e04 	addi	r4,sp,120
   8f744:	ad799f84 	addi	r21,r21,-6530
   8f748:	d8c01e15 	stw	r3,120(sp)
   8f74c:	d8002015 	stw	zero,128(sp)
   8f750:	d8001f15 	stw	zero,124(sp)
   8f754:	d8003315 	stw	zero,204(sp)
   8f758:	d8003615 	stw	zero,216(sp)
   8f75c:	d8003715 	stw	zero,220(sp)
   8f760:	1811883a 	mov	r8,r3
   8f764:	d8003a15 	stw	zero,232(sp)
   8f768:	d8003b15 	stw	zero,236(sp)
   8f76c:	d8002f15 	stw	zero,188(sp)
   8f770:	d9002815 	stw	r4,160(sp)
   8f774:	b8800007 	ldb	r2,0(r23)
   8f778:	10027726 	beq	r2,zero,90158 <___svfprintf_internal_r+0xa90>
   8f77c:	00c00944 	movi	r3,37
   8f780:	b823883a 	mov	r17,r23
   8f784:	10c0021e 	bne	r2,r3,8f790 <___svfprintf_internal_r+0xc8>
   8f788:	00001406 	br	8f7dc <___svfprintf_internal_r+0x114>
   8f78c:	10c00326 	beq	r2,r3,8f79c <___svfprintf_internal_r+0xd4>
   8f790:	8c400044 	addi	r17,r17,1
   8f794:	88800007 	ldb	r2,0(r17)
   8f798:	103ffc1e 	bne	r2,zero,8f78c <__ram_exceptions_end+0xfff6f558>
   8f79c:	8de1c83a 	sub	r16,r17,r23
   8f7a0:	80000e26 	beq	r16,zero,8f7dc <___svfprintf_internal_r+0x114>
   8f7a4:	d8c02017 	ldw	r3,128(sp)
   8f7a8:	d8801f17 	ldw	r2,124(sp)
   8f7ac:	45c00015 	stw	r23,0(r8)
   8f7b0:	1c07883a 	add	r3,r3,r16
   8f7b4:	10800044 	addi	r2,r2,1
   8f7b8:	d8c02015 	stw	r3,128(sp)
   8f7bc:	44000115 	stw	r16,4(r8)
   8f7c0:	d8801f15 	stw	r2,124(sp)
   8f7c4:	00c001c4 	movi	r3,7
   8f7c8:	18809916 	blt	r3,r2,8fa30 <___svfprintf_internal_r+0x368>
   8f7cc:	42000204 	addi	r8,r8,8
   8f7d0:	d9402f17 	ldw	r5,188(sp)
   8f7d4:	2c0b883a 	add	r5,r5,r16
   8f7d8:	d9402f15 	stw	r5,188(sp)
   8f7dc:	88800007 	ldb	r2,0(r17)
   8f7e0:	10009a26 	beq	r2,zero,8fa4c <___svfprintf_internal_r+0x384>
   8f7e4:	8dc00044 	addi	r23,r17,1
   8f7e8:	8c400047 	ldb	r17,1(r17)
   8f7ec:	0021883a 	mov	r16,zero
   8f7f0:	00bfffc4 	movi	r2,-1
   8f7f4:	0025883a 	mov	r18,zero
   8f7f8:	dc002905 	stb	r16,164(sp)
   8f7fc:	d8002785 	stb	zero,158(sp)
   8f800:	d8002b05 	stb	zero,172(sp)
   8f804:	d8802a15 	stw	r2,168(sp)
   8f808:	d8003115 	stw	zero,196(sp)
   8f80c:	05001604 	movi	r20,88
   8f810:	05800244 	movi	r22,9
   8f814:	4039883a 	mov	fp,r8
   8f818:	9021883a 	mov	r16,r18
   8f81c:	bdc00044 	addi	r23,r23,1
   8f820:	88bff804 	addi	r2,r17,-32
   8f824:	a0831e36 	bltu	r20,r2,904a0 <___svfprintf_internal_r+0xdd8>
   8f828:	100490ba 	slli	r2,r2,2
   8f82c:	00c00274 	movhi	r3,9
   8f830:	18fe1004 	addi	r3,r3,-1984
   8f834:	10c5883a 	add	r2,r2,r3
   8f838:	10800017 	ldw	r2,0(r2)
   8f83c:	1000683a 	jmp	r2
   8f840:	000903e8 	cmpgeui	zero,zero,9231
   8f844:	000904a0 	cmpeqi	zero,zero,9234
   8f848:	000904a0 	cmpeqi	zero,zero,9234
   8f84c:	000903dc 	xori	zero,zero,9231
   8f850:	000904a0 	cmpeqi	zero,zero,9234
   8f854:	000904a0 	cmpeqi	zero,zero,9234
   8f858:	000904a0 	cmpeqi	zero,zero,9234
   8f85c:	000904a0 	cmpeqi	zero,zero,9234
   8f860:	000904a0 	cmpeqi	zero,zero,9234
   8f864:	000904a0 	cmpeqi	zero,zero,9234
   8f868:	0008faa8 	cmpgeui	zero,zero,9194
   8f86c:	000902ec 	andhi	zero,zero,9227
   8f870:	000904a0 	cmpeqi	zero,zero,9234
   8f874:	0008f9b4 	movhi	zero,9190
   8f878:	0008facc 	andi	zero,zero,9195
   8f87c:	000904a0 	cmpeqi	zero,zero,9234
   8f880:	0008fb58 	cmpnei	zero,zero,9197
   8f884:	0008fb1c 	xori	zero,zero,9196
   8f888:	0008fb1c 	xori	zero,zero,9196
   8f88c:	0008fb1c 	xori	zero,zero,9196
   8f890:	0008fb1c 	xori	zero,zero,9196
   8f894:	0008fb1c 	xori	zero,zero,9196
   8f898:	0008fb1c 	xori	zero,zero,9196
   8f89c:	0008fb1c 	xori	zero,zero,9196
   8f8a0:	0008fb1c 	xori	zero,zero,9196
   8f8a4:	0008fb1c 	xori	zero,zero,9196
   8f8a8:	000904a0 	cmpeqi	zero,zero,9234
   8f8ac:	000904a0 	cmpeqi	zero,zero,9234
   8f8b0:	000904a0 	cmpeqi	zero,zero,9234
   8f8b4:	000904a0 	cmpeqi	zero,zero,9234
   8f8b8:	000904a0 	cmpeqi	zero,zero,9234
   8f8bc:	000904a0 	cmpeqi	zero,zero,9234
   8f8c0:	000904a0 	cmpeqi	zero,zero,9234
   8f8c4:	000904a0 	cmpeqi	zero,zero,9234
   8f8c8:	000904a0 	cmpeqi	zero,zero,9234
   8f8cc:	000904a0 	cmpeqi	zero,zero,9234
   8f8d0:	0008fc1c 	xori	zero,zero,9200
   8f8d4:	0008fb64 	muli	zero,zero,9197
   8f8d8:	000904a0 	cmpeqi	zero,zero,9234
   8f8dc:	0008fb64 	muli	zero,zero,9197
   8f8e0:	000904a0 	cmpeqi	zero,zero,9234
   8f8e4:	000904a0 	cmpeqi	zero,zero,9234
   8f8e8:	000904a0 	cmpeqi	zero,zero,9234
   8f8ec:	000904a0 	cmpeqi	zero,zero,9234
   8f8f0:	0008fc10 	cmplti	zero,zero,9200
   8f8f4:	000904a0 	cmpeqi	zero,zero,9234
   8f8f8:	000904a0 	cmpeqi	zero,zero,9234
   8f8fc:	0008fce4 	muli	zero,zero,9203
   8f900:	000904a0 	cmpeqi	zero,zero,9234
   8f904:	000904a0 	cmpeqi	zero,zero,9234
   8f908:	000904a0 	cmpeqi	zero,zero,9234
   8f90c:	000904a0 	cmpeqi	zero,zero,9234
   8f910:	000904a0 	cmpeqi	zero,zero,9234
   8f914:	00090160 	cmpeqi	zero,zero,9221
   8f918:	000904a0 	cmpeqi	zero,zero,9234
   8f91c:	000904a0 	cmpeqi	zero,zero,9234
   8f920:	000901cc 	andi	zero,zero,9223
   8f924:	000904a0 	cmpeqi	zero,zero,9234
   8f928:	000904a0 	cmpeqi	zero,zero,9234
   8f92c:	000904a0 	cmpeqi	zero,zero,9234
   8f930:	000904a0 	cmpeqi	zero,zero,9234
   8f934:	000904a0 	cmpeqi	zero,zero,9234
   8f938:	000904a0 	cmpeqi	zero,zero,9234
   8f93c:	000904a0 	cmpeqi	zero,zero,9234
   8f940:	000904a0 	cmpeqi	zero,zero,9234
   8f944:	000904a0 	cmpeqi	zero,zero,9234
   8f948:	000904a0 	cmpeqi	zero,zero,9234
   8f94c:	00090288 	cmpgei	zero,zero,9226
   8f950:	00090408 	cmpgei	zero,zero,9232
   8f954:	0008fb64 	muli	zero,zero,9197
   8f958:	0008fb64 	muli	zero,zero,9197
   8f95c:	0008fb64 	muli	zero,zero,9197
   8f960:	0009047c 	xorhi	zero,zero,9233
   8f964:	00090408 	cmpgei	zero,zero,9232
   8f968:	000904a0 	cmpeqi	zero,zero,9234
   8f96c:	000904a0 	cmpeqi	zero,zero,9234
   8f970:	00090428 	cmpgeui	zero,zero,9232
   8f974:	000904a0 	cmpeqi	zero,zero,9234
   8f978:	0009043c 	xorhi	zero,zero,9232
   8f97c:	000902cc 	andi	zero,zero,9227
   8f980:	0008f9c0 	call	8f9c <_start-0x77064>
   8f984:	00090304 	movi	zero,9228
   8f988:	000904a0 	cmpeqi	zero,zero,9234
   8f98c:	00090310 	cmplti	zero,zero,9228
   8f990:	000904a0 	cmpeqi	zero,zero,9234
   8f994:	00090374 	movhi	zero,9229
   8f998:	000904a0 	cmpeqi	zero,zero,9234
   8f99c:	000904a0 	cmpeqi	zero,zero,9234
   8f9a0:	00090394 	movui	zero,9230
   8f9a4:	d8c03117 	ldw	r3,196(sp)
   8f9a8:	d8802e15 	stw	r2,184(sp)
   8f9ac:	00c7c83a 	sub	r3,zero,r3
   8f9b0:	d8c03115 	stw	r3,196(sp)
   8f9b4:	84000114 	ori	r16,r16,4
   8f9b8:	bc400007 	ldb	r17,0(r23)
   8f9bc:	003f9706 	br	8f81c <__ram_exceptions_end+0xfff6f5e8>
   8f9c0:	00800c04 	movi	r2,48
   8f9c4:	d8802705 	stb	r2,156(sp)
   8f9c8:	00801e04 	movi	r2,120
   8f9cc:	d8802745 	stb	r2,157(sp)
   8f9d0:	d9002a17 	ldw	r4,168(sp)
   8f9d4:	d8802e17 	ldw	r2,184(sp)
   8f9d8:	d8002785 	stb	zero,158(sp)
   8f9dc:	e011883a 	mov	r8,fp
   8f9e0:	10c00104 	addi	r3,r2,4
   8f9e4:	15000017 	ldw	r20,0(r2)
   8f9e8:	002d883a 	mov	r22,zero
   8f9ec:	80800094 	ori	r2,r16,2
   8f9f0:	2002b616 	blt	r4,zero,904cc <___svfprintf_internal_r+0xe04>
   8f9f4:	00bfdfc4 	movi	r2,-129
   8f9f8:	80a4703a 	and	r18,r16,r2
   8f9fc:	d8c02e15 	stw	r3,184(sp)
   8fa00:	94800094 	ori	r18,r18,2
   8fa04:	a002a01e 	bne	r20,zero,90488 <___svfprintf_internal_r+0xdc0>
   8fa08:	014002b4 	movhi	r5,10
   8fa0c:	29787f04 	addi	r5,r5,-7684
   8fa10:	d9403a15 	stw	r5,232(sp)
   8fa14:	04401e04 	movi	r17,120
   8fa18:	d8c02a17 	ldw	r3,168(sp)
   8fa1c:	0039883a 	mov	fp,zero
   8fa20:	1801e626 	beq	r3,zero,901bc <___svfprintf_internal_r+0xaf4>
   8fa24:	0029883a 	mov	r20,zero
   8fa28:	002d883a 	mov	r22,zero
   8fa2c:	00020506 	br	90244 <___svfprintf_internal_r+0xb7c>
   8fa30:	d9402d17 	ldw	r5,180(sp)
   8fa34:	d9801e04 	addi	r6,sp,120
   8fa38:	9809883a 	mov	r4,r19
   8fa3c:	00945680 	call	94568 <__ssprint_r>
   8fa40:	1000081e 	bne	r2,zero,8fa64 <___svfprintf_internal_r+0x39c>
   8fa44:	da000404 	addi	r8,sp,16
   8fa48:	003f6106 	br	8f7d0 <__ram_exceptions_end+0xfff6f59c>
   8fa4c:	d8802017 	ldw	r2,128(sp)
   8fa50:	10000426 	beq	r2,zero,8fa64 <___svfprintf_internal_r+0x39c>
   8fa54:	d9402d17 	ldw	r5,180(sp)
   8fa58:	d9003917 	ldw	r4,228(sp)
   8fa5c:	d9801e04 	addi	r6,sp,120
   8fa60:	00945680 	call	94568 <__ssprint_r>
   8fa64:	d8802d17 	ldw	r2,180(sp)
   8fa68:	10c0030b 	ldhu	r3,12(r2)
   8fa6c:	d8802f17 	ldw	r2,188(sp)
   8fa70:	18c0100c 	andi	r3,r3,64
   8fa74:	1806251e 	bne	r3,zero,9130c <___svfprintf_internal_r+0x1c44>
   8fa78:	dfc04817 	ldw	ra,288(sp)
   8fa7c:	df004717 	ldw	fp,284(sp)
   8fa80:	ddc04617 	ldw	r23,280(sp)
   8fa84:	dd804517 	ldw	r22,276(sp)
   8fa88:	dd404417 	ldw	r21,272(sp)
   8fa8c:	dd004317 	ldw	r20,268(sp)
   8fa90:	dcc04217 	ldw	r19,264(sp)
   8fa94:	dc804117 	ldw	r18,260(sp)
   8fa98:	dc404017 	ldw	r17,256(sp)
   8fa9c:	dc003f17 	ldw	r16,252(sp)
   8faa0:	dec04904 	addi	sp,sp,292
   8faa4:	f800283a 	ret
   8faa8:	d9002e17 	ldw	r4,184(sp)
   8faac:	d9402e17 	ldw	r5,184(sp)
   8fab0:	21000017 	ldw	r4,0(r4)
   8fab4:	28800104 	addi	r2,r5,4
   8fab8:	d9003115 	stw	r4,196(sp)
   8fabc:	203fb916 	blt	r4,zero,8f9a4 <__ram_exceptions_end+0xfff6f770>
   8fac0:	d8802e15 	stw	r2,184(sp)
   8fac4:	bc400007 	ldb	r17,0(r23)
   8fac8:	003f5406 	br	8f81c <__ram_exceptions_end+0xfff6f5e8>
   8facc:	bc400007 	ldb	r17,0(r23)
   8fad0:	01000a84 	movi	r4,42
   8fad4:	b8c00044 	addi	r3,r23,1
   8fad8:	89076926 	beq	r17,r4,91880 <___svfprintf_internal_r+0x21b8>
   8fadc:	8cbff404 	addi	r18,r17,-48
   8fae0:	b486b936 	bltu	r22,r18,915c8 <___svfprintf_internal_r+0x1f00>
   8fae4:	0009883a 	mov	r4,zero
   8fae8:	1823883a 	mov	r17,r3
   8faec:	01400284 	movi	r5,10
   8faf0:	00822140 	call	82214 <__mulsi3>
   8faf4:	88c00007 	ldb	r3,0(r17)
   8faf8:	1489883a 	add	r4,r2,r18
   8fafc:	8dc00044 	addi	r23,r17,1
   8fb00:	1cbff404 	addi	r18,r3,-48
   8fb04:	b823883a 	mov	r17,r23
   8fb08:	b4bff82e 	bgeu	r22,r18,8faec <__ram_exceptions_end+0xfff6f8b8>
   8fb0c:	1823883a 	mov	r17,r3
   8fb10:	20060416 	blt	r4,zero,91324 <___svfprintf_internal_r+0x1c5c>
   8fb14:	d9002a15 	stw	r4,168(sp)
   8fb18:	003f4106 	br	8f820 <__ram_exceptions_end+0xfff6f5ec>
   8fb1c:	8cbff404 	addi	r18,r17,-48
   8fb20:	d8003115 	stw	zero,196(sp)
   8fb24:	0009883a 	mov	r4,zero
   8fb28:	b823883a 	mov	r17,r23
   8fb2c:	01400284 	movi	r5,10
   8fb30:	00822140 	call	82214 <__mulsi3>
   8fb34:	88c00007 	ldb	r3,0(r17)
   8fb38:	9089883a 	add	r4,r18,r2
   8fb3c:	bdc00044 	addi	r23,r23,1
   8fb40:	1cbff404 	addi	r18,r3,-48
   8fb44:	b823883a 	mov	r17,r23
   8fb48:	b4bff82e 	bgeu	r22,r18,8fb2c <__ram_exceptions_end+0xfff6f8f8>
   8fb4c:	1823883a 	mov	r17,r3
   8fb50:	d9003115 	stw	r4,196(sp)
   8fb54:	003f3206 	br	8f820 <__ram_exceptions_end+0xfff6f5ec>
   8fb58:	84002014 	ori	r16,r16,128
   8fb5c:	bc400007 	ldb	r17,0(r23)
   8fb60:	003f2e06 	br	8f81c <__ram_exceptions_end+0xfff6f5e8>
   8fb64:	8025883a 	mov	r18,r16
   8fb68:	dc002903 	ldbu	r16,164(sp)
   8fb6c:	e011883a 	mov	r8,fp
   8fb70:	84003fcc 	andi	r16,r16,255
   8fb74:	8007721e 	bne	r16,zero,91940 <___svfprintf_internal_r+0x2278>
   8fb78:	9080020c 	andi	r2,r18,8
   8fb7c:	1004a526 	beq	r2,zero,90e14 <___svfprintf_internal_r+0x174c>
   8fb80:	d9002e17 	ldw	r4,184(sp)
   8fb84:	d9402e17 	ldw	r5,184(sp)
   8fb88:	d8802e17 	ldw	r2,184(sp)
   8fb8c:	21000017 	ldw	r4,0(r4)
   8fb90:	29400117 	ldw	r5,4(r5)
   8fb94:	10800204 	addi	r2,r2,8
   8fb98:	d9003615 	stw	r4,216(sp)
   8fb9c:	d9403715 	stw	r5,220(sp)
   8fba0:	d8802e15 	stw	r2,184(sp)
   8fba4:	d9003617 	ldw	r4,216(sp)
   8fba8:	d9403717 	ldw	r5,220(sp)
   8fbac:	da003e15 	stw	r8,248(sp)
   8fbb0:	04000044 	movi	r16,1
   8fbb4:	008bd8c0 	call	8bd8c <__fpclassifyd>
   8fbb8:	da003e17 	ldw	r8,248(sp)
   8fbbc:	1404731e 	bne	r2,r16,90d8c <___svfprintf_internal_r+0x16c4>
   8fbc0:	d9003617 	ldw	r4,216(sp)
   8fbc4:	d9403717 	ldw	r5,220(sp)
   8fbc8:	000d883a 	mov	r6,zero
   8fbcc:	000f883a 	mov	r7,zero
   8fbd0:	0097fdc0 	call	97fdc <__ledf2>
   8fbd4:	da003e17 	ldw	r8,248(sp)
   8fbd8:	10061b16 	blt	r2,zero,91448 <___svfprintf_internal_r+0x1d80>
   8fbdc:	df002783 	ldbu	fp,158(sp)
   8fbe0:	008011c4 	movi	r2,71
   8fbe4:	1445810e 	bge	r2,r17,911ec <___svfprintf_internal_r+0x1b24>
   8fbe8:	040002b4 	movhi	r16,10
   8fbec:	84387704 	addi	r16,r16,-7716
   8fbf0:	00c000c4 	movi	r3,3
   8fbf4:	00bfdfc4 	movi	r2,-129
   8fbf8:	d8c02915 	stw	r3,164(sp)
   8fbfc:	90a4703a 	and	r18,r18,r2
   8fc00:	d8c02b15 	stw	r3,172(sp)
   8fc04:	d8002a15 	stw	zero,168(sp)
   8fc08:	d8003215 	stw	zero,200(sp)
   8fc0c:	00006c06 	br	8fdc0 <___svfprintf_internal_r+0x6f8>
   8fc10:	84000214 	ori	r16,r16,8
   8fc14:	bc400007 	ldb	r17,0(r23)
   8fc18:	003f0006 	br	8f81c <__ram_exceptions_end+0xfff6f5e8>
   8fc1c:	8025883a 	mov	r18,r16
   8fc20:	dc002903 	ldbu	r16,164(sp)
   8fc24:	e011883a 	mov	r8,fp
   8fc28:	84003fcc 	andi	r16,r16,255
   8fc2c:	80073f1e 	bne	r16,zero,9192c <___svfprintf_internal_r+0x2264>
   8fc30:	94800414 	ori	r18,r18,16
   8fc34:	9080080c 	andi	r2,r18,32
   8fc38:	1003bb26 	beq	r2,zero,90b28 <___svfprintf_internal_r+0x1460>
   8fc3c:	d9002e17 	ldw	r4,184(sp)
   8fc40:	20800117 	ldw	r2,4(r4)
   8fc44:	25000017 	ldw	r20,0(r4)
   8fc48:	21000204 	addi	r4,r4,8
   8fc4c:	d9002e15 	stw	r4,184(sp)
   8fc50:	102d883a 	mov	r22,r2
   8fc54:	1003bd16 	blt	r2,zero,90b4c <___svfprintf_internal_r+0x1484>
   8fc58:	d9002a17 	ldw	r4,168(sp)
   8fc5c:	df002783 	ldbu	fp,158(sp)
   8fc60:	2003d016 	blt	r4,zero,90ba4 <___svfprintf_internal_r+0x14dc>
   8fc64:	00ffdfc4 	movi	r3,-129
   8fc68:	a584b03a 	or	r2,r20,r22
   8fc6c:	90e4703a 	and	r18,r18,r3
   8fc70:	10015026 	beq	r2,zero,901b4 <___svfprintf_internal_r+0xaec>
   8fc74:	b0037026 	beq	r22,zero,90a38 <___svfprintf_internal_r+0x1370>
   8fc78:	dc402915 	stw	r17,164(sp)
   8fc7c:	dc001e04 	addi	r16,sp,120
   8fc80:	b023883a 	mov	r17,r22
   8fc84:	402d883a 	mov	r22,r8
   8fc88:	a009883a 	mov	r4,r20
   8fc8c:	880b883a 	mov	r5,r17
   8fc90:	01800284 	movi	r6,10
   8fc94:	000f883a 	mov	r7,zero
   8fc98:	009643c0 	call	9643c <__umoddi3>
   8fc9c:	10800c04 	addi	r2,r2,48
   8fca0:	843fffc4 	addi	r16,r16,-1
   8fca4:	a009883a 	mov	r4,r20
   8fca8:	880b883a 	mov	r5,r17
   8fcac:	80800005 	stb	r2,0(r16)
   8fcb0:	01800284 	movi	r6,10
   8fcb4:	000f883a 	mov	r7,zero
   8fcb8:	0095e400 	call	95e40 <__udivdi3>
   8fcbc:	1029883a 	mov	r20,r2
   8fcc0:	10c4b03a 	or	r2,r2,r3
   8fcc4:	1823883a 	mov	r17,r3
   8fcc8:	103fef1e 	bne	r2,zero,8fc88 <__ram_exceptions_end+0xfff6fa54>
   8fccc:	d8c02817 	ldw	r3,160(sp)
   8fcd0:	dc402917 	ldw	r17,164(sp)
   8fcd4:	b011883a 	mov	r8,r22
   8fcd8:	1c07c83a 	sub	r3,r3,r16
   8fcdc:	d8c02b15 	stw	r3,172(sp)
   8fce0:	00003106 	br	8fda8 <___svfprintf_internal_r+0x6e0>
   8fce4:	8025883a 	mov	r18,r16
   8fce8:	dc002903 	ldbu	r16,164(sp)
   8fcec:	e011883a 	mov	r8,fp
   8fcf0:	84003fcc 	andi	r16,r16,255
   8fcf4:	80070a1e 	bne	r16,zero,91920 <___svfprintf_internal_r+0x2258>
   8fcf8:	94800414 	ori	r18,r18,16
   8fcfc:	9080080c 	andi	r2,r18,32
   8fd00:	1002f626 	beq	r2,zero,908dc <___svfprintf_internal_r+0x1214>
   8fd04:	d9002e17 	ldw	r4,184(sp)
   8fd08:	d9402a17 	ldw	r5,168(sp)
   8fd0c:	d8002785 	stb	zero,158(sp)
   8fd10:	20800204 	addi	r2,r4,8
   8fd14:	25000017 	ldw	r20,0(r4)
   8fd18:	25800117 	ldw	r22,4(r4)
   8fd1c:	28043716 	blt	r5,zero,90dfc <___svfprintf_internal_r+0x1734>
   8fd20:	013fdfc4 	movi	r4,-129
   8fd24:	a586b03a 	or	r3,r20,r22
   8fd28:	d8802e15 	stw	r2,184(sp)
   8fd2c:	9124703a 	and	r18,r18,r4
   8fd30:	1802f71e 	bne	r3,zero,90910 <___svfprintf_internal_r+0x1248>
   8fd34:	d9402a17 	ldw	r5,168(sp)
   8fd38:	0039883a 	mov	fp,zero
   8fd3c:	2806df26 	beq	r5,zero,918bc <___svfprintf_internal_r+0x21f4>
   8fd40:	0029883a 	mov	r20,zero
   8fd44:	002d883a 	mov	r22,zero
   8fd48:	dc001e04 	addi	r16,sp,120
   8fd4c:	a006d0fa 	srli	r3,r20,3
   8fd50:	b008977a 	slli	r4,r22,29
   8fd54:	b02cd0fa 	srli	r22,r22,3
   8fd58:	a50001cc 	andi	r20,r20,7
   8fd5c:	a0800c04 	addi	r2,r20,48
   8fd60:	843fffc4 	addi	r16,r16,-1
   8fd64:	20e8b03a 	or	r20,r4,r3
   8fd68:	80800005 	stb	r2,0(r16)
   8fd6c:	a586b03a 	or	r3,r20,r22
   8fd70:	183ff61e 	bne	r3,zero,8fd4c <__ram_exceptions_end+0xfff6fb18>
   8fd74:	90c0004c 	andi	r3,r18,1
   8fd78:	18013f26 	beq	r3,zero,90278 <___svfprintf_internal_r+0xbb0>
   8fd7c:	10803fcc 	andi	r2,r2,255
   8fd80:	1080201c 	xori	r2,r2,128
   8fd84:	10bfe004 	addi	r2,r2,-128
   8fd88:	00c00c04 	movi	r3,48
   8fd8c:	10c13a26 	beq	r2,r3,90278 <___svfprintf_internal_r+0xbb0>
   8fd90:	80ffffc5 	stb	r3,-1(r16)
   8fd94:	d8c02817 	ldw	r3,160(sp)
   8fd98:	80bfffc4 	addi	r2,r16,-1
   8fd9c:	1021883a 	mov	r16,r2
   8fda0:	1887c83a 	sub	r3,r3,r2
   8fda4:	d8c02b15 	stw	r3,172(sp)
   8fda8:	d8802b17 	ldw	r2,172(sp)
   8fdac:	d9002a17 	ldw	r4,168(sp)
   8fdb0:	1100010e 	bge	r2,r4,8fdb8 <___svfprintf_internal_r+0x6f0>
   8fdb4:	2005883a 	mov	r2,r4
   8fdb8:	d8802915 	stw	r2,164(sp)
   8fdbc:	d8003215 	stw	zero,200(sp)
   8fdc0:	e7003fcc 	andi	fp,fp,255
   8fdc4:	e700201c 	xori	fp,fp,128
   8fdc8:	e73fe004 	addi	fp,fp,-128
   8fdcc:	e0000326 	beq	fp,zero,8fddc <___svfprintf_internal_r+0x714>
   8fdd0:	d8c02917 	ldw	r3,164(sp)
   8fdd4:	18c00044 	addi	r3,r3,1
   8fdd8:	d8c02915 	stw	r3,164(sp)
   8fddc:	90c0008c 	andi	r3,r18,2
   8fde0:	d8c02c15 	stw	r3,176(sp)
   8fde4:	18000326 	beq	r3,zero,8fdf4 <___svfprintf_internal_r+0x72c>
   8fde8:	d8c02917 	ldw	r3,164(sp)
   8fdec:	18c00084 	addi	r3,r3,2
   8fdf0:	d8c02915 	stw	r3,164(sp)
   8fdf4:	90c0210c 	andi	r3,r18,132
   8fdf8:	d8c03015 	stw	r3,192(sp)
   8fdfc:	1801c31e 	bne	r3,zero,9050c <___svfprintf_internal_r+0xe44>
   8fe00:	d9003117 	ldw	r4,196(sp)
   8fe04:	d8c02917 	ldw	r3,164(sp)
   8fe08:	20e9c83a 	sub	r20,r4,r3
   8fe0c:	0501bf0e 	bge	zero,r20,9050c <___svfprintf_internal_r+0xe44>
   8fe10:	02400404 	movi	r9,16
   8fe14:	d8c02017 	ldw	r3,128(sp)
   8fe18:	d8801f17 	ldw	r2,124(sp)
   8fe1c:	4d053d0e 	bge	r9,r20,91314 <___svfprintf_internal_r+0x1c4c>
   8fe20:	014002b4 	movhi	r5,10
   8fe24:	2979a384 	addi	r5,r5,-6514
   8fe28:	dc403c15 	stw	r17,240(sp)
   8fe2c:	d9403515 	stw	r5,212(sp)
   8fe30:	a023883a 	mov	r17,r20
   8fe34:	482d883a 	mov	r22,r9
   8fe38:	9029883a 	mov	r20,r18
   8fe3c:	070001c4 	movi	fp,7
   8fe40:	8025883a 	mov	r18,r16
   8fe44:	dc002d17 	ldw	r16,180(sp)
   8fe48:	00000306 	br	8fe58 <___svfprintf_internal_r+0x790>
   8fe4c:	8c7ffc04 	addi	r17,r17,-16
   8fe50:	42000204 	addi	r8,r8,8
   8fe54:	b440130e 	bge	r22,r17,8fea4 <___svfprintf_internal_r+0x7dc>
   8fe58:	010002b4 	movhi	r4,10
   8fe5c:	18c00404 	addi	r3,r3,16
   8fe60:	10800044 	addi	r2,r2,1
   8fe64:	2139a384 	addi	r4,r4,-6514
   8fe68:	41000015 	stw	r4,0(r8)
   8fe6c:	45800115 	stw	r22,4(r8)
   8fe70:	d8c02015 	stw	r3,128(sp)
   8fe74:	d8801f15 	stw	r2,124(sp)
   8fe78:	e0bff40e 	bge	fp,r2,8fe4c <__ram_exceptions_end+0xfff6fc18>
   8fe7c:	d9801e04 	addi	r6,sp,120
   8fe80:	800b883a 	mov	r5,r16
   8fe84:	9809883a 	mov	r4,r19
   8fe88:	00945680 	call	94568 <__ssprint_r>
   8fe8c:	103ef51e 	bne	r2,zero,8fa64 <__ram_exceptions_end+0xfff6f830>
   8fe90:	8c7ffc04 	addi	r17,r17,-16
   8fe94:	d8c02017 	ldw	r3,128(sp)
   8fe98:	d8801f17 	ldw	r2,124(sp)
   8fe9c:	da000404 	addi	r8,sp,16
   8fea0:	b47fed16 	blt	r22,r17,8fe58 <__ram_exceptions_end+0xfff6fc24>
   8fea4:	9021883a 	mov	r16,r18
   8fea8:	a025883a 	mov	r18,r20
   8feac:	8829883a 	mov	r20,r17
   8feb0:	dc403c17 	ldw	r17,240(sp)
   8feb4:	d9403517 	ldw	r5,212(sp)
   8feb8:	a0c7883a 	add	r3,r20,r3
   8febc:	10800044 	addi	r2,r2,1
   8fec0:	41400015 	stw	r5,0(r8)
   8fec4:	45000115 	stw	r20,4(r8)
   8fec8:	d8c02015 	stw	r3,128(sp)
   8fecc:	d8801f15 	stw	r2,124(sp)
   8fed0:	010001c4 	movi	r4,7
   8fed4:	2082c116 	blt	r4,r2,909dc <___svfprintf_internal_r+0x1314>
   8fed8:	df002787 	ldb	fp,158(sp)
   8fedc:	42000204 	addi	r8,r8,8
   8fee0:	e0000c26 	beq	fp,zero,8ff14 <___svfprintf_internal_r+0x84c>
   8fee4:	d8801f17 	ldw	r2,124(sp)
   8fee8:	d9002784 	addi	r4,sp,158
   8feec:	18c00044 	addi	r3,r3,1
   8fef0:	10800044 	addi	r2,r2,1
   8fef4:	41000015 	stw	r4,0(r8)
   8fef8:	01000044 	movi	r4,1
   8fefc:	41000115 	stw	r4,4(r8)
   8ff00:	d8c02015 	stw	r3,128(sp)
   8ff04:	d8801f15 	stw	r2,124(sp)
   8ff08:	010001c4 	movi	r4,7
   8ff0c:	20825a16 	blt	r4,r2,90878 <___svfprintf_internal_r+0x11b0>
   8ff10:	42000204 	addi	r8,r8,8
   8ff14:	d8802c17 	ldw	r2,176(sp)
   8ff18:	10000c26 	beq	r2,zero,8ff4c <___svfprintf_internal_r+0x884>
   8ff1c:	d8801f17 	ldw	r2,124(sp)
   8ff20:	d9002704 	addi	r4,sp,156
   8ff24:	18c00084 	addi	r3,r3,2
   8ff28:	10800044 	addi	r2,r2,1
   8ff2c:	41000015 	stw	r4,0(r8)
   8ff30:	01000084 	movi	r4,2
   8ff34:	41000115 	stw	r4,4(r8)
   8ff38:	d8c02015 	stw	r3,128(sp)
   8ff3c:	d8801f15 	stw	r2,124(sp)
   8ff40:	010001c4 	movi	r4,7
   8ff44:	20825416 	blt	r4,r2,90898 <___svfprintf_internal_r+0x11d0>
   8ff48:	42000204 	addi	r8,r8,8
   8ff4c:	d9003017 	ldw	r4,192(sp)
   8ff50:	00802004 	movi	r2,128
   8ff54:	2081b926 	beq	r4,r2,9063c <___svfprintf_internal_r+0xf74>
   8ff58:	d9402a17 	ldw	r5,168(sp)
   8ff5c:	d8802b17 	ldw	r2,172(sp)
   8ff60:	28adc83a 	sub	r22,r5,r2
   8ff64:	05802f0e 	bge	zero,r22,90024 <___svfprintf_internal_r+0x95c>
   8ff68:	07000404 	movi	fp,16
   8ff6c:	d8801f17 	ldw	r2,124(sp)
   8ff70:	e583e20e 	bge	fp,r22,90efc <___svfprintf_internal_r+0x1834>
   8ff74:	014002b4 	movhi	r5,10
   8ff78:	29799f84 	addi	r5,r5,-6530
   8ff7c:	dc402a15 	stw	r17,168(sp)
   8ff80:	d9402c15 	stw	r5,176(sp)
   8ff84:	b023883a 	mov	r17,r22
   8ff88:	050001c4 	movi	r20,7
   8ff8c:	902d883a 	mov	r22,r18
   8ff90:	8025883a 	mov	r18,r16
   8ff94:	dc002d17 	ldw	r16,180(sp)
   8ff98:	00000306 	br	8ffa8 <___svfprintf_internal_r+0x8e0>
   8ff9c:	8c7ffc04 	addi	r17,r17,-16
   8ffa0:	42000204 	addi	r8,r8,8
   8ffa4:	e440110e 	bge	fp,r17,8ffec <___svfprintf_internal_r+0x924>
   8ffa8:	18c00404 	addi	r3,r3,16
   8ffac:	10800044 	addi	r2,r2,1
   8ffb0:	45400015 	stw	r21,0(r8)
   8ffb4:	47000115 	stw	fp,4(r8)
   8ffb8:	d8c02015 	stw	r3,128(sp)
   8ffbc:	d8801f15 	stw	r2,124(sp)
   8ffc0:	a0bff60e 	bge	r20,r2,8ff9c <__ram_exceptions_end+0xfff6fd68>
   8ffc4:	d9801e04 	addi	r6,sp,120
   8ffc8:	800b883a 	mov	r5,r16
   8ffcc:	9809883a 	mov	r4,r19
   8ffd0:	00945680 	call	94568 <__ssprint_r>
   8ffd4:	103ea31e 	bne	r2,zero,8fa64 <__ram_exceptions_end+0xfff6f830>
   8ffd8:	8c7ffc04 	addi	r17,r17,-16
   8ffdc:	d8c02017 	ldw	r3,128(sp)
   8ffe0:	d8801f17 	ldw	r2,124(sp)
   8ffe4:	da000404 	addi	r8,sp,16
   8ffe8:	e47fef16 	blt	fp,r17,8ffa8 <__ram_exceptions_end+0xfff6fd74>
   8ffec:	9021883a 	mov	r16,r18
   8fff0:	b025883a 	mov	r18,r22
   8fff4:	882d883a 	mov	r22,r17
   8fff8:	dc402a17 	ldw	r17,168(sp)
   8fffc:	d9002c17 	ldw	r4,176(sp)
   90000:	1d87883a 	add	r3,r3,r22
   90004:	10800044 	addi	r2,r2,1
   90008:	41000015 	stw	r4,0(r8)
   9000c:	45800115 	stw	r22,4(r8)
   90010:	d8c02015 	stw	r3,128(sp)
   90014:	d8801f15 	stw	r2,124(sp)
   90018:	010001c4 	movi	r4,7
   9001c:	20820e16 	blt	r4,r2,90858 <___svfprintf_internal_r+0x1190>
   90020:	42000204 	addi	r8,r8,8
   90024:	9080400c 	andi	r2,r18,256
   90028:	10013a1e 	bne	r2,zero,90514 <___svfprintf_internal_r+0xe4c>
   9002c:	d9402b17 	ldw	r5,172(sp)
   90030:	d8801f17 	ldw	r2,124(sp)
   90034:	44000015 	stw	r16,0(r8)
   90038:	1947883a 	add	r3,r3,r5
   9003c:	10800044 	addi	r2,r2,1
   90040:	41400115 	stw	r5,4(r8)
   90044:	d8c02015 	stw	r3,128(sp)
   90048:	d8801f15 	stw	r2,124(sp)
   9004c:	010001c4 	movi	r4,7
   90050:	2081f316 	blt	r4,r2,90820 <___svfprintf_internal_r+0x1158>
   90054:	42000204 	addi	r8,r8,8
   90058:	9480010c 	andi	r18,r18,4
   9005c:	90003226 	beq	r18,zero,90128 <___svfprintf_internal_r+0xa60>
   90060:	d9403117 	ldw	r5,196(sp)
   90064:	d8802917 	ldw	r2,164(sp)
   90068:	28a1c83a 	sub	r16,r5,r2
   9006c:	04002e0e 	bge	zero,r16,90128 <___svfprintf_internal_r+0xa60>
   90070:	04400404 	movi	r17,16
   90074:	d8801f17 	ldw	r2,124(sp)
   90078:	8c04db0e 	bge	r17,r16,913e8 <___svfprintf_internal_r+0x1d20>
   9007c:	014002b4 	movhi	r5,10
   90080:	2979a384 	addi	r5,r5,-6514
   90084:	d9403515 	stw	r5,212(sp)
   90088:	048001c4 	movi	r18,7
   9008c:	dd002d17 	ldw	r20,180(sp)
   90090:	00000306 	br	900a0 <___svfprintf_internal_r+0x9d8>
   90094:	843ffc04 	addi	r16,r16,-16
   90098:	42000204 	addi	r8,r8,8
   9009c:	8c00130e 	bge	r17,r16,900ec <___svfprintf_internal_r+0xa24>
   900a0:	010002b4 	movhi	r4,10
   900a4:	18c00404 	addi	r3,r3,16
   900a8:	10800044 	addi	r2,r2,1
   900ac:	2139a384 	addi	r4,r4,-6514
   900b0:	41000015 	stw	r4,0(r8)
   900b4:	44400115 	stw	r17,4(r8)
   900b8:	d8c02015 	stw	r3,128(sp)
   900bc:	d8801f15 	stw	r2,124(sp)
   900c0:	90bff40e 	bge	r18,r2,90094 <__ram_exceptions_end+0xfff6fe60>
   900c4:	d9801e04 	addi	r6,sp,120
   900c8:	a00b883a 	mov	r5,r20
   900cc:	9809883a 	mov	r4,r19
   900d0:	00945680 	call	94568 <__ssprint_r>
   900d4:	103e631e 	bne	r2,zero,8fa64 <__ram_exceptions_end+0xfff6f830>
   900d8:	843ffc04 	addi	r16,r16,-16
   900dc:	d8c02017 	ldw	r3,128(sp)
   900e0:	d8801f17 	ldw	r2,124(sp)
   900e4:	da000404 	addi	r8,sp,16
   900e8:	8c3fed16 	blt	r17,r16,900a0 <__ram_exceptions_end+0xfff6fe6c>
   900ec:	d9403517 	ldw	r5,212(sp)
   900f0:	1c07883a 	add	r3,r3,r16
   900f4:	10800044 	addi	r2,r2,1
   900f8:	41400015 	stw	r5,0(r8)
   900fc:	44000115 	stw	r16,4(r8)
   90100:	d8c02015 	stw	r3,128(sp)
   90104:	d8801f15 	stw	r2,124(sp)
   90108:	010001c4 	movi	r4,7
   9010c:	2080060e 	bge	r4,r2,90128 <___svfprintf_internal_r+0xa60>
   90110:	d9402d17 	ldw	r5,180(sp)
   90114:	d9801e04 	addi	r6,sp,120
   90118:	9809883a 	mov	r4,r19
   9011c:	00945680 	call	94568 <__ssprint_r>
   90120:	103e501e 	bne	r2,zero,8fa64 <__ram_exceptions_end+0xfff6f830>
   90124:	d8c02017 	ldw	r3,128(sp)
   90128:	d8803117 	ldw	r2,196(sp)
   9012c:	d9002917 	ldw	r4,164(sp)
   90130:	1100010e 	bge	r2,r4,90138 <___svfprintf_internal_r+0xa70>
   90134:	2005883a 	mov	r2,r4
   90138:	d9402f17 	ldw	r5,188(sp)
   9013c:	288b883a 	add	r5,r5,r2
   90140:	d9402f15 	stw	r5,188(sp)
   90144:	1801be1e 	bne	r3,zero,90840 <___svfprintf_internal_r+0x1178>
   90148:	b8800007 	ldb	r2,0(r23)
   9014c:	d8001f15 	stw	zero,124(sp)
   90150:	da000404 	addi	r8,sp,16
   90154:	103d891e 	bne	r2,zero,8f77c <__ram_exceptions_end+0xfff6f548>
   90158:	b823883a 	mov	r17,r23
   9015c:	003d9f06 	br	8f7dc <__ram_exceptions_end+0xfff6f5a8>
   90160:	8025883a 	mov	r18,r16
   90164:	dc002903 	ldbu	r16,164(sp)
   90168:	e011883a 	mov	r8,fp
   9016c:	84003fcc 	andi	r16,r16,255
   90170:	8005e61e 	bne	r16,zero,9190c <___svfprintf_internal_r+0x2244>
   90174:	94800414 	ori	r18,r18,16
   90178:	9080080c 	andi	r2,r18,32
   9017c:	10022026 	beq	r2,zero,90a00 <___svfprintf_internal_r+0x1338>
   90180:	d9002e17 	ldw	r4,184(sp)
   90184:	d9402a17 	ldw	r5,168(sp)
   90188:	d8002785 	stb	zero,158(sp)
   9018c:	20c00204 	addi	r3,r4,8
   90190:	25000017 	ldw	r20,0(r4)
   90194:	25800117 	ldw	r22,4(r4)
   90198:	2803ad16 	blt	r5,zero,91050 <___svfprintf_internal_r+0x1988>
   9019c:	013fdfc4 	movi	r4,-129
   901a0:	a584b03a 	or	r2,r20,r22
   901a4:	d8c02e15 	stw	r3,184(sp)
   901a8:	9124703a 	and	r18,r18,r4
   901ac:	0039883a 	mov	fp,zero
   901b0:	103eb01e 	bne	r2,zero,8fc74 <__ram_exceptions_end+0xfff6fa40>
   901b4:	d8802a17 	ldw	r2,168(sp)
   901b8:	1002e71e 	bne	r2,zero,90d58 <___svfprintf_internal_r+0x1690>
   901bc:	d8002a15 	stw	zero,168(sp)
   901c0:	d8002b15 	stw	zero,172(sp)
   901c4:	dc001e04 	addi	r16,sp,120
   901c8:	003ef706 	br	8fda8 <__ram_exceptions_end+0xfff6fb74>
   901cc:	8025883a 	mov	r18,r16
   901d0:	dc002903 	ldbu	r16,164(sp)
   901d4:	e011883a 	mov	r8,fp
   901d8:	84003fcc 	andi	r16,r16,255
   901dc:	8005c81e 	bne	r16,zero,91900 <___svfprintf_internal_r+0x2238>
   901e0:	010002b4 	movhi	r4,10
   901e4:	21387a04 	addi	r4,r4,-7704
   901e8:	d9003a15 	stw	r4,232(sp)
   901ec:	9080080c 	andi	r2,r18,32
   901f0:	10007226 	beq	r2,zero,903bc <___svfprintf_internal_r+0xcf4>
   901f4:	d9402e17 	ldw	r5,184(sp)
   901f8:	2d000017 	ldw	r20,0(r5)
   901fc:	2d800117 	ldw	r22,4(r5)
   90200:	29400204 	addi	r5,r5,8
   90204:	d9402e15 	stw	r5,184(sp)
   90208:	9080004c 	andi	r2,r18,1
   9020c:	1001aa26 	beq	r2,zero,908b8 <___svfprintf_internal_r+0x11f0>
   90210:	a584b03a 	or	r2,r20,r22
   90214:	10032526 	beq	r2,zero,90eac <___svfprintf_internal_r+0x17e4>
   90218:	d8c02a17 	ldw	r3,168(sp)
   9021c:	00800c04 	movi	r2,48
   90220:	d8802705 	stb	r2,156(sp)
   90224:	dc402745 	stb	r17,157(sp)
   90228:	d8002785 	stb	zero,158(sp)
   9022c:	90800094 	ori	r2,r18,2
   90230:	1804a316 	blt	r3,zero,914c0 <___svfprintf_internal_r+0x1df8>
   90234:	00bfdfc4 	movi	r2,-129
   90238:	90a4703a 	and	r18,r18,r2
   9023c:	94800094 	ori	r18,r18,2
   90240:	0039883a 	mov	fp,zero
   90244:	d9003a17 	ldw	r4,232(sp)
   90248:	dc001e04 	addi	r16,sp,120
   9024c:	a08003cc 	andi	r2,r20,15
   90250:	b006973a 	slli	r3,r22,28
   90254:	2085883a 	add	r2,r4,r2
   90258:	a028d13a 	srli	r20,r20,4
   9025c:	10800003 	ldbu	r2,0(r2)
   90260:	b02cd13a 	srli	r22,r22,4
   90264:	843fffc4 	addi	r16,r16,-1
   90268:	1d28b03a 	or	r20,r3,r20
   9026c:	80800005 	stb	r2,0(r16)
   90270:	a584b03a 	or	r2,r20,r22
   90274:	103ff51e 	bne	r2,zero,9024c <__ram_exceptions_end+0xfff70018>
   90278:	d8c02817 	ldw	r3,160(sp)
   9027c:	1c07c83a 	sub	r3,r3,r16
   90280:	d8c02b15 	stw	r3,172(sp)
   90284:	003ec806 	br	8fda8 <__ram_exceptions_end+0xfff6fb74>
   90288:	d8c02e17 	ldw	r3,184(sp)
   9028c:	d9002e17 	ldw	r4,184(sp)
   90290:	8025883a 	mov	r18,r16
   90294:	18800017 	ldw	r2,0(r3)
   90298:	21000104 	addi	r4,r4,4
   9029c:	00c00044 	movi	r3,1
   902a0:	e011883a 	mov	r8,fp
   902a4:	d8c02915 	stw	r3,164(sp)
   902a8:	d8002785 	stb	zero,158(sp)
   902ac:	d8801405 	stb	r2,80(sp)
   902b0:	d9002e15 	stw	r4,184(sp)
   902b4:	d8c02b15 	stw	r3,172(sp)
   902b8:	d8002a15 	stw	zero,168(sp)
   902bc:	d8003215 	stw	zero,200(sp)
   902c0:	dc001404 	addi	r16,sp,80
   902c4:	0039883a 	mov	fp,zero
   902c8:	003ec406 	br	8fddc <__ram_exceptions_end+0xfff6fba8>
   902cc:	8025883a 	mov	r18,r16
   902d0:	dc002903 	ldbu	r16,164(sp)
   902d4:	e011883a 	mov	r8,fp
   902d8:	84003fcc 	andi	r16,r16,255
   902dc:	803e8726 	beq	r16,zero,8fcfc <__ram_exceptions_end+0xfff6fac8>
   902e0:	d8c02b03 	ldbu	r3,172(sp)
   902e4:	d8c02785 	stb	r3,158(sp)
   902e8:	003e8406 	br	8fcfc <__ram_exceptions_end+0xfff6fac8>
   902ec:	00c00044 	movi	r3,1
   902f0:	d8c02905 	stb	r3,164(sp)
   902f4:	00c00ac4 	movi	r3,43
   902f8:	d8c02b05 	stb	r3,172(sp)
   902fc:	bc400007 	ldb	r17,0(r23)
   90300:	003d4606 	br	8f81c <__ram_exceptions_end+0xfff6f5e8>
   90304:	84000814 	ori	r16,r16,32
   90308:	bc400007 	ldb	r17,0(r23)
   9030c:	003d4306 	br	8f81c <__ram_exceptions_end+0xfff6f5e8>
   90310:	d8802e17 	ldw	r2,184(sp)
   90314:	8025883a 	mov	r18,r16
   90318:	d8002785 	stb	zero,158(sp)
   9031c:	14000017 	ldw	r16,0(r2)
   90320:	e011883a 	mov	r8,fp
   90324:	15000104 	addi	r20,r2,4
   90328:	80042126 	beq	r16,zero,913b0 <___svfprintf_internal_r+0x1ce8>
   9032c:	d8c02a17 	ldw	r3,168(sp)
   90330:	1803ee16 	blt	r3,zero,912ec <___svfprintf_internal_r+0x1c24>
   90334:	180d883a 	mov	r6,r3
   90338:	000b883a 	mov	r5,zero
   9033c:	8009883a 	mov	r4,r16
   90340:	df003e15 	stw	fp,248(sp)
   90344:	008a0500 	call	8a050 <memchr>
   90348:	da003e17 	ldw	r8,248(sp)
   9034c:	10046a26 	beq	r2,zero,914f8 <___svfprintf_internal_r+0x1e30>
   90350:	1405c83a 	sub	r2,r2,r16
   90354:	d8802b15 	stw	r2,172(sp)
   90358:	1003ea16 	blt	r2,zero,91304 <___svfprintf_internal_r+0x1c3c>
   9035c:	df002783 	ldbu	fp,158(sp)
   90360:	d8802915 	stw	r2,164(sp)
   90364:	dd002e15 	stw	r20,184(sp)
   90368:	d8002a15 	stw	zero,168(sp)
   9036c:	d8003215 	stw	zero,200(sp)
   90370:	003e9306 	br	8fdc0 <__ram_exceptions_end+0xfff6fb8c>
   90374:	8025883a 	mov	r18,r16
   90378:	dc002903 	ldbu	r16,164(sp)
   9037c:	e011883a 	mov	r8,fp
   90380:	84003fcc 	andi	r16,r16,255
   90384:	803f7c26 	beq	r16,zero,90178 <__ram_exceptions_end+0xfff6ff44>
   90388:	d8c02b03 	ldbu	r3,172(sp)
   9038c:	d8c02785 	stb	r3,158(sp)
   90390:	003f7906 	br	90178 <__ram_exceptions_end+0xfff6ff44>
   90394:	8025883a 	mov	r18,r16
   90398:	dc002903 	ldbu	r16,164(sp)
   9039c:	e011883a 	mov	r8,fp
   903a0:	84003fcc 	andi	r16,r16,255
   903a4:	8005741e 	bne	r16,zero,91978 <___svfprintf_internal_r+0x22b0>
   903a8:	010002b4 	movhi	r4,10
   903ac:	21387f04 	addi	r4,r4,-7684
   903b0:	d9003a15 	stw	r4,232(sp)
   903b4:	9080080c 	andi	r2,r18,32
   903b8:	103f8e1e 	bne	r2,zero,901f4 <__ram_exceptions_end+0xfff6ffc0>
   903bc:	9080040c 	andi	r2,r18,16
   903c0:	1002a726 	beq	r2,zero,90e60 <___svfprintf_internal_r+0x1798>
   903c4:	d8802e17 	ldw	r2,184(sp)
   903c8:	002d883a 	mov	r22,zero
   903cc:	15000017 	ldw	r20,0(r2)
   903d0:	10800104 	addi	r2,r2,4
   903d4:	d8802e15 	stw	r2,184(sp)
   903d8:	003f8b06 	br	90208 <__ram_exceptions_end+0xfff6ffd4>
   903dc:	84000054 	ori	r16,r16,1
   903e0:	bc400007 	ldb	r17,0(r23)
   903e4:	003d0d06 	br	8f81c <__ram_exceptions_end+0xfff6f5e8>
   903e8:	d8802b07 	ldb	r2,172(sp)
   903ec:	1002a41e 	bne	r2,zero,90e80 <___svfprintf_internal_r+0x17b8>
   903f0:	00c00044 	movi	r3,1
   903f4:	d8c02905 	stb	r3,164(sp)
   903f8:	00c00804 	movi	r3,32
   903fc:	d8c02b05 	stb	r3,172(sp)
   90400:	bc400007 	ldb	r17,0(r23)
   90404:	003d0506 	br	8f81c <__ram_exceptions_end+0xfff6f5e8>
   90408:	8025883a 	mov	r18,r16
   9040c:	dc002903 	ldbu	r16,164(sp)
   90410:	e011883a 	mov	r8,fp
   90414:	84003fcc 	andi	r16,r16,255
   90418:	803e0626 	beq	r16,zero,8fc34 <__ram_exceptions_end+0xfff6fa00>
   9041c:	d8c02b03 	ldbu	r3,172(sp)
   90420:	d8c02785 	stb	r3,158(sp)
   90424:	003e0306 	br	8fc34 <__ram_exceptions_end+0xfff6fa00>
   90428:	bc400007 	ldb	r17,0(r23)
   9042c:	00801b04 	movi	r2,108
   90430:	88830a26 	beq	r17,r2,9105c <___svfprintf_internal_r+0x1994>
   90434:	84000414 	ori	r16,r16,16
   90438:	003cf806 	br	8f81c <__ram_exceptions_end+0xfff6f5e8>
   9043c:	8025883a 	mov	r18,r16
   90440:	dc002903 	ldbu	r16,164(sp)
   90444:	e011883a 	mov	r8,fp
   90448:	84003fcc 	andi	r16,r16,255
   9044c:	8005471e 	bne	r16,zero,9196c <___svfprintf_internal_r+0x22a4>
   90450:	9080080c 	andi	r2,r18,32
   90454:	10028c26 	beq	r2,zero,90e88 <___svfprintf_internal_r+0x17c0>
   90458:	d9002e17 	ldw	r4,184(sp)
   9045c:	d9402f17 	ldw	r5,188(sp)
   90460:	20800017 	ldw	r2,0(r4)
   90464:	2807d7fa 	srai	r3,r5,31
   90468:	21000104 	addi	r4,r4,4
   9046c:	d9002e15 	stw	r4,184(sp)
   90470:	11400015 	stw	r5,0(r2)
   90474:	10c00115 	stw	r3,4(r2)
   90478:	003cbe06 	br	8f774 <__ram_exceptions_end+0xfff6f540>
   9047c:	84001014 	ori	r16,r16,64
   90480:	bc400007 	ldb	r17,0(r23)
   90484:	003ce506 	br	8f81c <__ram_exceptions_end+0xfff6f5e8>
   90488:	010002b4 	movhi	r4,10
   9048c:	21387f04 	addi	r4,r4,-7684
   90490:	0039883a 	mov	fp,zero
   90494:	d9003a15 	stw	r4,232(sp)
   90498:	04401e04 	movi	r17,120
   9049c:	003f6906 	br	90244 <__ram_exceptions_end+0xfff70010>
   904a0:	8025883a 	mov	r18,r16
   904a4:	dc002903 	ldbu	r16,164(sp)
   904a8:	e011883a 	mov	r8,fp
   904ac:	84003fcc 	andi	r16,r16,255
   904b0:	8005261e 	bne	r16,zero,9194c <___svfprintf_internal_r+0x2284>
   904b4:	883d6526 	beq	r17,zero,8fa4c <__ram_exceptions_end+0xfff6f818>
   904b8:	00c00044 	movi	r3,1
   904bc:	d8c02915 	stw	r3,164(sp)
   904c0:	dc401405 	stb	r17,80(sp)
   904c4:	d8002785 	stb	zero,158(sp)
   904c8:	003f7a06 	br	902b4 <__ram_exceptions_end+0xfff70080>
   904cc:	010002b4 	movhi	r4,10
   904d0:	21387f04 	addi	r4,r4,-7684
   904d4:	d9003a15 	stw	r4,232(sp)
   904d8:	d8c02e15 	stw	r3,184(sp)
   904dc:	1025883a 	mov	r18,r2
   904e0:	04401e04 	movi	r17,120
   904e4:	a584b03a 	or	r2,r20,r22
   904e8:	1000fa1e 	bne	r2,zero,908d4 <___svfprintf_internal_r+0x120c>
   904ec:	0039883a 	mov	fp,zero
   904f0:	00800084 	movi	r2,2
   904f4:	10803fcc 	andi	r2,r2,255
   904f8:	00c00044 	movi	r3,1
   904fc:	10c21626 	beq	r2,r3,90d58 <___svfprintf_internal_r+0x1690>
   90500:	00c00084 	movi	r3,2
   90504:	10fe0e1e 	bne	r2,r3,8fd40 <__ram_exceptions_end+0xfff6fb0c>
   90508:	003d4606 	br	8fa24 <__ram_exceptions_end+0xfff6f7f0>
   9050c:	d8c02017 	ldw	r3,128(sp)
   90510:	003e7306 	br	8fee0 <__ram_exceptions_end+0xfff6fcac>
   90514:	00801944 	movi	r2,101
   90518:	14407c0e 	bge	r2,r17,9070c <___svfprintf_internal_r+0x1044>
   9051c:	d9003617 	ldw	r4,216(sp)
   90520:	d9403717 	ldw	r5,220(sp)
   90524:	000d883a 	mov	r6,zero
   90528:	000f883a 	mov	r7,zero
   9052c:	d8c03d15 	stw	r3,244(sp)
   90530:	da003e15 	stw	r8,248(sp)
   90534:	0097e780 	call	97e78 <__eqdf2>
   90538:	d8c03d17 	ldw	r3,244(sp)
   9053c:	da003e17 	ldw	r8,248(sp)
   90540:	1000f51e 	bne	r2,zero,90918 <___svfprintf_internal_r+0x1250>
   90544:	d8801f17 	ldw	r2,124(sp)
   90548:	010002b4 	movhi	r4,10
   9054c:	21388604 	addi	r4,r4,-7656
   90550:	18c00044 	addi	r3,r3,1
   90554:	10800044 	addi	r2,r2,1
   90558:	41000015 	stw	r4,0(r8)
   9055c:	01000044 	movi	r4,1
   90560:	41000115 	stw	r4,4(r8)
   90564:	d8c02015 	stw	r3,128(sp)
   90568:	d8801f15 	stw	r2,124(sp)
   9056c:	010001c4 	movi	r4,7
   90570:	20826616 	blt	r4,r2,90f0c <___svfprintf_internal_r+0x1844>
   90574:	42000204 	addi	r8,r8,8
   90578:	d8802617 	ldw	r2,152(sp)
   9057c:	d9403317 	ldw	r5,204(sp)
   90580:	11400216 	blt	r2,r5,9058c <___svfprintf_internal_r+0xec4>
   90584:	9080004c 	andi	r2,r18,1
   90588:	103eb326 	beq	r2,zero,90058 <__ram_exceptions_end+0xfff6fe24>
   9058c:	d8803817 	ldw	r2,224(sp)
   90590:	d9003417 	ldw	r4,208(sp)
   90594:	d9403817 	ldw	r5,224(sp)
   90598:	1887883a 	add	r3,r3,r2
   9059c:	d8801f17 	ldw	r2,124(sp)
   905a0:	41000015 	stw	r4,0(r8)
   905a4:	41400115 	stw	r5,4(r8)
   905a8:	10800044 	addi	r2,r2,1
   905ac:	d8c02015 	stw	r3,128(sp)
   905b0:	d8801f15 	stw	r2,124(sp)
   905b4:	010001c4 	movi	r4,7
   905b8:	2082af16 	blt	r4,r2,91078 <___svfprintf_internal_r+0x19b0>
   905bc:	42000204 	addi	r8,r8,8
   905c0:	d8803317 	ldw	r2,204(sp)
   905c4:	143fffc4 	addi	r16,r2,-1
   905c8:	043ea30e 	bge	zero,r16,90058 <__ram_exceptions_end+0xfff6fe24>
   905cc:	04400404 	movi	r17,16
   905d0:	d8801f17 	ldw	r2,124(sp)
   905d4:	8c00860e 	bge	r17,r16,907f0 <___svfprintf_internal_r+0x1128>
   905d8:	014002b4 	movhi	r5,10
   905dc:	29799f84 	addi	r5,r5,-6530
   905e0:	d9402c15 	stw	r5,176(sp)
   905e4:	058001c4 	movi	r22,7
   905e8:	dd002d17 	ldw	r20,180(sp)
   905ec:	00000306 	br	905fc <___svfprintf_internal_r+0xf34>
   905f0:	42000204 	addi	r8,r8,8
   905f4:	843ffc04 	addi	r16,r16,-16
   905f8:	8c00800e 	bge	r17,r16,907fc <___svfprintf_internal_r+0x1134>
   905fc:	18c00404 	addi	r3,r3,16
   90600:	10800044 	addi	r2,r2,1
   90604:	45400015 	stw	r21,0(r8)
   90608:	44400115 	stw	r17,4(r8)
   9060c:	d8c02015 	stw	r3,128(sp)
   90610:	d8801f15 	stw	r2,124(sp)
   90614:	b0bff60e 	bge	r22,r2,905f0 <__ram_exceptions_end+0xfff703bc>
   90618:	d9801e04 	addi	r6,sp,120
   9061c:	a00b883a 	mov	r5,r20
   90620:	9809883a 	mov	r4,r19
   90624:	00945680 	call	94568 <__ssprint_r>
   90628:	103d0e1e 	bne	r2,zero,8fa64 <__ram_exceptions_end+0xfff6f830>
   9062c:	d8c02017 	ldw	r3,128(sp)
   90630:	d8801f17 	ldw	r2,124(sp)
   90634:	da000404 	addi	r8,sp,16
   90638:	003fee06 	br	905f4 <__ram_exceptions_end+0xfff703c0>
   9063c:	d9403117 	ldw	r5,196(sp)
   90640:	d8802917 	ldw	r2,164(sp)
   90644:	28adc83a 	sub	r22,r5,r2
   90648:	05be430e 	bge	zero,r22,8ff58 <__ram_exceptions_end+0xfff6fd24>
   9064c:	07000404 	movi	fp,16
   90650:	d8801f17 	ldw	r2,124(sp)
   90654:	e583a20e 	bge	fp,r22,914e0 <___svfprintf_internal_r+0x1e18>
   90658:	014002b4 	movhi	r5,10
   9065c:	29799f84 	addi	r5,r5,-6530
   90660:	dc403015 	stw	r17,192(sp)
   90664:	d9402c15 	stw	r5,176(sp)
   90668:	b023883a 	mov	r17,r22
   9066c:	050001c4 	movi	r20,7
   90670:	902d883a 	mov	r22,r18
   90674:	8025883a 	mov	r18,r16
   90678:	dc002d17 	ldw	r16,180(sp)
   9067c:	00000306 	br	9068c <___svfprintf_internal_r+0xfc4>
   90680:	8c7ffc04 	addi	r17,r17,-16
   90684:	42000204 	addi	r8,r8,8
   90688:	e440110e 	bge	fp,r17,906d0 <___svfprintf_internal_r+0x1008>
   9068c:	18c00404 	addi	r3,r3,16
   90690:	10800044 	addi	r2,r2,1
   90694:	45400015 	stw	r21,0(r8)
   90698:	47000115 	stw	fp,4(r8)
   9069c:	d8c02015 	stw	r3,128(sp)
   906a0:	d8801f15 	stw	r2,124(sp)
   906a4:	a0bff60e 	bge	r20,r2,90680 <__ram_exceptions_end+0xfff7044c>
   906a8:	d9801e04 	addi	r6,sp,120
   906ac:	800b883a 	mov	r5,r16
   906b0:	9809883a 	mov	r4,r19
   906b4:	00945680 	call	94568 <__ssprint_r>
   906b8:	103cea1e 	bne	r2,zero,8fa64 <__ram_exceptions_end+0xfff6f830>
   906bc:	8c7ffc04 	addi	r17,r17,-16
   906c0:	d8c02017 	ldw	r3,128(sp)
   906c4:	d8801f17 	ldw	r2,124(sp)
   906c8:	da000404 	addi	r8,sp,16
   906cc:	e47fef16 	blt	fp,r17,9068c <__ram_exceptions_end+0xfff70458>
   906d0:	9021883a 	mov	r16,r18
   906d4:	b025883a 	mov	r18,r22
   906d8:	882d883a 	mov	r22,r17
   906dc:	dc403017 	ldw	r17,192(sp)
   906e0:	d9002c17 	ldw	r4,176(sp)
   906e4:	1d87883a 	add	r3,r3,r22
   906e8:	10800044 	addi	r2,r2,1
   906ec:	41000015 	stw	r4,0(r8)
   906f0:	45800115 	stw	r22,4(r8)
   906f4:	d8c02015 	stw	r3,128(sp)
   906f8:	d8801f15 	stw	r2,124(sp)
   906fc:	010001c4 	movi	r4,7
   90700:	20819a16 	blt	r4,r2,90d6c <___svfprintf_internal_r+0x16a4>
   90704:	42000204 	addi	r8,r8,8
   90708:	003e1306 	br	8ff58 <__ram_exceptions_end+0xfff6fd24>
   9070c:	d9403317 	ldw	r5,204(sp)
   90710:	00800044 	movi	r2,1
   90714:	18c00044 	addi	r3,r3,1
   90718:	1141710e 	bge	r2,r5,90ce0 <___svfprintf_internal_r+0x1618>
   9071c:	dc401f17 	ldw	r17,124(sp)
   90720:	00800044 	movi	r2,1
   90724:	40800115 	stw	r2,4(r8)
   90728:	8c400044 	addi	r17,r17,1
   9072c:	44000015 	stw	r16,0(r8)
   90730:	d8c02015 	stw	r3,128(sp)
   90734:	dc401f15 	stw	r17,124(sp)
   90738:	008001c4 	movi	r2,7
   9073c:	14417416 	blt	r2,r17,90d10 <___svfprintf_internal_r+0x1648>
   90740:	42000204 	addi	r8,r8,8
   90744:	d8803817 	ldw	r2,224(sp)
   90748:	d9003417 	ldw	r4,208(sp)
   9074c:	8c400044 	addi	r17,r17,1
   90750:	10c7883a 	add	r3,r2,r3
   90754:	40800115 	stw	r2,4(r8)
   90758:	41000015 	stw	r4,0(r8)
   9075c:	d8c02015 	stw	r3,128(sp)
   90760:	dc401f15 	stw	r17,124(sp)
   90764:	008001c4 	movi	r2,7
   90768:	14417216 	blt	r2,r17,90d34 <___svfprintf_internal_r+0x166c>
   9076c:	45800204 	addi	r22,r8,8
   90770:	d9003617 	ldw	r4,216(sp)
   90774:	d9403717 	ldw	r5,220(sp)
   90778:	000d883a 	mov	r6,zero
   9077c:	000f883a 	mov	r7,zero
   90780:	d8c03d15 	stw	r3,244(sp)
   90784:	0097e780 	call	97e78 <__eqdf2>
   90788:	d8c03d17 	ldw	r3,244(sp)
   9078c:	1000b326 	beq	r2,zero,90a5c <___svfprintf_internal_r+0x1394>
   90790:	d9403317 	ldw	r5,204(sp)
   90794:	84000044 	addi	r16,r16,1
   90798:	8c400044 	addi	r17,r17,1
   9079c:	28bfffc4 	addi	r2,r5,-1
   907a0:	1887883a 	add	r3,r3,r2
   907a4:	b0800115 	stw	r2,4(r22)
   907a8:	b4000015 	stw	r16,0(r22)
   907ac:	d8c02015 	stw	r3,128(sp)
   907b0:	dc401f15 	stw	r17,124(sp)
   907b4:	008001c4 	movi	r2,7
   907b8:	1440d216 	blt	r2,r17,90b04 <___svfprintf_internal_r+0x143c>
   907bc:	b5800204 	addi	r22,r22,8
   907c0:	d9003b17 	ldw	r4,236(sp)
   907c4:	df0022c4 	addi	fp,sp,139
   907c8:	8c400044 	addi	r17,r17,1
   907cc:	20c7883a 	add	r3,r4,r3
   907d0:	b7000015 	stw	fp,0(r22)
   907d4:	b1000115 	stw	r4,4(r22)
   907d8:	d8c02015 	stw	r3,128(sp)
   907dc:	dc401f15 	stw	r17,124(sp)
   907e0:	008001c4 	movi	r2,7
   907e4:	14400e16 	blt	r2,r17,90820 <___svfprintf_internal_r+0x1158>
   907e8:	b2000204 	addi	r8,r22,8
   907ec:	003e1a06 	br	90058 <__ram_exceptions_end+0xfff6fe24>
   907f0:	010002b4 	movhi	r4,10
   907f4:	21399f84 	addi	r4,r4,-6530
   907f8:	d9002c15 	stw	r4,176(sp)
   907fc:	d9002c17 	ldw	r4,176(sp)
   90800:	1c07883a 	add	r3,r3,r16
   90804:	44000115 	stw	r16,4(r8)
   90808:	41000015 	stw	r4,0(r8)
   9080c:	10800044 	addi	r2,r2,1
   90810:	d8c02015 	stw	r3,128(sp)
   90814:	d8801f15 	stw	r2,124(sp)
   90818:	010001c4 	movi	r4,7
   9081c:	20be0d0e 	bge	r4,r2,90054 <__ram_exceptions_end+0xfff6fe20>
   90820:	d9402d17 	ldw	r5,180(sp)
   90824:	d9801e04 	addi	r6,sp,120
   90828:	9809883a 	mov	r4,r19
   9082c:	00945680 	call	94568 <__ssprint_r>
   90830:	103c8c1e 	bne	r2,zero,8fa64 <__ram_exceptions_end+0xfff6f830>
   90834:	d8c02017 	ldw	r3,128(sp)
   90838:	da000404 	addi	r8,sp,16
   9083c:	003e0606 	br	90058 <__ram_exceptions_end+0xfff6fe24>
   90840:	d9402d17 	ldw	r5,180(sp)
   90844:	d9801e04 	addi	r6,sp,120
   90848:	9809883a 	mov	r4,r19
   9084c:	00945680 	call	94568 <__ssprint_r>
   90850:	103e3d26 	beq	r2,zero,90148 <__ram_exceptions_end+0xfff6ff14>
   90854:	003c8306 	br	8fa64 <__ram_exceptions_end+0xfff6f830>
   90858:	d9402d17 	ldw	r5,180(sp)
   9085c:	d9801e04 	addi	r6,sp,120
   90860:	9809883a 	mov	r4,r19
   90864:	00945680 	call	94568 <__ssprint_r>
   90868:	103c7e1e 	bne	r2,zero,8fa64 <__ram_exceptions_end+0xfff6f830>
   9086c:	d8c02017 	ldw	r3,128(sp)
   90870:	da000404 	addi	r8,sp,16
   90874:	003deb06 	br	90024 <__ram_exceptions_end+0xfff6fdf0>
   90878:	d9402d17 	ldw	r5,180(sp)
   9087c:	d9801e04 	addi	r6,sp,120
   90880:	9809883a 	mov	r4,r19
   90884:	00945680 	call	94568 <__ssprint_r>
   90888:	103c761e 	bne	r2,zero,8fa64 <__ram_exceptions_end+0xfff6f830>
   9088c:	d8c02017 	ldw	r3,128(sp)
   90890:	da000404 	addi	r8,sp,16
   90894:	003d9f06 	br	8ff14 <__ram_exceptions_end+0xfff6fce0>
   90898:	d9402d17 	ldw	r5,180(sp)
   9089c:	d9801e04 	addi	r6,sp,120
   908a0:	9809883a 	mov	r4,r19
   908a4:	00945680 	call	94568 <__ssprint_r>
   908a8:	103c6e1e 	bne	r2,zero,8fa64 <__ram_exceptions_end+0xfff6f830>
   908ac:	d8c02017 	ldw	r3,128(sp)
   908b0:	da000404 	addi	r8,sp,16
   908b4:	003da506 	br	8ff4c <__ram_exceptions_end+0xfff6fd18>
   908b8:	d9402a17 	ldw	r5,168(sp)
   908bc:	d8002785 	stb	zero,158(sp)
   908c0:	283f0816 	blt	r5,zero,904e4 <__ram_exceptions_end+0xfff702b0>
   908c4:	00ffdfc4 	movi	r3,-129
   908c8:	a584b03a 	or	r2,r20,r22
   908cc:	90e4703a 	and	r18,r18,r3
   908d0:	103c5126 	beq	r2,zero,8fa18 <__ram_exceptions_end+0xfff6f7e4>
   908d4:	0039883a 	mov	fp,zero
   908d8:	003e5a06 	br	90244 <__ram_exceptions_end+0xfff70010>
   908dc:	9080040c 	andi	r2,r18,16
   908e0:	10013d26 	beq	r2,zero,90dd8 <___svfprintf_internal_r+0x1710>
   908e4:	d8c02e17 	ldw	r3,184(sp)
   908e8:	d9002a17 	ldw	r4,168(sp)
   908ec:	d8002785 	stb	zero,158(sp)
   908f0:	18800104 	addi	r2,r3,4
   908f4:	1d000017 	ldw	r20,0(r3)
   908f8:	002d883a 	mov	r22,zero
   908fc:	20013f16 	blt	r4,zero,90dfc <___svfprintf_internal_r+0x1734>
   90900:	00ffdfc4 	movi	r3,-129
   90904:	d8802e15 	stw	r2,184(sp)
   90908:	90e4703a 	and	r18,r18,r3
   9090c:	a03d0926 	beq	r20,zero,8fd34 <__ram_exceptions_end+0xfff6fb00>
   90910:	0039883a 	mov	fp,zero
   90914:	003d0c06 	br	8fd48 <__ram_exceptions_end+0xfff6fb14>
   90918:	dc402617 	ldw	r17,152(sp)
   9091c:	0441830e 	bge	zero,r17,90f2c <___svfprintf_internal_r+0x1864>
   90920:	dc403217 	ldw	r17,200(sp)
   90924:	d8803317 	ldw	r2,204(sp)
   90928:	1440010e 	bge	r2,r17,90930 <___svfprintf_internal_r+0x1268>
   9092c:	1023883a 	mov	r17,r2
   90930:	04400a0e 	bge	zero,r17,9095c <___svfprintf_internal_r+0x1294>
   90934:	d8801f17 	ldw	r2,124(sp)
   90938:	1c47883a 	add	r3,r3,r17
   9093c:	44000015 	stw	r16,0(r8)
   90940:	10800044 	addi	r2,r2,1
   90944:	44400115 	stw	r17,4(r8)
   90948:	d8c02015 	stw	r3,128(sp)
   9094c:	d8801f15 	stw	r2,124(sp)
   90950:	010001c4 	movi	r4,7
   90954:	20827516 	blt	r4,r2,9132c <___svfprintf_internal_r+0x1c64>
   90958:	42000204 	addi	r8,r8,8
   9095c:	88027b16 	blt	r17,zero,9134c <___svfprintf_internal_r+0x1c84>
   90960:	d9003217 	ldw	r4,200(sp)
   90964:	2463c83a 	sub	r17,r4,r17
   90968:	0440990e 	bge	zero,r17,90bd0 <___svfprintf_internal_r+0x1508>
   9096c:	05800404 	movi	r22,16
   90970:	d8801f17 	ldw	r2,124(sp)
   90974:	b441530e 	bge	r22,r17,90ec4 <___svfprintf_internal_r+0x17fc>
   90978:	010002b4 	movhi	r4,10
   9097c:	21399f84 	addi	r4,r4,-6530
   90980:	d9002c15 	stw	r4,176(sp)
   90984:	070001c4 	movi	fp,7
   90988:	dd002d17 	ldw	r20,180(sp)
   9098c:	00000306 	br	9099c <___svfprintf_internal_r+0x12d4>
   90990:	42000204 	addi	r8,r8,8
   90994:	8c7ffc04 	addi	r17,r17,-16
   90998:	b4414d0e 	bge	r22,r17,90ed0 <___svfprintf_internal_r+0x1808>
   9099c:	18c00404 	addi	r3,r3,16
   909a0:	10800044 	addi	r2,r2,1
   909a4:	45400015 	stw	r21,0(r8)
   909a8:	45800115 	stw	r22,4(r8)
   909ac:	d8c02015 	stw	r3,128(sp)
   909b0:	d8801f15 	stw	r2,124(sp)
   909b4:	e0bff60e 	bge	fp,r2,90990 <__ram_exceptions_end+0xfff7075c>
   909b8:	d9801e04 	addi	r6,sp,120
   909bc:	a00b883a 	mov	r5,r20
   909c0:	9809883a 	mov	r4,r19
   909c4:	00945680 	call	94568 <__ssprint_r>
   909c8:	103c261e 	bne	r2,zero,8fa64 <__ram_exceptions_end+0xfff6f830>
   909cc:	d8c02017 	ldw	r3,128(sp)
   909d0:	d8801f17 	ldw	r2,124(sp)
   909d4:	da000404 	addi	r8,sp,16
   909d8:	003fee06 	br	90994 <__ram_exceptions_end+0xfff70760>
   909dc:	d9402d17 	ldw	r5,180(sp)
   909e0:	d9801e04 	addi	r6,sp,120
   909e4:	9809883a 	mov	r4,r19
   909e8:	00945680 	call	94568 <__ssprint_r>
   909ec:	103c1d1e 	bne	r2,zero,8fa64 <__ram_exceptions_end+0xfff6f830>
   909f0:	d8c02017 	ldw	r3,128(sp)
   909f4:	df002787 	ldb	fp,158(sp)
   909f8:	da000404 	addi	r8,sp,16
   909fc:	003d3806 	br	8fee0 <__ram_exceptions_end+0xfff6fcac>
   90a00:	9080040c 	andi	r2,r18,16
   90a04:	10005c26 	beq	r2,zero,90b78 <___svfprintf_internal_r+0x14b0>
   90a08:	d8c02e17 	ldw	r3,184(sp)
   90a0c:	d9002a17 	ldw	r4,168(sp)
   90a10:	d8002785 	stb	zero,158(sp)
   90a14:	18800104 	addi	r2,r3,4
   90a18:	1d000017 	ldw	r20,0(r3)
   90a1c:	002d883a 	mov	r22,zero
   90a20:	20005e16 	blt	r4,zero,90b9c <___svfprintf_internal_r+0x14d4>
   90a24:	00ffdfc4 	movi	r3,-129
   90a28:	d8802e15 	stw	r2,184(sp)
   90a2c:	90e4703a 	and	r18,r18,r3
   90a30:	0039883a 	mov	fp,zero
   90a34:	a03ddf26 	beq	r20,zero,901b4 <__ram_exceptions_end+0xfff6ff80>
   90a38:	00800244 	movi	r2,9
   90a3c:	153c8e36 	bltu	r2,r20,8fc78 <__ram_exceptions_end+0xfff6fa44>
   90a40:	a5000c04 	addi	r20,r20,48
   90a44:	dc001dc4 	addi	r16,sp,119
   90a48:	dd001dc5 	stb	r20,119(sp)
   90a4c:	d8c02817 	ldw	r3,160(sp)
   90a50:	1c07c83a 	sub	r3,r3,r16
   90a54:	d8c02b15 	stw	r3,172(sp)
   90a58:	003cd306 	br	8fda8 <__ram_exceptions_end+0xfff6fb74>
   90a5c:	d8803317 	ldw	r2,204(sp)
   90a60:	143fffc4 	addi	r16,r2,-1
   90a64:	043f560e 	bge	zero,r16,907c0 <__ram_exceptions_end+0xfff7058c>
   90a68:	07000404 	movi	fp,16
   90a6c:	e403530e 	bge	fp,r16,917bc <___svfprintf_internal_r+0x20f4>
   90a70:	014002b4 	movhi	r5,10
   90a74:	29799f84 	addi	r5,r5,-6530
   90a78:	d9402c15 	stw	r5,176(sp)
   90a7c:	01c001c4 	movi	r7,7
   90a80:	dd002d17 	ldw	r20,180(sp)
   90a84:	00000306 	br	90a94 <___svfprintf_internal_r+0x13cc>
   90a88:	843ffc04 	addi	r16,r16,-16
   90a8c:	b5800204 	addi	r22,r22,8
   90a90:	e400130e 	bge	fp,r16,90ae0 <___svfprintf_internal_r+0x1418>
   90a94:	18c00404 	addi	r3,r3,16
   90a98:	8c400044 	addi	r17,r17,1
   90a9c:	b5400015 	stw	r21,0(r22)
   90aa0:	b7000115 	stw	fp,4(r22)
   90aa4:	d8c02015 	stw	r3,128(sp)
   90aa8:	dc401f15 	stw	r17,124(sp)
   90aac:	3c7ff60e 	bge	r7,r17,90a88 <__ram_exceptions_end+0xfff70854>
   90ab0:	d9801e04 	addi	r6,sp,120
   90ab4:	a00b883a 	mov	r5,r20
   90ab8:	9809883a 	mov	r4,r19
   90abc:	d9c03d15 	stw	r7,244(sp)
   90ac0:	00945680 	call	94568 <__ssprint_r>
   90ac4:	d9c03d17 	ldw	r7,244(sp)
   90ac8:	103be61e 	bne	r2,zero,8fa64 <__ram_exceptions_end+0xfff6f830>
   90acc:	843ffc04 	addi	r16,r16,-16
   90ad0:	d8c02017 	ldw	r3,128(sp)
   90ad4:	dc401f17 	ldw	r17,124(sp)
   90ad8:	dd800404 	addi	r22,sp,16
   90adc:	e43fed16 	blt	fp,r16,90a94 <__ram_exceptions_end+0xfff70860>
   90ae0:	d8802c17 	ldw	r2,176(sp)
   90ae4:	1c07883a 	add	r3,r3,r16
   90ae8:	8c400044 	addi	r17,r17,1
   90aec:	b0800015 	stw	r2,0(r22)
   90af0:	b4000115 	stw	r16,4(r22)
   90af4:	d8c02015 	stw	r3,128(sp)
   90af8:	dc401f15 	stw	r17,124(sp)
   90afc:	008001c4 	movi	r2,7
   90b00:	147f2e0e 	bge	r2,r17,907bc <__ram_exceptions_end+0xfff70588>
   90b04:	d9402d17 	ldw	r5,180(sp)
   90b08:	d9801e04 	addi	r6,sp,120
   90b0c:	9809883a 	mov	r4,r19
   90b10:	00945680 	call	94568 <__ssprint_r>
   90b14:	103bd31e 	bne	r2,zero,8fa64 <__ram_exceptions_end+0xfff6f830>
   90b18:	d8c02017 	ldw	r3,128(sp)
   90b1c:	dc401f17 	ldw	r17,124(sp)
   90b20:	dd800404 	addi	r22,sp,16
   90b24:	003f2606 	br	907c0 <__ram_exceptions_end+0xfff7058c>
   90b28:	9080040c 	andi	r2,r18,16
   90b2c:	1000c326 	beq	r2,zero,90e3c <___svfprintf_internal_r+0x1774>
   90b30:	d9402e17 	ldw	r5,184(sp)
   90b34:	2d000017 	ldw	r20,0(r5)
   90b38:	29400104 	addi	r5,r5,4
   90b3c:	d9402e15 	stw	r5,184(sp)
   90b40:	a02dd7fa 	srai	r22,r20,31
   90b44:	b005883a 	mov	r2,r22
   90b48:	103c430e 	bge	r2,zero,8fc58 <__ram_exceptions_end+0xfff6fa24>
   90b4c:	d9402a17 	ldw	r5,168(sp)
   90b50:	0529c83a 	sub	r20,zero,r20
   90b54:	07000b44 	movi	fp,45
   90b58:	a004c03a 	cmpne	r2,r20,zero
   90b5c:	05adc83a 	sub	r22,zero,r22
   90b60:	df002785 	stb	fp,158(sp)
   90b64:	b0adc83a 	sub	r22,r22,r2
   90b68:	28022e16 	blt	r5,zero,91424 <___svfprintf_internal_r+0x1d5c>
   90b6c:	00bfdfc4 	movi	r2,-129
   90b70:	90a4703a 	and	r18,r18,r2
   90b74:	003c3f06 	br	8fc74 <__ram_exceptions_end+0xfff6fa40>
   90b78:	9080100c 	andi	r2,r18,64
   90b7c:	d8002785 	stb	zero,158(sp)
   90b80:	10012526 	beq	r2,zero,91018 <___svfprintf_internal_r+0x1950>
   90b84:	d9402e17 	ldw	r5,184(sp)
   90b88:	d8c02a17 	ldw	r3,168(sp)
   90b8c:	002d883a 	mov	r22,zero
   90b90:	28800104 	addi	r2,r5,4
   90b94:	2d00000b 	ldhu	r20,0(r5)
   90b98:	183fa20e 	bge	r3,zero,90a24 <__ram_exceptions_end+0xfff707f0>
   90b9c:	d8802e15 	stw	r2,184(sp)
   90ba0:	0039883a 	mov	fp,zero
   90ba4:	a584b03a 	or	r2,r20,r22
   90ba8:	103c321e 	bne	r2,zero,8fc74 <__ram_exceptions_end+0xfff6fa40>
   90bac:	00800044 	movi	r2,1
   90bb0:	003e5006 	br	904f4 <__ram_exceptions_end+0xfff702c0>
   90bb4:	d9402d17 	ldw	r5,180(sp)
   90bb8:	d9801e04 	addi	r6,sp,120
   90bbc:	9809883a 	mov	r4,r19
   90bc0:	00945680 	call	94568 <__ssprint_r>
   90bc4:	103ba71e 	bne	r2,zero,8fa64 <__ram_exceptions_end+0xfff6f830>
   90bc8:	d8c02017 	ldw	r3,128(sp)
   90bcc:	da000404 	addi	r8,sp,16
   90bd0:	d9003217 	ldw	r4,200(sp)
   90bd4:	d8802617 	ldw	r2,152(sp)
   90bd8:	d9403317 	ldw	r5,204(sp)
   90bdc:	8123883a 	add	r17,r16,r4
   90be0:	11400216 	blt	r2,r5,90bec <___svfprintf_internal_r+0x1524>
   90be4:	9100004c 	andi	r4,r18,1
   90be8:	20000d26 	beq	r4,zero,90c20 <___svfprintf_internal_r+0x1558>
   90bec:	d9003817 	ldw	r4,224(sp)
   90bf0:	d9403417 	ldw	r5,208(sp)
   90bf4:	1907883a 	add	r3,r3,r4
   90bf8:	d9001f17 	ldw	r4,124(sp)
   90bfc:	41400015 	stw	r5,0(r8)
   90c00:	d9403817 	ldw	r5,224(sp)
   90c04:	21000044 	addi	r4,r4,1
   90c08:	d8c02015 	stw	r3,128(sp)
   90c0c:	41400115 	stw	r5,4(r8)
   90c10:	d9001f15 	stw	r4,124(sp)
   90c14:	014001c4 	movi	r5,7
   90c18:	2901dc16 	blt	r5,r4,9138c <___svfprintf_internal_r+0x1cc4>
   90c1c:	42000204 	addi	r8,r8,8
   90c20:	d9003317 	ldw	r4,204(sp)
   90c24:	8121883a 	add	r16,r16,r4
   90c28:	2085c83a 	sub	r2,r4,r2
   90c2c:	8461c83a 	sub	r16,r16,r17
   90c30:	1400010e 	bge	r2,r16,90c38 <___svfprintf_internal_r+0x1570>
   90c34:	1021883a 	mov	r16,r2
   90c38:	04000a0e 	bge	zero,r16,90c64 <___svfprintf_internal_r+0x159c>
   90c3c:	d9001f17 	ldw	r4,124(sp)
   90c40:	1c07883a 	add	r3,r3,r16
   90c44:	44400015 	stw	r17,0(r8)
   90c48:	21000044 	addi	r4,r4,1
   90c4c:	44000115 	stw	r16,4(r8)
   90c50:	d8c02015 	stw	r3,128(sp)
   90c54:	d9001f15 	stw	r4,124(sp)
   90c58:	014001c4 	movi	r5,7
   90c5c:	2901e616 	blt	r5,r4,913f8 <___svfprintf_internal_r+0x1d30>
   90c60:	42000204 	addi	r8,r8,8
   90c64:	8001f616 	blt	r16,zero,91440 <___svfprintf_internal_r+0x1d78>
   90c68:	1421c83a 	sub	r16,r2,r16
   90c6c:	043cfa0e 	bge	zero,r16,90058 <__ram_exceptions_end+0xfff6fe24>
   90c70:	04400404 	movi	r17,16
   90c74:	d8801f17 	ldw	r2,124(sp)
   90c78:	8c3edd0e 	bge	r17,r16,907f0 <__ram_exceptions_end+0xfff705bc>
   90c7c:	014002b4 	movhi	r5,10
   90c80:	29799f84 	addi	r5,r5,-6530
   90c84:	d9402c15 	stw	r5,176(sp)
   90c88:	058001c4 	movi	r22,7
   90c8c:	dd002d17 	ldw	r20,180(sp)
   90c90:	00000306 	br	90ca0 <___svfprintf_internal_r+0x15d8>
   90c94:	42000204 	addi	r8,r8,8
   90c98:	843ffc04 	addi	r16,r16,-16
   90c9c:	8c3ed70e 	bge	r17,r16,907fc <__ram_exceptions_end+0xfff705c8>
   90ca0:	18c00404 	addi	r3,r3,16
   90ca4:	10800044 	addi	r2,r2,1
   90ca8:	45400015 	stw	r21,0(r8)
   90cac:	44400115 	stw	r17,4(r8)
   90cb0:	d8c02015 	stw	r3,128(sp)
   90cb4:	d8801f15 	stw	r2,124(sp)
   90cb8:	b0bff60e 	bge	r22,r2,90c94 <__ram_exceptions_end+0xfff70a60>
   90cbc:	d9801e04 	addi	r6,sp,120
   90cc0:	a00b883a 	mov	r5,r20
   90cc4:	9809883a 	mov	r4,r19
   90cc8:	00945680 	call	94568 <__ssprint_r>
   90ccc:	103b651e 	bne	r2,zero,8fa64 <__ram_exceptions_end+0xfff6f830>
   90cd0:	d8c02017 	ldw	r3,128(sp)
   90cd4:	d8801f17 	ldw	r2,124(sp)
   90cd8:	da000404 	addi	r8,sp,16
   90cdc:	003fee06 	br	90c98 <__ram_exceptions_end+0xfff70a64>
   90ce0:	9088703a 	and	r4,r18,r2
   90ce4:	203e8d1e 	bne	r4,zero,9071c <__ram_exceptions_end+0xfff704e8>
   90ce8:	dc401f17 	ldw	r17,124(sp)
   90cec:	40800115 	stw	r2,4(r8)
   90cf0:	44000015 	stw	r16,0(r8)
   90cf4:	8c400044 	addi	r17,r17,1
   90cf8:	d8c02015 	stw	r3,128(sp)
   90cfc:	dc401f15 	stw	r17,124(sp)
   90d00:	008001c4 	movi	r2,7
   90d04:	147f7f16 	blt	r2,r17,90b04 <__ram_exceptions_end+0xfff708d0>
   90d08:	45800204 	addi	r22,r8,8
   90d0c:	003eac06 	br	907c0 <__ram_exceptions_end+0xfff7058c>
   90d10:	d9402d17 	ldw	r5,180(sp)
   90d14:	d9801e04 	addi	r6,sp,120
   90d18:	9809883a 	mov	r4,r19
   90d1c:	00945680 	call	94568 <__ssprint_r>
   90d20:	103b501e 	bne	r2,zero,8fa64 <__ram_exceptions_end+0xfff6f830>
   90d24:	d8c02017 	ldw	r3,128(sp)
   90d28:	dc401f17 	ldw	r17,124(sp)
   90d2c:	da000404 	addi	r8,sp,16
   90d30:	003e8406 	br	90744 <__ram_exceptions_end+0xfff70510>
   90d34:	d9402d17 	ldw	r5,180(sp)
   90d38:	d9801e04 	addi	r6,sp,120
   90d3c:	9809883a 	mov	r4,r19
   90d40:	00945680 	call	94568 <__ssprint_r>
   90d44:	103b471e 	bne	r2,zero,8fa64 <__ram_exceptions_end+0xfff6f830>
   90d48:	d8c02017 	ldw	r3,128(sp)
   90d4c:	dc401f17 	ldw	r17,124(sp)
   90d50:	dd800404 	addi	r22,sp,16
   90d54:	003e8606 	br	90770 <__ram_exceptions_end+0xfff7053c>
   90d58:	0029883a 	mov	r20,zero
   90d5c:	a5000c04 	addi	r20,r20,48
   90d60:	dc001dc4 	addi	r16,sp,119
   90d64:	dd001dc5 	stb	r20,119(sp)
   90d68:	003f3806 	br	90a4c <__ram_exceptions_end+0xfff70818>
   90d6c:	d9402d17 	ldw	r5,180(sp)
   90d70:	d9801e04 	addi	r6,sp,120
   90d74:	9809883a 	mov	r4,r19
   90d78:	00945680 	call	94568 <__ssprint_r>
   90d7c:	103b391e 	bne	r2,zero,8fa64 <__ram_exceptions_end+0xfff6f830>
   90d80:	d8c02017 	ldw	r3,128(sp)
   90d84:	da000404 	addi	r8,sp,16
   90d88:	003c7306 	br	8ff58 <__ram_exceptions_end+0xfff6fd24>
   90d8c:	d9003617 	ldw	r4,216(sp)
   90d90:	d9403717 	ldw	r5,220(sp)
   90d94:	da003e15 	stw	r8,248(sp)
   90d98:	008bd8c0 	call	8bd8c <__fpclassifyd>
   90d9c:	da003e17 	ldw	r8,248(sp)
   90da0:	1000bd1e 	bne	r2,zero,91098 <___svfprintf_internal_r+0x19d0>
   90da4:	008011c4 	movi	r2,71
   90da8:	14411e0e 	bge	r2,r17,91224 <___svfprintf_internal_r+0x1b5c>
   90dac:	040002b4 	movhi	r16,10
   90db0:	84387904 	addi	r16,r16,-7708
   90db4:	00c000c4 	movi	r3,3
   90db8:	00bfdfc4 	movi	r2,-129
   90dbc:	d8c02915 	stw	r3,164(sp)
   90dc0:	90a4703a 	and	r18,r18,r2
   90dc4:	df002783 	ldbu	fp,158(sp)
   90dc8:	d8c02b15 	stw	r3,172(sp)
   90dcc:	d8002a15 	stw	zero,168(sp)
   90dd0:	d8003215 	stw	zero,200(sp)
   90dd4:	003bfa06 	br	8fdc0 <__ram_exceptions_end+0xfff6fb8c>
   90dd8:	9080100c 	andi	r2,r18,64
   90ddc:	d8002785 	stb	zero,158(sp)
   90de0:	10009426 	beq	r2,zero,91034 <___svfprintf_internal_r+0x196c>
   90de4:	d9402e17 	ldw	r5,184(sp)
   90de8:	d8c02a17 	ldw	r3,168(sp)
   90dec:	002d883a 	mov	r22,zero
   90df0:	28800104 	addi	r2,r5,4
   90df4:	2d00000b 	ldhu	r20,0(r5)
   90df8:	183ec10e 	bge	r3,zero,90900 <__ram_exceptions_end+0xfff706cc>
   90dfc:	a586b03a 	or	r3,r20,r22
   90e00:	d8802e15 	stw	r2,184(sp)
   90e04:	183ec21e 	bne	r3,zero,90910 <__ram_exceptions_end+0xfff706dc>
   90e08:	0039883a 	mov	fp,zero
   90e0c:	0005883a 	mov	r2,zero
   90e10:	003db806 	br	904f4 <__ram_exceptions_end+0xfff702c0>
   90e14:	d8c02e17 	ldw	r3,184(sp)
   90e18:	d9002e17 	ldw	r4,184(sp)
   90e1c:	d9402e17 	ldw	r5,184(sp)
   90e20:	18c00017 	ldw	r3,0(r3)
   90e24:	21000117 	ldw	r4,4(r4)
   90e28:	29400204 	addi	r5,r5,8
   90e2c:	d8c03615 	stw	r3,216(sp)
   90e30:	d9003715 	stw	r4,220(sp)
   90e34:	d9402e15 	stw	r5,184(sp)
   90e38:	003b5a06 	br	8fba4 <__ram_exceptions_end+0xfff6f970>
   90e3c:	9080100c 	andi	r2,r18,64
   90e40:	10010726 	beq	r2,zero,91260 <___svfprintf_internal_r+0x1b98>
   90e44:	d8802e17 	ldw	r2,184(sp)
   90e48:	1500000f 	ldh	r20,0(r2)
   90e4c:	10800104 	addi	r2,r2,4
   90e50:	d8802e15 	stw	r2,184(sp)
   90e54:	a02dd7fa 	srai	r22,r20,31
   90e58:	b005883a 	mov	r2,r22
   90e5c:	003b7d06 	br	8fc54 <__ram_exceptions_end+0xfff6fa20>
   90e60:	9080100c 	andi	r2,r18,64
   90e64:	10010526 	beq	r2,zero,9127c <___svfprintf_internal_r+0x1bb4>
   90e68:	d8c02e17 	ldw	r3,184(sp)
   90e6c:	002d883a 	mov	r22,zero
   90e70:	1d00000b 	ldhu	r20,0(r3)
   90e74:	18c00104 	addi	r3,r3,4
   90e78:	d8c02e15 	stw	r3,184(sp)
   90e7c:	003ce206 	br	90208 <__ram_exceptions_end+0xfff6ffd4>
   90e80:	bc400007 	ldb	r17,0(r23)
   90e84:	003a6506 	br	8f81c <__ram_exceptions_end+0xfff6f5e8>
   90e88:	9080040c 	andi	r2,r18,16
   90e8c:	10010126 	beq	r2,zero,91294 <___svfprintf_internal_r+0x1bcc>
   90e90:	d8c02e17 	ldw	r3,184(sp)
   90e94:	d9002f17 	ldw	r4,188(sp)
   90e98:	18800017 	ldw	r2,0(r3)
   90e9c:	18c00104 	addi	r3,r3,4
   90ea0:	d8c02e15 	stw	r3,184(sp)
   90ea4:	11000015 	stw	r4,0(r2)
   90ea8:	003a3206 	br	8f774 <__ram_exceptions_end+0xfff6f540>
   90eac:	d9002a17 	ldw	r4,168(sp)
   90eb0:	d8002785 	stb	zero,158(sp)
   90eb4:	203d8d16 	blt	r4,zero,904ec <__ram_exceptions_end+0xfff702b8>
   90eb8:	00bfdfc4 	movi	r2,-129
   90ebc:	90a4703a 	and	r18,r18,r2
   90ec0:	003ad506 	br	8fa18 <__ram_exceptions_end+0xfff6f7e4>
   90ec4:	014002b4 	movhi	r5,10
   90ec8:	29799f84 	addi	r5,r5,-6530
   90ecc:	d9402c15 	stw	r5,176(sp)
   90ed0:	d9402c17 	ldw	r5,176(sp)
   90ed4:	1c47883a 	add	r3,r3,r17
   90ed8:	10800044 	addi	r2,r2,1
   90edc:	41400015 	stw	r5,0(r8)
   90ee0:	44400115 	stw	r17,4(r8)
   90ee4:	d8c02015 	stw	r3,128(sp)
   90ee8:	d8801f15 	stw	r2,124(sp)
   90eec:	010001c4 	movi	r4,7
   90ef0:	20bf3016 	blt	r4,r2,90bb4 <__ram_exceptions_end+0xfff70980>
   90ef4:	42000204 	addi	r8,r8,8
   90ef8:	003f3506 	br	90bd0 <__ram_exceptions_end+0xfff7099c>
   90efc:	010002b4 	movhi	r4,10
   90f00:	21399f84 	addi	r4,r4,-6530
   90f04:	d9002c15 	stw	r4,176(sp)
   90f08:	003c3c06 	br	8fffc <__ram_exceptions_end+0xfff6fdc8>
   90f0c:	d9402d17 	ldw	r5,180(sp)
   90f10:	d9801e04 	addi	r6,sp,120
   90f14:	9809883a 	mov	r4,r19
   90f18:	00945680 	call	94568 <__ssprint_r>
   90f1c:	103ad11e 	bne	r2,zero,8fa64 <__ram_exceptions_end+0xfff6f830>
   90f20:	d8c02017 	ldw	r3,128(sp)
   90f24:	da000404 	addi	r8,sp,16
   90f28:	003d9306 	br	90578 <__ram_exceptions_end+0xfff70344>
   90f2c:	d8801f17 	ldw	r2,124(sp)
   90f30:	014002b4 	movhi	r5,10
   90f34:	01000044 	movi	r4,1
   90f38:	18c00044 	addi	r3,r3,1
   90f3c:	10800044 	addi	r2,r2,1
   90f40:	29788604 	addi	r5,r5,-7656
   90f44:	41000115 	stw	r4,4(r8)
   90f48:	41400015 	stw	r5,0(r8)
   90f4c:	d8c02015 	stw	r3,128(sp)
   90f50:	d8801f15 	stw	r2,124(sp)
   90f54:	010001c4 	movi	r4,7
   90f58:	2080b516 	blt	r4,r2,91230 <___svfprintf_internal_r+0x1b68>
   90f5c:	42000204 	addi	r8,r8,8
   90f60:	8800041e 	bne	r17,zero,90f74 <___svfprintf_internal_r+0x18ac>
   90f64:	d8803317 	ldw	r2,204(sp)
   90f68:	1000021e 	bne	r2,zero,90f74 <___svfprintf_internal_r+0x18ac>
   90f6c:	9080004c 	andi	r2,r18,1
   90f70:	103c3926 	beq	r2,zero,90058 <__ram_exceptions_end+0xfff6fe24>
   90f74:	d9003817 	ldw	r4,224(sp)
   90f78:	d8801f17 	ldw	r2,124(sp)
   90f7c:	d9403417 	ldw	r5,208(sp)
   90f80:	20c7883a 	add	r3,r4,r3
   90f84:	10800044 	addi	r2,r2,1
   90f88:	41000115 	stw	r4,4(r8)
   90f8c:	41400015 	stw	r5,0(r8)
   90f90:	d8c02015 	stw	r3,128(sp)
   90f94:	d8801f15 	stw	r2,124(sp)
   90f98:	010001c4 	movi	r4,7
   90f9c:	20818016 	blt	r4,r2,915a0 <___svfprintf_internal_r+0x1ed8>
   90fa0:	42000204 	addi	r8,r8,8
   90fa4:	0463c83a 	sub	r17,zero,r17
   90fa8:	0440cb0e 	bge	zero,r17,912d8 <___svfprintf_internal_r+0x1c10>
   90fac:	05800404 	movi	r22,16
   90fb0:	b440e80e 	bge	r22,r17,91354 <___svfprintf_internal_r+0x1c8c>
   90fb4:	014002b4 	movhi	r5,10
   90fb8:	29799f84 	addi	r5,r5,-6530
   90fbc:	d9402c15 	stw	r5,176(sp)
   90fc0:	070001c4 	movi	fp,7
   90fc4:	dd002d17 	ldw	r20,180(sp)
   90fc8:	00000306 	br	90fd8 <___svfprintf_internal_r+0x1910>
   90fcc:	42000204 	addi	r8,r8,8
   90fd0:	8c7ffc04 	addi	r17,r17,-16
   90fd4:	b440e20e 	bge	r22,r17,91360 <___svfprintf_internal_r+0x1c98>
   90fd8:	18c00404 	addi	r3,r3,16
   90fdc:	10800044 	addi	r2,r2,1
   90fe0:	45400015 	stw	r21,0(r8)
   90fe4:	45800115 	stw	r22,4(r8)
   90fe8:	d8c02015 	stw	r3,128(sp)
   90fec:	d8801f15 	stw	r2,124(sp)
   90ff0:	e0bff60e 	bge	fp,r2,90fcc <__ram_exceptions_end+0xfff70d98>
   90ff4:	d9801e04 	addi	r6,sp,120
   90ff8:	a00b883a 	mov	r5,r20
   90ffc:	9809883a 	mov	r4,r19
   91000:	00945680 	call	94568 <__ssprint_r>
   91004:	103a971e 	bne	r2,zero,8fa64 <__ram_exceptions_end+0xfff6f830>
   91008:	d8c02017 	ldw	r3,128(sp)
   9100c:	d8801f17 	ldw	r2,124(sp)
   91010:	da000404 	addi	r8,sp,16
   91014:	003fee06 	br	90fd0 <__ram_exceptions_end+0xfff70d9c>
   91018:	d9002e17 	ldw	r4,184(sp)
   9101c:	d9402a17 	ldw	r5,168(sp)
   91020:	002d883a 	mov	r22,zero
   91024:	20800104 	addi	r2,r4,4
   91028:	25000017 	ldw	r20,0(r4)
   9102c:	283e7d0e 	bge	r5,zero,90a24 <__ram_exceptions_end+0xfff707f0>
   91030:	003eda06 	br	90b9c <__ram_exceptions_end+0xfff70968>
   91034:	d9002e17 	ldw	r4,184(sp)
   91038:	d9402a17 	ldw	r5,168(sp)
   9103c:	002d883a 	mov	r22,zero
   91040:	20800104 	addi	r2,r4,4
   91044:	25000017 	ldw	r20,0(r4)
   91048:	283e2d0e 	bge	r5,zero,90900 <__ram_exceptions_end+0xfff706cc>
   9104c:	003f6b06 	br	90dfc <__ram_exceptions_end+0xfff70bc8>
   91050:	d8c02e15 	stw	r3,184(sp)
   91054:	0039883a 	mov	fp,zero
   91058:	003ed206 	br	90ba4 <__ram_exceptions_end+0xfff70970>
   9105c:	bc400043 	ldbu	r17,1(r23)
   91060:	84000814 	ori	r16,r16,32
   91064:	bdc00044 	addi	r23,r23,1
   91068:	8c403fcc 	andi	r17,r17,255
   9106c:	8c40201c 	xori	r17,r17,128
   91070:	8c7fe004 	addi	r17,r17,-128
   91074:	0039e906 	br	8f81c <__ram_exceptions_end+0xfff6f5e8>
   91078:	d9402d17 	ldw	r5,180(sp)
   9107c:	d9801e04 	addi	r6,sp,120
   91080:	9809883a 	mov	r4,r19
   91084:	00945680 	call	94568 <__ssprint_r>
   91088:	103a761e 	bne	r2,zero,8fa64 <__ram_exceptions_end+0xfff6f830>
   9108c:	d8c02017 	ldw	r3,128(sp)
   91090:	da000404 	addi	r8,sp,16
   91094:	003d4a06 	br	905c0 <__ram_exceptions_end+0xfff7038c>
   91098:	d9002a17 	ldw	r4,168(sp)
   9109c:	05bff7c4 	movi	r22,-33
   910a0:	00bfffc4 	movi	r2,-1
   910a4:	8dac703a 	and	r22,r17,r22
   910a8:	20806a26 	beq	r4,r2,91254 <___svfprintf_internal_r+0x1b8c>
   910ac:	008011c4 	movi	r2,71
   910b0:	b0813726 	beq	r22,r2,91590 <___svfprintf_internal_r+0x1ec8>
   910b4:	d9003717 	ldw	r4,220(sp)
   910b8:	90c04014 	ori	r3,r18,256
   910bc:	d8c02c15 	stw	r3,176(sp)
   910c0:	20015d16 	blt	r4,zero,91638 <___svfprintf_internal_r+0x1f70>
   910c4:	dd003717 	ldw	r20,220(sp)
   910c8:	d8002905 	stb	zero,164(sp)
   910cc:	00801984 	movi	r2,102
   910d0:	88814026 	beq	r17,r2,915d4 <___svfprintf_internal_r+0x1f0c>
   910d4:	00801184 	movi	r2,70
   910d8:	88817126 	beq	r17,r2,916a0 <___svfprintf_internal_r+0x1fd8>
   910dc:	00801144 	movi	r2,69
   910e0:	b0816226 	beq	r22,r2,9166c <___svfprintf_internal_r+0x1fa4>
   910e4:	d8c02a17 	ldw	r3,168(sp)
   910e8:	d8802104 	addi	r2,sp,132
   910ec:	d8800315 	stw	r2,12(sp)
   910f0:	d9403617 	ldw	r5,216(sp)
   910f4:	d8802504 	addi	r2,sp,148
   910f8:	d8800215 	stw	r2,8(sp)
   910fc:	d8802604 	addi	r2,sp,152
   91100:	d8c00015 	stw	r3,0(sp)
   91104:	d8800115 	stw	r2,4(sp)
   91108:	01c00084 	movi	r7,2
   9110c:	a00d883a 	mov	r6,r20
   91110:	9809883a 	mov	r4,r19
   91114:	d8c03d15 	stw	r3,244(sp)
   91118:	da003e15 	stw	r8,248(sp)
   9111c:	00873a00 	call	873a0 <_dtoa_r>
   91120:	1021883a 	mov	r16,r2
   91124:	008019c4 	movi	r2,103
   91128:	d8c03d17 	ldw	r3,244(sp)
   9112c:	da003e17 	ldw	r8,248(sp)
   91130:	8880e726 	beq	r17,r2,914d0 <___svfprintf_internal_r+0x1e08>
   91134:	008011c4 	movi	r2,71
   91138:	8880d426 	beq	r17,r2,9148c <___svfprintf_internal_r+0x1dc4>
   9113c:	80f9883a 	add	fp,r16,r3
   91140:	d9003617 	ldw	r4,216(sp)
   91144:	000d883a 	mov	r6,zero
   91148:	000f883a 	mov	r7,zero
   9114c:	a00b883a 	mov	r5,r20
   91150:	da003e15 	stw	r8,248(sp)
   91154:	0097e780 	call	97e78 <__eqdf2>
   91158:	da003e17 	ldw	r8,248(sp)
   9115c:	1000e426 	beq	r2,zero,914f0 <___svfprintf_internal_r+0x1e28>
   91160:	d8802117 	ldw	r2,132(sp)
   91164:	1700062e 	bgeu	r2,fp,91180 <___svfprintf_internal_r+0x1ab8>
   91168:	01000c04 	movi	r4,48
   9116c:	10c00044 	addi	r3,r2,1
   91170:	d8c02115 	stw	r3,132(sp)
   91174:	11000005 	stb	r4,0(r2)
   91178:	d8802117 	ldw	r2,132(sp)
   9117c:	173ffb36 	bltu	r2,fp,9116c <__ram_exceptions_end+0xfff70f38>
   91180:	1405c83a 	sub	r2,r2,r16
   91184:	d8803315 	stw	r2,204(sp)
   91188:	008011c4 	movi	r2,71
   9118c:	b080c526 	beq	r22,r2,914a4 <___svfprintf_internal_r+0x1ddc>
   91190:	00801944 	movi	r2,101
   91194:	1441d80e 	bge	r2,r17,918f8 <___svfprintf_internal_r+0x2230>
   91198:	d8c02617 	ldw	r3,152(sp)
   9119c:	00801984 	movi	r2,102
   911a0:	d8c03215 	stw	r3,200(sp)
   911a4:	88813426 	beq	r17,r2,91678 <___svfprintf_internal_r+0x1fb0>
   911a8:	d8c03217 	ldw	r3,200(sp)
   911ac:	d9003317 	ldw	r4,204(sp)
   911b0:	19012516 	blt	r3,r4,91648 <___svfprintf_internal_r+0x1f80>
   911b4:	9480004c 	andi	r18,r18,1
   911b8:	9001841e 	bne	r18,zero,917cc <___svfprintf_internal_r+0x2104>
   911bc:	1805883a 	mov	r2,r3
   911c0:	1801cb16 	blt	r3,zero,918f0 <___svfprintf_internal_r+0x2228>
   911c4:	d8c03217 	ldw	r3,200(sp)
   911c8:	044019c4 	movi	r17,103
   911cc:	d8c02b15 	stw	r3,172(sp)
   911d0:	df002907 	ldb	fp,164(sp)
   911d4:	e000a61e 	bne	fp,zero,91470 <___svfprintf_internal_r+0x1da8>
   911d8:	df002783 	ldbu	fp,158(sp)
   911dc:	d8802915 	stw	r2,164(sp)
   911e0:	dc802c17 	ldw	r18,176(sp)
   911e4:	d8002a15 	stw	zero,168(sp)
   911e8:	003af506 	br	8fdc0 <__ram_exceptions_end+0xfff6fb8c>
   911ec:	040002b4 	movhi	r16,10
   911f0:	84387604 	addi	r16,r16,-7720
   911f4:	003a7e06 	br	8fbf0 <__ram_exceptions_end+0xfff6f9bc>
   911f8:	d9003917 	ldw	r4,228(sp)
   911fc:	04001004 	movi	r16,64
   91200:	800b883a 	mov	r5,r16
   91204:	008235c0 	call	8235c <_malloc_r>
   91208:	d9002d17 	ldw	r4,180(sp)
   9120c:	20800015 	stw	r2,0(r4)
   91210:	20800415 	stw	r2,16(r4)
   91214:	1001d026 	beq	r2,zero,91958 <___svfprintf_internal_r+0x2290>
   91218:	d8802d17 	ldw	r2,180(sp)
   9121c:	14000515 	stw	r16,20(r2)
   91220:	00394406 	br	8f734 <__ram_exceptions_end+0xfff6f500>
   91224:	040002b4 	movhi	r16,10
   91228:	84387804 	addi	r16,r16,-7712
   9122c:	003ee106 	br	90db4 <__ram_exceptions_end+0xfff70b80>
   91230:	d9402d17 	ldw	r5,180(sp)
   91234:	d9801e04 	addi	r6,sp,120
   91238:	9809883a 	mov	r4,r19
   9123c:	00945680 	call	94568 <__ssprint_r>
   91240:	103a081e 	bne	r2,zero,8fa64 <__ram_exceptions_end+0xfff6f830>
   91244:	dc402617 	ldw	r17,152(sp)
   91248:	d8c02017 	ldw	r3,128(sp)
   9124c:	da000404 	addi	r8,sp,16
   91250:	003f4306 	br	90f60 <__ram_exceptions_end+0xfff70d2c>
   91254:	01400184 	movi	r5,6
   91258:	d9402a15 	stw	r5,168(sp)
   9125c:	003f9506 	br	910b4 <__ram_exceptions_end+0xfff70e80>
   91260:	d8c02e17 	ldw	r3,184(sp)
   91264:	1d000017 	ldw	r20,0(r3)
   91268:	18c00104 	addi	r3,r3,4
   9126c:	d8c02e15 	stw	r3,184(sp)
   91270:	a02dd7fa 	srai	r22,r20,31
   91274:	b005883a 	mov	r2,r22
   91278:	003a7606 	br	8fc54 <__ram_exceptions_end+0xfff6fa20>
   9127c:	d9002e17 	ldw	r4,184(sp)
   91280:	002d883a 	mov	r22,zero
   91284:	25000017 	ldw	r20,0(r4)
   91288:	21000104 	addi	r4,r4,4
   9128c:	d9002e15 	stw	r4,184(sp)
   91290:	003bdd06 	br	90208 <__ram_exceptions_end+0xfff6ffd4>
   91294:	9480100c 	andi	r18,r18,64
   91298:	90006e26 	beq	r18,zero,91454 <___svfprintf_internal_r+0x1d8c>
   9129c:	d9402e17 	ldw	r5,184(sp)
   912a0:	d8c02f17 	ldw	r3,188(sp)
   912a4:	28800017 	ldw	r2,0(r5)
   912a8:	29400104 	addi	r5,r5,4
   912ac:	d9402e15 	stw	r5,184(sp)
   912b0:	10c0000d 	sth	r3,0(r2)
   912b4:	00392f06 	br	8f774 <__ram_exceptions_end+0xfff6f540>
   912b8:	d9402d17 	ldw	r5,180(sp)
   912bc:	d9801e04 	addi	r6,sp,120
   912c0:	9809883a 	mov	r4,r19
   912c4:	00945680 	call	94568 <__ssprint_r>
   912c8:	1039e61e 	bne	r2,zero,8fa64 <__ram_exceptions_end+0xfff6f830>
   912cc:	d8c02017 	ldw	r3,128(sp)
   912d0:	d8801f17 	ldw	r2,124(sp)
   912d4:	da000404 	addi	r8,sp,16
   912d8:	d9403317 	ldw	r5,204(sp)
   912dc:	10800044 	addi	r2,r2,1
   912e0:	44000015 	stw	r16,0(r8)
   912e4:	28c7883a 	add	r3,r5,r3
   912e8:	003b5506 	br	90040 <__ram_exceptions_end+0xfff6fe0c>
   912ec:	8009883a 	mov	r4,r16
   912f0:	df003e15 	stw	fp,248(sp)
   912f4:	00831980 	call	83198 <strlen>
   912f8:	d8802b15 	stw	r2,172(sp)
   912fc:	da003e17 	ldw	r8,248(sp)
   91300:	103c160e 	bge	r2,zero,9035c <__ram_exceptions_end+0xfff70128>
   91304:	0005883a 	mov	r2,zero
   91308:	003c1406 	br	9035c <__ram_exceptions_end+0xfff70128>
   9130c:	00bfffc4 	movi	r2,-1
   91310:	0039d906 	br	8fa78 <__ram_exceptions_end+0xfff6f844>
   91314:	010002b4 	movhi	r4,10
   91318:	2139a384 	addi	r4,r4,-6514
   9131c:	d9003515 	stw	r4,212(sp)
   91320:	003ae406 	br	8feb4 <__ram_exceptions_end+0xfff6fc80>
   91324:	013fffc4 	movi	r4,-1
   91328:	0039fa06 	br	8fb14 <__ram_exceptions_end+0xfff6f8e0>
   9132c:	d9402d17 	ldw	r5,180(sp)
   91330:	d9801e04 	addi	r6,sp,120
   91334:	9809883a 	mov	r4,r19
   91338:	00945680 	call	94568 <__ssprint_r>
   9133c:	1039c91e 	bne	r2,zero,8fa64 <__ram_exceptions_end+0xfff6f830>
   91340:	d8c02017 	ldw	r3,128(sp)
   91344:	da000404 	addi	r8,sp,16
   91348:	003d8406 	br	9095c <__ram_exceptions_end+0xfff70728>
   9134c:	0023883a 	mov	r17,zero
   91350:	003d8306 	br	90960 <__ram_exceptions_end+0xfff7072c>
   91354:	010002b4 	movhi	r4,10
   91358:	21399f84 	addi	r4,r4,-6530
   9135c:	d9002c15 	stw	r4,176(sp)
   91360:	d9002c17 	ldw	r4,176(sp)
   91364:	1c47883a 	add	r3,r3,r17
   91368:	10800044 	addi	r2,r2,1
   9136c:	41000015 	stw	r4,0(r8)
   91370:	44400115 	stw	r17,4(r8)
   91374:	d8c02015 	stw	r3,128(sp)
   91378:	d8801f15 	stw	r2,124(sp)
   9137c:	010001c4 	movi	r4,7
   91380:	20bfcd16 	blt	r4,r2,912b8 <__ram_exceptions_end+0xfff71084>
   91384:	42000204 	addi	r8,r8,8
   91388:	003fd306 	br	912d8 <__ram_exceptions_end+0xfff710a4>
   9138c:	d9402d17 	ldw	r5,180(sp)
   91390:	d9801e04 	addi	r6,sp,120
   91394:	9809883a 	mov	r4,r19
   91398:	00945680 	call	94568 <__ssprint_r>
   9139c:	1039b11e 	bne	r2,zero,8fa64 <__ram_exceptions_end+0xfff6f830>
   913a0:	d8802617 	ldw	r2,152(sp)
   913a4:	d8c02017 	ldw	r3,128(sp)
   913a8:	da000404 	addi	r8,sp,16
   913ac:	003e1c06 	br	90c20 <__ram_exceptions_end+0xfff709ec>
   913b0:	d8802a17 	ldw	r2,168(sp)
   913b4:	00c00184 	movi	r3,6
   913b8:	1880012e 	bgeu	r3,r2,913c0 <___svfprintf_internal_r+0x1cf8>
   913bc:	1805883a 	mov	r2,r3
   913c0:	d8802b15 	stw	r2,172(sp)
   913c4:	1000f316 	blt	r2,zero,91794 <___svfprintf_internal_r+0x20cc>
   913c8:	040002b4 	movhi	r16,10
   913cc:	d8802915 	stw	r2,164(sp)
   913d0:	dd002e15 	stw	r20,184(sp)
   913d4:	d8002a15 	stw	zero,168(sp)
   913d8:	d8003215 	stw	zero,200(sp)
   913dc:	84388404 	addi	r16,r16,-7664
   913e0:	0039883a 	mov	fp,zero
   913e4:	003a7d06 	br	8fddc <__ram_exceptions_end+0xfff6fba8>
   913e8:	010002b4 	movhi	r4,10
   913ec:	2139a384 	addi	r4,r4,-6514
   913f0:	d9003515 	stw	r4,212(sp)
   913f4:	003b3d06 	br	900ec <__ram_exceptions_end+0xfff6feb8>
   913f8:	d9402d17 	ldw	r5,180(sp)
   913fc:	d9801e04 	addi	r6,sp,120
   91400:	9809883a 	mov	r4,r19
   91404:	00945680 	call	94568 <__ssprint_r>
   91408:	1039961e 	bne	r2,zero,8fa64 <__ram_exceptions_end+0xfff6f830>
   9140c:	d8802617 	ldw	r2,152(sp)
   91410:	d9403317 	ldw	r5,204(sp)
   91414:	d8c02017 	ldw	r3,128(sp)
   91418:	da000404 	addi	r8,sp,16
   9141c:	2885c83a 	sub	r2,r5,r2
   91420:	003e1006 	br	90c64 <__ram_exceptions_end+0xfff70a30>
   91424:	00800044 	movi	r2,1
   91428:	10803fcc 	andi	r2,r2,255
   9142c:	00c00044 	movi	r3,1
   91430:	10fa1026 	beq	r2,r3,8fc74 <__ram_exceptions_end+0xfff6fa40>
   91434:	00c00084 	movi	r3,2
   91438:	10fb8226 	beq	r2,r3,90244 <__ram_exceptions_end+0xfff70010>
   9143c:	003a4206 	br	8fd48 <__ram_exceptions_end+0xfff6fb14>
   91440:	0021883a 	mov	r16,zero
   91444:	003e0806 	br	90c68 <__ram_exceptions_end+0xfff70a34>
   91448:	07000b44 	movi	fp,45
   9144c:	df002785 	stb	fp,158(sp)
   91450:	0039e306 	br	8fbe0 <__ram_exceptions_end+0xfff6f9ac>
   91454:	d9002e17 	ldw	r4,184(sp)
   91458:	d9402f17 	ldw	r5,188(sp)
   9145c:	20800017 	ldw	r2,0(r4)
   91460:	21000104 	addi	r4,r4,4
   91464:	d9002e15 	stw	r4,184(sp)
   91468:	11400015 	stw	r5,0(r2)
   9146c:	0038c106 	br	8f774 <__ram_exceptions_end+0xfff6f540>
   91470:	00c00b44 	movi	r3,45
   91474:	d8c02785 	stb	r3,158(sp)
   91478:	d8802915 	stw	r2,164(sp)
   9147c:	dc802c17 	ldw	r18,176(sp)
   91480:	d8002a15 	stw	zero,168(sp)
   91484:	07000b44 	movi	fp,45
   91488:	003a5106 	br	8fdd0 <__ram_exceptions_end+0xfff6fb9c>
   9148c:	9080004c 	andi	r2,r18,1
   91490:	1000941e 	bne	r2,zero,916e4 <___svfprintf_internal_r+0x201c>
   91494:	d8802117 	ldw	r2,132(sp)
   91498:	1405c83a 	sub	r2,r2,r16
   9149c:	d8803315 	stw	r2,204(sp)
   914a0:	b441151e 	bne	r22,r17,918f8 <___svfprintf_internal_r+0x2230>
   914a4:	dd802617 	ldw	r22,152(sp)
   914a8:	00bfff44 	movi	r2,-3
   914ac:	b0801a16 	blt	r22,r2,91518 <___svfprintf_internal_r+0x1e50>
   914b0:	d9402a17 	ldw	r5,168(sp)
   914b4:	2d801816 	blt	r5,r22,91518 <___svfprintf_internal_r+0x1e50>
   914b8:	dd803215 	stw	r22,200(sp)
   914bc:	003f3a06 	br	911a8 <__ram_exceptions_end+0xfff70f74>
   914c0:	1025883a 	mov	r18,r2
   914c4:	0039883a 	mov	fp,zero
   914c8:	00800084 	movi	r2,2
   914cc:	003fd606 	br	91428 <__ram_exceptions_end+0xfff711f4>
   914d0:	9080004c 	andi	r2,r18,1
   914d4:	103f191e 	bne	r2,zero,9113c <__ram_exceptions_end+0xfff70f08>
   914d8:	d8802117 	ldw	r2,132(sp)
   914dc:	003f2806 	br	91180 <__ram_exceptions_end+0xfff70f4c>
   914e0:	010002b4 	movhi	r4,10
   914e4:	21399f84 	addi	r4,r4,-6530
   914e8:	d9002c15 	stw	r4,176(sp)
   914ec:	003c7c06 	br	906e0 <__ram_exceptions_end+0xfff704ac>
   914f0:	e005883a 	mov	r2,fp
   914f4:	003f2206 	br	91180 <__ram_exceptions_end+0xfff70f4c>
   914f8:	d9002a17 	ldw	r4,168(sp)
   914fc:	df002783 	ldbu	fp,158(sp)
   91500:	dd002e15 	stw	r20,184(sp)
   91504:	d9002915 	stw	r4,164(sp)
   91508:	d9002b15 	stw	r4,172(sp)
   9150c:	d8002a15 	stw	zero,168(sp)
   91510:	d8003215 	stw	zero,200(sp)
   91514:	003a2a06 	br	8fdc0 <__ram_exceptions_end+0xfff6fb8c>
   91518:	8c7fff84 	addi	r17,r17,-2
   9151c:	b5bfffc4 	addi	r22,r22,-1
   91520:	dd802615 	stw	r22,152(sp)
   91524:	dc4022c5 	stb	r17,139(sp)
   91528:	b000c316 	blt	r22,zero,91838 <___svfprintf_internal_r+0x2170>
   9152c:	00800ac4 	movi	r2,43
   91530:	d8802305 	stb	r2,140(sp)
   91534:	00800244 	movi	r2,9
   91538:	15806e16 	blt	r2,r22,916f4 <___svfprintf_internal_r+0x202c>
   9153c:	00800c04 	movi	r2,48
   91540:	b5800c04 	addi	r22,r22,48
   91544:	d8802345 	stb	r2,141(sp)
   91548:	dd802385 	stb	r22,142(sp)
   9154c:	d88023c4 	addi	r2,sp,143
   91550:	df0022c4 	addi	fp,sp,139
   91554:	d8c03317 	ldw	r3,204(sp)
   91558:	1739c83a 	sub	fp,r2,fp
   9155c:	d9003317 	ldw	r4,204(sp)
   91560:	e0c7883a 	add	r3,fp,r3
   91564:	df003b15 	stw	fp,236(sp)
   91568:	d8c02b15 	stw	r3,172(sp)
   9156c:	00800044 	movi	r2,1
   91570:	1100b70e 	bge	r2,r4,91850 <___svfprintf_internal_r+0x2188>
   91574:	d8c02b17 	ldw	r3,172(sp)
   91578:	18c00044 	addi	r3,r3,1
   9157c:	d8c02b15 	stw	r3,172(sp)
   91580:	1805883a 	mov	r2,r3
   91584:	1800b016 	blt	r3,zero,91848 <___svfprintf_internal_r+0x2180>
   91588:	d8003215 	stw	zero,200(sp)
   9158c:	003f1006 	br	911d0 <__ram_exceptions_end+0xfff70f9c>
   91590:	d8802a17 	ldw	r2,168(sp)
   91594:	103ec71e 	bne	r2,zero,910b4 <__ram_exceptions_end+0xfff70e80>
   91598:	dc002a15 	stw	r16,168(sp)
   9159c:	003ec506 	br	910b4 <__ram_exceptions_end+0xfff70e80>
   915a0:	d9402d17 	ldw	r5,180(sp)
   915a4:	d9801e04 	addi	r6,sp,120
   915a8:	9809883a 	mov	r4,r19
   915ac:	00945680 	call	94568 <__ssprint_r>
   915b0:	10392c1e 	bne	r2,zero,8fa64 <__ram_exceptions_end+0xfff6f830>
   915b4:	dc402617 	ldw	r17,152(sp)
   915b8:	d8c02017 	ldw	r3,128(sp)
   915bc:	d8801f17 	ldw	r2,124(sp)
   915c0:	da000404 	addi	r8,sp,16
   915c4:	003e7706 	br	90fa4 <__ram_exceptions_end+0xfff70d70>
   915c8:	182f883a 	mov	r23,r3
   915cc:	d8002a15 	stw	zero,168(sp)
   915d0:	00389306 	br	8f820 <__ram_exceptions_end+0xfff6f5ec>
   915d4:	d8c02a17 	ldw	r3,168(sp)
   915d8:	d8802104 	addi	r2,sp,132
   915dc:	d8800315 	stw	r2,12(sp)
   915e0:	d9403617 	ldw	r5,216(sp)
   915e4:	d8802504 	addi	r2,sp,148
   915e8:	d8800215 	stw	r2,8(sp)
   915ec:	d8802604 	addi	r2,sp,152
   915f0:	d8c00015 	stw	r3,0(sp)
   915f4:	9809883a 	mov	r4,r19
   915f8:	d8800115 	stw	r2,4(sp)
   915fc:	01c000c4 	movi	r7,3
   91600:	a00d883a 	mov	r6,r20
   91604:	da003e15 	stw	r8,248(sp)
   91608:	00873a00 	call	873a0 <_dtoa_r>
   9160c:	d9002a17 	ldw	r4,168(sp)
   91610:	da003e17 	ldw	r8,248(sp)
   91614:	1021883a 	mov	r16,r2
   91618:	1139883a 	add	fp,r2,r4
   9161c:	2007883a 	mov	r3,r4
   91620:	81000007 	ldb	r4,0(r16)
   91624:	00800c04 	movi	r2,48
   91628:	20806f26 	beq	r4,r2,917e8 <___svfprintf_internal_r+0x2120>
   9162c:	d8c02617 	ldw	r3,152(sp)
   91630:	e0f9883a 	add	fp,fp,r3
   91634:	003ec206 	br	91140 <__ram_exceptions_end+0xfff70f0c>
   91638:	00c00b44 	movi	r3,45
   9163c:	2520003c 	xorhi	r20,r4,32768
   91640:	d8c02905 	stb	r3,164(sp)
   91644:	003ea106 	br	910cc <__ram_exceptions_end+0xfff70e98>
   91648:	d8c03217 	ldw	r3,200(sp)
   9164c:	00c0890e 	bge	zero,r3,91874 <___svfprintf_internal_r+0x21ac>
   91650:	00800044 	movi	r2,1
   91654:	d9003317 	ldw	r4,204(sp)
   91658:	1105883a 	add	r2,r2,r4
   9165c:	d8802b15 	stw	r2,172(sp)
   91660:	10005f16 	blt	r2,zero,917e0 <___svfprintf_internal_r+0x2118>
   91664:	044019c4 	movi	r17,103
   91668:	003ed906 	br	911d0 <__ram_exceptions_end+0xfff70f9c>
   9166c:	d9002a17 	ldw	r4,168(sp)
   91670:	20c00044 	addi	r3,r4,1
   91674:	003e9c06 	br	910e8 <__ram_exceptions_end+0xfff70eb4>
   91678:	d9002a17 	ldw	r4,168(sp)
   9167c:	00c0680e 	bge	zero,r3,91820 <___svfprintf_internal_r+0x2158>
   91680:	2000461e 	bne	r4,zero,9179c <___svfprintf_internal_r+0x20d4>
   91684:	9480004c 	andi	r18,r18,1
   91688:	9000441e 	bne	r18,zero,9179c <___svfprintf_internal_r+0x20d4>
   9168c:	1805883a 	mov	r2,r3
   91690:	1800a116 	blt	r3,zero,91918 <___svfprintf_internal_r+0x2250>
   91694:	d8c03217 	ldw	r3,200(sp)
   91698:	d8c02b15 	stw	r3,172(sp)
   9169c:	003ecc06 	br	911d0 <__ram_exceptions_end+0xfff70f9c>
   916a0:	d9402a17 	ldw	r5,168(sp)
   916a4:	d8802104 	addi	r2,sp,132
   916a8:	d8800315 	stw	r2,12(sp)
   916ac:	d9400015 	stw	r5,0(sp)
   916b0:	d8802504 	addi	r2,sp,148
   916b4:	d9403617 	ldw	r5,216(sp)
   916b8:	d8800215 	stw	r2,8(sp)
   916bc:	d8802604 	addi	r2,sp,152
   916c0:	d8800115 	stw	r2,4(sp)
   916c4:	01c000c4 	movi	r7,3
   916c8:	a00d883a 	mov	r6,r20
   916cc:	9809883a 	mov	r4,r19
   916d0:	da003e15 	stw	r8,248(sp)
   916d4:	00873a00 	call	873a0 <_dtoa_r>
   916d8:	d8c02a17 	ldw	r3,168(sp)
   916dc:	da003e17 	ldw	r8,248(sp)
   916e0:	1021883a 	mov	r16,r2
   916e4:	00801184 	movi	r2,70
   916e8:	80f9883a 	add	fp,r16,r3
   916ec:	88bfcc26 	beq	r17,r2,91620 <__ram_exceptions_end+0xfff713ec>
   916f0:	003e9306 	br	91140 <__ram_exceptions_end+0xfff70f0c>
   916f4:	df0022c4 	addi	fp,sp,139
   916f8:	dc002a15 	stw	r16,168(sp)
   916fc:	9829883a 	mov	r20,r19
   91700:	e021883a 	mov	r16,fp
   91704:	4027883a 	mov	r19,r8
   91708:	b009883a 	mov	r4,r22
   9170c:	01400284 	movi	r5,10
   91710:	00820e40 	call	820e4 <__modsi3>
   91714:	10800c04 	addi	r2,r2,48
   91718:	843fffc4 	addi	r16,r16,-1
   9171c:	b009883a 	mov	r4,r22
   91720:	01400284 	movi	r5,10
   91724:	80800005 	stb	r2,0(r16)
   91728:	00820600 	call	82060 <__divsi3>
   9172c:	102d883a 	mov	r22,r2
   91730:	00800244 	movi	r2,9
   91734:	15bff416 	blt	r2,r22,91708 <__ram_exceptions_end+0xfff714d4>
   91738:	9811883a 	mov	r8,r19
   9173c:	b0800c04 	addi	r2,r22,48
   91740:	a027883a 	mov	r19,r20
   91744:	8029883a 	mov	r20,r16
   91748:	a17fffc4 	addi	r5,r20,-1
   9174c:	a0bfffc5 	stb	r2,-1(r20)
   91750:	dc002a17 	ldw	r16,168(sp)
   91754:	2f00782e 	bgeu	r5,fp,91938 <___svfprintf_internal_r+0x2270>
   91758:	d9c02384 	addi	r7,sp,142
   9175c:	3d0fc83a 	sub	r7,r7,r20
   91760:	d9002344 	addi	r4,sp,141
   91764:	e1cf883a 	add	r7,fp,r7
   91768:	00000106 	br	91770 <___svfprintf_internal_r+0x20a8>
   9176c:	28800003 	ldbu	r2,0(r5)
   91770:	20800005 	stb	r2,0(r4)
   91774:	21000044 	addi	r4,r4,1
   91778:	29400044 	addi	r5,r5,1
   9177c:	21fffb1e 	bne	r4,r7,9176c <__ram_exceptions_end+0xfff71538>
   91780:	d8802304 	addi	r2,sp,140
   91784:	1505c83a 	sub	r2,r2,r20
   91788:	d8c02344 	addi	r3,sp,141
   9178c:	1885883a 	add	r2,r3,r2
   91790:	003f7006 	br	91554 <__ram_exceptions_end+0xfff71320>
   91794:	0005883a 	mov	r2,zero
   91798:	003f0b06 	br	913c8 <__ram_exceptions_end+0xfff71194>
   9179c:	d9002a17 	ldw	r4,168(sp)
   917a0:	d8c03217 	ldw	r3,200(sp)
   917a4:	20800044 	addi	r2,r4,1
   917a8:	1885883a 	add	r2,r3,r2
   917ac:	d8802b15 	stw	r2,172(sp)
   917b0:	103e870e 	bge	r2,zero,911d0 <__ram_exceptions_end+0xfff70f9c>
   917b4:	0005883a 	mov	r2,zero
   917b8:	003e8506 	br	911d0 <__ram_exceptions_end+0xfff70f9c>
   917bc:	010002b4 	movhi	r4,10
   917c0:	21399f84 	addi	r4,r4,-6530
   917c4:	d9002c15 	stw	r4,176(sp)
   917c8:	003cc506 	br	90ae0 <__ram_exceptions_end+0xfff708ac>
   917cc:	d8c03217 	ldw	r3,200(sp)
   917d0:	18c00044 	addi	r3,r3,1
   917d4:	d8c02b15 	stw	r3,172(sp)
   917d8:	1805883a 	mov	r2,r3
   917dc:	183fa10e 	bge	r3,zero,91664 <__ram_exceptions_end+0xfff71430>
   917e0:	0005883a 	mov	r2,zero
   917e4:	003f9f06 	br	91664 <__ram_exceptions_end+0xfff71430>
   917e8:	d9003617 	ldw	r4,216(sp)
   917ec:	000d883a 	mov	r6,zero
   917f0:	000f883a 	mov	r7,zero
   917f4:	a00b883a 	mov	r5,r20
   917f8:	d8c03d15 	stw	r3,244(sp)
   917fc:	da003e15 	stw	r8,248(sp)
   91800:	0097e780 	call	97e78 <__eqdf2>
   91804:	d8c03d17 	ldw	r3,244(sp)
   91808:	da003e17 	ldw	r8,248(sp)
   9180c:	103f8726 	beq	r2,zero,9162c <__ram_exceptions_end+0xfff713f8>
   91810:	00800044 	movi	r2,1
   91814:	10c7c83a 	sub	r3,r2,r3
   91818:	d8c02615 	stw	r3,152(sp)
   9181c:	003f8406 	br	91630 <__ram_exceptions_end+0xfff713fc>
   91820:	20000e1e 	bne	r4,zero,9185c <___svfprintf_internal_r+0x2194>
   91824:	9480004c 	andi	r18,r18,1
   91828:	90000c1e 	bne	r18,zero,9185c <___svfprintf_internal_r+0x2194>
   9182c:	00800044 	movi	r2,1
   91830:	d8802b15 	stw	r2,172(sp)
   91834:	003e6606 	br	911d0 <__ram_exceptions_end+0xfff70f9c>
   91838:	00800b44 	movi	r2,45
   9183c:	05adc83a 	sub	r22,zero,r22
   91840:	d8802305 	stb	r2,140(sp)
   91844:	003f3b06 	br	91534 <__ram_exceptions_end+0xfff71300>
   91848:	0005883a 	mov	r2,zero
   9184c:	003f4e06 	br	91588 <__ram_exceptions_end+0xfff71354>
   91850:	90a4703a 	and	r18,r18,r2
   91854:	903f4a26 	beq	r18,zero,91580 <__ram_exceptions_end+0xfff7134c>
   91858:	003f4606 	br	91574 <__ram_exceptions_end+0xfff71340>
   9185c:	d8c02a17 	ldw	r3,168(sp)
   91860:	18c00084 	addi	r3,r3,2
   91864:	d8c02b15 	stw	r3,172(sp)
   91868:	1805883a 	mov	r2,r3
   9186c:	183e580e 	bge	r3,zero,911d0 <__ram_exceptions_end+0xfff70f9c>
   91870:	003fd006 	br	917b4 <__ram_exceptions_end+0xfff71580>
   91874:	00800084 	movi	r2,2
   91878:	10c5c83a 	sub	r2,r2,r3
   9187c:	003f7506 	br	91654 <__ram_exceptions_end+0xfff71420>
   91880:	d9402e17 	ldw	r5,184(sp)
   91884:	d9002e17 	ldw	r4,184(sp)
   91888:	bc400043 	ldbu	r17,1(r23)
   9188c:	29400017 	ldw	r5,0(r5)
   91890:	20800104 	addi	r2,r4,4
   91894:	d8802e15 	stw	r2,184(sp)
   91898:	d9402a15 	stw	r5,168(sp)
   9189c:	182f883a 	mov	r23,r3
   918a0:	283df10e 	bge	r5,zero,91068 <__ram_exceptions_end+0xfff70e34>
   918a4:	8c403fcc 	andi	r17,r17,255
   918a8:	017fffc4 	movi	r5,-1
   918ac:	8c40201c 	xori	r17,r17,128
   918b0:	d9402a15 	stw	r5,168(sp)
   918b4:	8c7fe004 	addi	r17,r17,-128
   918b8:	0037d806 	br	8f81c <__ram_exceptions_end+0xfff6f5e8>
   918bc:	9080004c 	andi	r2,r18,1
   918c0:	0039883a 	mov	fp,zero
   918c4:	10000726 	beq	r2,zero,918e4 <___svfprintf_internal_r+0x221c>
   918c8:	d8c02817 	ldw	r3,160(sp)
   918cc:	dc001dc4 	addi	r16,sp,119
   918d0:	00800c04 	movi	r2,48
   918d4:	1c07c83a 	sub	r3,r3,r16
   918d8:	d8801dc5 	stb	r2,119(sp)
   918dc:	d8c02b15 	stw	r3,172(sp)
   918e0:	00393106 	br	8fda8 <__ram_exceptions_end+0xfff6fb74>
   918e4:	d8002b15 	stw	zero,172(sp)
   918e8:	dc001e04 	addi	r16,sp,120
   918ec:	00392e06 	br	8fda8 <__ram_exceptions_end+0xfff6fb74>
   918f0:	0005883a 	mov	r2,zero
   918f4:	003e3306 	br	911c4 <__ram_exceptions_end+0xfff70f90>
   918f8:	dd802617 	ldw	r22,152(sp)
   918fc:	003f0706 	br	9151c <__ram_exceptions_end+0xfff712e8>
   91900:	d8c02b03 	ldbu	r3,172(sp)
   91904:	d8c02785 	stb	r3,158(sp)
   91908:	003a3506 	br	901e0 <__ram_exceptions_end+0xfff6ffac>
   9190c:	d8c02b03 	ldbu	r3,172(sp)
   91910:	d8c02785 	stb	r3,158(sp)
   91914:	003a1706 	br	90174 <__ram_exceptions_end+0xfff6ff40>
   91918:	0005883a 	mov	r2,zero
   9191c:	003f5d06 	br	91694 <__ram_exceptions_end+0xfff71460>
   91920:	d8c02b03 	ldbu	r3,172(sp)
   91924:	d8c02785 	stb	r3,158(sp)
   91928:	0038f306 	br	8fcf8 <__ram_exceptions_end+0xfff6fac4>
   9192c:	d8c02b03 	ldbu	r3,172(sp)
   91930:	d8c02785 	stb	r3,158(sp)
   91934:	0038be06 	br	8fc30 <__ram_exceptions_end+0xfff6f9fc>
   91938:	d8802344 	addi	r2,sp,141
   9193c:	003f0506 	br	91554 <__ram_exceptions_end+0xfff71320>
   91940:	d8c02b03 	ldbu	r3,172(sp)
   91944:	d8c02785 	stb	r3,158(sp)
   91948:	00388b06 	br	8fb78 <__ram_exceptions_end+0xfff6f944>
   9194c:	d8c02b03 	ldbu	r3,172(sp)
   91950:	d8c02785 	stb	r3,158(sp)
   91954:	003ad706 	br	904b4 <__ram_exceptions_end+0xfff70280>
   91958:	d9403917 	ldw	r5,228(sp)
   9195c:	00800304 	movi	r2,12
   91960:	28800015 	stw	r2,0(r5)
   91964:	00bfffc4 	movi	r2,-1
   91968:	00384306 	br	8fa78 <__ram_exceptions_end+0xfff6f844>
   9196c:	d8c02b03 	ldbu	r3,172(sp)
   91970:	d8c02785 	stb	r3,158(sp)
   91974:	003ab606 	br	90450 <__ram_exceptions_end+0xfff7021c>
   91978:	d8c02b03 	ldbu	r3,172(sp)
   9197c:	d8c02785 	stb	r3,158(sp)
   91980:	003a8906 	br	903a8 <__ram_exceptions_end+0xfff70174>

00091984 <__submore>:
   91984:	defffa04 	addi	sp,sp,-24
   91988:	dc000015 	stw	r16,0(sp)
   9198c:	2821883a 	mov	r16,r5
   91990:	29400c17 	ldw	r5,48(r5)
   91994:	dfc00515 	stw	ra,20(sp)
   91998:	dd000415 	stw	r20,16(sp)
   9199c:	dcc00315 	stw	r19,12(sp)
   919a0:	dc800215 	stw	r18,8(sp)
   919a4:	dc400115 	stw	r17,4(sp)
   919a8:	80801004 	addi	r2,r16,64
   919ac:	28801726 	beq	r5,r2,91a0c <__submore+0x88>
   919b0:	84400d17 	ldw	r17,52(r16)
   919b4:	8c67883a 	add	r19,r17,r17
   919b8:	980d883a 	mov	r6,r19
   919bc:	008b6380 	call	8b638 <_realloc_r>
   919c0:	1025883a 	mov	r18,r2
   919c4:	10002226 	beq	r2,zero,91a50 <__submore+0xcc>
   919c8:	1469883a 	add	r20,r2,r17
   919cc:	880d883a 	mov	r6,r17
   919d0:	100b883a 	mov	r5,r2
   919d4:	a009883a 	mov	r4,r20
   919d8:	0082be40 	call	82be4 <memcpy>
   919dc:	0005883a 	mov	r2,zero
   919e0:	85000015 	stw	r20,0(r16)
   919e4:	84800c15 	stw	r18,48(r16)
   919e8:	84c00d15 	stw	r19,52(r16)
   919ec:	dfc00517 	ldw	ra,20(sp)
   919f0:	dd000417 	ldw	r20,16(sp)
   919f4:	dcc00317 	ldw	r19,12(sp)
   919f8:	dc800217 	ldw	r18,8(sp)
   919fc:	dc400117 	ldw	r17,4(sp)
   91a00:	dc000017 	ldw	r16,0(sp)
   91a04:	dec00604 	addi	sp,sp,24
   91a08:	f800283a 	ret
   91a0c:	04410004 	movi	r17,1024
   91a10:	880b883a 	mov	r5,r17
   91a14:	008235c0 	call	8235c <_malloc_r>
   91a18:	1007883a 	mov	r3,r2
   91a1c:	10000c26 	beq	r2,zero,91a50 <__submore+0xcc>
   91a20:	80801083 	ldbu	r2,66(r16)
   91a24:	80c00c15 	stw	r3,48(r16)
   91a28:	84400d15 	stw	r17,52(r16)
   91a2c:	1880ffc5 	stb	r2,1023(r3)
   91a30:	81401043 	ldbu	r5,65(r16)
   91a34:	1900ff44 	addi	r4,r3,1021
   91a38:	0005883a 	mov	r2,zero
   91a3c:	1940ff85 	stb	r5,1022(r3)
   91a40:	81401003 	ldbu	r5,64(r16)
   91a44:	1940ff45 	stb	r5,1021(r3)
   91a48:	81000015 	stw	r4,0(r16)
   91a4c:	003fe706 	br	919ec <__ram_exceptions_end+0xfff717b8>
   91a50:	00bfffc4 	movi	r2,-1
   91a54:	003fe506 	br	919ec <__ram_exceptions_end+0xfff717b8>

00091a58 <_ungetc_r>:
   91a58:	00bfffc4 	movi	r2,-1
   91a5c:	28806126 	beq	r5,r2,91be4 <_ungetc_r+0x18c>
   91a60:	defffb04 	addi	sp,sp,-20
   91a64:	dcc00315 	stw	r19,12(sp)
   91a68:	dc400115 	stw	r17,4(sp)
   91a6c:	dc000015 	stw	r16,0(sp)
   91a70:	dfc00415 	stw	ra,16(sp)
   91a74:	dc800215 	stw	r18,8(sp)
   91a78:	2023883a 	mov	r17,r4
   91a7c:	3021883a 	mov	r16,r6
   91a80:	2827883a 	mov	r19,r5
   91a84:	20000226 	beq	r4,zero,91a90 <_ungetc_r+0x38>
   91a88:	20800e17 	ldw	r2,56(r4)
   91a8c:	10002e26 	beq	r2,zero,91b48 <_ungetc_r+0xf0>
   91a90:	80c0030b 	ldhu	r3,12(r16)
   91a94:	1888000c 	andi	r2,r3,8192
   91a98:	1000051e 	bne	r2,zero,91ab0 <_ungetc_r+0x58>
   91a9c:	81001917 	ldw	r4,100(r16)
   91aa0:	00b7ffc4 	movi	r2,-8193
   91aa4:	18c80014 	ori	r3,r3,8192
   91aa8:	2084703a 	and	r2,r4,r2
   91aac:	80801915 	stw	r2,100(r16)
   91ab0:	00bff7c4 	movi	r2,-33
   91ab4:	1884703a 	and	r2,r3,r2
   91ab8:	8080030d 	sth	r2,12(r16)
   91abc:	1900010c 	andi	r4,r3,4
   91ac0:	2000061e 	bne	r4,zero,91adc <_ungetc_r+0x84>
   91ac4:	1900040c 	andi	r4,r3,16
   91ac8:	20001d26 	beq	r4,zero,91b40 <_ungetc_r+0xe8>
   91acc:	18c0020c 	andi	r3,r3,8
   91ad0:	1800331e 	bne	r3,zero,91ba0 <_ungetc_r+0x148>
   91ad4:	10800114 	ori	r2,r2,4
   91ad8:	8080030d 	sth	r2,12(r16)
   91adc:	80800c17 	ldw	r2,48(r16)
   91ae0:	9c803fcc 	andi	r18,r19,255
   91ae4:	10001a26 	beq	r2,zero,91b50 <_ungetc_r+0xf8>
   91ae8:	80c00117 	ldw	r3,4(r16)
   91aec:	80800d17 	ldw	r2,52(r16)
   91af0:	18800f0e 	bge	r3,r2,91b30 <_ungetc_r+0xd8>
   91af4:	80c00017 	ldw	r3,0(r16)
   91af8:	9005883a 	mov	r2,r18
   91afc:	193fffc4 	addi	r4,r3,-1
   91b00:	81000015 	stw	r4,0(r16)
   91b04:	1cffffc5 	stb	r19,-1(r3)
   91b08:	80c00117 	ldw	r3,4(r16)
   91b0c:	18c00044 	addi	r3,r3,1
   91b10:	80c00115 	stw	r3,4(r16)
   91b14:	dfc00417 	ldw	ra,16(sp)
   91b18:	dcc00317 	ldw	r19,12(sp)
   91b1c:	dc800217 	ldw	r18,8(sp)
   91b20:	dc400117 	ldw	r17,4(sp)
   91b24:	dc000017 	ldw	r16,0(sp)
   91b28:	dec00504 	addi	sp,sp,20
   91b2c:	f800283a 	ret
   91b30:	800b883a 	mov	r5,r16
   91b34:	8809883a 	mov	r4,r17
   91b38:	00919840 	call	91984 <__submore>
   91b3c:	103fed26 	beq	r2,zero,91af4 <__ram_exceptions_end+0xfff718c0>
   91b40:	00bfffc4 	movi	r2,-1
   91b44:	003ff306 	br	91b14 <__ram_exceptions_end+0xfff718e0>
   91b48:	00890300 	call	89030 <__sinit>
   91b4c:	003fd006 	br	91a90 <__ram_exceptions_end+0xfff7185c>
   91b50:	80c00417 	ldw	r3,16(r16)
   91b54:	80800017 	ldw	r2,0(r16)
   91b58:	18000326 	beq	r3,zero,91b68 <_ungetc_r+0x110>
   91b5c:	1880022e 	bgeu	r3,r2,91b68 <_ungetc_r+0x110>
   91b60:	10ffffc3 	ldbu	r3,-1(r2)
   91b64:	90c01826 	beq	r18,r3,91bc8 <_ungetc_r+0x170>
   91b68:	81400117 	ldw	r5,4(r16)
   91b6c:	80800e15 	stw	r2,56(r16)
   91b70:	008000c4 	movi	r2,3
   91b74:	81001004 	addi	r4,r16,64
   91b78:	80c01084 	addi	r3,r16,66
   91b7c:	80800d15 	stw	r2,52(r16)
   91b80:	00800044 	movi	r2,1
   91b84:	80800115 	stw	r2,4(r16)
   91b88:	81400f15 	stw	r5,60(r16)
   91b8c:	81000c15 	stw	r4,48(r16)
   91b90:	84c01085 	stb	r19,66(r16)
   91b94:	80c00015 	stw	r3,0(r16)
   91b98:	9005883a 	mov	r2,r18
   91b9c:	003fdd06 	br	91b14 <__ram_exceptions_end+0xfff718e0>
   91ba0:	800b883a 	mov	r5,r16
   91ba4:	8809883a 	mov	r4,r17
   91ba8:	0088c440 	call	88c44 <_fflush_r>
   91bac:	103fe41e 	bne	r2,zero,91b40 <__ram_exceptions_end+0xfff7190c>
   91bb0:	8080030b 	ldhu	r2,12(r16)
   91bb4:	00fffdc4 	movi	r3,-9
   91bb8:	80000215 	stw	zero,8(r16)
   91bbc:	1884703a 	and	r2,r3,r2
   91bc0:	80000615 	stw	zero,24(r16)
   91bc4:	003fc306 	br	91ad4 <__ram_exceptions_end+0xfff718a0>
   91bc8:	80c00117 	ldw	r3,4(r16)
   91bcc:	10bfffc4 	addi	r2,r2,-1
   91bd0:	80800015 	stw	r2,0(r16)
   91bd4:	18800044 	addi	r2,r3,1
   91bd8:	80800115 	stw	r2,4(r16)
   91bdc:	9005883a 	mov	r2,r18
   91be0:	003fcc06 	br	91b14 <__ram_exceptions_end+0xfff718e0>
   91be4:	00bfffc4 	movi	r2,-1
   91be8:	f800283a 	ret

00091bec <ungetc>:
   91bec:	008002b4 	movhi	r2,10
   91bf0:	10817a04 	addi	r2,r2,1512
   91bf4:	280d883a 	mov	r6,r5
   91bf8:	200b883a 	mov	r5,r4
   91bfc:	11000017 	ldw	r4,0(r2)
   91c00:	0091a581 	jmpi	91a58 <_ungetc_r>

00091c04 <__sprint_r.part.0>:
   91c04:	28801917 	ldw	r2,100(r5)
   91c08:	defff604 	addi	sp,sp,-40
   91c0c:	dd400515 	stw	r21,20(sp)
   91c10:	dfc00915 	stw	ra,36(sp)
   91c14:	df000815 	stw	fp,32(sp)
   91c18:	ddc00715 	stw	r23,28(sp)
   91c1c:	dd800615 	stw	r22,24(sp)
   91c20:	dd000415 	stw	r20,16(sp)
   91c24:	dcc00315 	stw	r19,12(sp)
   91c28:	dc800215 	stw	r18,8(sp)
   91c2c:	dc400115 	stw	r17,4(sp)
   91c30:	dc000015 	stw	r16,0(sp)
   91c34:	1088000c 	andi	r2,r2,8192
   91c38:	302b883a 	mov	r21,r6
   91c3c:	10002e26 	beq	r2,zero,91cf8 <__sprint_r.part.0+0xf4>
   91c40:	30800217 	ldw	r2,8(r6)
   91c44:	35800017 	ldw	r22,0(r6)
   91c48:	10002926 	beq	r2,zero,91cf0 <__sprint_r.part.0+0xec>
   91c4c:	2827883a 	mov	r19,r5
   91c50:	2029883a 	mov	r20,r4
   91c54:	b5c00104 	addi	r23,r22,4
   91c58:	04bfffc4 	movi	r18,-1
   91c5c:	bc400017 	ldw	r17,0(r23)
   91c60:	b4000017 	ldw	r16,0(r22)
   91c64:	0039883a 	mov	fp,zero
   91c68:	8822d0ba 	srli	r17,r17,2
   91c6c:	8800031e 	bne	r17,zero,91c7c <__sprint_r.part.0+0x78>
   91c70:	00001806 	br	91cd4 <__sprint_r.part.0+0xd0>
   91c74:	84000104 	addi	r16,r16,4
   91c78:	8f001526 	beq	r17,fp,91cd0 <__sprint_r.part.0+0xcc>
   91c7c:	81400017 	ldw	r5,0(r16)
   91c80:	980d883a 	mov	r6,r19
   91c84:	a009883a 	mov	r4,r20
   91c88:	00937980 	call	93798 <_fputwc_r>
   91c8c:	e7000044 	addi	fp,fp,1
   91c90:	14bff81e 	bne	r2,r18,91c74 <__ram_exceptions_end+0xfff71a40>
   91c94:	9005883a 	mov	r2,r18
   91c98:	a8000215 	stw	zero,8(r21)
   91c9c:	a8000115 	stw	zero,4(r21)
   91ca0:	dfc00917 	ldw	ra,36(sp)
   91ca4:	df000817 	ldw	fp,32(sp)
   91ca8:	ddc00717 	ldw	r23,28(sp)
   91cac:	dd800617 	ldw	r22,24(sp)
   91cb0:	dd400517 	ldw	r21,20(sp)
   91cb4:	dd000417 	ldw	r20,16(sp)
   91cb8:	dcc00317 	ldw	r19,12(sp)
   91cbc:	dc800217 	ldw	r18,8(sp)
   91cc0:	dc400117 	ldw	r17,4(sp)
   91cc4:	dc000017 	ldw	r16,0(sp)
   91cc8:	dec00a04 	addi	sp,sp,40
   91ccc:	f800283a 	ret
   91cd0:	a8800217 	ldw	r2,8(r21)
   91cd4:	8c63883a 	add	r17,r17,r17
   91cd8:	8c63883a 	add	r17,r17,r17
   91cdc:	1445c83a 	sub	r2,r2,r17
   91ce0:	a8800215 	stw	r2,8(r21)
   91ce4:	b5800204 	addi	r22,r22,8
   91ce8:	bdc00204 	addi	r23,r23,8
   91cec:	103fdb1e 	bne	r2,zero,91c5c <__ram_exceptions_end+0xfff71a28>
   91cf0:	0005883a 	mov	r2,zero
   91cf4:	003fe806 	br	91c98 <__ram_exceptions_end+0xfff71a64>
   91cf8:	00894b40 	call	894b4 <__sfvwrite_r>
   91cfc:	003fe606 	br	91c98 <__ram_exceptions_end+0xfff71a64>

00091d00 <__sprint_r>:
   91d00:	30c00217 	ldw	r3,8(r6)
   91d04:	18000126 	beq	r3,zero,91d0c <__sprint_r+0xc>
   91d08:	0091c041 	jmpi	91c04 <__sprint_r.part.0>
   91d0c:	30000115 	stw	zero,4(r6)
   91d10:	0005883a 	mov	r2,zero
   91d14:	f800283a 	ret

00091d18 <___vfiprintf_internal_r>:
   91d18:	deffca04 	addi	sp,sp,-216
   91d1c:	dd403115 	stw	r21,196(sp)
   91d20:	dfc03515 	stw	ra,212(sp)
   91d24:	df003415 	stw	fp,208(sp)
   91d28:	ddc03315 	stw	r23,204(sp)
   91d2c:	dd803215 	stw	r22,200(sp)
   91d30:	dd003015 	stw	r20,192(sp)
   91d34:	dcc02f15 	stw	r19,188(sp)
   91d38:	dc802e15 	stw	r18,184(sp)
   91d3c:	dc402d15 	stw	r17,180(sp)
   91d40:	dc002c15 	stw	r16,176(sp)
   91d44:	d9002115 	stw	r4,132(sp)
   91d48:	d9402015 	stw	r5,128(sp)
   91d4c:	d9c02215 	stw	r7,136(sp)
   91d50:	302b883a 	mov	r21,r6
   91d54:	20000226 	beq	r4,zero,91d60 <___vfiprintf_internal_r+0x48>
   91d58:	20800e17 	ldw	r2,56(r4)
   91d5c:	1000cf26 	beq	r2,zero,9209c <___vfiprintf_internal_r+0x384>
   91d60:	d8c02017 	ldw	r3,128(sp)
   91d64:	1880030b 	ldhu	r2,12(r3)
   91d68:	10c8000c 	andi	r3,r2,8192
   91d6c:	1800071e 	bne	r3,zero,91d8c <___vfiprintf_internal_r+0x74>
   91d70:	d9402017 	ldw	r5,128(sp)
   91d74:	00f7ffc4 	movi	r3,-8193
   91d78:	10880014 	ori	r2,r2,8192
   91d7c:	29001917 	ldw	r4,100(r5)
   91d80:	2880030d 	sth	r2,12(r5)
   91d84:	20c6703a 	and	r3,r4,r3
   91d88:	28c01915 	stw	r3,100(r5)
   91d8c:	10c0020c 	andi	r3,r2,8
   91d90:	1800a526 	beq	r3,zero,92028 <___vfiprintf_internal_r+0x310>
   91d94:	d9002017 	ldw	r4,128(sp)
   91d98:	20c00417 	ldw	r3,16(r4)
   91d9c:	1800a226 	beq	r3,zero,92028 <___vfiprintf_internal_r+0x310>
   91da0:	1080068c 	andi	r2,r2,26
   91da4:	00c00284 	movi	r3,10
   91da8:	10c0a826 	beq	r2,r3,9204c <___vfiprintf_internal_r+0x334>
   91dac:	d9001a04 	addi	r4,sp,104
   91db0:	d94019c4 	addi	r5,sp,103
   91db4:	048002b4 	movhi	r18,10
   91db8:	2145c83a 	sub	r2,r4,r5
   91dbc:	94b9a784 	addi	r18,r18,-6498
   91dc0:	d9001e15 	stw	r4,120(sp)
   91dc4:	d9401f15 	stw	r5,124(sp)
   91dc8:	dec01a15 	stw	sp,104(sp)
   91dcc:	d8001c15 	stw	zero,112(sp)
   91dd0:	d8001b15 	stw	zero,108(sp)
   91dd4:	d811883a 	mov	r8,sp
   91dd8:	d8002615 	stw	zero,152(sp)
   91ddc:	d8002415 	stw	zero,144(sp)
   91de0:	d8802815 	stw	r2,160(sp)
   91de4:	a82d883a 	mov	r22,r21
   91de8:	b0800007 	ldb	r2,0(r22)
   91dec:	10040d26 	beq	r2,zero,92e24 <___vfiprintf_internal_r+0x110c>
   91df0:	00c00944 	movi	r3,37
   91df4:	b029883a 	mov	r20,r22
   91df8:	10c0021e 	bne	r2,r3,91e04 <___vfiprintf_internal_r+0xec>
   91dfc:	00001606 	br	91e58 <___vfiprintf_internal_r+0x140>
   91e00:	10c00326 	beq	r2,r3,91e10 <___vfiprintf_internal_r+0xf8>
   91e04:	a5000044 	addi	r20,r20,1
   91e08:	a0800007 	ldb	r2,0(r20)
   91e0c:	103ffc1e 	bne	r2,zero,91e00 <__ram_exceptions_end+0xfff71bcc>
   91e10:	a5a1c83a 	sub	r16,r20,r22
   91e14:	80001026 	beq	r16,zero,91e58 <___vfiprintf_internal_r+0x140>
   91e18:	d8c01c17 	ldw	r3,112(sp)
   91e1c:	d8801b17 	ldw	r2,108(sp)
   91e20:	45800015 	stw	r22,0(r8)
   91e24:	80c7883a 	add	r3,r16,r3
   91e28:	10800044 	addi	r2,r2,1
   91e2c:	44000115 	stw	r16,4(r8)
   91e30:	d8c01c15 	stw	r3,112(sp)
   91e34:	d8801b15 	stw	r2,108(sp)
   91e38:	010001c4 	movi	r4,7
   91e3c:	2080750e 	bge	r4,r2,92014 <___vfiprintf_internal_r+0x2fc>
   91e40:	1803951e 	bne	r3,zero,92c98 <___vfiprintf_internal_r+0xf80>
   91e44:	d8c02417 	ldw	r3,144(sp)
   91e48:	d8001b15 	stw	zero,108(sp)
   91e4c:	d811883a 	mov	r8,sp
   91e50:	1c07883a 	add	r3,r3,r16
   91e54:	d8c02415 	stw	r3,144(sp)
   91e58:	a0800007 	ldb	r2,0(r20)
   91e5c:	1002e026 	beq	r2,zero,929e0 <___vfiprintf_internal_r+0xcc8>
   91e60:	a5800044 	addi	r22,r20,1
   91e64:	a0c00047 	ldb	r3,1(r20)
   91e68:	d8001d85 	stb	zero,118(sp)
   91e6c:	0027883a 	mov	r19,zero
   91e70:	d8002305 	stb	zero,140(sp)
   91e74:	043fffc4 	movi	r16,-1
   91e78:	d8002515 	stw	zero,148(sp)
   91e7c:	0023883a 	mov	r17,zero
   91e80:	05001604 	movi	r20,88
   91e84:	05400244 	movi	r21,9
   91e88:	402f883a 	mov	r23,r8
   91e8c:	b5800044 	addi	r22,r22,1
   91e90:	18bff804 	addi	r2,r3,-32
   91e94:	a0827736 	bltu	r20,r2,92874 <___vfiprintf_internal_r+0xb5c>
   91e98:	100490ba 	slli	r2,r2,2
   91e9c:	01000274 	movhi	r4,9
   91ea0:	2107ac04 	addi	r4,r4,7856
   91ea4:	1105883a 	add	r2,r2,r4
   91ea8:	10800017 	ldw	r2,0(r2)
   91eac:	1000683a 	jmp	r2
   91eb0:	00092574 	movhi	zero,9365
   91eb4:	00092874 	movhi	zero,9377
   91eb8:	00092874 	movhi	zero,9377
   91ebc:	00092590 	cmplti	zero,zero,9366
   91ec0:	00092874 	movhi	zero,9377
   91ec4:	00092874 	movhi	zero,9377
   91ec8:	00092874 	movhi	zero,9377
   91ecc:	00092874 	movhi	zero,9377
   91ed0:	00092874 	movhi	zero,9377
   91ed4:	00092874 	movhi	zero,9377
   91ed8:	00092798 	cmpnei	zero,zero,9374
   91edc:	000927bc 	xorhi	zero,zero,9374
   91ee0:	00092874 	movhi	zero,9377
   91ee4:	000920b4 	movhi	zero,9346
   91ee8:	000927d0 	cmplti	zero,zero,9375
   91eec:	00092874 	movhi	zero,9377
   91ef0:	0009259c 	xori	zero,zero,9366
   91ef4:	000925a8 	cmpgeui	zero,zero,9366
   91ef8:	000925a8 	cmpgeui	zero,zero,9366
   91efc:	000925a8 	cmpgeui	zero,zero,9366
   91f00:	000925a8 	cmpgeui	zero,zero,9366
   91f04:	000925a8 	cmpgeui	zero,zero,9366
   91f08:	000925a8 	cmpgeui	zero,zero,9366
   91f0c:	000925a8 	cmpgeui	zero,zero,9366
   91f10:	000925a8 	cmpgeui	zero,zero,9366
   91f14:	000925a8 	cmpgeui	zero,zero,9366
   91f18:	00092874 	movhi	zero,9377
   91f1c:	00092874 	movhi	zero,9377
   91f20:	00092874 	movhi	zero,9377
   91f24:	00092874 	movhi	zero,9377
   91f28:	00092874 	movhi	zero,9377
   91f2c:	00092874 	movhi	zero,9377
   91f30:	00092874 	movhi	zero,9377
   91f34:	00092874 	movhi	zero,9377
   91f38:	00092874 	movhi	zero,9377
   91f3c:	00092874 	movhi	zero,9377
   91f40:	000925e8 	cmpgeui	zero,zero,9367
   91f44:	00092874 	movhi	zero,9377
   91f48:	00092874 	movhi	zero,9377
   91f4c:	00092874 	movhi	zero,9377
   91f50:	00092874 	movhi	zero,9377
   91f54:	00092874 	movhi	zero,9377
   91f58:	00092874 	movhi	zero,9377
   91f5c:	00092874 	movhi	zero,9377
   91f60:	00092874 	movhi	zero,9377
   91f64:	00092874 	movhi	zero,9377
   91f68:	00092874 	movhi	zero,9377
   91f6c:	00092624 	muli	zero,zero,9368
   91f70:	00092874 	movhi	zero,9377
   91f74:	00092874 	movhi	zero,9377
   91f78:	00092874 	movhi	zero,9377
   91f7c:	00092874 	movhi	zero,9377
   91f80:	00092874 	movhi	zero,9377
   91f84:	00092680 	call	9268 <_start-0x76d98>
   91f88:	00092874 	movhi	zero,9377
   91f8c:	00092874 	movhi	zero,9377
   91f90:	000926f4 	movhi	zero,9371
   91f94:	00092874 	movhi	zero,9377
   91f98:	00092874 	movhi	zero,9377
   91f9c:	00092874 	movhi	zero,9377
   91fa0:	00092874 	movhi	zero,9377
   91fa4:	00092874 	movhi	zero,9377
   91fa8:	00092874 	movhi	zero,9377
   91fac:	00092874 	movhi	zero,9377
   91fb0:	00092874 	movhi	zero,9377
   91fb4:	00092874 	movhi	zero,9377
   91fb8:	00092874 	movhi	zero,9377
   91fbc:	0009249c 	xori	zero,zero,9362
   91fc0:	000924cc 	andi	zero,zero,9363
   91fc4:	00092874 	movhi	zero,9377
   91fc8:	00092874 	movhi	zero,9377
   91fcc:	00092874 	movhi	zero,9377
   91fd0:	0009281c 	xori	zero,zero,9376
   91fd4:	000924cc 	andi	zero,zero,9363
   91fd8:	00092874 	movhi	zero,9377
   91fdc:	00092874 	movhi	zero,9377
   91fe0:	00092374 	movhi	zero,9357
   91fe4:	00092874 	movhi	zero,9377
   91fe8:	00092388 	cmpgei	zero,zero,9358
   91fec:	000923c0 	call	923c <_start-0x76dc4>
   91ff0:	000920c0 	call	920c <_start-0x76df4>
   91ff4:	00092368 	cmpgeui	zero,zero,9357
   91ff8:	00092874 	movhi	zero,9377
   91ffc:	00092734 	movhi	zero,9372
   92000:	00092874 	movhi	zero,9377
   92004:	00092780 	call	9278 <_start-0x76d88>
   92008:	00092874 	movhi	zero,9377
   9200c:	00092874 	movhi	zero,9377
   92010:	00092444 	movi	zero,9361
   92014:	42000204 	addi	r8,r8,8
   92018:	d8c02417 	ldw	r3,144(sp)
   9201c:	1c07883a 	add	r3,r3,r16
   92020:	d8c02415 	stw	r3,144(sp)
   92024:	003f8c06 	br	91e58 <__ram_exceptions_end+0xfff71c24>
   92028:	d9402017 	ldw	r5,128(sp)
   9202c:	d9002117 	ldw	r4,132(sp)
   92030:	0086fd00 	call	86fd0 <__swsetup_r>
   92034:	1003c11e 	bne	r2,zero,92f3c <___vfiprintf_internal_r+0x1224>
   92038:	d9402017 	ldw	r5,128(sp)
   9203c:	00c00284 	movi	r3,10
   92040:	2880030b 	ldhu	r2,12(r5)
   92044:	1080068c 	andi	r2,r2,26
   92048:	10ff581e 	bne	r2,r3,91dac <__ram_exceptions_end+0xfff71b78>
   9204c:	d8c02017 	ldw	r3,128(sp)
   92050:	1880038f 	ldh	r2,14(r3)
   92054:	103f5516 	blt	r2,zero,91dac <__ram_exceptions_end+0xfff71b78>
   92058:	d9c02217 	ldw	r7,136(sp)
   9205c:	d9002117 	ldw	r4,132(sp)
   92060:	a80d883a 	mov	r6,r21
   92064:	180b883a 	mov	r5,r3
   92068:	00932400 	call	93240 <__sbprintf>
   9206c:	dfc03517 	ldw	ra,212(sp)
   92070:	df003417 	ldw	fp,208(sp)
   92074:	ddc03317 	ldw	r23,204(sp)
   92078:	dd803217 	ldw	r22,200(sp)
   9207c:	dd403117 	ldw	r21,196(sp)
   92080:	dd003017 	ldw	r20,192(sp)
   92084:	dcc02f17 	ldw	r19,188(sp)
   92088:	dc802e17 	ldw	r18,184(sp)
   9208c:	dc402d17 	ldw	r17,180(sp)
   92090:	dc002c17 	ldw	r16,176(sp)
   92094:	dec03604 	addi	sp,sp,216
   92098:	f800283a 	ret
   9209c:	00890300 	call	89030 <__sinit>
   920a0:	003f2f06 	br	91d60 <__ram_exceptions_end+0xfff71b2c>
   920a4:	d8c02517 	ldw	r3,148(sp)
   920a8:	d8802215 	stw	r2,136(sp)
   920ac:	00c7c83a 	sub	r3,zero,r3
   920b0:	d8c02515 	stw	r3,148(sp)
   920b4:	8c400114 	ori	r17,r17,4
   920b8:	b0c00007 	ldb	r3,0(r22)
   920bc:	003f7306 	br	91e8c <__ram_exceptions_end+0xfff71c58>
   920c0:	00800c04 	movi	r2,48
   920c4:	d9402217 	ldw	r5,136(sp)
   920c8:	d8801d05 	stb	r2,116(sp)
   920cc:	00801e04 	movi	r2,120
   920d0:	d8801d45 	stb	r2,117(sp)
   920d4:	d8001d85 	stb	zero,118(sp)
   920d8:	b811883a 	mov	r8,r23
   920dc:	28c00104 	addi	r3,r5,4
   920e0:	2cc00017 	ldw	r19,0(r5)
   920e4:	0029883a 	mov	r20,zero
   920e8:	88800094 	ori	r2,r17,2
   920ec:	80032516 	blt	r16,zero,92d84 <___vfiprintf_internal_r+0x106c>
   920f0:	00bfdfc4 	movi	r2,-129
   920f4:	88a2703a 	and	r17,r17,r2
   920f8:	d8c02215 	stw	r3,136(sp)
   920fc:	8c400094 	ori	r17,r17,2
   92100:	98032a1e 	bne	r19,zero,92dac <___vfiprintf_internal_r+0x1094>
   92104:	008002b4 	movhi	r2,10
   92108:	10b87f04 	addi	r2,r2,-7684
   9210c:	d8802615 	stw	r2,152(sp)
   92110:	002b883a 	mov	r21,zero
   92114:	8001741e 	bne	r16,zero,926e8 <___vfiprintf_internal_r+0x9d0>
   92118:	0021883a 	mov	r16,zero
   9211c:	0029883a 	mov	r20,zero
   92120:	ddc01a04 	addi	r23,sp,104
   92124:	8027883a 	mov	r19,r16
   92128:	8500010e 	bge	r16,r20,92130 <___vfiprintf_internal_r+0x418>
   9212c:	a027883a 	mov	r19,r20
   92130:	ad403fcc 	andi	r21,r21,255
   92134:	ad40201c 	xori	r21,r21,128
   92138:	ad7fe004 	addi	r21,r21,-128
   9213c:	a8000126 	beq	r21,zero,92144 <___vfiprintf_internal_r+0x42c>
   92140:	9cc00044 	addi	r19,r19,1
   92144:	89c0008c 	andi	r7,r17,2
   92148:	38000126 	beq	r7,zero,92150 <___vfiprintf_internal_r+0x438>
   9214c:	9cc00084 	addi	r19,r19,2
   92150:	88c0210c 	andi	r3,r17,132
   92154:	1801dd1e 	bne	r3,zero,928cc <___vfiprintf_internal_r+0xbb4>
   92158:	d9402517 	ldw	r5,148(sp)
   9215c:	2cebc83a 	sub	r21,r5,r19
   92160:	0541da0e 	bge	zero,r21,928cc <___vfiprintf_internal_r+0xbb4>
   92164:	07000404 	movi	fp,16
   92168:	d8801c17 	ldw	r2,112(sp)
   9216c:	e543be0e 	bge	fp,r21,93068 <___vfiprintf_internal_r+0x1350>
   92170:	014002b4 	movhi	r5,10
   92174:	2979ab84 	addi	r5,r5,-6482
   92178:	dc002715 	stw	r16,156(sp)
   9217c:	d9801b17 	ldw	r6,108(sp)
   92180:	a821883a 	mov	r16,r21
   92184:	d9402315 	stw	r5,140(sp)
   92188:	028001c4 	movi	r10,7
   9218c:	d9c02915 	stw	r7,164(sp)
   92190:	182b883a 	mov	r21,r3
   92194:	00000506 	br	921ac <___vfiprintf_internal_r+0x494>
   92198:	31000084 	addi	r4,r6,2
   9219c:	42000204 	addi	r8,r8,8
   921a0:	180d883a 	mov	r6,r3
   921a4:	843ffc04 	addi	r16,r16,-16
   921a8:	e4000f0e 	bge	fp,r16,921e8 <___vfiprintf_internal_r+0x4d0>
   921ac:	010002b4 	movhi	r4,10
   921b0:	10800404 	addi	r2,r2,16
   921b4:	30c00044 	addi	r3,r6,1
   921b8:	2139ab84 	addi	r4,r4,-6482
   921bc:	41000015 	stw	r4,0(r8)
   921c0:	47000115 	stw	fp,4(r8)
   921c4:	d8801c15 	stw	r2,112(sp)
   921c8:	d8c01b15 	stw	r3,108(sp)
   921cc:	50fff20e 	bge	r10,r3,92198 <__ram_exceptions_end+0xfff71f64>
   921d0:	1001b21e 	bne	r2,zero,9289c <___vfiprintf_internal_r+0xb84>
   921d4:	843ffc04 	addi	r16,r16,-16
   921d8:	000d883a 	mov	r6,zero
   921dc:	01000044 	movi	r4,1
   921e0:	d811883a 	mov	r8,sp
   921e4:	e43ff116 	blt	fp,r16,921ac <__ram_exceptions_end+0xfff71f78>
   921e8:	a807883a 	mov	r3,r21
   921ec:	d9c02917 	ldw	r7,164(sp)
   921f0:	802b883a 	mov	r21,r16
   921f4:	dc002717 	ldw	r16,156(sp)
   921f8:	d9402317 	ldw	r5,140(sp)
   921fc:	a885883a 	add	r2,r21,r2
   92200:	45400115 	stw	r21,4(r8)
   92204:	41400015 	stw	r5,0(r8)
   92208:	d8801c15 	stw	r2,112(sp)
   9220c:	d9001b15 	stw	r4,108(sp)
   92210:	014001c4 	movi	r5,7
   92214:	29026216 	blt	r5,r4,92ba0 <___vfiprintf_internal_r+0xe88>
   92218:	d9801d87 	ldb	r6,118(sp)
   9221c:	42000204 	addi	r8,r8,8
   92220:	21400044 	addi	r5,r4,1
   92224:	3001ae1e 	bne	r6,zero,928e0 <___vfiprintf_internal_r+0xbc8>
   92228:	3801bb26 	beq	r7,zero,92918 <___vfiprintf_internal_r+0xc00>
   9222c:	d9001d04 	addi	r4,sp,116
   92230:	10800084 	addi	r2,r2,2
   92234:	41000015 	stw	r4,0(r8)
   92238:	01000084 	movi	r4,2
   9223c:	41000115 	stw	r4,4(r8)
   92240:	d8801c15 	stw	r2,112(sp)
   92244:	d9401b15 	stw	r5,108(sp)
   92248:	010001c4 	movi	r4,7
   9224c:	2142680e 	bge	r4,r5,92bf0 <___vfiprintf_internal_r+0xed8>
   92250:	1002b11e 	bne	r2,zero,92d18 <___vfiprintf_internal_r+0x1000>
   92254:	01802004 	movi	r6,128
   92258:	01400044 	movi	r5,1
   9225c:	0009883a 	mov	r4,zero
   92260:	d811883a 	mov	r8,sp
   92264:	1981ae1e 	bne	r3,r6,92920 <___vfiprintf_internal_r+0xc08>
   92268:	d8c02517 	ldw	r3,148(sp)
   9226c:	1cf9c83a 	sub	fp,r3,r19
   92270:	0701ab0e 	bge	zero,fp,92920 <___vfiprintf_internal_r+0xc08>
   92274:	05400404 	movi	r21,16
   92278:	af03a90e 	bge	r21,fp,93120 <___vfiprintf_internal_r+0x1408>
   9227c:	014002b4 	movhi	r5,10
   92280:	2979a784 	addi	r5,r5,-6498
   92284:	d9402315 	stw	r5,140(sp)
   92288:	01c001c4 	movi	r7,7
   9228c:	00000506 	br	922a4 <___vfiprintf_internal_r+0x58c>
   92290:	21800084 	addi	r6,r4,2
   92294:	42000204 	addi	r8,r8,8
   92298:	1809883a 	mov	r4,r3
   9229c:	e73ffc04 	addi	fp,fp,-16
   922a0:	af000d0e 	bge	r21,fp,922d8 <___vfiprintf_internal_r+0x5c0>
   922a4:	10800404 	addi	r2,r2,16
   922a8:	20c00044 	addi	r3,r4,1
   922ac:	44800015 	stw	r18,0(r8)
   922b0:	45400115 	stw	r21,4(r8)
   922b4:	d8801c15 	stw	r2,112(sp)
   922b8:	d8c01b15 	stw	r3,108(sp)
   922bc:	38fff40e 	bge	r7,r3,92290 <__ram_exceptions_end+0xfff7205c>
   922c0:	10022b1e 	bne	r2,zero,92b70 <___vfiprintf_internal_r+0xe58>
   922c4:	e73ffc04 	addi	fp,fp,-16
   922c8:	01800044 	movi	r6,1
   922cc:	0009883a 	mov	r4,zero
   922d0:	d811883a 	mov	r8,sp
   922d4:	af3ff316 	blt	r21,fp,922a4 <__ram_exceptions_end+0xfff72070>
   922d8:	d8c02317 	ldw	r3,140(sp)
   922dc:	1705883a 	add	r2,r2,fp
   922e0:	47000115 	stw	fp,4(r8)
   922e4:	40c00015 	stw	r3,0(r8)
   922e8:	d8801c15 	stw	r2,112(sp)
   922ec:	d9801b15 	stw	r6,108(sp)
   922f0:	00c001c4 	movi	r3,7
   922f4:	19829416 	blt	r3,r6,92d48 <___vfiprintf_internal_r+0x1030>
   922f8:	8521c83a 	sub	r16,r16,r20
   922fc:	42000204 	addi	r8,r8,8
   92300:	31400044 	addi	r5,r6,1
   92304:	3009883a 	mov	r4,r6
   92308:	04018716 	blt	zero,r16,92928 <___vfiprintf_internal_r+0xc10>
   9230c:	a085883a 	add	r2,r20,r2
   92310:	45c00015 	stw	r23,0(r8)
   92314:	45000115 	stw	r20,4(r8)
   92318:	d8801c15 	stw	r2,112(sp)
   9231c:	d9401b15 	stw	r5,108(sp)
   92320:	00c001c4 	movi	r3,7
   92324:	1941c20e 	bge	r3,r5,92a30 <___vfiprintf_internal_r+0xd18>
   92328:	1002531e 	bne	r2,zero,92c78 <___vfiprintf_internal_r+0xf60>
   9232c:	d8001b15 	stw	zero,108(sp)
   92330:	8c40010c 	andi	r17,r17,4
   92334:	88023226 	beq	r17,zero,92c00 <___vfiprintf_internal_r+0xee8>
   92338:	d9002517 	ldw	r4,148(sp)
   9233c:	24e3c83a 	sub	r17,r4,r19
   92340:	04432916 	blt	zero,r17,92fe8 <___vfiprintf_internal_r+0x12d0>
   92344:	d8802517 	ldw	r2,148(sp)
   92348:	14c0010e 	bge	r2,r19,92350 <___vfiprintf_internal_r+0x638>
   9234c:	9805883a 	mov	r2,r19
   92350:	d8c02417 	ldw	r3,144(sp)
   92354:	1887883a 	add	r3,r3,r2
   92358:	d8c02415 	stw	r3,144(sp)
   9235c:	d8001b15 	stw	zero,108(sp)
   92360:	d811883a 	mov	r8,sp
   92364:	003ea006 	br	91de8 <__ram_exceptions_end+0xfff71bb4>
   92368:	8c400814 	ori	r17,r17,32
   9236c:	b0c00007 	ldb	r3,0(r22)
   92370:	003ec606 	br	91e8c <__ram_exceptions_end+0xfff71c58>
   92374:	b0c00007 	ldb	r3,0(r22)
   92378:	00801b04 	movi	r2,108
   9237c:	18832026 	beq	r3,r2,93000 <___vfiprintf_internal_r+0x12e8>
   92380:	8c400414 	ori	r17,r17,16
   92384:	003ec106 	br	91e8c <__ram_exceptions_end+0xfff71c58>
   92388:	9cc03fcc 	andi	r19,r19,255
   9238c:	b811883a 	mov	r8,r23
   92390:	9803981e 	bne	r19,zero,931f4 <___vfiprintf_internal_r+0x14dc>
   92394:	8880080c 	andi	r2,r17,32
   92398:	1002be26 	beq	r2,zero,92e94 <___vfiprintf_internal_r+0x117c>
   9239c:	d9002217 	ldw	r4,136(sp)
   923a0:	d9402417 	ldw	r5,144(sp)
   923a4:	20800017 	ldw	r2,0(r4)
   923a8:	2807d7fa 	srai	r3,r5,31
   923ac:	21000104 	addi	r4,r4,4
   923b0:	d9002215 	stw	r4,136(sp)
   923b4:	11400015 	stw	r5,0(r2)
   923b8:	10c00115 	stw	r3,4(r2)
   923bc:	003e8a06 	br	91de8 <__ram_exceptions_end+0xfff71bb4>
   923c0:	9cc03fcc 	andi	r19,r19,255
   923c4:	b811883a 	mov	r8,r23
   923c8:	9803871e 	bne	r19,zero,931e8 <___vfiprintf_internal_r+0x14d0>
   923cc:	8880080c 	andi	r2,r17,32
   923d0:	10009a26 	beq	r2,zero,9263c <___vfiprintf_internal_r+0x924>
   923d4:	d9002217 	ldw	r4,136(sp)
   923d8:	d8001d85 	stb	zero,118(sp)
   923dc:	20800204 	addi	r2,r4,8
   923e0:	24c00017 	ldw	r19,0(r4)
   923e4:	25000117 	ldw	r20,4(r4)
   923e8:	8002a416 	blt	r16,zero,92e7c <___vfiprintf_internal_r+0x1164>
   923ec:	013fdfc4 	movi	r4,-129
   923f0:	9d06b03a 	or	r3,r19,r20
   923f4:	d8802215 	stw	r2,136(sp)
   923f8:	8922703a 	and	r17,r17,r4
   923fc:	18009b26 	beq	r3,zero,9266c <___vfiprintf_internal_r+0x954>
   92400:	002b883a 	mov	r21,zero
   92404:	ddc01a04 	addi	r23,sp,104
   92408:	9806d0fa 	srli	r3,r19,3
   9240c:	a008977a 	slli	r4,r20,29
   92410:	a028d0fa 	srli	r20,r20,3
   92414:	9cc001cc 	andi	r19,r19,7
   92418:	98800c04 	addi	r2,r19,48
   9241c:	bdffffc4 	addi	r23,r23,-1
   92420:	20e6b03a 	or	r19,r4,r3
   92424:	b8800005 	stb	r2,0(r23)
   92428:	9d06b03a 	or	r3,r19,r20
   9242c:	183ff61e 	bne	r3,zero,92408 <__ram_exceptions_end+0xfff721d4>
   92430:	88c0004c 	andi	r3,r17,1
   92434:	18021f1e 	bne	r3,zero,92cb4 <___vfiprintf_internal_r+0xf9c>
   92438:	d9401e17 	ldw	r5,120(sp)
   9243c:	2de9c83a 	sub	r20,r5,r23
   92440:	003f3806 	br	92124 <__ram_exceptions_end+0xfff71ef0>
   92444:	9cc03fcc 	andi	r19,r19,255
   92448:	b811883a 	mov	r8,r23
   9244c:	98034f1e 	bne	r19,zero,9318c <___vfiprintf_internal_r+0x1474>
   92450:	008002b4 	movhi	r2,10
   92454:	10b87f04 	addi	r2,r2,-7684
   92458:	d8802615 	stw	r2,152(sp)
   9245c:	8880080c 	andi	r2,r17,32
   92460:	1000ac26 	beq	r2,zero,92714 <___vfiprintf_internal_r+0x9fc>
   92464:	d9002217 	ldw	r4,136(sp)
   92468:	24c00017 	ldw	r19,0(r4)
   9246c:	25000117 	ldw	r20,4(r4)
   92470:	21000204 	addi	r4,r4,8
   92474:	d9002215 	stw	r4,136(sp)
   92478:	8880004c 	andi	r2,r17,1
   9247c:	1001e726 	beq	r2,zero,92c1c <___vfiprintf_internal_r+0xf04>
   92480:	9d04b03a 	or	r2,r19,r20
   92484:	10025c1e 	bne	r2,zero,92df8 <___vfiprintf_internal_r+0x10e0>
   92488:	d8001d85 	stb	zero,118(sp)
   9248c:	80024416 	blt	r16,zero,92da0 <___vfiprintf_internal_r+0x1088>
   92490:	00bfdfc4 	movi	r2,-129
   92494:	88a2703a 	and	r17,r17,r2
   92498:	003f1d06 	br	92110 <__ram_exceptions_end+0xfff71edc>
   9249c:	d8c02217 	ldw	r3,136(sp)
   924a0:	04c00044 	movi	r19,1
   924a4:	b811883a 	mov	r8,r23
   924a8:	18800017 	ldw	r2,0(r3)
   924ac:	18c00104 	addi	r3,r3,4
   924b0:	d8001d85 	stb	zero,118(sp)
   924b4:	d8801005 	stb	r2,64(sp)
   924b8:	d8c02215 	stw	r3,136(sp)
   924bc:	9829883a 	mov	r20,r19
   924c0:	ddc01004 	addi	r23,sp,64
   924c4:	0021883a 	mov	r16,zero
   924c8:	003f1e06 	br	92144 <__ram_exceptions_end+0xfff71f10>
   924cc:	9cc03fcc 	andi	r19,r19,255
   924d0:	b811883a 	mov	r8,r23
   924d4:	9803331e 	bne	r19,zero,931a4 <___vfiprintf_internal_r+0x148c>
   924d8:	8880080c 	andi	r2,r17,32
   924dc:	10004826 	beq	r2,zero,92600 <___vfiprintf_internal_r+0x8e8>
   924e0:	d9002217 	ldw	r4,136(sp)
   924e4:	20800117 	ldw	r2,4(r4)
   924e8:	24c00017 	ldw	r19,0(r4)
   924ec:	21000204 	addi	r4,r4,8
   924f0:	d9002215 	stw	r4,136(sp)
   924f4:	1029883a 	mov	r20,r2
   924f8:	10024c16 	blt	r2,zero,92e2c <___vfiprintf_internal_r+0x1114>
   924fc:	dd401d83 	ldbu	r21,118(sp)
   92500:	80007116 	blt	r16,zero,926c8 <___vfiprintf_internal_r+0x9b0>
   92504:	00ffdfc4 	movi	r3,-129
   92508:	9d04b03a 	or	r2,r19,r20
   9250c:	88e2703a 	and	r17,r17,r3
   92510:	1000d126 	beq	r2,zero,92858 <___vfiprintf_internal_r+0xb40>
   92514:	a0023526 	beq	r20,zero,92dec <___vfiprintf_internal_r+0x10d4>
   92518:	ddc01a04 	addi	r23,sp,104
   9251c:	4039883a 	mov	fp,r8
   92520:	9809883a 	mov	r4,r19
   92524:	a00b883a 	mov	r5,r20
   92528:	01800284 	movi	r6,10
   9252c:	000f883a 	mov	r7,zero
   92530:	009643c0 	call	9643c <__umoddi3>
   92534:	10800c04 	addi	r2,r2,48
   92538:	bdffffc4 	addi	r23,r23,-1
   9253c:	9809883a 	mov	r4,r19
   92540:	a00b883a 	mov	r5,r20
   92544:	b8800005 	stb	r2,0(r23)
   92548:	01800284 	movi	r6,10
   9254c:	000f883a 	mov	r7,zero
   92550:	0095e400 	call	95e40 <__udivdi3>
   92554:	1027883a 	mov	r19,r2
   92558:	10c4b03a 	or	r2,r2,r3
   9255c:	1829883a 	mov	r20,r3
   92560:	103fef1e 	bne	r2,zero,92520 <__ram_exceptions_end+0xfff722ec>
   92564:	d9001e17 	ldw	r4,120(sp)
   92568:	e011883a 	mov	r8,fp
   9256c:	25e9c83a 	sub	r20,r4,r23
   92570:	003eec06 	br	92124 <__ram_exceptions_end+0xfff71ef0>
   92574:	d8802307 	ldb	r2,140(sp)
   92578:	1002361e 	bne	r2,zero,92e54 <___vfiprintf_internal_r+0x113c>
   9257c:	00c00804 	movi	r3,32
   92580:	d8c02305 	stb	r3,140(sp)
   92584:	04c00044 	movi	r19,1
   92588:	b0c00007 	ldb	r3,0(r22)
   9258c:	003e3f06 	br	91e8c <__ram_exceptions_end+0xfff71c58>
   92590:	8c400054 	ori	r17,r17,1
   92594:	b0c00007 	ldb	r3,0(r22)
   92598:	003e3c06 	br	91e8c <__ram_exceptions_end+0xfff71c58>
   9259c:	8c402014 	ori	r17,r17,128
   925a0:	b0c00007 	ldb	r3,0(r22)
   925a4:	003e3906 	br	91e8c <__ram_exceptions_end+0xfff71c58>
   925a8:	dc002715 	stw	r16,156(sp)
   925ac:	d8002515 	stw	zero,148(sp)
   925b0:	1f3ff404 	addi	fp,r3,-48
   925b4:	0009883a 	mov	r4,zero
   925b8:	b021883a 	mov	r16,r22
   925bc:	01400284 	movi	r5,10
   925c0:	00822140 	call	82214 <__mulsi3>
   925c4:	80c00007 	ldb	r3,0(r16)
   925c8:	e089883a 	add	r4,fp,r2
   925cc:	b5800044 	addi	r22,r22,1
   925d0:	1f3ff404 	addi	fp,r3,-48
   925d4:	b021883a 	mov	r16,r22
   925d8:	af3ff82e 	bgeu	r21,fp,925bc <__ram_exceptions_end+0xfff72388>
   925dc:	d9002515 	stw	r4,148(sp)
   925e0:	dc002717 	ldw	r16,156(sp)
   925e4:	003e2a06 	br	91e90 <__ram_exceptions_end+0xfff71c5c>
   925e8:	9cc03fcc 	andi	r19,r19,255
   925ec:	b811883a 	mov	r8,r23
   925f0:	9802e91e 	bne	r19,zero,93198 <___vfiprintf_internal_r+0x1480>
   925f4:	8c400414 	ori	r17,r17,16
   925f8:	8880080c 	andi	r2,r17,32
   925fc:	103fb81e 	bne	r2,zero,924e0 <__ram_exceptions_end+0xfff722ac>
   92600:	8880040c 	andi	r2,r17,16
   92604:	10022e26 	beq	r2,zero,92ec0 <___vfiprintf_internal_r+0x11a8>
   92608:	d9402217 	ldw	r5,136(sp)
   9260c:	2cc00017 	ldw	r19,0(r5)
   92610:	29400104 	addi	r5,r5,4
   92614:	d9402215 	stw	r5,136(sp)
   92618:	9829d7fa 	srai	r20,r19,31
   9261c:	a005883a 	mov	r2,r20
   92620:	003fb506 	br	924f8 <__ram_exceptions_end+0xfff722c4>
   92624:	9cc03fcc 	andi	r19,r19,255
   92628:	b811883a 	mov	r8,r23
   9262c:	9802fa1e 	bne	r19,zero,93218 <___vfiprintf_internal_r+0x1500>
   92630:	8c400414 	ori	r17,r17,16
   92634:	8880080c 	andi	r2,r17,32
   92638:	103f661e 	bne	r2,zero,923d4 <__ram_exceptions_end+0xfff721a0>
   9263c:	8880040c 	andi	r2,r17,16
   92640:	10020626 	beq	r2,zero,92e5c <___vfiprintf_internal_r+0x1144>
   92644:	d9402217 	ldw	r5,136(sp)
   92648:	d8001d85 	stb	zero,118(sp)
   9264c:	0029883a 	mov	r20,zero
   92650:	28800104 	addi	r2,r5,4
   92654:	2cc00017 	ldw	r19,0(r5)
   92658:	80020816 	blt	r16,zero,92e7c <___vfiprintf_internal_r+0x1164>
   9265c:	00ffdfc4 	movi	r3,-129
   92660:	d8802215 	stw	r2,136(sp)
   92664:	88e2703a 	and	r17,r17,r3
   92668:	983f651e 	bne	r19,zero,92400 <__ram_exceptions_end+0xfff721cc>
   9266c:	002b883a 	mov	r21,zero
   92670:	8002cf26 	beq	r16,zero,931b0 <___vfiprintf_internal_r+0x1498>
   92674:	0027883a 	mov	r19,zero
   92678:	0029883a 	mov	r20,zero
   9267c:	003f6106 	br	92404 <__ram_exceptions_end+0xfff721d0>
   92680:	9cc03fcc 	andi	r19,r19,255
   92684:	b811883a 	mov	r8,r23
   92688:	9802e01e 	bne	r19,zero,9320c <___vfiprintf_internal_r+0x14f4>
   9268c:	8c400414 	ori	r17,r17,16
   92690:	8880080c 	andi	r2,r17,32
   92694:	1000641e 	bne	r2,zero,92828 <___vfiprintf_internal_r+0xb10>
   92698:	8880040c 	andi	r2,r17,16
   9269c:	1001c81e 	bne	r2,zero,92dc0 <___vfiprintf_internal_r+0x10a8>
   926a0:	8880100c 	andi	r2,r17,64
   926a4:	d8001d85 	stb	zero,118(sp)
   926a8:	1002281e 	bne	r2,zero,92f4c <___vfiprintf_internal_r+0x1234>
   926ac:	d9002217 	ldw	r4,136(sp)
   926b0:	0029883a 	mov	r20,zero
   926b4:	20800104 	addi	r2,r4,4
   926b8:	24c00017 	ldw	r19,0(r4)
   926bc:	8001c60e 	bge	r16,zero,92dd8 <___vfiprintf_internal_r+0x10c0>
   926c0:	d8802215 	stw	r2,136(sp)
   926c4:	002b883a 	mov	r21,zero
   926c8:	9d04b03a 	or	r2,r19,r20
   926cc:	103f911e 	bne	r2,zero,92514 <__ram_exceptions_end+0xfff722e0>
   926d0:	00800044 	movi	r2,1
   926d4:	10803fcc 	andi	r2,r2,255
   926d8:	00c00044 	movi	r3,1
   926dc:	10c05f26 	beq	r2,r3,9285c <___vfiprintf_internal_r+0xb44>
   926e0:	00c00084 	movi	r3,2
   926e4:	10ffe31e 	bne	r2,r3,92674 <__ram_exceptions_end+0xfff72440>
   926e8:	0027883a 	mov	r19,zero
   926ec:	0029883a 	mov	r20,zero
   926f0:	00015106 	br	92c38 <___vfiprintf_internal_r+0xf20>
   926f4:	9cc03fcc 	andi	r19,r19,255
   926f8:	b811883a 	mov	r8,r23
   926fc:	9802c01e 	bne	r19,zero,93200 <___vfiprintf_internal_r+0x14e8>
   92700:	014002b4 	movhi	r5,10
   92704:	29787a04 	addi	r5,r5,-7704
   92708:	d9402615 	stw	r5,152(sp)
   9270c:	8880080c 	andi	r2,r17,32
   92710:	103f541e 	bne	r2,zero,92464 <__ram_exceptions_end+0xfff72230>
   92714:	8880040c 	andi	r2,r17,16
   92718:	1001f226 	beq	r2,zero,92ee4 <___vfiprintf_internal_r+0x11cc>
   9271c:	d9402217 	ldw	r5,136(sp)
   92720:	0029883a 	mov	r20,zero
   92724:	2cc00017 	ldw	r19,0(r5)
   92728:	29400104 	addi	r5,r5,4
   9272c:	d9402215 	stw	r5,136(sp)
   92730:	003f5106 	br	92478 <__ram_exceptions_end+0xfff72244>
   92734:	d8c02217 	ldw	r3,136(sp)
   92738:	b811883a 	mov	r8,r23
   9273c:	d8001d85 	stb	zero,118(sp)
   92740:	1dc00017 	ldw	r23,0(r3)
   92744:	1f000104 	addi	fp,r3,4
   92748:	b8025926 	beq	r23,zero,930b0 <___vfiprintf_internal_r+0x1398>
   9274c:	80023316 	blt	r16,zero,9301c <___vfiprintf_internal_r+0x1304>
   92750:	800d883a 	mov	r6,r16
   92754:	000b883a 	mov	r5,zero
   92758:	b809883a 	mov	r4,r23
   9275c:	da002a15 	stw	r8,168(sp)
   92760:	008a0500 	call	8a050 <memchr>
   92764:	da002a17 	ldw	r8,168(sp)
   92768:	10026826 	beq	r2,zero,9310c <___vfiprintf_internal_r+0x13f4>
   9276c:	15e9c83a 	sub	r20,r2,r23
   92770:	dd401d83 	ldbu	r21,118(sp)
   92774:	df002215 	stw	fp,136(sp)
   92778:	0021883a 	mov	r16,zero
   9277c:	003e6906 	br	92124 <__ram_exceptions_end+0xfff71ef0>
   92780:	9cc03fcc 	andi	r19,r19,255
   92784:	b811883a 	mov	r8,r23
   92788:	983fc126 	beq	r19,zero,92690 <__ram_exceptions_end+0xfff7245c>
   9278c:	d8c02303 	ldbu	r3,140(sp)
   92790:	d8c01d85 	stb	r3,118(sp)
   92794:	003fbe06 	br	92690 <__ram_exceptions_end+0xfff7245c>
   92798:	d9002217 	ldw	r4,136(sp)
   9279c:	d9402217 	ldw	r5,136(sp)
   927a0:	21000017 	ldw	r4,0(r4)
   927a4:	28800104 	addi	r2,r5,4
   927a8:	d9002515 	stw	r4,148(sp)
   927ac:	203e3d16 	blt	r4,zero,920a4 <__ram_exceptions_end+0xfff71e70>
   927b0:	d8802215 	stw	r2,136(sp)
   927b4:	b0c00007 	ldb	r3,0(r22)
   927b8:	003db406 	br	91e8c <__ram_exceptions_end+0xfff71c58>
   927bc:	00c00ac4 	movi	r3,43
   927c0:	d8c02305 	stb	r3,140(sp)
   927c4:	04c00044 	movi	r19,1
   927c8:	b0c00007 	ldb	r3,0(r22)
   927cc:	003daf06 	br	91e8c <__ram_exceptions_end+0xfff71c58>
   927d0:	b0c00007 	ldb	r3,0(r22)
   927d4:	01000a84 	movi	r4,42
   927d8:	b4000044 	addi	r16,r22,1
   927dc:	19025e26 	beq	r3,r4,93158 <___vfiprintf_internal_r+0x1440>
   927e0:	1f3ff404 	addi	fp,r3,-48
   927e4:	0009883a 	mov	r4,zero
   927e8:	af025236 	bltu	r21,fp,93134 <___vfiprintf_internal_r+0x141c>
   927ec:	01400284 	movi	r5,10
   927f0:	00822140 	call	82214 <__mulsi3>
   927f4:	80c00007 	ldb	r3,0(r16)
   927f8:	1709883a 	add	r4,r2,fp
   927fc:	85800044 	addi	r22,r16,1
   92800:	1f3ff404 	addi	fp,r3,-48
   92804:	b021883a 	mov	r16,r22
   92808:	af3ff82e 	bgeu	r21,fp,927ec <__ram_exceptions_end+0xfff725b8>
   9280c:	2021883a 	mov	r16,r4
   92810:	203d9f0e 	bge	r4,zero,91e90 <__ram_exceptions_end+0xfff71c5c>
   92814:	043fffc4 	movi	r16,-1
   92818:	003d9d06 	br	91e90 <__ram_exceptions_end+0xfff71c5c>
   9281c:	8c401014 	ori	r17,r17,64
   92820:	b0c00007 	ldb	r3,0(r22)
   92824:	003d9906 	br	91e8c <__ram_exceptions_end+0xfff71c58>
   92828:	d9002217 	ldw	r4,136(sp)
   9282c:	d8001d85 	stb	zero,118(sp)
   92830:	20c00204 	addi	r3,r4,8
   92834:	24c00017 	ldw	r19,0(r4)
   92838:	25000117 	ldw	r20,4(r4)
   9283c:	8001e716 	blt	r16,zero,92fdc <___vfiprintf_internal_r+0x12c4>
   92840:	013fdfc4 	movi	r4,-129
   92844:	9d04b03a 	or	r2,r19,r20
   92848:	d8c02215 	stw	r3,136(sp)
   9284c:	8922703a 	and	r17,r17,r4
   92850:	002b883a 	mov	r21,zero
   92854:	103f2f1e 	bne	r2,zero,92514 <__ram_exceptions_end+0xfff722e0>
   92858:	803e2f26 	beq	r16,zero,92118 <__ram_exceptions_end+0xfff71ee4>
   9285c:	0027883a 	mov	r19,zero
   92860:	9cc00c04 	addi	r19,r19,48
   92864:	dcc019c5 	stb	r19,103(sp)
   92868:	dd002817 	ldw	r20,160(sp)
   9286c:	ddc019c4 	addi	r23,sp,103
   92870:	003e2c06 	br	92124 <__ram_exceptions_end+0xfff71ef0>
   92874:	9cc03fcc 	andi	r19,r19,255
   92878:	b811883a 	mov	r8,r23
   9287c:	9802571e 	bne	r19,zero,931dc <___vfiprintf_internal_r+0x14c4>
   92880:	18005726 	beq	r3,zero,929e0 <___vfiprintf_internal_r+0xcc8>
   92884:	04c00044 	movi	r19,1
   92888:	d8c01005 	stb	r3,64(sp)
   9288c:	d8001d85 	stb	zero,118(sp)
   92890:	9829883a 	mov	r20,r19
   92894:	ddc01004 	addi	r23,sp,64
   92898:	003f0a06 	br	924c4 <__ram_exceptions_end+0xfff72290>
   9289c:	d9402017 	ldw	r5,128(sp)
   928a0:	d9002117 	ldw	r4,132(sp)
   928a4:	d9801a04 	addi	r6,sp,104
   928a8:	da802a15 	stw	r10,168(sp)
   928ac:	0091c040 	call	91c04 <__sprint_r.part.0>
   928b0:	da802a17 	ldw	r10,168(sp)
   928b4:	1000501e 	bne	r2,zero,929f8 <___vfiprintf_internal_r+0xce0>
   928b8:	d9801b17 	ldw	r6,108(sp)
   928bc:	d8801c17 	ldw	r2,112(sp)
   928c0:	d811883a 	mov	r8,sp
   928c4:	31000044 	addi	r4,r6,1
   928c8:	003e3606 	br	921a4 <__ram_exceptions_end+0xfff71f70>
   928cc:	d9001b17 	ldw	r4,108(sp)
   928d0:	d8801c17 	ldw	r2,112(sp)
   928d4:	21400044 	addi	r5,r4,1
   928d8:	d9801d87 	ldb	r6,118(sp)
   928dc:	303e5226 	beq	r6,zero,92228 <__ram_exceptions_end+0xfff71ff4>
   928e0:	01800044 	movi	r6,1
   928e4:	d9001d84 	addi	r4,sp,118
   928e8:	1185883a 	add	r2,r2,r6
   928ec:	41000015 	stw	r4,0(r8)
   928f0:	41800115 	stw	r6,4(r8)
   928f4:	d8801c15 	stw	r2,112(sp)
   928f8:	d9401b15 	stw	r5,108(sp)
   928fc:	010001c4 	movi	r4,7
   92900:	2140b00e 	bge	r4,r5,92bc4 <___vfiprintf_internal_r+0xeac>
   92904:	1000f61e 	bne	r2,zero,92ce0 <___vfiprintf_internal_r+0xfc8>
   92908:	3800b31e 	bne	r7,zero,92bd8 <___vfiprintf_internal_r+0xec0>
   9290c:	0009883a 	mov	r4,zero
   92910:	300b883a 	mov	r5,r6
   92914:	d811883a 	mov	r8,sp
   92918:	01802004 	movi	r6,128
   9291c:	19be5226 	beq	r3,r6,92268 <__ram_exceptions_end+0xfff72034>
   92920:	8521c83a 	sub	r16,r16,r20
   92924:	043e790e 	bge	zero,r16,9230c <__ram_exceptions_end+0xfff720d8>
   92928:	05400404 	movi	r21,16
   9292c:	ac01b00e 	bge	r21,r16,92ff0 <___vfiprintf_internal_r+0x12d8>
   92930:	014002b4 	movhi	r5,10
   92934:	2979a784 	addi	r5,r5,-6498
   92938:	d9402315 	stw	r5,140(sp)
   9293c:	070001c4 	movi	fp,7
   92940:	00000506 	br	92958 <___vfiprintf_internal_r+0xc40>
   92944:	21400084 	addi	r5,r4,2
   92948:	42000204 	addi	r8,r8,8
   9294c:	1809883a 	mov	r4,r3
   92950:	843ffc04 	addi	r16,r16,-16
   92954:	ac000d0e 	bge	r21,r16,9298c <___vfiprintf_internal_r+0xc74>
   92958:	10800404 	addi	r2,r2,16
   9295c:	20c00044 	addi	r3,r4,1
   92960:	44800015 	stw	r18,0(r8)
   92964:	45400115 	stw	r21,4(r8)
   92968:	d8801c15 	stw	r2,112(sp)
   9296c:	d8c01b15 	stw	r3,108(sp)
   92970:	e0fff40e 	bge	fp,r3,92944 <__ram_exceptions_end+0xfff72710>
   92974:	1000101e 	bne	r2,zero,929b8 <___vfiprintf_internal_r+0xca0>
   92978:	843ffc04 	addi	r16,r16,-16
   9297c:	01400044 	movi	r5,1
   92980:	0009883a 	mov	r4,zero
   92984:	d811883a 	mov	r8,sp
   92988:	ac3ff316 	blt	r21,r16,92958 <__ram_exceptions_end+0xfff72724>
   9298c:	d8c02317 	ldw	r3,140(sp)
   92990:	1405883a 	add	r2,r2,r16
   92994:	44000115 	stw	r16,4(r8)
   92998:	40c00015 	stw	r3,0(r8)
   9299c:	d8801c15 	stw	r2,112(sp)
   929a0:	d9401b15 	stw	r5,108(sp)
   929a4:	00c001c4 	movi	r3,7
   929a8:	19401916 	blt	r3,r5,92a10 <___vfiprintf_internal_r+0xcf8>
   929ac:	42000204 	addi	r8,r8,8
   929b0:	29400044 	addi	r5,r5,1
   929b4:	003e5506 	br	9230c <__ram_exceptions_end+0xfff720d8>
   929b8:	d9402017 	ldw	r5,128(sp)
   929bc:	d9002117 	ldw	r4,132(sp)
   929c0:	d9801a04 	addi	r6,sp,104
   929c4:	0091c040 	call	91c04 <__sprint_r.part.0>
   929c8:	10000b1e 	bne	r2,zero,929f8 <___vfiprintf_internal_r+0xce0>
   929cc:	d9001b17 	ldw	r4,108(sp)
   929d0:	d8801c17 	ldw	r2,112(sp)
   929d4:	d811883a 	mov	r8,sp
   929d8:	21400044 	addi	r5,r4,1
   929dc:	003fdc06 	br	92950 <__ram_exceptions_end+0xfff7271c>
   929e0:	d8801c17 	ldw	r2,112(sp)
   929e4:	10000426 	beq	r2,zero,929f8 <___vfiprintf_internal_r+0xce0>
   929e8:	d9402017 	ldw	r5,128(sp)
   929ec:	d9002117 	ldw	r4,132(sp)
   929f0:	d9801a04 	addi	r6,sp,104
   929f4:	0091c040 	call	91c04 <__sprint_r.part.0>
   929f8:	d9402017 	ldw	r5,128(sp)
   929fc:	2880030b 	ldhu	r2,12(r5)
   92a00:	1080100c 	andi	r2,r2,64
   92a04:	10014d1e 	bne	r2,zero,92f3c <___vfiprintf_internal_r+0x1224>
   92a08:	d8802417 	ldw	r2,144(sp)
   92a0c:	003d9706 	br	9206c <__ram_exceptions_end+0xfff71e38>
   92a10:	1000d21e 	bne	r2,zero,92d5c <___vfiprintf_internal_r+0x1044>
   92a14:	00c00044 	movi	r3,1
   92a18:	a005883a 	mov	r2,r20
   92a1c:	ddc00015 	stw	r23,0(sp)
   92a20:	dd000115 	stw	r20,4(sp)
   92a24:	dd001c15 	stw	r20,112(sp)
   92a28:	d8c01b15 	stw	r3,108(sp)
   92a2c:	d811883a 	mov	r8,sp
   92a30:	42000204 	addi	r8,r8,8
   92a34:	8c40010c 	andi	r17,r17,4
   92a38:	88004026 	beq	r17,zero,92b3c <___vfiprintf_internal_r+0xe24>
   92a3c:	d9002517 	ldw	r4,148(sp)
   92a40:	24e3c83a 	sub	r17,r4,r19
   92a44:	04403d0e 	bge	zero,r17,92b3c <___vfiprintf_internal_r+0xe24>
   92a48:	04000404 	movi	r16,16
   92a4c:	8441a90e 	bge	r16,r17,930f4 <___vfiprintf_internal_r+0x13dc>
   92a50:	00c002b4 	movhi	r3,10
   92a54:	18f9ab84 	addi	r3,r3,-6482
   92a58:	d9001b17 	ldw	r4,108(sp)
   92a5c:	d8c02315 	stw	r3,140(sp)
   92a60:	050001c4 	movi	r20,7
   92a64:	dd402117 	ldw	r21,132(sp)
   92a68:	ddc02017 	ldw	r23,128(sp)
   92a6c:	00000506 	br	92a84 <___vfiprintf_internal_r+0xd6c>
   92a70:	21400084 	addi	r5,r4,2
   92a74:	42000204 	addi	r8,r8,8
   92a78:	1809883a 	mov	r4,r3
   92a7c:	8c7ffc04 	addi	r17,r17,-16
   92a80:	84400f0e 	bge	r16,r17,92ac0 <___vfiprintf_internal_r+0xda8>
   92a84:	014002b4 	movhi	r5,10
   92a88:	10800404 	addi	r2,r2,16
   92a8c:	20c00044 	addi	r3,r4,1
   92a90:	2979ab84 	addi	r5,r5,-6482
   92a94:	41400015 	stw	r5,0(r8)
   92a98:	44000115 	stw	r16,4(r8)
   92a9c:	d8801c15 	stw	r2,112(sp)
   92aa0:	d8c01b15 	stw	r3,108(sp)
   92aa4:	a0fff20e 	bge	r20,r3,92a70 <__ram_exceptions_end+0xfff7283c>
   92aa8:	1000141e 	bne	r2,zero,92afc <___vfiprintf_internal_r+0xde4>
   92aac:	8c7ffc04 	addi	r17,r17,-16
   92ab0:	01400044 	movi	r5,1
   92ab4:	0009883a 	mov	r4,zero
   92ab8:	d811883a 	mov	r8,sp
   92abc:	847ff116 	blt	r16,r17,92a84 <__ram_exceptions_end+0xfff72850>
   92ac0:	d8c02317 	ldw	r3,140(sp)
   92ac4:	1445883a 	add	r2,r2,r17
   92ac8:	44400115 	stw	r17,4(r8)
   92acc:	40c00015 	stw	r3,0(r8)
   92ad0:	d8801c15 	stw	r2,112(sp)
   92ad4:	d9401b15 	stw	r5,108(sp)
   92ad8:	00c001c4 	movi	r3,7
   92adc:	1940170e 	bge	r3,r5,92b3c <___vfiprintf_internal_r+0xe24>
   92ae0:	1000101e 	bne	r2,zero,92b24 <___vfiprintf_internal_r+0xe0c>
   92ae4:	d8802517 	ldw	r2,148(sp)
   92ae8:	14c11616 	blt	r2,r19,92f44 <___vfiprintf_internal_r+0x122c>
   92aec:	d9002417 	ldw	r4,144(sp)
   92af0:	2089883a 	add	r4,r4,r2
   92af4:	d9002415 	stw	r4,144(sp)
   92af8:	003e1806 	br	9235c <__ram_exceptions_end+0xfff72128>
   92afc:	d9801a04 	addi	r6,sp,104
   92b00:	b80b883a 	mov	r5,r23
   92b04:	a809883a 	mov	r4,r21
   92b08:	0091c040 	call	91c04 <__sprint_r.part.0>
   92b0c:	103fba1e 	bne	r2,zero,929f8 <__ram_exceptions_end+0xfff727c4>
   92b10:	d9001b17 	ldw	r4,108(sp)
   92b14:	d8801c17 	ldw	r2,112(sp)
   92b18:	d811883a 	mov	r8,sp
   92b1c:	21400044 	addi	r5,r4,1
   92b20:	003fd606 	br	92a7c <__ram_exceptions_end+0xfff72848>
   92b24:	d9402017 	ldw	r5,128(sp)
   92b28:	d9002117 	ldw	r4,132(sp)
   92b2c:	d9801a04 	addi	r6,sp,104
   92b30:	0091c040 	call	91c04 <__sprint_r.part.0>
   92b34:	103fb01e 	bne	r2,zero,929f8 <__ram_exceptions_end+0xfff727c4>
   92b38:	d8801c17 	ldw	r2,112(sp)
   92b3c:	d8c02517 	ldw	r3,148(sp)
   92b40:	1cc0010e 	bge	r3,r19,92b48 <___vfiprintf_internal_r+0xe30>
   92b44:	9807883a 	mov	r3,r19
   92b48:	d9002417 	ldw	r4,144(sp)
   92b4c:	20c9883a 	add	r4,r4,r3
   92b50:	d9002415 	stw	r4,144(sp)
   92b54:	103e0126 	beq	r2,zero,9235c <__ram_exceptions_end+0xfff72128>
   92b58:	d9402017 	ldw	r5,128(sp)
   92b5c:	d9002117 	ldw	r4,132(sp)
   92b60:	d9801a04 	addi	r6,sp,104
   92b64:	0091c040 	call	91c04 <__sprint_r.part.0>
   92b68:	103dfc26 	beq	r2,zero,9235c <__ram_exceptions_end+0xfff72128>
   92b6c:	003fa206 	br	929f8 <__ram_exceptions_end+0xfff727c4>
   92b70:	d9402017 	ldw	r5,128(sp)
   92b74:	d9002117 	ldw	r4,132(sp)
   92b78:	d9801a04 	addi	r6,sp,104
   92b7c:	d9c02b15 	stw	r7,172(sp)
   92b80:	0091c040 	call	91c04 <__sprint_r.part.0>
   92b84:	d9c02b17 	ldw	r7,172(sp)
   92b88:	103f9b1e 	bne	r2,zero,929f8 <__ram_exceptions_end+0xfff727c4>
   92b8c:	d9001b17 	ldw	r4,108(sp)
   92b90:	d8801c17 	ldw	r2,112(sp)
   92b94:	d811883a 	mov	r8,sp
   92b98:	21800044 	addi	r6,r4,1
   92b9c:	003dbf06 	br	9229c <__ram_exceptions_end+0xfff72068>
   92ba0:	1000d81e 	bne	r2,zero,92f04 <___vfiprintf_internal_r+0x11ec>
   92ba4:	d9001d87 	ldb	r4,118(sp)
   92ba8:	20000a26 	beq	r4,zero,92bd4 <___vfiprintf_internal_r+0xebc>
   92bac:	00800044 	movi	r2,1
   92bb0:	d9001d84 	addi	r4,sp,118
   92bb4:	100b883a 	mov	r5,r2
   92bb8:	d9000015 	stw	r4,0(sp)
   92bbc:	d8800115 	stw	r2,4(sp)
   92bc0:	d811883a 	mov	r8,sp
   92bc4:	2809883a 	mov	r4,r5
   92bc8:	42000204 	addi	r8,r8,8
   92bcc:	29400044 	addi	r5,r5,1
   92bd0:	003d9506 	br	92228 <__ram_exceptions_end+0xfff71ff4>
   92bd4:	3800fd26 	beq	r7,zero,92fcc <___vfiprintf_internal_r+0x12b4>
   92bd8:	00800084 	movi	r2,2
   92bdc:	d9001d04 	addi	r4,sp,116
   92be0:	d9000015 	stw	r4,0(sp)
   92be4:	d8800115 	stw	r2,4(sp)
   92be8:	01400044 	movi	r5,1
   92bec:	d811883a 	mov	r8,sp
   92bf0:	2809883a 	mov	r4,r5
   92bf4:	42000204 	addi	r8,r8,8
   92bf8:	29400044 	addi	r5,r5,1
   92bfc:	003f4606 	br	92918 <__ram_exceptions_end+0xfff726e4>
   92c00:	d8802517 	ldw	r2,148(sp)
   92c04:	14c0010e 	bge	r2,r19,92c0c <___vfiprintf_internal_r+0xef4>
   92c08:	9805883a 	mov	r2,r19
   92c0c:	d9402417 	ldw	r5,144(sp)
   92c10:	288b883a 	add	r5,r5,r2
   92c14:	d9402415 	stw	r5,144(sp)
   92c18:	003dd006 	br	9235c <__ram_exceptions_end+0xfff72128>
   92c1c:	d8001d85 	stb	zero,118(sp)
   92c20:	80005d16 	blt	r16,zero,92d98 <___vfiprintf_internal_r+0x1080>
   92c24:	00ffdfc4 	movi	r3,-129
   92c28:	9d04b03a 	or	r2,r19,r20
   92c2c:	88e2703a 	and	r17,r17,r3
   92c30:	103d3726 	beq	r2,zero,92110 <__ram_exceptions_end+0xfff71edc>
   92c34:	002b883a 	mov	r21,zero
   92c38:	d9002617 	ldw	r4,152(sp)
   92c3c:	ddc01a04 	addi	r23,sp,104
   92c40:	988003cc 	andi	r2,r19,15
   92c44:	a006973a 	slli	r3,r20,28
   92c48:	2085883a 	add	r2,r4,r2
   92c4c:	9826d13a 	srli	r19,r19,4
   92c50:	10800003 	ldbu	r2,0(r2)
   92c54:	a028d13a 	srli	r20,r20,4
   92c58:	bdffffc4 	addi	r23,r23,-1
   92c5c:	1ce6b03a 	or	r19,r3,r19
   92c60:	b8800005 	stb	r2,0(r23)
   92c64:	9d04b03a 	or	r2,r19,r20
   92c68:	103ff51e 	bne	r2,zero,92c40 <__ram_exceptions_end+0xfff72a0c>
   92c6c:	d8801e17 	ldw	r2,120(sp)
   92c70:	15e9c83a 	sub	r20,r2,r23
   92c74:	003d2b06 	br	92124 <__ram_exceptions_end+0xfff71ef0>
   92c78:	d9402017 	ldw	r5,128(sp)
   92c7c:	d9002117 	ldw	r4,132(sp)
   92c80:	d9801a04 	addi	r6,sp,104
   92c84:	0091c040 	call	91c04 <__sprint_r.part.0>
   92c88:	103f5b1e 	bne	r2,zero,929f8 <__ram_exceptions_end+0xfff727c4>
   92c8c:	d8801c17 	ldw	r2,112(sp)
   92c90:	d811883a 	mov	r8,sp
   92c94:	003f6706 	br	92a34 <__ram_exceptions_end+0xfff72800>
   92c98:	d9402017 	ldw	r5,128(sp)
   92c9c:	d9002117 	ldw	r4,132(sp)
   92ca0:	d9801a04 	addi	r6,sp,104
   92ca4:	0091c040 	call	91c04 <__sprint_r.part.0>
   92ca8:	103f531e 	bne	r2,zero,929f8 <__ram_exceptions_end+0xfff727c4>
   92cac:	d811883a 	mov	r8,sp
   92cb0:	003cd906 	br	92018 <__ram_exceptions_end+0xfff71de4>
   92cb4:	10803fcc 	andi	r2,r2,255
   92cb8:	1080201c 	xori	r2,r2,128
   92cbc:	10bfe004 	addi	r2,r2,-128
   92cc0:	00c00c04 	movi	r3,48
   92cc4:	10ffe926 	beq	r2,r3,92c6c <__ram_exceptions_end+0xfff72a38>
   92cc8:	b8ffffc5 	stb	r3,-1(r23)
   92ccc:	d8c01e17 	ldw	r3,120(sp)
   92cd0:	b8bfffc4 	addi	r2,r23,-1
   92cd4:	102f883a 	mov	r23,r2
   92cd8:	18a9c83a 	sub	r20,r3,r2
   92cdc:	003d1106 	br	92124 <__ram_exceptions_end+0xfff71ef0>
   92ce0:	d9402017 	ldw	r5,128(sp)
   92ce4:	d9002117 	ldw	r4,132(sp)
   92ce8:	d9801a04 	addi	r6,sp,104
   92cec:	d8c02a15 	stw	r3,168(sp)
   92cf0:	d9c02b15 	stw	r7,172(sp)
   92cf4:	0091c040 	call	91c04 <__sprint_r.part.0>
   92cf8:	d8c02a17 	ldw	r3,168(sp)
   92cfc:	d9c02b17 	ldw	r7,172(sp)
   92d00:	103f3d1e 	bne	r2,zero,929f8 <__ram_exceptions_end+0xfff727c4>
   92d04:	d9001b17 	ldw	r4,108(sp)
   92d08:	d8801c17 	ldw	r2,112(sp)
   92d0c:	d811883a 	mov	r8,sp
   92d10:	21400044 	addi	r5,r4,1
   92d14:	003d4406 	br	92228 <__ram_exceptions_end+0xfff71ff4>
   92d18:	d9402017 	ldw	r5,128(sp)
   92d1c:	d9002117 	ldw	r4,132(sp)
   92d20:	d9801a04 	addi	r6,sp,104
   92d24:	d8c02a15 	stw	r3,168(sp)
   92d28:	0091c040 	call	91c04 <__sprint_r.part.0>
   92d2c:	d8c02a17 	ldw	r3,168(sp)
   92d30:	103f311e 	bne	r2,zero,929f8 <__ram_exceptions_end+0xfff727c4>
   92d34:	d9001b17 	ldw	r4,108(sp)
   92d38:	d8801c17 	ldw	r2,112(sp)
   92d3c:	d811883a 	mov	r8,sp
   92d40:	21400044 	addi	r5,r4,1
   92d44:	003ef406 	br	92918 <__ram_exceptions_end+0xfff726e4>
   92d48:	1000bd1e 	bne	r2,zero,93040 <___vfiprintf_internal_r+0x1328>
   92d4c:	01400044 	movi	r5,1
   92d50:	0009883a 	mov	r4,zero
   92d54:	d811883a 	mov	r8,sp
   92d58:	003ef106 	br	92920 <__ram_exceptions_end+0xfff726ec>
   92d5c:	d9402017 	ldw	r5,128(sp)
   92d60:	d9002117 	ldw	r4,132(sp)
   92d64:	d9801a04 	addi	r6,sp,104
   92d68:	0091c040 	call	91c04 <__sprint_r.part.0>
   92d6c:	103f221e 	bne	r2,zero,929f8 <__ram_exceptions_end+0xfff727c4>
   92d70:	d9401b17 	ldw	r5,108(sp)
   92d74:	d8801c17 	ldw	r2,112(sp)
   92d78:	d811883a 	mov	r8,sp
   92d7c:	29400044 	addi	r5,r5,1
   92d80:	003d6206 	br	9230c <__ram_exceptions_end+0xfff720d8>
   92d84:	014002b4 	movhi	r5,10
   92d88:	29787f04 	addi	r5,r5,-7684
   92d8c:	d9402615 	stw	r5,152(sp)
   92d90:	d8c02215 	stw	r3,136(sp)
   92d94:	1023883a 	mov	r17,r2
   92d98:	9d04b03a 	or	r2,r19,r20
   92d9c:	103fa51e 	bne	r2,zero,92c34 <__ram_exceptions_end+0xfff72a00>
   92da0:	002b883a 	mov	r21,zero
   92da4:	00800084 	movi	r2,2
   92da8:	003e4a06 	br	926d4 <__ram_exceptions_end+0xfff724a0>
   92dac:	014002b4 	movhi	r5,10
   92db0:	29787f04 	addi	r5,r5,-7684
   92db4:	002b883a 	mov	r21,zero
   92db8:	d9402615 	stw	r5,152(sp)
   92dbc:	003f9e06 	br	92c38 <__ram_exceptions_end+0xfff72a04>
   92dc0:	d9402217 	ldw	r5,136(sp)
   92dc4:	d8001d85 	stb	zero,118(sp)
   92dc8:	0029883a 	mov	r20,zero
   92dcc:	28800104 	addi	r2,r5,4
   92dd0:	2cc00017 	ldw	r19,0(r5)
   92dd4:	803e3a16 	blt	r16,zero,926c0 <__ram_exceptions_end+0xfff7248c>
   92dd8:	00ffdfc4 	movi	r3,-129
   92ddc:	d8802215 	stw	r2,136(sp)
   92de0:	88e2703a 	and	r17,r17,r3
   92de4:	002b883a 	mov	r21,zero
   92de8:	983e9b26 	beq	r19,zero,92858 <__ram_exceptions_end+0xfff72624>
   92dec:	00800244 	movi	r2,9
   92df0:	14fdc936 	bltu	r2,r19,92518 <__ram_exceptions_end+0xfff722e4>
   92df4:	003e9a06 	br	92860 <__ram_exceptions_end+0xfff7262c>
   92df8:	00800c04 	movi	r2,48
   92dfc:	d8c01d45 	stb	r3,117(sp)
   92e00:	d8801d05 	stb	r2,116(sp)
   92e04:	d8001d85 	stb	zero,118(sp)
   92e08:	88c00094 	ori	r3,r17,2
   92e0c:	80009c16 	blt	r16,zero,93080 <___vfiprintf_internal_r+0x1368>
   92e10:	00bfdfc4 	movi	r2,-129
   92e14:	88a2703a 	and	r17,r17,r2
   92e18:	8c400094 	ori	r17,r17,2
   92e1c:	002b883a 	mov	r21,zero
   92e20:	003f8506 	br	92c38 <__ram_exceptions_end+0xfff72a04>
   92e24:	b029883a 	mov	r20,r22
   92e28:	003c0b06 	br	91e58 <__ram_exceptions_end+0xfff71c24>
   92e2c:	04e7c83a 	sub	r19,zero,r19
   92e30:	05400b44 	movi	r21,45
   92e34:	9804c03a 	cmpne	r2,r19,zero
   92e38:	0529c83a 	sub	r20,zero,r20
   92e3c:	dd401d85 	stb	r21,118(sp)
   92e40:	a0a9c83a 	sub	r20,r20,r2
   92e44:	80009716 	blt	r16,zero,930a4 <___vfiprintf_internal_r+0x138c>
   92e48:	00bfdfc4 	movi	r2,-129
   92e4c:	88a2703a 	and	r17,r17,r2
   92e50:	003db006 	br	92514 <__ram_exceptions_end+0xfff722e0>
   92e54:	b0c00007 	ldb	r3,0(r22)
   92e58:	003c0c06 	br	91e8c <__ram_exceptions_end+0xfff71c58>
   92e5c:	8880100c 	andi	r2,r17,64
   92e60:	d8001d85 	stb	zero,118(sp)
   92e64:	1000461e 	bne	r2,zero,92f80 <___vfiprintf_internal_r+0x1268>
   92e68:	d9002217 	ldw	r4,136(sp)
   92e6c:	0029883a 	mov	r20,zero
   92e70:	20800104 	addi	r2,r4,4
   92e74:	24c00017 	ldw	r19,0(r4)
   92e78:	803df80e 	bge	r16,zero,9265c <__ram_exceptions_end+0xfff72428>
   92e7c:	9d06b03a 	or	r3,r19,r20
   92e80:	d8802215 	stw	r2,136(sp)
   92e84:	183d5e1e 	bne	r3,zero,92400 <__ram_exceptions_end+0xfff721cc>
   92e88:	002b883a 	mov	r21,zero
   92e8c:	0005883a 	mov	r2,zero
   92e90:	003e1006 	br	926d4 <__ram_exceptions_end+0xfff724a0>
   92e94:	8880040c 	andi	r2,r17,16
   92e98:	1000321e 	bne	r2,zero,92f64 <___vfiprintf_internal_r+0x124c>
   92e9c:	8c40100c 	andi	r17,r17,64
   92ea0:	88008d26 	beq	r17,zero,930d8 <___vfiprintf_internal_r+0x13c0>
   92ea4:	d9402217 	ldw	r5,136(sp)
   92ea8:	d8c02417 	ldw	r3,144(sp)
   92eac:	28800017 	ldw	r2,0(r5)
   92eb0:	29400104 	addi	r5,r5,4
   92eb4:	d9402215 	stw	r5,136(sp)
   92eb8:	10c0000d 	sth	r3,0(r2)
   92ebc:	003bca06 	br	91de8 <__ram_exceptions_end+0xfff71bb4>
   92ec0:	8880100c 	andi	r2,r17,64
   92ec4:	10003a26 	beq	r2,zero,92fb0 <___vfiprintf_internal_r+0x1298>
   92ec8:	d8802217 	ldw	r2,136(sp)
   92ecc:	14c0000f 	ldh	r19,0(r2)
   92ed0:	10800104 	addi	r2,r2,4
   92ed4:	d8802215 	stw	r2,136(sp)
   92ed8:	9829d7fa 	srai	r20,r19,31
   92edc:	a005883a 	mov	r2,r20
   92ee0:	003d8506 	br	924f8 <__ram_exceptions_end+0xfff722c4>
   92ee4:	8880100c 	andi	r2,r17,64
   92ee8:	10002b26 	beq	r2,zero,92f98 <___vfiprintf_internal_r+0x1280>
   92eec:	d8802217 	ldw	r2,136(sp)
   92ef0:	0029883a 	mov	r20,zero
   92ef4:	14c0000b 	ldhu	r19,0(r2)
   92ef8:	10800104 	addi	r2,r2,4
   92efc:	d8802215 	stw	r2,136(sp)
   92f00:	003d5d06 	br	92478 <__ram_exceptions_end+0xfff72244>
   92f04:	d9402017 	ldw	r5,128(sp)
   92f08:	d9002117 	ldw	r4,132(sp)
   92f0c:	d9801a04 	addi	r6,sp,104
   92f10:	d8c02a15 	stw	r3,168(sp)
   92f14:	d9c02b15 	stw	r7,172(sp)
   92f18:	0091c040 	call	91c04 <__sprint_r.part.0>
   92f1c:	d8c02a17 	ldw	r3,168(sp)
   92f20:	d9c02b17 	ldw	r7,172(sp)
   92f24:	103eb41e 	bne	r2,zero,929f8 <__ram_exceptions_end+0xfff727c4>
   92f28:	d9001b17 	ldw	r4,108(sp)
   92f2c:	d8801c17 	ldw	r2,112(sp)
   92f30:	d811883a 	mov	r8,sp
   92f34:	21400044 	addi	r5,r4,1
   92f38:	003e6706 	br	928d8 <__ram_exceptions_end+0xfff726a4>
   92f3c:	00bfffc4 	movi	r2,-1
   92f40:	003c4a06 	br	9206c <__ram_exceptions_end+0xfff71e38>
   92f44:	9805883a 	mov	r2,r19
   92f48:	003ee806 	br	92aec <__ram_exceptions_end+0xfff728b8>
   92f4c:	d8c02217 	ldw	r3,136(sp)
   92f50:	0029883a 	mov	r20,zero
   92f54:	18800104 	addi	r2,r3,4
   92f58:	1cc0000b 	ldhu	r19,0(r3)
   92f5c:	803f9e0e 	bge	r16,zero,92dd8 <__ram_exceptions_end+0xfff72ba4>
   92f60:	003dd706 	br	926c0 <__ram_exceptions_end+0xfff7248c>
   92f64:	d8c02217 	ldw	r3,136(sp)
   92f68:	d9002417 	ldw	r4,144(sp)
   92f6c:	18800017 	ldw	r2,0(r3)
   92f70:	18c00104 	addi	r3,r3,4
   92f74:	d8c02215 	stw	r3,136(sp)
   92f78:	11000015 	stw	r4,0(r2)
   92f7c:	003b9a06 	br	91de8 <__ram_exceptions_end+0xfff71bb4>
   92f80:	d8c02217 	ldw	r3,136(sp)
   92f84:	0029883a 	mov	r20,zero
   92f88:	18800104 	addi	r2,r3,4
   92f8c:	1cc0000b 	ldhu	r19,0(r3)
   92f90:	803db20e 	bge	r16,zero,9265c <__ram_exceptions_end+0xfff72428>
   92f94:	003fb906 	br	92e7c <__ram_exceptions_end+0xfff72c48>
   92f98:	d9002217 	ldw	r4,136(sp)
   92f9c:	0029883a 	mov	r20,zero
   92fa0:	24c00017 	ldw	r19,0(r4)
   92fa4:	21000104 	addi	r4,r4,4
   92fa8:	d9002215 	stw	r4,136(sp)
   92fac:	003d3206 	br	92478 <__ram_exceptions_end+0xfff72244>
   92fb0:	d8c02217 	ldw	r3,136(sp)
   92fb4:	1cc00017 	ldw	r19,0(r3)
   92fb8:	18c00104 	addi	r3,r3,4
   92fbc:	d8c02215 	stw	r3,136(sp)
   92fc0:	9829d7fa 	srai	r20,r19,31
   92fc4:	a005883a 	mov	r2,r20
   92fc8:	003d4b06 	br	924f8 <__ram_exceptions_end+0xfff722c4>
   92fcc:	0009883a 	mov	r4,zero
   92fd0:	01400044 	movi	r5,1
   92fd4:	d811883a 	mov	r8,sp
   92fd8:	003e4f06 	br	92918 <__ram_exceptions_end+0xfff726e4>
   92fdc:	d8c02215 	stw	r3,136(sp)
   92fe0:	002b883a 	mov	r21,zero
   92fe4:	003db806 	br	926c8 <__ram_exceptions_end+0xfff72494>
   92fe8:	d811883a 	mov	r8,sp
   92fec:	003e9606 	br	92a48 <__ram_exceptions_end+0xfff72814>
   92ff0:	010002b4 	movhi	r4,10
   92ff4:	2139a784 	addi	r4,r4,-6498
   92ff8:	d9002315 	stw	r4,140(sp)
   92ffc:	003e6306 	br	9298c <__ram_exceptions_end+0xfff72758>
   93000:	b0c00043 	ldbu	r3,1(r22)
   93004:	8c400814 	ori	r17,r17,32
   93008:	b5800044 	addi	r22,r22,1
   9300c:	18c03fcc 	andi	r3,r3,255
   93010:	18c0201c 	xori	r3,r3,128
   93014:	18ffe004 	addi	r3,r3,-128
   93018:	003b9c06 	br	91e8c <__ram_exceptions_end+0xfff71c58>
   9301c:	b809883a 	mov	r4,r23
   93020:	da002a15 	stw	r8,168(sp)
   93024:	00831980 	call	83198 <strlen>
   93028:	1029883a 	mov	r20,r2
   9302c:	dd401d83 	ldbu	r21,118(sp)
   93030:	df002215 	stw	fp,136(sp)
   93034:	0021883a 	mov	r16,zero
   93038:	da002a17 	ldw	r8,168(sp)
   9303c:	003c3906 	br	92124 <__ram_exceptions_end+0xfff71ef0>
   93040:	d9402017 	ldw	r5,128(sp)
   93044:	d9002117 	ldw	r4,132(sp)
   93048:	d9801a04 	addi	r6,sp,104
   9304c:	0091c040 	call	91c04 <__sprint_r.part.0>
   93050:	103e691e 	bne	r2,zero,929f8 <__ram_exceptions_end+0xfff727c4>
   93054:	d9001b17 	ldw	r4,108(sp)
   93058:	d8801c17 	ldw	r2,112(sp)
   9305c:	d811883a 	mov	r8,sp
   93060:	21400044 	addi	r5,r4,1
   93064:	003e2e06 	br	92920 <__ram_exceptions_end+0xfff726ec>
   93068:	010002b4 	movhi	r4,10
   9306c:	2139ab84 	addi	r4,r4,-6482
   93070:	d9002315 	stw	r4,140(sp)
   93074:	d9001b17 	ldw	r4,108(sp)
   93078:	21000044 	addi	r4,r4,1
   9307c:	003c5e06 	br	921f8 <__ram_exceptions_end+0xfff71fc4>
   93080:	002b883a 	mov	r21,zero
   93084:	00800084 	movi	r2,2
   93088:	10803fcc 	andi	r2,r2,255
   9308c:	01000044 	movi	r4,1
   93090:	11002b26 	beq	r2,r4,93140 <___vfiprintf_internal_r+0x1428>
   93094:	01000084 	movi	r4,2
   93098:	11002b1e 	bne	r2,r4,93148 <___vfiprintf_internal_r+0x1430>
   9309c:	1823883a 	mov	r17,r3
   930a0:	003ee506 	br	92c38 <__ram_exceptions_end+0xfff72a04>
   930a4:	8807883a 	mov	r3,r17
   930a8:	00800044 	movi	r2,1
   930ac:	003ff606 	br	93088 <__ram_exceptions_end+0xfff72e54>
   930b0:	00800184 	movi	r2,6
   930b4:	1400012e 	bgeu	r2,r16,930bc <___vfiprintf_internal_r+0x13a4>
   930b8:	1021883a 	mov	r16,r2
   930bc:	8029883a 	mov	r20,r16
   930c0:	8027883a 	mov	r19,r16
   930c4:	80002216 	blt	r16,zero,93150 <___vfiprintf_internal_r+0x1438>
   930c8:	05c002b4 	movhi	r23,10
   930cc:	df002215 	stw	fp,136(sp)
   930d0:	bdf88404 	addi	r23,r23,-7664
   930d4:	003cfb06 	br	924c4 <__ram_exceptions_end+0xfff72290>
   930d8:	d9002217 	ldw	r4,136(sp)
   930dc:	d9402417 	ldw	r5,144(sp)
   930e0:	20800017 	ldw	r2,0(r4)
   930e4:	21000104 	addi	r4,r4,4
   930e8:	d9002215 	stw	r4,136(sp)
   930ec:	11400015 	stw	r5,0(r2)
   930f0:	003b3d06 	br	91de8 <__ram_exceptions_end+0xfff71bb4>
   930f4:	014002b4 	movhi	r5,10
   930f8:	2979ab84 	addi	r5,r5,-6482
   930fc:	d9402315 	stw	r5,140(sp)
   93100:	d9401b17 	ldw	r5,108(sp)
   93104:	29400044 	addi	r5,r5,1
   93108:	003e6d06 	br	92ac0 <__ram_exceptions_end+0xfff7288c>
   9310c:	8029883a 	mov	r20,r16
   93110:	dd401d83 	ldbu	r21,118(sp)
   93114:	df002215 	stw	fp,136(sp)
   93118:	0021883a 	mov	r16,zero
   9311c:	003c0106 	br	92124 <__ram_exceptions_end+0xfff71ef0>
   93120:	00c002b4 	movhi	r3,10
   93124:	18f9a784 	addi	r3,r3,-6498
   93128:	d8c02315 	stw	r3,140(sp)
   9312c:	280d883a 	mov	r6,r5
   93130:	003c6906 	br	922d8 <__ram_exceptions_end+0xfff720a4>
   93134:	802d883a 	mov	r22,r16
   93138:	0021883a 	mov	r16,zero
   9313c:	003b5406 	br	91e90 <__ram_exceptions_end+0xfff71c5c>
   93140:	1823883a 	mov	r17,r3
   93144:	003cf306 	br	92514 <__ram_exceptions_end+0xfff722e0>
   93148:	1823883a 	mov	r17,r3
   9314c:	003cad06 	br	92404 <__ram_exceptions_end+0xfff721d0>
   93150:	0027883a 	mov	r19,zero
   93154:	003fdc06 	br	930c8 <__ram_exceptions_end+0xfff72e94>
   93158:	d9402217 	ldw	r5,136(sp)
   9315c:	8005883a 	mov	r2,r16
   93160:	b0c00043 	ldbu	r3,1(r22)
   93164:	2c000017 	ldw	r16,0(r5)
   93168:	29000104 	addi	r4,r5,4
   9316c:	d9002215 	stw	r4,136(sp)
   93170:	102d883a 	mov	r22,r2
   93174:	803fa50e 	bge	r16,zero,9300c <__ram_exceptions_end+0xfff72dd8>
   93178:	18c03fcc 	andi	r3,r3,255
   9317c:	18c0201c 	xori	r3,r3,128
   93180:	043fffc4 	movi	r16,-1
   93184:	18ffe004 	addi	r3,r3,-128
   93188:	003b4006 	br	91e8c <__ram_exceptions_end+0xfff71c58>
   9318c:	d9402303 	ldbu	r5,140(sp)
   93190:	d9401d85 	stb	r5,118(sp)
   93194:	003cae06 	br	92450 <__ram_exceptions_end+0xfff7221c>
   93198:	d8c02303 	ldbu	r3,140(sp)
   9319c:	d8c01d85 	stb	r3,118(sp)
   931a0:	003d1406 	br	925f4 <__ram_exceptions_end+0xfff723c0>
   931a4:	d8c02303 	ldbu	r3,140(sp)
   931a8:	d8c01d85 	stb	r3,118(sp)
   931ac:	003cca06 	br	924d8 <__ram_exceptions_end+0xfff722a4>
   931b0:	8880004c 	andi	r2,r17,1
   931b4:	002b883a 	mov	r21,zero
   931b8:	10000526 	beq	r2,zero,931d0 <___vfiprintf_internal_r+0x14b8>
   931bc:	00800c04 	movi	r2,48
   931c0:	d88019c5 	stb	r2,103(sp)
   931c4:	dd002817 	ldw	r20,160(sp)
   931c8:	ddc019c4 	addi	r23,sp,103
   931cc:	003bd506 	br	92124 <__ram_exceptions_end+0xfff71ef0>
   931d0:	0029883a 	mov	r20,zero
   931d4:	ddc01a04 	addi	r23,sp,104
   931d8:	003bd206 	br	92124 <__ram_exceptions_end+0xfff71ef0>
   931dc:	d9002303 	ldbu	r4,140(sp)
   931e0:	d9001d85 	stb	r4,118(sp)
   931e4:	003da606 	br	92880 <__ram_exceptions_end+0xfff7264c>
   931e8:	d8c02303 	ldbu	r3,140(sp)
   931ec:	d8c01d85 	stb	r3,118(sp)
   931f0:	003c7606 	br	923cc <__ram_exceptions_end+0xfff72198>
   931f4:	d8c02303 	ldbu	r3,140(sp)
   931f8:	d8c01d85 	stb	r3,118(sp)
   931fc:	003c6506 	br	92394 <__ram_exceptions_end+0xfff72160>
   93200:	d9002303 	ldbu	r4,140(sp)
   93204:	d9001d85 	stb	r4,118(sp)
   93208:	003d3d06 	br	92700 <__ram_exceptions_end+0xfff724cc>
   9320c:	d8c02303 	ldbu	r3,140(sp)
   93210:	d8c01d85 	stb	r3,118(sp)
   93214:	003d1d06 	br	9268c <__ram_exceptions_end+0xfff72458>
   93218:	d8c02303 	ldbu	r3,140(sp)
   9321c:	d8c01d85 	stb	r3,118(sp)
   93220:	003d0306 	br	92630 <__ram_exceptions_end+0xfff723fc>

00093224 <__vfiprintf_internal>:
   93224:	008002b4 	movhi	r2,10
   93228:	10817a04 	addi	r2,r2,1512
   9322c:	300f883a 	mov	r7,r6
   93230:	280d883a 	mov	r6,r5
   93234:	200b883a 	mov	r5,r4
   93238:	11000017 	ldw	r4,0(r2)
   9323c:	0091d181 	jmpi	91d18 <___vfiprintf_internal_r>

00093240 <__sbprintf>:
   93240:	2880030b 	ldhu	r2,12(r5)
   93244:	2ac01917 	ldw	r11,100(r5)
   93248:	2a80038b 	ldhu	r10,14(r5)
   9324c:	2a400717 	ldw	r9,28(r5)
   93250:	2a000917 	ldw	r8,36(r5)
   93254:	defee204 	addi	sp,sp,-1144
   93258:	00c10004 	movi	r3,1024
   9325c:	dc011a15 	stw	r16,1128(sp)
   93260:	10bfff4c 	andi	r2,r2,65533
   93264:	2821883a 	mov	r16,r5
   93268:	d8cb883a 	add	r5,sp,r3
   9326c:	dc811c15 	stw	r18,1136(sp)
   93270:	dc411b15 	stw	r17,1132(sp)
   93274:	dfc11d15 	stw	ra,1140(sp)
   93278:	2025883a 	mov	r18,r4
   9327c:	d881030d 	sth	r2,1036(sp)
   93280:	dac11915 	stw	r11,1124(sp)
   93284:	da81038d 	sth	r10,1038(sp)
   93288:	da410715 	stw	r9,1052(sp)
   9328c:	da010915 	stw	r8,1060(sp)
   93290:	dec10015 	stw	sp,1024(sp)
   93294:	dec10415 	stw	sp,1040(sp)
   93298:	d8c10215 	stw	r3,1032(sp)
   9329c:	d8c10515 	stw	r3,1044(sp)
   932a0:	d8010615 	stw	zero,1048(sp)
   932a4:	0091d180 	call	91d18 <___vfiprintf_internal_r>
   932a8:	1023883a 	mov	r17,r2
   932ac:	10000416 	blt	r2,zero,932c0 <__sbprintf+0x80>
   932b0:	d9410004 	addi	r5,sp,1024
   932b4:	9009883a 	mov	r4,r18
   932b8:	0088c440 	call	88c44 <_fflush_r>
   932bc:	10000d1e 	bne	r2,zero,932f4 <__sbprintf+0xb4>
   932c0:	d881030b 	ldhu	r2,1036(sp)
   932c4:	1080100c 	andi	r2,r2,64
   932c8:	10000326 	beq	r2,zero,932d8 <__sbprintf+0x98>
   932cc:	8080030b 	ldhu	r2,12(r16)
   932d0:	10801014 	ori	r2,r2,64
   932d4:	8080030d 	sth	r2,12(r16)
   932d8:	8805883a 	mov	r2,r17
   932dc:	dfc11d17 	ldw	ra,1140(sp)
   932e0:	dc811c17 	ldw	r18,1136(sp)
   932e4:	dc411b17 	ldw	r17,1132(sp)
   932e8:	dc011a17 	ldw	r16,1128(sp)
   932ec:	dec11e04 	addi	sp,sp,1144
   932f0:	f800283a 	ret
   932f4:	047fffc4 	movi	r17,-1
   932f8:	003ff106 	br	932c0 <__ram_exceptions_end+0xfff7308c>

000932fc <__swbuf_r>:
   932fc:	defffb04 	addi	sp,sp,-20
   93300:	dcc00315 	stw	r19,12(sp)
   93304:	dc800215 	stw	r18,8(sp)
   93308:	dc000015 	stw	r16,0(sp)
   9330c:	dfc00415 	stw	ra,16(sp)
   93310:	dc400115 	stw	r17,4(sp)
   93314:	2025883a 	mov	r18,r4
   93318:	2827883a 	mov	r19,r5
   9331c:	3021883a 	mov	r16,r6
   93320:	20000226 	beq	r4,zero,9332c <__swbuf_r+0x30>
   93324:	20800e17 	ldw	r2,56(r4)
   93328:	10004226 	beq	r2,zero,93434 <__swbuf_r+0x138>
   9332c:	80800617 	ldw	r2,24(r16)
   93330:	8100030b 	ldhu	r4,12(r16)
   93334:	80800215 	stw	r2,8(r16)
   93338:	2080020c 	andi	r2,r4,8
   9333c:	10003626 	beq	r2,zero,93418 <__swbuf_r+0x11c>
   93340:	80c00417 	ldw	r3,16(r16)
   93344:	18003426 	beq	r3,zero,93418 <__swbuf_r+0x11c>
   93348:	2088000c 	andi	r2,r4,8192
   9334c:	9c403fcc 	andi	r17,r19,255
   93350:	10001a26 	beq	r2,zero,933bc <__swbuf_r+0xc0>
   93354:	80800017 	ldw	r2,0(r16)
   93358:	81000517 	ldw	r4,20(r16)
   9335c:	10c7c83a 	sub	r3,r2,r3
   93360:	1900200e 	bge	r3,r4,933e4 <__swbuf_r+0xe8>
   93364:	18c00044 	addi	r3,r3,1
   93368:	81000217 	ldw	r4,8(r16)
   9336c:	11400044 	addi	r5,r2,1
   93370:	81400015 	stw	r5,0(r16)
   93374:	213fffc4 	addi	r4,r4,-1
   93378:	81000215 	stw	r4,8(r16)
   9337c:	14c00005 	stb	r19,0(r2)
   93380:	80800517 	ldw	r2,20(r16)
   93384:	10c01e26 	beq	r2,r3,93400 <__swbuf_r+0x104>
   93388:	8080030b 	ldhu	r2,12(r16)
   9338c:	1080004c 	andi	r2,r2,1
   93390:	10000226 	beq	r2,zero,9339c <__swbuf_r+0xa0>
   93394:	00800284 	movi	r2,10
   93398:	88801926 	beq	r17,r2,93400 <__swbuf_r+0x104>
   9339c:	8805883a 	mov	r2,r17
   933a0:	dfc00417 	ldw	ra,16(sp)
   933a4:	dcc00317 	ldw	r19,12(sp)
   933a8:	dc800217 	ldw	r18,8(sp)
   933ac:	dc400117 	ldw	r17,4(sp)
   933b0:	dc000017 	ldw	r16,0(sp)
   933b4:	dec00504 	addi	sp,sp,20
   933b8:	f800283a 	ret
   933bc:	81401917 	ldw	r5,100(r16)
   933c0:	00b7ffc4 	movi	r2,-8193
   933c4:	21080014 	ori	r4,r4,8192
   933c8:	2884703a 	and	r2,r5,r2
   933cc:	80801915 	stw	r2,100(r16)
   933d0:	80800017 	ldw	r2,0(r16)
   933d4:	8100030d 	sth	r4,12(r16)
   933d8:	81000517 	ldw	r4,20(r16)
   933dc:	10c7c83a 	sub	r3,r2,r3
   933e0:	193fe016 	blt	r3,r4,93364 <__ram_exceptions_end+0xfff73130>
   933e4:	800b883a 	mov	r5,r16
   933e8:	9009883a 	mov	r4,r18
   933ec:	0088c440 	call	88c44 <_fflush_r>
   933f0:	1000071e 	bne	r2,zero,93410 <__swbuf_r+0x114>
   933f4:	80800017 	ldw	r2,0(r16)
   933f8:	00c00044 	movi	r3,1
   933fc:	003fda06 	br	93368 <__ram_exceptions_end+0xfff73134>
   93400:	800b883a 	mov	r5,r16
   93404:	9009883a 	mov	r4,r18
   93408:	0088c440 	call	88c44 <_fflush_r>
   9340c:	103fe326 	beq	r2,zero,9339c <__ram_exceptions_end+0xfff73168>
   93410:	00bfffc4 	movi	r2,-1
   93414:	003fe206 	br	933a0 <__ram_exceptions_end+0xfff7316c>
   93418:	800b883a 	mov	r5,r16
   9341c:	9009883a 	mov	r4,r18
   93420:	0086fd00 	call	86fd0 <__swsetup_r>
   93424:	103ffa1e 	bne	r2,zero,93410 <__ram_exceptions_end+0xfff731dc>
   93428:	8100030b 	ldhu	r4,12(r16)
   9342c:	80c00417 	ldw	r3,16(r16)
   93430:	003fc506 	br	93348 <__ram_exceptions_end+0xfff73114>
   93434:	00890300 	call	89030 <__sinit>
   93438:	003fbc06 	br	9332c <__ram_exceptions_end+0xfff730f8>

0009343c <__swbuf>:
   9343c:	008002b4 	movhi	r2,10
   93440:	10817a04 	addi	r2,r2,1512
   93444:	280d883a 	mov	r6,r5
   93448:	200b883a 	mov	r5,r4
   9344c:	11000017 	ldw	r4,0(r2)
   93450:	00932fc1 	jmpi	932fc <__swbuf_r>

00093454 <_calloc_r>:
   93454:	defffe04 	addi	sp,sp,-8
   93458:	2805883a 	mov	r2,r5
   9345c:	dc000015 	stw	r16,0(sp)
   93460:	300b883a 	mov	r5,r6
   93464:	2021883a 	mov	r16,r4
   93468:	1009883a 	mov	r4,r2
   9346c:	dfc00115 	stw	ra,4(sp)
   93470:	00822140 	call	82214 <__mulsi3>
   93474:	100b883a 	mov	r5,r2
   93478:	8009883a 	mov	r4,r16
   9347c:	008235c0 	call	8235c <_malloc_r>
   93480:	10002926 	beq	r2,zero,93528 <_calloc_r+0xd4>
   93484:	11bfff17 	ldw	r6,-4(r2)
   93488:	1021883a 	mov	r16,r2
   9348c:	00bfff04 	movi	r2,-4
   93490:	308c703a 	and	r6,r6,r2
   93494:	00c00904 	movi	r3,36
   93498:	308d883a 	add	r6,r6,r2
   9349c:	19801636 	bltu	r3,r6,934f8 <_calloc_r+0xa4>
   934a0:	008004c4 	movi	r2,19
   934a4:	11800b2e 	bgeu	r2,r6,934d4 <_calloc_r+0x80>
   934a8:	80000015 	stw	zero,0(r16)
   934ac:	80000115 	stw	zero,4(r16)
   934b0:	008006c4 	movi	r2,27
   934b4:	11801a2e 	bgeu	r2,r6,93520 <_calloc_r+0xcc>
   934b8:	80000215 	stw	zero,8(r16)
   934bc:	80000315 	stw	zero,12(r16)
   934c0:	30c0151e 	bne	r6,r3,93518 <_calloc_r+0xc4>
   934c4:	80000415 	stw	zero,16(r16)
   934c8:	80800604 	addi	r2,r16,24
   934cc:	80000515 	stw	zero,20(r16)
   934d0:	00000106 	br	934d8 <_calloc_r+0x84>
   934d4:	8005883a 	mov	r2,r16
   934d8:	10000015 	stw	zero,0(r2)
   934dc:	10000115 	stw	zero,4(r2)
   934e0:	10000215 	stw	zero,8(r2)
   934e4:	8005883a 	mov	r2,r16
   934e8:	dfc00117 	ldw	ra,4(sp)
   934ec:	dc000017 	ldw	r16,0(sp)
   934f0:	dec00204 	addi	sp,sp,8
   934f4:	f800283a 	ret
   934f8:	000b883a 	mov	r5,zero
   934fc:	8009883a 	mov	r4,r16
   93500:	008a2900 	call	8a290 <memset>
   93504:	8005883a 	mov	r2,r16
   93508:	dfc00117 	ldw	ra,4(sp)
   9350c:	dc000017 	ldw	r16,0(sp)
   93510:	dec00204 	addi	sp,sp,8
   93514:	f800283a 	ret
   93518:	80800404 	addi	r2,r16,16
   9351c:	003fee06 	br	934d8 <__ram_exceptions_end+0xfff732a4>
   93520:	80800204 	addi	r2,r16,8
   93524:	003fec06 	br	934d8 <__ram_exceptions_end+0xfff732a4>
   93528:	0005883a 	mov	r2,zero
   9352c:	003fee06 	br	934e8 <__ram_exceptions_end+0xfff732b4>

00093530 <_fclose_r>:
   93530:	28003926 	beq	r5,zero,93618 <_fclose_r+0xe8>
   93534:	defffc04 	addi	sp,sp,-16
   93538:	dc400115 	stw	r17,4(sp)
   9353c:	dc000015 	stw	r16,0(sp)
   93540:	dfc00315 	stw	ra,12(sp)
   93544:	dc800215 	stw	r18,8(sp)
   93548:	2023883a 	mov	r17,r4
   9354c:	2821883a 	mov	r16,r5
   93550:	20000226 	beq	r4,zero,9355c <_fclose_r+0x2c>
   93554:	20800e17 	ldw	r2,56(r4)
   93558:	10002726 	beq	r2,zero,935f8 <_fclose_r+0xc8>
   9355c:	8080030f 	ldh	r2,12(r16)
   93560:	1000071e 	bne	r2,zero,93580 <_fclose_r+0x50>
   93564:	0005883a 	mov	r2,zero
   93568:	dfc00317 	ldw	ra,12(sp)
   9356c:	dc800217 	ldw	r18,8(sp)
   93570:	dc400117 	ldw	r17,4(sp)
   93574:	dc000017 	ldw	r16,0(sp)
   93578:	dec00404 	addi	sp,sp,16
   9357c:	f800283a 	ret
   93580:	800b883a 	mov	r5,r16
   93584:	8809883a 	mov	r4,r17
   93588:	0088a280 	call	88a28 <__sflush_r>
   9358c:	1025883a 	mov	r18,r2
   93590:	80800b17 	ldw	r2,44(r16)
   93594:	10000426 	beq	r2,zero,935a8 <_fclose_r+0x78>
   93598:	81400717 	ldw	r5,28(r16)
   9359c:	8809883a 	mov	r4,r17
   935a0:	103ee83a 	callr	r2
   935a4:	10001616 	blt	r2,zero,93600 <_fclose_r+0xd0>
   935a8:	8080030b 	ldhu	r2,12(r16)
   935ac:	1080200c 	andi	r2,r2,128
   935b0:	1000151e 	bne	r2,zero,93608 <_fclose_r+0xd8>
   935b4:	81400c17 	ldw	r5,48(r16)
   935b8:	28000526 	beq	r5,zero,935d0 <_fclose_r+0xa0>
   935bc:	80801004 	addi	r2,r16,64
   935c0:	28800226 	beq	r5,r2,935cc <_fclose_r+0x9c>
   935c4:	8809883a 	mov	r4,r17
   935c8:	00891a40 	call	891a4 <_free_r>
   935cc:	80000c15 	stw	zero,48(r16)
   935d0:	81401117 	ldw	r5,68(r16)
   935d4:	28000326 	beq	r5,zero,935e4 <_fclose_r+0xb4>
   935d8:	8809883a 	mov	r4,r17
   935dc:	00891a40 	call	891a4 <_free_r>
   935e0:	80001115 	stw	zero,68(r16)
   935e4:	00890400 	call	89040 <__sfp_lock_acquire>
   935e8:	8000030d 	sth	zero,12(r16)
   935ec:	00890440 	call	89044 <__sfp_lock_release>
   935f0:	9005883a 	mov	r2,r18
   935f4:	003fdc06 	br	93568 <__ram_exceptions_end+0xfff73334>
   935f8:	00890300 	call	89030 <__sinit>
   935fc:	003fd706 	br	9355c <__ram_exceptions_end+0xfff73328>
   93600:	04bfffc4 	movi	r18,-1
   93604:	003fe806 	br	935a8 <__ram_exceptions_end+0xfff73374>
   93608:	81400417 	ldw	r5,16(r16)
   9360c:	8809883a 	mov	r4,r17
   93610:	00891a40 	call	891a4 <_free_r>
   93614:	003fe706 	br	935b4 <__ram_exceptions_end+0xfff73380>
   93618:	0005883a 	mov	r2,zero
   9361c:	f800283a 	ret

00093620 <fclose>:
   93620:	008002b4 	movhi	r2,10
   93624:	10817a04 	addi	r2,r2,1512
   93628:	200b883a 	mov	r5,r4
   9362c:	11000017 	ldw	r4,0(r2)
   93630:	00935301 	jmpi	93530 <_fclose_r>

00093634 <__fputwc>:
   93634:	defff804 	addi	sp,sp,-32
   93638:	dcc00415 	stw	r19,16(sp)
   9363c:	dc800315 	stw	r18,12(sp)
   93640:	dc000115 	stw	r16,4(sp)
   93644:	dfc00715 	stw	ra,28(sp)
   93648:	dd400615 	stw	r21,24(sp)
   9364c:	dd000515 	stw	r20,20(sp)
   93650:	dc400215 	stw	r17,8(sp)
   93654:	2027883a 	mov	r19,r4
   93658:	2825883a 	mov	r18,r5
   9365c:	3021883a 	mov	r16,r6
   93660:	0089bbc0 	call	89bbc <__locale_mb_cur_max>
   93664:	00c00044 	movi	r3,1
   93668:	10c03e26 	beq	r2,r3,93764 <__fputwc+0x130>
   9366c:	81c01704 	addi	r7,r16,92
   93670:	900d883a 	mov	r6,r18
   93674:	d80b883a 	mov	r5,sp
   93678:	9809883a 	mov	r4,r19
   9367c:	0095ad80 	call	95ad8 <_wcrtomb_r>
   93680:	1029883a 	mov	r20,r2
   93684:	00bfffc4 	movi	r2,-1
   93688:	a0802026 	beq	r20,r2,9370c <__fputwc+0xd8>
   9368c:	d9400003 	ldbu	r5,0(sp)
   93690:	a0001c26 	beq	r20,zero,93704 <__fputwc+0xd0>
   93694:	0023883a 	mov	r17,zero
   93698:	05400284 	movi	r21,10
   9369c:	00000906 	br	936c4 <__fputwc+0x90>
   936a0:	80800017 	ldw	r2,0(r16)
   936a4:	11400005 	stb	r5,0(r2)
   936a8:	80c00017 	ldw	r3,0(r16)
   936ac:	18c00044 	addi	r3,r3,1
   936b0:	80c00015 	stw	r3,0(r16)
   936b4:	8c400044 	addi	r17,r17,1
   936b8:	dc45883a 	add	r2,sp,r17
   936bc:	8d00112e 	bgeu	r17,r20,93704 <__fputwc+0xd0>
   936c0:	11400003 	ldbu	r5,0(r2)
   936c4:	80c00217 	ldw	r3,8(r16)
   936c8:	18ffffc4 	addi	r3,r3,-1
   936cc:	80c00215 	stw	r3,8(r16)
   936d0:	183ff30e 	bge	r3,zero,936a0 <__ram_exceptions_end+0xfff7346c>
   936d4:	80800617 	ldw	r2,24(r16)
   936d8:	18801916 	blt	r3,r2,93740 <__fputwc+0x10c>
   936dc:	80800017 	ldw	r2,0(r16)
   936e0:	11400005 	stb	r5,0(r2)
   936e4:	80800017 	ldw	r2,0(r16)
   936e8:	10c00003 	ldbu	r3,0(r2)
   936ec:	10800044 	addi	r2,r2,1
   936f0:	1d402326 	beq	r3,r21,93780 <__fputwc+0x14c>
   936f4:	80800015 	stw	r2,0(r16)
   936f8:	8c400044 	addi	r17,r17,1
   936fc:	dc45883a 	add	r2,sp,r17
   93700:	8d3fef36 	bltu	r17,r20,936c0 <__ram_exceptions_end+0xfff7348c>
   93704:	9005883a 	mov	r2,r18
   93708:	00000406 	br	9371c <__fputwc+0xe8>
   9370c:	80c0030b 	ldhu	r3,12(r16)
   93710:	a005883a 	mov	r2,r20
   93714:	18c01014 	ori	r3,r3,64
   93718:	80c0030d 	sth	r3,12(r16)
   9371c:	dfc00717 	ldw	ra,28(sp)
   93720:	dd400617 	ldw	r21,24(sp)
   93724:	dd000517 	ldw	r20,20(sp)
   93728:	dcc00417 	ldw	r19,16(sp)
   9372c:	dc800317 	ldw	r18,12(sp)
   93730:	dc400217 	ldw	r17,8(sp)
   93734:	dc000117 	ldw	r16,4(sp)
   93738:	dec00804 	addi	sp,sp,32
   9373c:	f800283a 	ret
   93740:	800d883a 	mov	r6,r16
   93744:	29403fcc 	andi	r5,r5,255
   93748:	9809883a 	mov	r4,r19
   9374c:	00932fc0 	call	932fc <__swbuf_r>
   93750:	10bfffe0 	cmpeqi	r2,r2,-1
   93754:	10803fcc 	andi	r2,r2,255
   93758:	103fd626 	beq	r2,zero,936b4 <__ram_exceptions_end+0xfff73480>
   9375c:	00bfffc4 	movi	r2,-1
   93760:	003fee06 	br	9371c <__ram_exceptions_end+0xfff734e8>
   93764:	90ffffc4 	addi	r3,r18,-1
   93768:	01003f84 	movi	r4,254
   9376c:	20ffbf36 	bltu	r4,r3,9366c <__ram_exceptions_end+0xfff73438>
   93770:	900b883a 	mov	r5,r18
   93774:	dc800005 	stb	r18,0(sp)
   93778:	1029883a 	mov	r20,r2
   9377c:	003fc506 	br	93694 <__ram_exceptions_end+0xfff73460>
   93780:	800d883a 	mov	r6,r16
   93784:	a80b883a 	mov	r5,r21
   93788:	9809883a 	mov	r4,r19
   9378c:	00932fc0 	call	932fc <__swbuf_r>
   93790:	10bfffe0 	cmpeqi	r2,r2,-1
   93794:	003fef06 	br	93754 <__ram_exceptions_end+0xfff73520>

00093798 <_fputwc_r>:
   93798:	3080030b 	ldhu	r2,12(r6)
   9379c:	10c8000c 	andi	r3,r2,8192
   937a0:	1800051e 	bne	r3,zero,937b8 <_fputwc_r+0x20>
   937a4:	30c01917 	ldw	r3,100(r6)
   937a8:	10880014 	ori	r2,r2,8192
   937ac:	3080030d 	sth	r2,12(r6)
   937b0:	18880014 	ori	r2,r3,8192
   937b4:	30801915 	stw	r2,100(r6)
   937b8:	00936341 	jmpi	93634 <__fputwc>

000937bc <fputwc>:
   937bc:	008002b4 	movhi	r2,10
   937c0:	defffc04 	addi	sp,sp,-16
   937c4:	10817a04 	addi	r2,r2,1512
   937c8:	dc000115 	stw	r16,4(sp)
   937cc:	14000017 	ldw	r16,0(r2)
   937d0:	dc400215 	stw	r17,8(sp)
   937d4:	dfc00315 	stw	ra,12(sp)
   937d8:	2023883a 	mov	r17,r4
   937dc:	80000226 	beq	r16,zero,937e8 <fputwc+0x2c>
   937e0:	80800e17 	ldw	r2,56(r16)
   937e4:	10001026 	beq	r2,zero,93828 <fputwc+0x6c>
   937e8:	2880030b 	ldhu	r2,12(r5)
   937ec:	10c8000c 	andi	r3,r2,8192
   937f0:	1800051e 	bne	r3,zero,93808 <fputwc+0x4c>
   937f4:	28c01917 	ldw	r3,100(r5)
   937f8:	10880014 	ori	r2,r2,8192
   937fc:	2880030d 	sth	r2,12(r5)
   93800:	18880014 	ori	r2,r3,8192
   93804:	28801915 	stw	r2,100(r5)
   93808:	280d883a 	mov	r6,r5
   9380c:	8009883a 	mov	r4,r16
   93810:	880b883a 	mov	r5,r17
   93814:	dfc00317 	ldw	ra,12(sp)
   93818:	dc400217 	ldw	r17,8(sp)
   9381c:	dc000117 	ldw	r16,4(sp)
   93820:	dec00404 	addi	sp,sp,16
   93824:	00936341 	jmpi	93634 <__fputwc>
   93828:	8009883a 	mov	r4,r16
   9382c:	d9400015 	stw	r5,0(sp)
   93830:	00890300 	call	89030 <__sinit>
   93834:	d9400017 	ldw	r5,0(sp)
   93838:	003feb06 	br	937e8 <__ram_exceptions_end+0xfff735b4>

0009383c <_fstat_r>:
   9383c:	defffd04 	addi	sp,sp,-12
   93840:	2805883a 	mov	r2,r5
   93844:	dc000015 	stw	r16,0(sp)
   93848:	040002b4 	movhi	r16,10
   9384c:	dc400115 	stw	r17,4(sp)
   93850:	8408d104 	addi	r16,r16,9028
   93854:	2023883a 	mov	r17,r4
   93858:	300b883a 	mov	r5,r6
   9385c:	1009883a 	mov	r4,r2
   93860:	dfc00215 	stw	ra,8(sp)
   93864:	80000015 	stw	zero,0(r16)
   93868:	00998800 	call	99880 <fstat>
   9386c:	00ffffc4 	movi	r3,-1
   93870:	10c00526 	beq	r2,r3,93888 <_fstat_r+0x4c>
   93874:	dfc00217 	ldw	ra,8(sp)
   93878:	dc400117 	ldw	r17,4(sp)
   9387c:	dc000017 	ldw	r16,0(sp)
   93880:	dec00304 	addi	sp,sp,12
   93884:	f800283a 	ret
   93888:	80c00017 	ldw	r3,0(r16)
   9388c:	183ff926 	beq	r3,zero,93874 <__ram_exceptions_end+0xfff73640>
   93890:	88c00015 	stw	r3,0(r17)
   93894:	003ff706 	br	93874 <__ram_exceptions_end+0xfff73640>

00093898 <rshift>:
   93898:	2807d17a 	srai	r3,r5,5
   9389c:	20800417 	ldw	r2,16(r4)
   938a0:	22000504 	addi	r8,r4,20
   938a4:	1880250e 	bge	r3,r2,9393c <rshift+0xa4>
   938a8:	1085883a 	add	r2,r2,r2
   938ac:	18c7883a 	add	r3,r3,r3
   938b0:	1085883a 	add	r2,r2,r2
   938b4:	18c7883a 	add	r3,r3,r3
   938b8:	294007cc 	andi	r5,r5,31
   938bc:	4085883a 	add	r2,r8,r2
   938c0:	40c7883a 	add	r3,r8,r3
   938c4:	28002026 	beq	r5,zero,93948 <rshift+0xb0>
   938c8:	19800017 	ldw	r6,0(r3)
   938cc:	02c00804 	movi	r11,32
   938d0:	19c00104 	addi	r7,r3,4
   938d4:	5957c83a 	sub	r11,r11,r5
   938d8:	314cd83a 	srl	r6,r6,r5
   938dc:	38802c2e 	bgeu	r7,r2,93990 <rshift+0xf8>
   938e0:	4015883a 	mov	r10,r8
   938e4:	3a400017 	ldw	r9,0(r7)
   938e8:	52800104 	addi	r10,r10,4
   938ec:	39c00104 	addi	r7,r7,4
   938f0:	4ad2983a 	sll	r9,r9,r11
   938f4:	498cb03a 	or	r6,r9,r6
   938f8:	51bfff15 	stw	r6,-4(r10)
   938fc:	39bfff17 	ldw	r6,-4(r7)
   93900:	314cd83a 	srl	r6,r6,r5
   93904:	38bff736 	bltu	r7,r2,938e4 <__ram_exceptions_end+0xfff736b0>
   93908:	10c7c83a 	sub	r3,r2,r3
   9390c:	18fffec4 	addi	r3,r3,-5
   93910:	1806d0ba 	srli	r3,r3,2
   93914:	18c00044 	addi	r3,r3,1
   93918:	18c7883a 	add	r3,r3,r3
   9391c:	18c7883a 	add	r3,r3,r3
   93920:	40c7883a 	add	r3,r8,r3
   93924:	19800015 	stw	r6,0(r3)
   93928:	30000126 	beq	r6,zero,93930 <rshift+0x98>
   9392c:	18c00104 	addi	r3,r3,4
   93930:	1a05c83a 	sub	r2,r3,r8
   93934:	1005d0ba 	srai	r2,r2,2
   93938:	00001206 	br	93984 <rshift+0xec>
   9393c:	20000415 	stw	zero,16(r4)
   93940:	20000515 	stw	zero,20(r4)
   93944:	f800283a 	ret
   93948:	18bffc2e 	bgeu	r3,r2,9393c <__ram_exceptions_end+0xfff73708>
   9394c:	180d883a 	mov	r6,r3
   93950:	400b883a 	mov	r5,r8
   93954:	31c00017 	ldw	r7,0(r6)
   93958:	29400104 	addi	r5,r5,4
   9395c:	31800104 	addi	r6,r6,4
   93960:	29ffff15 	stw	r7,-4(r5)
   93964:	30bffb36 	bltu	r6,r2,93954 <__ram_exceptions_end+0xfff73720>
   93968:	00c6303a 	nor	r3,zero,r3
   9396c:	1885883a 	add	r2,r3,r2
   93970:	1004d0ba 	srli	r2,r2,2
   93974:	10800044 	addi	r2,r2,1
   93978:	1085883a 	add	r2,r2,r2
   9397c:	1085883a 	add	r2,r2,r2
   93980:	1005d0ba 	srai	r2,r2,2
   93984:	20800415 	stw	r2,16(r4)
   93988:	103fed26 	beq	r2,zero,93940 <__ram_exceptions_end+0xfff7370c>
   9398c:	f800283a 	ret
   93990:	4007883a 	mov	r3,r8
   93994:	003fe306 	br	93924 <__ram_exceptions_end+0xfff736f0>

00093998 <__gethex>:
   93998:	deffea04 	addi	sp,sp,-88
   9399c:	d9c00415 	stw	r7,16(sp)
   939a0:	dfc01515 	stw	ra,84(sp)
   939a4:	dd001015 	stw	r20,64(sp)
   939a8:	dcc00f15 	stw	r19,60(sp)
   939ac:	2829883a 	mov	r20,r5
   939b0:	dc800e15 	stw	r18,56(sp)
   939b4:	d9000215 	stw	r4,8(sp)
   939b8:	d9800115 	stw	r6,4(sp)
   939bc:	df001415 	stw	fp,80(sp)
   939c0:	ddc01315 	stw	r23,76(sp)
   939c4:	dd801215 	stw	r22,72(sp)
   939c8:	dd401115 	stw	r21,68(sp)
   939cc:	dc400d15 	stw	r17,52(sp)
   939d0:	dc000c15 	stw	r16,48(sp)
   939d4:	0089be00 	call	89be0 <_localeconv_r>
   939d8:	14800017 	ldw	r18,0(r2)
   939dc:	9009883a 	mov	r4,r18
   939e0:	00831980 	call	83198 <strlen>
   939e4:	a1c00017 	ldw	r7,0(r20)
   939e8:	1027883a 	mov	r19,r2
   939ec:	9085883a 	add	r2,r18,r2
   939f0:	10bfffc3 	ldbu	r2,-1(r2)
   939f4:	38c00083 	ldbu	r3,2(r7)
   939f8:	d8800305 	stb	r2,12(sp)
   939fc:	00800c04 	movi	r2,48
   93a00:	18815a1e 	bne	r3,r2,93f6c <__gethex+0x5d4>
   93a04:	013fff84 	movi	r4,-2
   93a08:	388000c4 	addi	r2,r7,3
   93a0c:	21c9c83a 	sub	r4,r4,r7
   93a10:	180b883a 	mov	r5,r3
   93a14:	20b9883a 	add	fp,r4,r2
   93a18:	102f883a 	mov	r23,r2
   93a1c:	10800044 	addi	r2,r2,1
   93a20:	10ffffc3 	ldbu	r3,-1(r2)
   93a24:	197ffb26 	beq	r3,r5,93a14 <__ram_exceptions_end+0xfff737e0>
   93a28:	058002b4 	movhi	r22,10
   93a2c:	b5b9af84 	addi	r22,r22,-6466
   93a30:	b0c7883a 	add	r3,r22,r3
   93a34:	18800003 	ldbu	r2,0(r3)
   93a38:	10008726 	beq	r2,zero,93c58 <__gethex+0x2c0>
   93a3c:	b8800003 	ldbu	r2,0(r23)
   93a40:	d8000015 	stw	zero,0(sp)
   93a44:	0021883a 	mov	r16,zero
   93a48:	b085883a 	add	r2,r22,r2
   93a4c:	10800003 	ldbu	r2,0(r2)
   93a50:	b823883a 	mov	r17,r23
   93a54:	10000526 	beq	r2,zero,93a6c <__gethex+0xd4>
   93a58:	8c400044 	addi	r17,r17,1
   93a5c:	88800003 	ldbu	r2,0(r17)
   93a60:	b085883a 	add	r2,r22,r2
   93a64:	10800003 	ldbu	r2,0(r2)
   93a68:	103ffb1e 	bne	r2,zero,93a58 <__ram_exceptions_end+0xfff73824>
   93a6c:	980d883a 	mov	r6,r19
   93a70:	900b883a 	mov	r5,r18
   93a74:	8809883a 	mov	r4,r17
   93a78:	00944980 	call	94498 <strncmp>
   93a7c:	1000031e 	bne	r2,zero,93a8c <__gethex+0xf4>
   93a80:	80015c26 	beq	r16,zero,93ff4 <__gethex+0x65c>
   93a84:	88800003 	ldbu	r2,0(r17)
   93a88:	00000206 	br	93a94 <__gethex+0xfc>
   93a8c:	88800003 	ldbu	r2,0(r17)
   93a90:	80012926 	beq	r16,zero,93f38 <__gethex+0x5a0>
   93a94:	8c21c83a 	sub	r16,r17,r16
   93a98:	8421883a 	add	r16,r16,r16
   93a9c:	8421883a 	add	r16,r16,r16
   93aa0:	0421c83a 	sub	r16,zero,r16
   93aa4:	10803fcc 	andi	r2,r2,255
   93aa8:	01001404 	movi	r4,80
   93aac:	11008826 	beq	r2,r4,93cd0 <__gethex+0x338>
   93ab0:	01001c04 	movi	r4,112
   93ab4:	11008626 	beq	r2,r4,93cd0 <__gethex+0x338>
   93ab8:	882b883a 	mov	r21,r17
   93abc:	d8c00017 	ldw	r3,0(sp)
   93ac0:	a4400015 	stw	r17,0(r20)
   93ac4:	1800711e 	bne	r3,zero,93c8c <__gethex+0x2f4>
   93ac8:	adc5c83a 	sub	r2,r21,r23
   93acc:	10bfffc4 	addi	r2,r2,-1
   93ad0:	00c001c4 	movi	r3,7
   93ad4:	000b883a 	mov	r5,zero
   93ad8:	1880030e 	bge	r3,r2,93ae8 <__gethex+0x150>
   93adc:	1005d07a 	srai	r2,r2,1
   93ae0:	29400044 	addi	r5,r5,1
   93ae4:	18bffd16 	blt	r3,r2,93adc <__ram_exceptions_end+0xfff738a8>
   93ae8:	d9000217 	ldw	r4,8(sp)
   93aec:	008a3b80 	call	8a3b8 <_Balloc>
   93af0:	10c00504 	addi	r3,r2,20
   93af4:	d8c00015 	stw	r3,0(sp)
   93af8:	1029883a 	mov	r20,r2
   93afc:	bd417c2e 	bgeu	r23,r21,940f0 <__gethex+0x758>
   93b00:	dc400303 	ldbu	r17,12(sp)
   93b04:	03000044 	movi	r12,1
   93b08:	1813883a 	mov	r9,r3
   93b0c:	0039883a 	mov	fp,zero
   93b10:	0007883a 	mov	r3,zero
   93b14:	64d9c83a 	sub	r12,r12,r19
   93b18:	02800804 	movi	r10,32
   93b1c:	a8bfffc3 	ldbu	r2,-1(r21)
   93b20:	ab7fffc4 	addi	r13,r21,-1
   93b24:	88803026 	beq	r17,r2,93be8 <__gethex+0x250>
   93b28:	e2804526 	beq	fp,r10,93c40 <__gethex+0x2a8>
   93b2c:	e00b883a 	mov	r5,fp
   93b30:	e7000104 	addi	fp,fp,4
   93b34:	a93fffc3 	ldbu	r4,-1(r21)
   93b38:	682b883a 	mov	r21,r13
   93b3c:	b109883a 	add	r4,r22,r4
   93b40:	20800003 	ldbu	r2,0(r4)
   93b44:	108003cc 	andi	r2,r2,15
   93b48:	1144983a 	sll	r2,r2,r5
   93b4c:	1886b03a 	or	r3,r3,r2
   93b50:	bd7ff236 	bltu	r23,r21,93b1c <__ram_exceptions_end+0xfff738e8>
   93b54:	d9000017 	ldw	r4,0(sp)
   93b58:	48800104 	addi	r2,r9,4
   93b5c:	48c00015 	stw	r3,0(r9)
   93b60:	1105c83a 	sub	r2,r2,r4
   93b64:	1005d0ba 	srai	r2,r2,2
   93b68:	1809883a 	mov	r4,r3
   93b6c:	a0800415 	stw	r2,16(r20)
   93b70:	1022917a 	slli	r17,r2,5
   93b74:	008a6d40 	call	8a6d4 <__hi0bits>
   93b78:	d8c00117 	ldw	r3,4(sp)
   93b7c:	8885c83a 	sub	r2,r17,r2
   93b80:	1c800017 	ldw	r18,0(r3)
   93b84:	9080d016 	blt	r18,r2,93ec8 <__gethex+0x530>
   93b88:	1480ed16 	blt	r2,r18,93f40 <__gethex+0x5a8>
   93b8c:	0027883a 	mov	r19,zero
   93b90:	d8c00117 	ldw	r3,4(sp)
   93b94:	18800217 	ldw	r2,8(r3)
   93b98:	14009416 	blt	r2,r16,93dec <__gethex+0x454>
   93b9c:	d8c00117 	ldw	r3,4(sp)
   93ba0:	18800117 	ldw	r2,4(r3)
   93ba4:	8080b30e 	bge	r16,r2,93e74 <__gethex+0x4dc>
   93ba8:	1421c83a 	sub	r16,r2,r16
   93bac:	8480f616 	blt	r16,r18,93f88 <__gethex+0x5f0>
   93bb0:	18c00317 	ldw	r3,12(r3)
   93bb4:	01000084 	movi	r4,2
   93bb8:	19015226 	beq	r3,r4,94104 <__gethex+0x76c>
   93bbc:	010000c4 	movi	r4,3
   93bc0:	19013726 	beq	r3,r4,940a0 <__gethex+0x708>
   93bc4:	01000044 	movi	r4,1
   93bc8:	19015126 	beq	r3,r4,94110 <__gethex+0x778>
   93bcc:	d9000217 	ldw	r4,8(sp)
   93bd0:	a00b883a 	mov	r5,r20
   93bd4:	008a4600 	call	8a460 <_Bfree>
   93bd8:	d8801617 	ldw	r2,88(sp)
   93bdc:	10000015 	stw	zero,0(r2)
   93be0:	00801404 	movi	r2,80
   93be4:	00002b06 	br	93c94 <__gethex+0x2fc>
   93be8:	6b1d883a 	add	r14,r13,r12
   93bec:	75ffce36 	bltu	r14,r23,93b28 <__ram_exceptions_end+0xfff738f4>
   93bf0:	7009883a 	mov	r4,r14
   93bf4:	980d883a 	mov	r6,r19
   93bf8:	900b883a 	mov	r5,r18
   93bfc:	d8c00715 	stw	r3,28(sp)
   93c00:	da400615 	stw	r9,24(sp)
   93c04:	da800b15 	stw	r10,44(sp)
   93c08:	db000a15 	stw	r12,40(sp)
   93c0c:	db400815 	stw	r13,32(sp)
   93c10:	db800915 	stw	r14,36(sp)
   93c14:	00944980 	call	94498 <strncmp>
   93c18:	d8c00717 	ldw	r3,28(sp)
   93c1c:	da400617 	ldw	r9,24(sp)
   93c20:	da800b17 	ldw	r10,44(sp)
   93c24:	db000a17 	ldw	r12,40(sp)
   93c28:	db400817 	ldw	r13,32(sp)
   93c2c:	db800917 	ldw	r14,36(sp)
   93c30:	103fbd1e 	bne	r2,zero,93b28 <__ram_exceptions_end+0xfff738f4>
   93c34:	702b883a 	mov	r21,r14
   93c38:	bd7fb836 	bltu	r23,r21,93b1c <__ram_exceptions_end+0xfff738e8>
   93c3c:	003fc506 	br	93b54 <__ram_exceptions_end+0xfff73920>
   93c40:	07000104 	movi	fp,4
   93c44:	48c00015 	stw	r3,0(r9)
   93c48:	000b883a 	mov	r5,zero
   93c4c:	4f13883a 	add	r9,r9,fp
   93c50:	0007883a 	mov	r3,zero
   93c54:	003fb706 	br	93b34 <__ram_exceptions_end+0xfff73900>
   93c58:	980d883a 	mov	r6,r19
   93c5c:	900b883a 	mov	r5,r18
   93c60:	b809883a 	mov	r4,r23
   93c64:	00944980 	call	94498 <strncmp>
   93c68:	10006c26 	beq	r2,zero,93e1c <__gethex+0x484>
   93c6c:	b8800003 	ldbu	r2,0(r23)
   93c70:	b823883a 	mov	r17,r23
   93c74:	10803fcc 	andi	r2,r2,255
   93c78:	01001404 	movi	r4,80
   93c7c:	11001126 	beq	r2,r4,93cc4 <__gethex+0x32c>
   93c80:	01001c04 	movi	r4,112
   93c84:	11000f26 	beq	r2,r4,93cc4 <__gethex+0x32c>
   93c88:	a4400015 	stw	r17,0(r20)
   93c8c:	e0008c1e 	bne	fp,zero,93ec0 <__gethex+0x528>
   93c90:	00800184 	movi	r2,6
   93c94:	dfc01517 	ldw	ra,84(sp)
   93c98:	df001417 	ldw	fp,80(sp)
   93c9c:	ddc01317 	ldw	r23,76(sp)
   93ca0:	dd801217 	ldw	r22,72(sp)
   93ca4:	dd401117 	ldw	r21,68(sp)
   93ca8:	dd001017 	ldw	r20,64(sp)
   93cac:	dcc00f17 	ldw	r19,60(sp)
   93cb0:	dc800e17 	ldw	r18,56(sp)
   93cb4:	dc400d17 	ldw	r17,52(sp)
   93cb8:	dc000c17 	ldw	r16,48(sp)
   93cbc:	dec01604 	addi	sp,sp,88
   93cc0:	f800283a 	ret
   93cc4:	00c00044 	movi	r3,1
   93cc8:	0021883a 	mov	r16,zero
   93ccc:	d8c00015 	stw	r3,0(sp)
   93cd0:	88800043 	ldbu	r2,1(r17)
   93cd4:	01400ac4 	movi	r5,43
   93cd8:	11003fcc 	andi	r4,r2,255
   93cdc:	21407626 	beq	r4,r5,93eb8 <__gethex+0x520>
   93ce0:	01400b44 	movi	r5,45
   93ce4:	21404826 	beq	r4,r5,93e08 <__gethex+0x470>
   93ce8:	8ac00044 	addi	r11,r17,1
   93cec:	d8000515 	stw	zero,20(sp)
   93cf0:	10803fcc 	andi	r2,r2,255
   93cf4:	b085883a 	add	r2,r22,r2
   93cf8:	11000003 	ldbu	r4,0(r2)
   93cfc:	05400604 	movi	r21,24
   93d00:	20bfffc4 	addi	r2,r4,-1
   93d04:	10803fcc 	andi	r2,r2,255
   93d08:	a8bf6b36 	bltu	r21,r2,93ab8 <__ram_exceptions_end+0xfff73884>
   93d0c:	58800043 	ldbu	r2,1(r11)
   93d10:	014002b4 	movhi	r5,10
   93d14:	2979af84 	addi	r5,r5,-6466
   93d18:	2885883a 	add	r2,r5,r2
   93d1c:	12800003 	ldbu	r10,0(r2)
   93d20:	21003fcc 	andi	r4,r4,255
   93d24:	213ffc04 	addi	r4,r4,-16
   93d28:	50bfffc4 	addi	r2,r10,-1
   93d2c:	10803fcc 	andi	r2,r2,255
   93d30:	5ac00044 	addi	r11,r11,1
   93d34:	51803fcc 	andi	r6,r10,255
   93d38:	a8801036 	bltu	r21,r2,93d7c <__gethex+0x3e4>
   93d3c:	5ac00044 	addi	r11,r11,1
   93d40:	01400284 	movi	r5,10
   93d44:	d9800715 	stw	r6,28(sp)
   93d48:	dac00615 	stw	r11,24(sp)
   93d4c:	00822140 	call	82214 <__mulsi3>
   93d50:	dac00617 	ldw	r11,24(sp)
   93d54:	d9800717 	ldw	r6,28(sp)
   93d58:	5a800003 	ldbu	r10,0(r11)
   93d5c:	1185883a 	add	r2,r2,r6
   93d60:	113ffc04 	addi	r4,r2,-16
   93d64:	b295883a 	add	r10,r22,r10
   93d68:	51400003 	ldbu	r5,0(r10)
   93d6c:	2abfffc4 	addi	r10,r5,-1
   93d70:	52803fcc 	andi	r10,r10,255
   93d74:	29803fcc 	andi	r6,r5,255
   93d78:	aabff02e 	bgeu	r21,r10,93d3c <__ram_exceptions_end+0xfff73b08>
   93d7c:	d8c00517 	ldw	r3,20(sp)
   93d80:	18000126 	beq	r3,zero,93d88 <__gethex+0x3f0>
   93d84:	0109c83a 	sub	r4,zero,r4
   93d88:	882b883a 	mov	r21,r17
   93d8c:	8121883a 	add	r16,r16,r4
   93d90:	5823883a 	mov	r17,r11
   93d94:	003f4906 	br	93abc <__ram_exceptions_end+0xfff73888>
   93d98:	a0800217 	ldw	r2,8(r20)
   93d9c:	a880f20e 	bge	r21,r2,94168 <__gethex+0x7d0>
   93da0:	a807883a 	mov	r3,r21
   93da4:	18800144 	addi	r2,r3,5
   93da8:	1085883a 	add	r2,r2,r2
   93dac:	18c00044 	addi	r3,r3,1
   93db0:	1085883a 	add	r2,r2,r2
   93db4:	a085883a 	add	r2,r20,r2
   93db8:	a0c00415 	stw	r3,16(r20)
   93dbc:	01000044 	movi	r4,1
   93dc0:	11000015 	stw	r4,0(r2)
   93dc4:	00800084 	movi	r2,2
   93dc8:	8880da26 	beq	r17,r2,94134 <__gethex+0x79c>
   93dcc:	a8c0ae0e 	bge	r21,r3,94088 <__gethex+0x6f0>
   93dd0:	01400044 	movi	r5,1
   93dd4:	a009883a 	mov	r4,r20
   93dd8:	00938980 	call	93898 <rshift>
   93ddc:	d8c00117 	ldw	r3,4(sp)
   93de0:	84000044 	addi	r16,r16,1
   93de4:	18800217 	ldw	r2,8(r3)
   93de8:	1400a90e 	bge	r2,r16,94090 <__gethex+0x6f8>
   93dec:	d9000217 	ldw	r4,8(sp)
   93df0:	a00b883a 	mov	r5,r20
   93df4:	008a4600 	call	8a460 <_Bfree>
   93df8:	d9001617 	ldw	r4,88(sp)
   93dfc:	008028c4 	movi	r2,163
   93e00:	20000015 	stw	zero,0(r4)
   93e04:	003fa306 	br	93c94 <__ram_exceptions_end+0xfff73a60>
   93e08:	00c00044 	movi	r3,1
   93e0c:	d8c00515 	stw	r3,20(sp)
   93e10:	88800083 	ldbu	r2,2(r17)
   93e14:	8ac00084 	addi	r11,r17,2
   93e18:	003fb506 	br	93cf0 <__ram_exceptions_end+0xfff73abc>
   93e1c:	bce3883a 	add	r17,r23,r19
   93e20:	89000003 	ldbu	r4,0(r17)
   93e24:	21403fcc 	andi	r5,r4,255
   93e28:	b145883a 	add	r2,r22,r5
   93e2c:	10800003 	ldbu	r2,0(r2)
   93e30:	11803fcc 	andi	r6,r2,255
   93e34:	30005026 	beq	r6,zero,93f78 <__gethex+0x5e0>
   93e38:	01000c04 	movi	r4,48
   93e3c:	882f883a 	mov	r23,r17
   93e40:	2900061e 	bne	r5,r4,93e5c <__gethex+0x4c4>
   93e44:	2809883a 	mov	r4,r5
   93e48:	bdc00044 	addi	r23,r23,1
   93e4c:	b8800003 	ldbu	r2,0(r23)
   93e50:	113ffd26 	beq	r2,r4,93e48 <__ram_exceptions_end+0xfff73c14>
   93e54:	b085883a 	add	r2,r22,r2
   93e58:	10800003 	ldbu	r2,0(r2)
   93e5c:	10803fcc 	andi	r2,r2,255
   93e60:	1007003a 	cmpeq	r3,r2,zero
   93e64:	d8c00015 	stw	r3,0(sp)
   93e68:	8821883a 	mov	r16,r17
   93e6c:	07000044 	movi	fp,1
   93e70:	003ef706 	br	93a50 <__ram_exceptions_end+0xfff7381c>
   93e74:	04400044 	movi	r17,1
   93e78:	98000926 	beq	r19,zero,93ea0 <__gethex+0x508>
   93e7c:	d8c00117 	ldw	r3,4(sp)
   93e80:	18800317 	ldw	r2,12(r3)
   93e84:	00c00084 	movi	r3,2
   93e88:	10c06826 	beq	r2,r3,9402c <__gethex+0x694>
   93e8c:	00c000c4 	movi	r3,3
   93e90:	10c06a26 	beq	r2,r3,9403c <__gethex+0x6a4>
   93e94:	00c00044 	movi	r3,1
   93e98:	10c08d26 	beq	r2,r3,940d0 <__gethex+0x738>
   93e9c:	8c400414 	ori	r17,r17,16
   93ea0:	d9001617 	ldw	r4,88(sp)
   93ea4:	d8c00417 	ldw	r3,16(sp)
   93ea8:	8805883a 	mov	r2,r17
   93eac:	25000015 	stw	r20,0(r4)
   93eb0:	1c000015 	stw	r16,0(r3)
   93eb4:	003f7706 	br	93c94 <__ram_exceptions_end+0xfff73a60>
   93eb8:	d8000515 	stw	zero,20(sp)
   93ebc:	003fd406 	br	93e10 <__ram_exceptions_end+0xfff73bdc>
   93ec0:	0005883a 	mov	r2,zero
   93ec4:	003f7306 	br	93c94 <__ram_exceptions_end+0xfff73a60>
   93ec8:	14a3c83a 	sub	r17,r2,r18
   93ecc:	880b883a 	mov	r5,r17
   93ed0:	a009883a 	mov	r4,r20
   93ed4:	008b3e40 	call	8b3e4 <__any_on>
   93ed8:	10002926 	beq	r2,zero,93f80 <__gethex+0x5e8>
   93edc:	897fffc4 	addi	r5,r17,-1
   93ee0:	2807d17a 	srai	r3,r5,5
   93ee4:	d8800017 	ldw	r2,0(sp)
   93ee8:	290007cc 	andi	r4,r5,31
   93eec:	18c7883a 	add	r3,r3,r3
   93ef0:	18c7883a 	add	r3,r3,r3
   93ef4:	04c00044 	movi	r19,1
   93ef8:	10c7883a 	add	r3,r2,r3
   93efc:	9908983a 	sll	r4,r19,r4
   93f00:	18c00017 	ldw	r3,0(r3)
   93f04:	20c6703a 	and	r3,r4,r3
   93f08:	18000626 	beq	r3,zero,93f24 <__gethex+0x58c>
   93f0c:	99407b0e 	bge	r19,r5,940fc <__gethex+0x764>
   93f10:	897fff84 	addi	r5,r17,-2
   93f14:	a009883a 	mov	r4,r20
   93f18:	008b3e40 	call	8b3e4 <__any_on>
   93f1c:	10007726 	beq	r2,zero,940fc <__gethex+0x764>
   93f20:	04c000c4 	movi	r19,3
   93f24:	880b883a 	mov	r5,r17
   93f28:	a009883a 	mov	r4,r20
   93f2c:	00938980 	call	93898 <rshift>
   93f30:	8461883a 	add	r16,r16,r17
   93f34:	003f1606 	br	93b90 <__ram_exceptions_end+0xfff7395c>
   93f38:	0021883a 	mov	r16,zero
   93f3c:	003ed906 	br	93aa4 <__ram_exceptions_end+0xfff73870>
   93f40:	d9000217 	ldw	r4,8(sp)
   93f44:	90a3c83a 	sub	r17,r18,r2
   93f48:	a00b883a 	mov	r5,r20
   93f4c:	880d883a 	mov	r6,r17
   93f50:	008abf40 	call	8abf4 <__lshift>
   93f54:	10c00504 	addi	r3,r2,20
   93f58:	1029883a 	mov	r20,r2
   93f5c:	8461c83a 	sub	r16,r16,r17
   93f60:	d8c00015 	stw	r3,0(sp)
   93f64:	0027883a 	mov	r19,zero
   93f68:	003f0906 	br	93b90 <__ram_exceptions_end+0xfff7395c>
   93f6c:	3dc00084 	addi	r23,r7,2
   93f70:	0039883a 	mov	fp,zero
   93f74:	003eac06 	br	93a28 <__ram_exceptions_end+0xfff737f4>
   93f78:	2005883a 	mov	r2,r4
   93f7c:	003f3d06 	br	93c74 <__ram_exceptions_end+0xfff73a40>
   93f80:	0027883a 	mov	r19,zero
   93f84:	003fe706 	br	93f24 <__ram_exceptions_end+0xfff73cf0>
   93f88:	847fffc4 	addi	r17,r16,-1
   93f8c:	9800421e 	bne	r19,zero,94098 <__gethex+0x700>
   93f90:	88000426 	beq	r17,zero,93fa4 <__gethex+0x60c>
   93f94:	880b883a 	mov	r5,r17
   93f98:	a009883a 	mov	r4,r20
   93f9c:	008b3e40 	call	8b3e4 <__any_on>
   93fa0:	1027883a 	mov	r19,r2
   93fa4:	8805d17a 	srai	r2,r17,5
   93fa8:	d8c00017 	ldw	r3,0(sp)
   93fac:	8c4007cc 	andi	r17,r17,31
   93fb0:	1085883a 	add	r2,r2,r2
   93fb4:	1085883a 	add	r2,r2,r2
   93fb8:	1885883a 	add	r2,r3,r2
   93fbc:	00c00044 	movi	r3,1
   93fc0:	1c62983a 	sll	r17,r3,r17
   93fc4:	10800017 	ldw	r2,0(r2)
   93fc8:	8884703a 	and	r2,r17,r2
   93fcc:	10000126 	beq	r2,zero,93fd4 <__gethex+0x63c>
   93fd0:	9cc00094 	ori	r19,r19,2
   93fd4:	800b883a 	mov	r5,r16
   93fd8:	a009883a 	mov	r4,r20
   93fdc:	00938980 	call	93898 <rshift>
   93fe0:	d8c00117 	ldw	r3,4(sp)
   93fe4:	9425c83a 	sub	r18,r18,r16
   93fe8:	04400084 	movi	r17,2
   93fec:	1c000117 	ldw	r16,4(r3)
   93ff0:	003fa106 	br	93e78 <__ram_exceptions_end+0xfff73c44>
   93ff4:	8ce1883a 	add	r16,r17,r19
   93ff8:	80800003 	ldbu	r2,0(r16)
   93ffc:	8023883a 	mov	r17,r16
   94000:	10c03fcc 	andi	r3,r2,255
   94004:	b0c7883a 	add	r3,r22,r3
   94008:	18c00003 	ldbu	r3,0(r3)
   9400c:	183ea026 	beq	r3,zero,93a90 <__ram_exceptions_end+0xfff7385c>
   94010:	8c400044 	addi	r17,r17,1
   94014:	88800003 	ldbu	r2,0(r17)
   94018:	11003fcc 	andi	r4,r2,255
   9401c:	b109883a 	add	r4,r22,r4
   94020:	21000003 	ldbu	r4,0(r4)
   94024:	203ffa1e 	bne	r4,zero,94010 <__ram_exceptions_end+0xfff73ddc>
   94028:	003e9906 	br	93a90 <__ram_exceptions_end+0xfff7385c>
   9402c:	d9001717 	ldw	r4,92(sp)
   94030:	00800044 	movi	r2,1
   94034:	1109c83a 	sub	r4,r2,r4
   94038:	d9001715 	stw	r4,92(sp)
   9403c:	d8801717 	ldw	r2,92(sp)
   94040:	103f9626 	beq	r2,zero,93e9c <__ram_exceptions_end+0xfff73c68>
   94044:	a5400417 	ldw	r21,16(r20)
   94048:	d9800017 	ldw	r6,0(sp)
   9404c:	013fffc4 	movi	r4,-1
   94050:	ad67883a 	add	r19,r21,r21
   94054:	9ce7883a 	add	r19,r19,r19
   94058:	3005883a 	mov	r2,r6
   9405c:	34cb883a 	add	r5,r6,r19
   94060:	00000306 	br	94070 <__gethex+0x6d8>
   94064:	10000015 	stw	zero,0(r2)
   94068:	10800104 	addi	r2,r2,4
   9406c:	117f4a2e 	bgeu	r2,r5,93d98 <__ram_exceptions_end+0xfff73b64>
   94070:	10c00017 	ldw	r3,0(r2)
   94074:	193ffb26 	beq	r3,r4,94064 <__ram_exceptions_end+0xfff73e30>
   94078:	18c00044 	addi	r3,r3,1
   9407c:	10c00015 	stw	r3,0(r2)
   94080:	00800084 	movi	r2,2
   94084:	88802b26 	beq	r17,r2,94134 <__gethex+0x79c>
   94088:	948007cc 	andi	r18,r18,31
   9408c:	90002f1e 	bne	r18,zero,9414c <__gethex+0x7b4>
   94090:	04400844 	movi	r17,33
   94094:	003f8206 	br	93ea0 <__ram_exceptions_end+0xfff73c6c>
   94098:	04c00044 	movi	r19,1
   9409c:	003fc106 	br	93fa4 <__ram_exceptions_end+0xfff73d70>
   940a0:	d8c01717 	ldw	r3,92(sp)
   940a4:	183ec926 	beq	r3,zero,93bcc <__ram_exceptions_end+0xfff73998>
   940a8:	d8c00417 	ldw	r3,16(sp)
   940ac:	d9001617 	ldw	r4,88(sp)
   940b0:	18800015 	stw	r2,0(r3)
   940b4:	d8c00017 	ldw	r3,0(sp)
   940b8:	00800044 	movi	r2,1
   940bc:	a0800415 	stw	r2,16(r20)
   940c0:	18800015 	stw	r2,0(r3)
   940c4:	25000015 	stw	r20,0(r4)
   940c8:	00801884 	movi	r2,98
   940cc:	003ef106 	br	93c94 <__ram_exceptions_end+0xfff73a60>
   940d0:	9880008c 	andi	r2,r19,2
   940d4:	103f7126 	beq	r2,zero,93e9c <__ram_exceptions_end+0xfff73c68>
   940d8:	d8c00017 	ldw	r3,0(sp)
   940dc:	18800017 	ldw	r2,0(r3)
   940e0:	9884b03a 	or	r2,r19,r2
   940e4:	1080004c 	andi	r2,r2,1
   940e8:	103fd61e 	bne	r2,zero,94044 <__ram_exceptions_end+0xfff73e10>
   940ec:	003f6b06 	br	93e9c <__ram_exceptions_end+0xfff73c68>
   940f0:	da400017 	ldw	r9,0(sp)
   940f4:	0007883a 	mov	r3,zero
   940f8:	003e9606 	br	93b54 <__ram_exceptions_end+0xfff73920>
   940fc:	04c00084 	movi	r19,2
   94100:	003f8806 	br	93f24 <__ram_exceptions_end+0xfff73cf0>
   94104:	d9001717 	ldw	r4,92(sp)
   94108:	203fe726 	beq	r4,zero,940a8 <__ram_exceptions_end+0xfff73e74>
   9410c:	003eaf06 	br	93bcc <__ram_exceptions_end+0xfff73998>
   94110:	943eae1e 	bne	r18,r16,93bcc <__ram_exceptions_end+0xfff73998>
   94114:	1cbfe40e 	bge	r3,r18,940a8 <__ram_exceptions_end+0xfff73e74>
   94118:	917fffc4 	addi	r5,r18,-1
   9411c:	a009883a 	mov	r4,r20
   94120:	008b3e40 	call	8b3e4 <__any_on>
   94124:	103ea926 	beq	r2,zero,93bcc <__ram_exceptions_end+0xfff73998>
   94128:	d8c00117 	ldw	r3,4(sp)
   9412c:	18800117 	ldw	r2,4(r3)
   94130:	003fdd06 	br	940a8 <__ram_exceptions_end+0xfff73e74>
   94134:	d8c00117 	ldw	r3,4(sp)
   94138:	18800017 	ldw	r2,0(r3)
   9413c:	10bfffc4 	addi	r2,r2,-1
   94140:	90801c26 	beq	r18,r2,941b4 <__gethex+0x81c>
   94144:	04400884 	movi	r17,34
   94148:	003f5506 	br	93ea0 <__ram_exceptions_end+0xfff73c6c>
   9414c:	34c5883a 	add	r2,r6,r19
   94150:	113fff17 	ldw	r4,-4(r2)
   94154:	008a6d40 	call	8a6d4 <__hi0bits>
   94158:	00c00804 	movi	r3,32
   9415c:	1ca5c83a 	sub	r18,r3,r18
   94160:	14bfcb0e 	bge	r2,r18,94090 <__ram_exceptions_end+0xfff73e5c>
   94164:	003f1a06 	br	93dd0 <__ram_exceptions_end+0xfff73b9c>
   94168:	a1400117 	ldw	r5,4(r20)
   9416c:	d9000217 	ldw	r4,8(sp)
   94170:	29400044 	addi	r5,r5,1
   94174:	008a3b80 	call	8a3b8 <_Balloc>
   94178:	a1800417 	ldw	r6,16(r20)
   9417c:	a1400304 	addi	r5,r20,12
   94180:	11000304 	addi	r4,r2,12
   94184:	31800084 	addi	r6,r6,2
   94188:	318d883a 	add	r6,r6,r6
   9418c:	318d883a 	add	r6,r6,r6
   94190:	102d883a 	mov	r22,r2
   94194:	0082be40 	call	82be4 <memcpy>
   94198:	d9000217 	ldw	r4,8(sp)
   9419c:	a00b883a 	mov	r5,r20
   941a0:	b029883a 	mov	r20,r22
   941a4:	008a4600 	call	8a460 <_Bfree>
   941a8:	b0c00417 	ldw	r3,16(r22)
   941ac:	b1800504 	addi	r6,r22,20
   941b0:	003efc06 	br	93da4 <__ram_exceptions_end+0xfff73b70>
   941b4:	9005d17a 	srai	r2,r18,5
   941b8:	944007cc 	andi	r17,r18,31
   941bc:	1085883a 	add	r2,r2,r2
   941c0:	1085883a 	add	r2,r2,r2
   941c4:	3087883a 	add	r3,r6,r2
   941c8:	00800044 	movi	r2,1
   941cc:	1462983a 	sll	r17,r2,r17
   941d0:	18800017 	ldw	r2,0(r3)
   941d4:	8884703a 	and	r2,r17,r2
   941d8:	1022c03a 	cmpne	r17,r2,zero
   941dc:	00800884 	movi	r2,34
   941e0:	1463c83a 	sub	r17,r2,r17
   941e4:	003f2e06 	br	93ea0 <__ram_exceptions_end+0xfff73c6c>

000941e8 <__hexnan>:
   941e8:	defff904 	addi	sp,sp,-28
   941ec:	dc800215 	stw	r18,8(sp)
   941f0:	2c800017 	ldw	r18,0(r5)
   941f4:	dfc00615 	stw	ra,24(sp)
   941f8:	dd400515 	stw	r21,20(sp)
   941fc:	901fd17a 	srai	r15,r18,5
   94200:	dd000415 	stw	r20,16(sp)
   94204:	dcc00315 	stw	r19,12(sp)
   94208:	7bdf883a 	add	r15,r15,r15
   9420c:	7bdf883a 	add	r15,r15,r15
   94210:	dc400115 	stw	r17,4(sp)
   94214:	dc000015 	stw	r16,0(sp)
   94218:	948007cc 	andi	r18,r18,31
   9421c:	33df883a 	add	r15,r6,r15
   94220:	90000126 	beq	r18,zero,94228 <__hexnan+0x40>
   94224:	7bc00104 	addi	r15,r15,4
   94228:	22000017 	ldw	r8,0(r4)
   9422c:	7affff04 	addi	r11,r15,-4
   94230:	038002b4 	movhi	r14,10
   94234:	783fff15 	stw	zero,-4(r15)
   94238:	581b883a 	mov	r13,r11
   9423c:	580b883a 	mov	r5,r11
   94240:	000f883a 	mov	r7,zero
   94244:	003f883a 	mov	ra,zero
   94248:	0019883a 	mov	r12,zero
   9424c:	73b9af84 	addi	r14,r14,-6466
   94250:	04400204 	movi	r17,8
   94254:	04000804 	movi	r16,32
   94258:	04c001c4 	movi	r19,7
   9425c:	42000044 	addi	r8,r8,1
   94260:	40c00003 	ldbu	r3,0(r8)
   94264:	18001d26 	beq	r3,zero,942dc <__hexnan+0xf4>
   94268:	70c5883a 	add	r2,r14,r3
   9426c:	10800003 	ldbu	r2,0(r2)
   94270:	12403fcc 	andi	r9,r2,255
   94274:	4800301e 	bne	r9,zero,94338 <__hexnan+0x150>
   94278:	80c04236 	bltu	r16,r3,94384 <__hexnan+0x19c>
   9427c:	fb3ff70e 	bge	ra,r12,9425c <__ram_exceptions_end+0xfff74028>
   94280:	2b40112e 	bgeu	r5,r13,942c8 <__hexnan+0xe0>
   94284:	99c01016 	blt	r19,r7,942c8 <__hexnan+0xe0>
   94288:	89e9c83a 	sub	r20,r17,r7
   9428c:	a529883a 	add	r20,r20,r20
   94290:	2a800017 	ldw	r10,0(r5)
   94294:	a529883a 	add	r20,r20,r20
   94298:	852bc83a 	sub	r21,r16,r20
   9429c:	28c00104 	addi	r3,r5,4
   942a0:	2805883a 	mov	r2,r5
   942a4:	19c00017 	ldw	r7,0(r3)
   942a8:	10800104 	addi	r2,r2,4
   942ac:	18c00104 	addi	r3,r3,4
   942b0:	3d52983a 	sll	r9,r7,r21
   942b4:	4a92b03a 	or	r9,r9,r10
   942b8:	3d14d83a 	srl	r10,r7,r20
   942bc:	127fff15 	stw	r9,-4(r2)
   942c0:	1abfff15 	stw	r10,-4(r3)
   942c4:	137ff736 	bltu	r2,r13,942a4 <__ram_exceptions_end+0xfff74070>
   942c8:	31402836 	bltu	r6,r5,9436c <__hexnan+0x184>
   942cc:	42000044 	addi	r8,r8,1
   942d0:	40c00003 	ldbu	r3,0(r8)
   942d4:	01c00204 	movi	r7,8
   942d8:	183fe31e 	bne	r3,zero,94268 <__ram_exceptions_end+0xfff74034>
   942dc:	60002b26 	beq	r12,zero,9438c <__hexnan+0x1a4>
   942e0:	2b40022e 	bgeu	r5,r13,942ec <__hexnan+0x104>
   942e4:	008001c4 	movi	r2,7
   942e8:	11c0430e 	bge	r2,r7,943f8 <__hexnan+0x210>
   942ec:	3140312e 	bgeu	r6,r5,943b4 <__hexnan+0x1cc>
   942f0:	3007883a 	mov	r3,r6
   942f4:	29000017 	ldw	r4,0(r5)
   942f8:	18800104 	addi	r2,r3,4
   942fc:	29400104 	addi	r5,r5,4
   94300:	19000015 	stw	r4,0(r3)
   94304:	1007883a 	mov	r3,r2
   94308:	597ffa2e 	bgeu	r11,r5,942f4 <__ram_exceptions_end+0xfff740c0>
   9430c:	10000015 	stw	zero,0(r2)
   94310:	10800104 	addi	r2,r2,4
   94314:	58bffd2e 	bgeu	r11,r2,9430c <__ram_exceptions_end+0xfff740d8>
   94318:	78bfff17 	ldw	r2,-4(r15)
   9431c:	1000041e 	bne	r2,zero,94330 <__hexnan+0x148>
   94320:	32c02d26 	beq	r6,r11,943d8 <__hexnan+0x1f0>
   94324:	5affff04 	addi	r11,r11,-4
   94328:	58800017 	ldw	r2,0(r11)
   9432c:	103ffc26 	beq	r2,zero,94320 <__ram_exceptions_end+0xfff740ec>
   94330:	00800144 	movi	r2,5
   94334:	00001606 	br	94390 <__hexnan+0x1a8>
   94338:	39c00044 	addi	r7,r7,1
   9433c:	63000044 	addi	r12,r12,1
   94340:	89c0040e 	bge	r17,r7,94354 <__hexnan+0x16c>
   94344:	317fc52e 	bgeu	r6,r5,9425c <__ram_exceptions_end+0xfff74028>
   94348:	283fff15 	stw	zero,-4(r5)
   9434c:	01c00044 	movi	r7,1
   94350:	297fff04 	addi	r5,r5,-4
   94354:	28c00017 	ldw	r3,0(r5)
   94358:	108003cc 	andi	r2,r2,15
   9435c:	1806913a 	slli	r3,r3,4
   94360:	1884b03a 	or	r2,r3,r2
   94364:	28800015 	stw	r2,0(r5)
   94368:	003fbc06 	br	9425c <__ram_exceptions_end+0xfff74028>
   9436c:	2b7fff04 	addi	r13,r5,-4
   94370:	283fff15 	stw	zero,-4(r5)
   94374:	603f883a 	mov	ra,r12
   94378:	680b883a 	mov	r5,r13
   9437c:	000f883a 	mov	r7,zero
   94380:	003fb606 	br	9425c <__ram_exceptions_end+0xfff74028>
   94384:	00800a44 	movi	r2,41
   94388:	18801726 	beq	r3,r2,943e8 <__hexnan+0x200>
   9438c:	00800104 	movi	r2,4
   94390:	dfc00617 	ldw	ra,24(sp)
   94394:	dd400517 	ldw	r21,20(sp)
   94398:	dd000417 	ldw	r20,16(sp)
   9439c:	dcc00317 	ldw	r19,12(sp)
   943a0:	dc800217 	ldw	r18,8(sp)
   943a4:	dc400117 	ldw	r17,4(sp)
   943a8:	dc000017 	ldw	r16,0(sp)
   943ac:	dec00704 	addi	sp,sp,28
   943b0:	f800283a 	ret
   943b4:	903fd826 	beq	r18,zero,94318 <__ram_exceptions_end+0xfff740e4>
   943b8:	00c00804 	movi	r3,32
   943bc:	1ca5c83a 	sub	r18,r3,r18
   943c0:	00ffffc4 	movi	r3,-1
   943c4:	78bfff17 	ldw	r2,-4(r15)
   943c8:	1c86d83a 	srl	r3,r3,r18
   943cc:	1884703a 	and	r2,r3,r2
   943d0:	78bfff15 	stw	r2,-4(r15)
   943d4:	003fd106 	br	9431c <__ram_exceptions_end+0xfff740e8>
   943d8:	00800044 	movi	r2,1
   943dc:	58800015 	stw	r2,0(r11)
   943e0:	00800144 	movi	r2,5
   943e4:	003fea06 	br	94390 <__ram_exceptions_end+0xfff7415c>
   943e8:	42000044 	addi	r8,r8,1
   943ec:	22000015 	stw	r8,0(r4)
   943f0:	603fbb1e 	bne	r12,zero,942e0 <__ram_exceptions_end+0xfff740ac>
   943f4:	003fe506 	br	9438c <__ram_exceptions_end+0xfff74158>
   943f8:	02400204 	movi	r9,8
   943fc:	49d3c83a 	sub	r9,r9,r7
   94400:	4a53883a 	add	r9,r9,r9
   94404:	2a000017 	ldw	r8,0(r5)
   94408:	4a53883a 	add	r9,r9,r9
   9440c:	02800804 	movi	r10,32
   94410:	5255c83a 	sub	r10,r10,r9
   94414:	28c00104 	addi	r3,r5,4
   94418:	2805883a 	mov	r2,r5
   9441c:	19c00017 	ldw	r7,0(r3)
   94420:	10800104 	addi	r2,r2,4
   94424:	18c00104 	addi	r3,r3,4
   94428:	3a88983a 	sll	r4,r7,r10
   9442c:	2208b03a 	or	r4,r4,r8
   94430:	3a50d83a 	srl	r8,r7,r9
   94434:	113fff15 	stw	r4,-4(r2)
   94438:	1a3fff15 	stw	r8,-4(r3)
   9443c:	137ff736 	bltu	r2,r13,9441c <__ram_exceptions_end+0xfff741e8>
   94440:	003faa06 	br	942ec <__ram_exceptions_end+0xfff740b8>

00094444 <_isatty_r>:
   94444:	defffd04 	addi	sp,sp,-12
   94448:	dc000015 	stw	r16,0(sp)
   9444c:	040002b4 	movhi	r16,10
   94450:	dc400115 	stw	r17,4(sp)
   94454:	8408d104 	addi	r16,r16,9028
   94458:	2023883a 	mov	r17,r4
   9445c:	2809883a 	mov	r4,r5
   94460:	dfc00215 	stw	ra,8(sp)
   94464:	80000015 	stw	zero,0(r16)
   94468:	00999740 	call	99974 <isatty>
   9446c:	00ffffc4 	movi	r3,-1
   94470:	10c00526 	beq	r2,r3,94488 <_isatty_r+0x44>
   94474:	dfc00217 	ldw	ra,8(sp)
   94478:	dc400117 	ldw	r17,4(sp)
   9447c:	dc000017 	ldw	r16,0(sp)
   94480:	dec00304 	addi	sp,sp,12
   94484:	f800283a 	ret
   94488:	80c00017 	ldw	r3,0(r16)
   9448c:	183ff926 	beq	r3,zero,94474 <__ram_exceptions_end+0xfff74240>
   94490:	88c00015 	stw	r3,0(r17)
   94494:	003ff706 	br	94474 <__ram_exceptions_end+0xfff74240>

00094498 <strncmp>:
   94498:	30003126 	beq	r6,zero,94560 <strncmp+0xc8>
   9449c:	2144b03a 	or	r2,r4,r5
   944a0:	108000cc 	andi	r2,r2,3
   944a4:	10001e1e 	bne	r2,zero,94520 <strncmp+0x88>
   944a8:	024000c4 	movi	r9,3
   944ac:	49801c2e 	bgeu	r9,r6,94520 <strncmp+0x88>
   944b0:	20800017 	ldw	r2,0(r4)
   944b4:	28c00017 	ldw	r3,0(r5)
   944b8:	10c0191e 	bne	r2,r3,94520 <strncmp+0x88>
   944bc:	31bfff04 	addi	r6,r6,-4
   944c0:	30002726 	beq	r6,zero,94560 <strncmp+0xc8>
   944c4:	02ffbff4 	movhi	r11,65279
   944c8:	5affbfc4 	addi	r11,r11,-257
   944cc:	0086303a 	nor	r3,zero,r2
   944d0:	02a02074 	movhi	r10,32897
   944d4:	12c5883a 	add	r2,r2,r11
   944d8:	52a02004 	addi	r10,r10,-32640
   944dc:	10c4703a 	and	r2,r2,r3
   944e0:	1284703a 	and	r2,r2,r10
   944e4:	10000b26 	beq	r2,zero,94514 <strncmp+0x7c>
   944e8:	00001d06 	br	94560 <strncmp+0xc8>
   944ec:	20c00017 	ldw	r3,0(r4)
   944f0:	29c00017 	ldw	r7,0(r5)
   944f4:	1ad1883a 	add	r8,r3,r11
   944f8:	00c4303a 	nor	r2,zero,r3
   944fc:	4084703a 	and	r2,r8,r2
   94500:	1284703a 	and	r2,r2,r10
   94504:	19c0061e 	bne	r3,r7,94520 <strncmp+0x88>
   94508:	31bfff04 	addi	r6,r6,-4
   9450c:	30001426 	beq	r6,zero,94560 <strncmp+0xc8>
   94510:	1000131e 	bne	r2,zero,94560 <strncmp+0xc8>
   94514:	21000104 	addi	r4,r4,4
   94518:	29400104 	addi	r5,r5,4
   9451c:	49bff336 	bltu	r9,r6,944ec <__ram_exceptions_end+0xfff742b8>
   94520:	28800007 	ldb	r2,0(r5)
   94524:	20c00007 	ldb	r3,0(r4)
   94528:	31bfffc4 	addi	r6,r6,-1
   9452c:	10c0081e 	bne	r2,r3,94550 <strncmp+0xb8>
   94530:	30000b26 	beq	r6,zero,94560 <strncmp+0xc8>
   94534:	10000a26 	beq	r2,zero,94560 <strncmp+0xc8>
   94538:	21000044 	addi	r4,r4,1
   9453c:	29400044 	addi	r5,r5,1
   94540:	20800007 	ldb	r2,0(r4)
   94544:	28c00007 	ldb	r3,0(r5)
   94548:	31bfffc4 	addi	r6,r6,-1
   9454c:	10fff826 	beq	r2,r3,94530 <__ram_exceptions_end+0xfff742fc>
   94550:	20800003 	ldbu	r2,0(r4)
   94554:	28c00003 	ldbu	r3,0(r5)
   94558:	10c5c83a 	sub	r2,r2,r3
   9455c:	f800283a 	ret
   94560:	0005883a 	mov	r2,zero
   94564:	f800283a 	ret

00094568 <__ssprint_r>:
   94568:	30800217 	ldw	r2,8(r6)
   9456c:	defff604 	addi	sp,sp,-40
   94570:	dc800215 	stw	r18,8(sp)
   94574:	dfc00915 	stw	ra,36(sp)
   94578:	df000815 	stw	fp,32(sp)
   9457c:	ddc00715 	stw	r23,28(sp)
   94580:	dd800615 	stw	r22,24(sp)
   94584:	dd400515 	stw	r21,20(sp)
   94588:	dd000415 	stw	r20,16(sp)
   9458c:	dcc00315 	stw	r19,12(sp)
   94590:	dc400115 	stw	r17,4(sp)
   94594:	dc000015 	stw	r16,0(sp)
   94598:	3025883a 	mov	r18,r6
   9459c:	10005826 	beq	r2,zero,94700 <__ssprint_r+0x198>
   945a0:	2027883a 	mov	r19,r4
   945a4:	35c00017 	ldw	r23,0(r6)
   945a8:	29000017 	ldw	r4,0(r5)
   945ac:	28800217 	ldw	r2,8(r5)
   945b0:	2823883a 	mov	r17,r5
   945b4:	0039883a 	mov	fp,zero
   945b8:	0021883a 	mov	r16,zero
   945bc:	80003926 	beq	r16,zero,946a4 <__ssprint_r+0x13c>
   945c0:	102b883a 	mov	r21,r2
   945c4:	102d883a 	mov	r22,r2
   945c8:	80803a36 	bltu	r16,r2,946b4 <__ssprint_r+0x14c>
   945cc:	88c0030b 	ldhu	r3,12(r17)
   945d0:	1881200c 	andi	r2,r3,1152
   945d4:	10002626 	beq	r2,zero,94670 <__ssprint_r+0x108>
   945d8:	88800517 	ldw	r2,20(r17)
   945dc:	89400417 	ldw	r5,16(r17)
   945e0:	81800044 	addi	r6,r16,1
   945e4:	108f883a 	add	r7,r2,r2
   945e8:	3885883a 	add	r2,r7,r2
   945ec:	100ed7fa 	srli	r7,r2,31
   945f0:	216dc83a 	sub	r22,r4,r5
   945f4:	3589883a 	add	r4,r6,r22
   945f8:	3885883a 	add	r2,r7,r2
   945fc:	102bd07a 	srai	r21,r2,1
   94600:	a80d883a 	mov	r6,r21
   94604:	a900022e 	bgeu	r21,r4,94610 <__ssprint_r+0xa8>
   94608:	202b883a 	mov	r21,r4
   9460c:	200d883a 	mov	r6,r4
   94610:	18c1000c 	andi	r3,r3,1024
   94614:	18002a26 	beq	r3,zero,946c0 <__ssprint_r+0x158>
   94618:	300b883a 	mov	r5,r6
   9461c:	9809883a 	mov	r4,r19
   94620:	008235c0 	call	8235c <_malloc_r>
   94624:	1029883a 	mov	r20,r2
   94628:	10002c26 	beq	r2,zero,946dc <__ssprint_r+0x174>
   9462c:	89400417 	ldw	r5,16(r17)
   94630:	b00d883a 	mov	r6,r22
   94634:	1009883a 	mov	r4,r2
   94638:	0082be40 	call	82be4 <memcpy>
   9463c:	8880030b 	ldhu	r2,12(r17)
   94640:	00fedfc4 	movi	r3,-1153
   94644:	10c4703a 	and	r2,r2,r3
   94648:	10802014 	ori	r2,r2,128
   9464c:	8880030d 	sth	r2,12(r17)
   94650:	a589883a 	add	r4,r20,r22
   94654:	adadc83a 	sub	r22,r21,r22
   94658:	8d400515 	stw	r21,20(r17)
   9465c:	8d800215 	stw	r22,8(r17)
   94660:	8d000415 	stw	r20,16(r17)
   94664:	89000015 	stw	r4,0(r17)
   94668:	802b883a 	mov	r21,r16
   9466c:	802d883a 	mov	r22,r16
   94670:	b00d883a 	mov	r6,r22
   94674:	e00b883a 	mov	r5,fp
   94678:	008a1340 	call	8a134 <memmove>
   9467c:	88800217 	ldw	r2,8(r17)
   94680:	89000017 	ldw	r4,0(r17)
   94684:	90c00217 	ldw	r3,8(r18)
   94688:	1545c83a 	sub	r2,r2,r21
   9468c:	2589883a 	add	r4,r4,r22
   94690:	88800215 	stw	r2,8(r17)
   94694:	89000015 	stw	r4,0(r17)
   94698:	1c21c83a 	sub	r16,r3,r16
   9469c:	94000215 	stw	r16,8(r18)
   946a0:	80001726 	beq	r16,zero,94700 <__ssprint_r+0x198>
   946a4:	bf000017 	ldw	fp,0(r23)
   946a8:	bc000117 	ldw	r16,4(r23)
   946ac:	bdc00204 	addi	r23,r23,8
   946b0:	003fc206 	br	945bc <__ram_exceptions_end+0xfff74388>
   946b4:	802b883a 	mov	r21,r16
   946b8:	802d883a 	mov	r22,r16
   946bc:	003fec06 	br	94670 <__ram_exceptions_end+0xfff7443c>
   946c0:	9809883a 	mov	r4,r19
   946c4:	008b6380 	call	8b638 <_realloc_r>
   946c8:	1029883a 	mov	r20,r2
   946cc:	103fe01e 	bne	r2,zero,94650 <__ram_exceptions_end+0xfff7441c>
   946d0:	89400417 	ldw	r5,16(r17)
   946d4:	9809883a 	mov	r4,r19
   946d8:	00891a40 	call	891a4 <_free_r>
   946dc:	88c0030b 	ldhu	r3,12(r17)
   946e0:	00800304 	movi	r2,12
   946e4:	98800015 	stw	r2,0(r19)
   946e8:	18c01014 	ori	r3,r3,64
   946ec:	88c0030d 	sth	r3,12(r17)
   946f0:	00bfffc4 	movi	r2,-1
   946f4:	90000215 	stw	zero,8(r18)
   946f8:	90000115 	stw	zero,4(r18)
   946fc:	00000206 	br	94708 <__ssprint_r+0x1a0>
   94700:	90000115 	stw	zero,4(r18)
   94704:	0005883a 	mov	r2,zero
   94708:	dfc00917 	ldw	ra,36(sp)
   9470c:	df000817 	ldw	fp,32(sp)
   94710:	ddc00717 	ldw	r23,28(sp)
   94714:	dd800617 	ldw	r22,24(sp)
   94718:	dd400517 	ldw	r21,20(sp)
   9471c:	dd000417 	ldw	r20,16(sp)
   94720:	dcc00317 	ldw	r19,12(sp)
   94724:	dc800217 	ldw	r18,8(sp)
   94728:	dc400117 	ldw	r17,4(sp)
   9472c:	dc000017 	ldw	r16,0(sp)
   94730:	dec00a04 	addi	sp,sp,40
   94734:	f800283a 	ret

00094738 <___svfiprintf_internal_r>:
   94738:	2880030b 	ldhu	r2,12(r5)
   9473c:	deffc804 	addi	sp,sp,-224
   94740:	dcc03115 	stw	r19,196(sp)
   94744:	dfc03715 	stw	ra,220(sp)
   94748:	df003615 	stw	fp,216(sp)
   9474c:	ddc03515 	stw	r23,212(sp)
   94750:	dd803415 	stw	r22,208(sp)
   94754:	dd403315 	stw	r21,204(sp)
   94758:	dd003215 	stw	r20,200(sp)
   9475c:	dc803015 	stw	r18,192(sp)
   94760:	dc402f15 	stw	r17,188(sp)
   94764:	dc002e15 	stw	r16,184(sp)
   94768:	d9402315 	stw	r5,140(sp)
   9476c:	d9002715 	stw	r4,156(sp)
   94770:	1080200c 	andi	r2,r2,128
   94774:	d9c02415 	stw	r7,144(sp)
   94778:	3027883a 	mov	r19,r6
   9477c:	10000226 	beq	r2,zero,94788 <___svfiprintf_internal_r+0x50>
   94780:	28800417 	ldw	r2,16(r5)
   94784:	10046d26 	beq	r2,zero,9593c <___svfiprintf_internal_r+0x1204>
   94788:	d8801a04 	addi	r2,sp,104
   9478c:	d8c019c4 	addi	r3,sp,103
   94790:	058002b4 	movhi	r22,10
   94794:	10c9c83a 	sub	r4,r2,r3
   94798:	b5b9ef84 	addi	r22,r22,-6210
   9479c:	d8801e15 	stw	r2,120(sp)
   947a0:	d8c01f15 	stw	r3,124(sp)
   947a4:	dec01a15 	stw	sp,104(sp)
   947a8:	d8001c15 	stw	zero,112(sp)
   947ac:	d8001b15 	stw	zero,108(sp)
   947b0:	d811883a 	mov	r8,sp
   947b4:	d8002915 	stw	zero,164(sp)
   947b8:	d8002615 	stw	zero,152(sp)
   947bc:	d9002c15 	stw	r4,176(sp)
   947c0:	98800007 	ldb	r2,0(r19)
   947c4:	10031426 	beq	r2,zero,95418 <___svfiprintf_internal_r+0xce0>
   947c8:	00c00944 	movi	r3,37
   947cc:	9825883a 	mov	r18,r19
   947d0:	10c0021e 	bne	r2,r3,947dc <___svfiprintf_internal_r+0xa4>
   947d4:	00001406 	br	94828 <___svfiprintf_internal_r+0xf0>
   947d8:	10c00326 	beq	r2,r3,947e8 <___svfiprintf_internal_r+0xb0>
   947dc:	94800044 	addi	r18,r18,1
   947e0:	90800007 	ldb	r2,0(r18)
   947e4:	103ffc1e 	bne	r2,zero,947d8 <__ram_exceptions_end+0xfff745a4>
   947e8:	94e1c83a 	sub	r16,r18,r19
   947ec:	80000e26 	beq	r16,zero,94828 <___svfiprintf_internal_r+0xf0>
   947f0:	d8c01c17 	ldw	r3,112(sp)
   947f4:	d8801b17 	ldw	r2,108(sp)
   947f8:	44c00015 	stw	r19,0(r8)
   947fc:	1c07883a 	add	r3,r3,r16
   94800:	10800044 	addi	r2,r2,1
   94804:	d8c01c15 	stw	r3,112(sp)
   94808:	44000115 	stw	r16,4(r8)
   9480c:	d8801b15 	stw	r2,108(sp)
   94810:	00c001c4 	movi	r3,7
   94814:	18835c16 	blt	r3,r2,95588 <___svfiprintf_internal_r+0xe50>
   94818:	42000204 	addi	r8,r8,8
   9481c:	d9402617 	ldw	r5,152(sp)
   94820:	2c0b883a 	add	r5,r5,r16
   94824:	d9402615 	stw	r5,152(sp)
   94828:	90800007 	ldb	r2,0(r18)
   9482c:	1002fc26 	beq	r2,zero,95420 <___svfiprintf_internal_r+0xce8>
   94830:	0023883a 	mov	r17,zero
   94834:	00bfffc4 	movi	r2,-1
   94838:	0021883a 	mov	r16,zero
   9483c:	94c00044 	addi	r19,r18,1
   94840:	90c00047 	ldb	r3,1(r18)
   94844:	dc402105 	stb	r17,132(sp)
   94848:	d8001d85 	stb	zero,118(sp)
   9484c:	002b883a 	mov	r21,zero
   94850:	d8802015 	stw	r2,128(sp)
   94854:	d8002515 	stw	zero,148(sp)
   94858:	04801604 	movi	r18,88
   9485c:	05000244 	movi	r20,9
   94860:	402f883a 	mov	r23,r8
   94864:	8023883a 	mov	r17,r16
   94868:	9cc00044 	addi	r19,r19,1
   9486c:	18bff804 	addi	r2,r3,-32
   94870:	9081fb36 	bltu	r18,r2,95060 <___svfiprintf_internal_r+0x928>
   94874:	100490ba 	slli	r2,r2,2
   94878:	01000274 	movhi	r4,9
   9487c:	21122304 	addi	r4,r4,18572
   94880:	1105883a 	add	r2,r2,r4
   94884:	10800017 	ldw	r2,0(r2)
   94888:	1000683a 	jmp	r2
   9488c:	00094a8c 	andi	zero,zero,9514
   94890:	00095060 	cmpeqi	zero,zero,9537
   94894:	00095060 	cmpeqi	zero,zero,9537
   94898:	00094a80 	call	94a8 <_start-0x76b58>
   9489c:	00095060 	cmpeqi	zero,zero,9537
   948a0:	00095060 	cmpeqi	zero,zero,9537
   948a4:	00095060 	cmpeqi	zero,zero,9537
   948a8:	00095060 	cmpeqi	zero,zero,9537
   948ac:	00095060 	cmpeqi	zero,zero,9537
   948b0:	00095060 	cmpeqi	zero,zero,9537
   948b4:	000949f0 	cmpltui	zero,zero,9511
   948b8:	00094bec 	andhi	zero,zero,9519
   948bc:	00095060 	cmpeqi	zero,zero,9537
   948c0:	00094a18 	cmpnei	zero,zero,9512
   948c4:	0009509c 	xori	zero,zero,9538
   948c8:	00095060 	cmpeqi	zero,zero,9537
   948cc:	00095090 	cmplti	zero,zero,9538
   948d0:	00095024 	muli	zero,zero,9536
   948d4:	00095024 	muli	zero,zero,9536
   948d8:	00095024 	muli	zero,zero,9536
   948dc:	00095024 	muli	zero,zero,9536
   948e0:	00095024 	muli	zero,zero,9536
   948e4:	00095024 	muli	zero,zero,9536
   948e8:	00095024 	muli	zero,zero,9536
   948ec:	00095024 	muli	zero,zero,9536
   948f0:	00095024 	muli	zero,zero,9536
   948f4:	00095060 	cmpeqi	zero,zero,9537
   948f8:	00095060 	cmpeqi	zero,zero,9537
   948fc:	00095060 	cmpeqi	zero,zero,9537
   94900:	00095060 	cmpeqi	zero,zero,9537
   94904:	00095060 	cmpeqi	zero,zero,9537
   94908:	00095060 	cmpeqi	zero,zero,9537
   9490c:	00095060 	cmpeqi	zero,zero,9537
   94910:	00095060 	cmpeqi	zero,zero,9537
   94914:	00095060 	cmpeqi	zero,zero,9537
   94918:	00095060 	cmpeqi	zero,zero,9537
   9491c:	00094fa8 	cmpgeui	zero,zero,9534
   94920:	00095060 	cmpeqi	zero,zero,9537
   94924:	00095060 	cmpeqi	zero,zero,9537
   94928:	00095060 	cmpeqi	zero,zero,9537
   9492c:	00095060 	cmpeqi	zero,zero,9537
   94930:	00095060 	cmpeqi	zero,zero,9537
   94934:	00095060 	cmpeqi	zero,zero,9537
   94938:	00095060 	cmpeqi	zero,zero,9537
   9493c:	00095060 	cmpeqi	zero,zero,9537
   94940:	00095060 	cmpeqi	zero,zero,9537
   94944:	00095060 	cmpeqi	zero,zero,9537
   94948:	00095158 	cmpnei	zero,zero,9541
   9494c:	00095060 	cmpeqi	zero,zero,9537
   94950:	00095060 	cmpeqi	zero,zero,9537
   94954:	00095060 	cmpeqi	zero,zero,9537
   94958:	00095060 	cmpeqi	zero,zero,9537
   9495c:	00095060 	cmpeqi	zero,zero,9537
   94960:	000950e4 	muli	zero,zero,9539
   94964:	00095060 	cmpeqi	zero,zero,9537
   94968:	00095060 	cmpeqi	zero,zero,9537
   9496c:	00094de4 	muli	zero,zero,9527
   94970:	00095060 	cmpeqi	zero,zero,9537
   94974:	00095060 	cmpeqi	zero,zero,9537
   94978:	00095060 	cmpeqi	zero,zero,9537
   9497c:	00095060 	cmpeqi	zero,zero,9537
   94980:	00095060 	cmpeqi	zero,zero,9537
   94984:	00095060 	cmpeqi	zero,zero,9537
   94988:	00095060 	cmpeqi	zero,zero,9537
   9498c:	00095060 	cmpeqi	zero,zero,9537
   94990:	00095060 	cmpeqi	zero,zero,9537
   94994:	00095060 	cmpeqi	zero,zero,9537
   94998:	00094cb0 	cmpltui	zero,zero,9522
   9499c:	00094e94 	movui	zero,9530
   949a0:	00095060 	cmpeqi	zero,zero,9537
   949a4:	00095060 	cmpeqi	zero,zero,9537
   949a8:	00095060 	cmpeqi	zero,zero,9537
   949ac:	00094e88 	cmpgei	zero,zero,9530
   949b0:	00094e94 	movui	zero,9530
   949b4:	00095060 	cmpeqi	zero,zero,9537
   949b8:	00095060 	cmpeqi	zero,zero,9537
   949bc:	00094e74 	movhi	zero,9529
   949c0:	00095060 	cmpeqi	zero,zero,9537
   949c4:	00094e34 	movhi	zero,9528
   949c8:	00094c00 	call	94c0 <_start-0x76b40>
   949cc:	00094a24 	muli	zero,zero,9512
   949d0:	00094f9c 	xori	zero,zero,9534
   949d4:	00095060 	cmpeqi	zero,zero,9537
   949d8:	00094f48 	cmpgei	zero,zero,9533
   949dc:	00095060 	cmpeqi	zero,zero,9537
   949e0:	00094b64 	muli	zero,zero,9517
   949e4:	00095060 	cmpeqi	zero,zero,9537
   949e8:	00095060 	cmpeqi	zero,zero,9537
   949ec:	00094ab0 	cmpltui	zero,zero,9514
   949f0:	d9002417 	ldw	r4,144(sp)
   949f4:	d9402417 	ldw	r5,144(sp)
   949f8:	21000017 	ldw	r4,0(r4)
   949fc:	28800104 	addi	r2,r5,4
   94a00:	d9002515 	stw	r4,148(sp)
   94a04:	20032b0e 	bge	r4,zero,956b4 <___svfiprintf_internal_r+0xf7c>
   94a08:	d8c02517 	ldw	r3,148(sp)
   94a0c:	d8802415 	stw	r2,144(sp)
   94a10:	00c7c83a 	sub	r3,zero,r3
   94a14:	d8c02515 	stw	r3,148(sp)
   94a18:	8c400114 	ori	r17,r17,4
   94a1c:	98c00007 	ldb	r3,0(r19)
   94a20:	003f9106 	br	94868 <__ram_exceptions_end+0xfff74634>
   94a24:	00800c04 	movi	r2,48
   94a28:	d9402417 	ldw	r5,144(sp)
   94a2c:	d9002017 	ldw	r4,128(sp)
   94a30:	d8801d05 	stb	r2,116(sp)
   94a34:	00801e04 	movi	r2,120
   94a38:	d8801d45 	stb	r2,117(sp)
   94a3c:	d8001d85 	stb	zero,118(sp)
   94a40:	b811883a 	mov	r8,r23
   94a44:	28c00104 	addi	r3,r5,4
   94a48:	2c800017 	ldw	r18,0(r5)
   94a4c:	0029883a 	mov	r20,zero
   94a50:	88800094 	ori	r2,r17,2
   94a54:	20036316 	blt	r4,zero,957e4 <___svfiprintf_internal_r+0x10ac>
   94a58:	00bfdfc4 	movi	r2,-129
   94a5c:	88a0703a 	and	r16,r17,r2
   94a60:	d8c02415 	stw	r3,144(sp)
   94a64:	84000094 	ori	r16,r16,2
   94a68:	90031c26 	beq	r18,zero,956dc <___svfiprintf_internal_r+0xfa4>
   94a6c:	014002b4 	movhi	r5,10
   94a70:	29787f04 	addi	r5,r5,-7684
   94a74:	002b883a 	mov	r21,zero
   94a78:	d9402915 	stw	r5,164(sp)
   94a7c:	00002906 	br	94b24 <___svfiprintf_internal_r+0x3ec>
   94a80:	8c400054 	ori	r17,r17,1
   94a84:	98c00007 	ldb	r3,0(r19)
   94a88:	003f7706 	br	94868 <__ram_exceptions_end+0xfff74634>
   94a8c:	a8803fcc 	andi	r2,r21,255
   94a90:	1080201c 	xori	r2,r2,128
   94a94:	10bfe004 	addi	r2,r2,-128
   94a98:	10032a1e 	bne	r2,zero,95744 <___svfiprintf_internal_r+0x100c>
   94a9c:	00c00044 	movi	r3,1
   94aa0:	d8c02105 	stb	r3,132(sp)
   94aa4:	05400804 	movi	r21,32
   94aa8:	98c00007 	ldb	r3,0(r19)
   94aac:	003f6e06 	br	94868 <__ram_exceptions_end+0xfff74634>
   94ab0:	8821883a 	mov	r16,r17
   94ab4:	dc402103 	ldbu	r17,132(sp)
   94ab8:	b811883a 	mov	r8,r23
   94abc:	8c403fcc 	andi	r17,r17,255
   94ac0:	8803f01e 	bne	r17,zero,95a84 <___svfiprintf_internal_r+0x134c>
   94ac4:	008002b4 	movhi	r2,10
   94ac8:	10b87f04 	addi	r2,r2,-7684
   94acc:	d8802915 	stw	r2,164(sp)
   94ad0:	8080080c 	andi	r2,r16,32
   94ad4:	1000cd26 	beq	r2,zero,94e0c <___svfiprintf_internal_r+0x6d4>
   94ad8:	d9002417 	ldw	r4,144(sp)
   94adc:	24800017 	ldw	r18,0(r4)
   94ae0:	25000117 	ldw	r20,4(r4)
   94ae4:	21000204 	addi	r4,r4,8
   94ae8:	d9002415 	stw	r4,144(sp)
   94aec:	8080004c 	andi	r2,r16,1
   94af0:	1002c726 	beq	r2,zero,95610 <___svfiprintf_internal_r+0xed8>
   94af4:	9504b03a 	or	r2,r18,r20
   94af8:	1003061e 	bne	r2,zero,95714 <___svfiprintf_internal_r+0xfdc>
   94afc:	d9002017 	ldw	r4,128(sp)
   94b00:	d8001d85 	stb	zero,118(sp)
   94b04:	20033e16 	blt	r4,zero,95800 <___svfiprintf_internal_r+0x10c8>
   94b08:	00bfdfc4 	movi	r2,-129
   94b0c:	80a0703a 	and	r16,r16,r2
   94b10:	d9402017 	ldw	r5,128(sp)
   94b14:	002b883a 	mov	r21,zero
   94b18:	28002826 	beq	r5,zero,94bbc <___svfiprintf_internal_r+0x484>
   94b1c:	0025883a 	mov	r18,zero
   94b20:	0029883a 	mov	r20,zero
   94b24:	d9002917 	ldw	r4,164(sp)
   94b28:	dc401a04 	addi	r17,sp,104
   94b2c:	908003cc 	andi	r2,r18,15
   94b30:	a006973a 	slli	r3,r20,28
   94b34:	2085883a 	add	r2,r4,r2
   94b38:	9024d13a 	srli	r18,r18,4
   94b3c:	10800003 	ldbu	r2,0(r2)
   94b40:	a028d13a 	srli	r20,r20,4
   94b44:	8c7fffc4 	addi	r17,r17,-1
   94b48:	1ca4b03a 	or	r18,r3,r18
   94b4c:	88800005 	stb	r2,0(r17)
   94b50:	9504b03a 	or	r2,r18,r20
   94b54:	103ff51e 	bne	r2,zero,94b2c <__ram_exceptions_end+0xfff748f8>
   94b58:	d8801e17 	ldw	r2,120(sp)
   94b5c:	1469c83a 	sub	r20,r2,r17
   94b60:	00001906 	br	94bc8 <___svfiprintf_internal_r+0x490>
   94b64:	8821883a 	mov	r16,r17
   94b68:	dc402103 	ldbu	r17,132(sp)
   94b6c:	b811883a 	mov	r8,r23
   94b70:	8c403fcc 	andi	r17,r17,255
   94b74:	8803d01e 	bne	r17,zero,95ab8 <___svfiprintf_internal_r+0x1380>
   94b78:	8080080c 	andi	r2,r16,32
   94b7c:	10016126 	beq	r2,zero,95104 <___svfiprintf_internal_r+0x9cc>
   94b80:	d9002417 	ldw	r4,144(sp)
   94b84:	d9402017 	ldw	r5,128(sp)
   94b88:	d8001d85 	stb	zero,118(sp)
   94b8c:	20c00204 	addi	r3,r4,8
   94b90:	24800017 	ldw	r18,0(r4)
   94b94:	25000117 	ldw	r20,4(r4)
   94b98:	28030f16 	blt	r5,zero,957d8 <___svfiprintf_internal_r+0x10a0>
   94b9c:	013fdfc4 	movi	r4,-129
   94ba0:	9504b03a 	or	r2,r18,r20
   94ba4:	d8c02415 	stw	r3,144(sp)
   94ba8:	8120703a 	and	r16,r16,r4
   94bac:	002b883a 	mov	r21,zero
   94bb0:	1000cd1e 	bne	r2,zero,94ee8 <___svfiprintf_internal_r+0x7b0>
   94bb4:	d8c02017 	ldw	r3,128(sp)
   94bb8:	1803141e 	bne	r3,zero,9580c <___svfiprintf_internal_r+0x10d4>
   94bbc:	d8002015 	stw	zero,128(sp)
   94bc0:	0029883a 	mov	r20,zero
   94bc4:	dc401a04 	addi	r17,sp,104
   94bc8:	dc802017 	ldw	r18,128(sp)
   94bcc:	9500010e 	bge	r18,r20,94bd4 <___svfiprintf_internal_r+0x49c>
   94bd0:	a025883a 	mov	r18,r20
   94bd4:	ad403fcc 	andi	r21,r21,255
   94bd8:	ad40201c 	xori	r21,r21,128
   94bdc:	ad7fe004 	addi	r21,r21,-128
   94be0:	a8003f26 	beq	r21,zero,94ce0 <___svfiprintf_internal_r+0x5a8>
   94be4:	94800044 	addi	r18,r18,1
   94be8:	00003d06 	br	94ce0 <___svfiprintf_internal_r+0x5a8>
   94bec:	00c00044 	movi	r3,1
   94bf0:	d8c02105 	stb	r3,132(sp)
   94bf4:	05400ac4 	movi	r21,43
   94bf8:	98c00007 	ldb	r3,0(r19)
   94bfc:	003f1a06 	br	94868 <__ram_exceptions_end+0xfff74634>
   94c00:	8821883a 	mov	r16,r17
   94c04:	dc402103 	ldbu	r17,132(sp)
   94c08:	b811883a 	mov	r8,r23
   94c0c:	8c403fcc 	andi	r17,r17,255
   94c10:	8803a71e 	bne	r17,zero,95ab0 <___svfiprintf_internal_r+0x1378>
   94c14:	8080080c 	andi	r2,r16,32
   94c18:	10015726 	beq	r2,zero,95178 <___svfiprintf_internal_r+0xa40>
   94c1c:	d8c02417 	ldw	r3,144(sp)
   94c20:	d9002017 	ldw	r4,128(sp)
   94c24:	d8001d85 	stb	zero,118(sp)
   94c28:	18800204 	addi	r2,r3,8
   94c2c:	1c800017 	ldw	r18,0(r3)
   94c30:	1d000117 	ldw	r20,4(r3)
   94c34:	2002db16 	blt	r4,zero,957a4 <___svfiprintf_internal_r+0x106c>
   94c38:	013fdfc4 	movi	r4,-129
   94c3c:	9506b03a 	or	r3,r18,r20
   94c40:	d8802415 	stw	r2,144(sp)
   94c44:	8120703a 	and	r16,r16,r4
   94c48:	18015826 	beq	r3,zero,951ac <___svfiprintf_internal_r+0xa74>
   94c4c:	002b883a 	mov	r21,zero
   94c50:	dc401a04 	addi	r17,sp,104
   94c54:	9006d0fa 	srli	r3,r18,3
   94c58:	a008977a 	slli	r4,r20,29
   94c5c:	a028d0fa 	srli	r20,r20,3
   94c60:	948001cc 	andi	r18,r18,7
   94c64:	90800c04 	addi	r2,r18,48
   94c68:	8c7fffc4 	addi	r17,r17,-1
   94c6c:	20e4b03a 	or	r18,r4,r3
   94c70:	88800005 	stb	r2,0(r17)
   94c74:	9506b03a 	or	r3,r18,r20
   94c78:	183ff61e 	bne	r3,zero,94c54 <__ram_exceptions_end+0xfff74a20>
   94c7c:	80c0004c 	andi	r3,r16,1
   94c80:	18028926 	beq	r3,zero,956a8 <___svfiprintf_internal_r+0xf70>
   94c84:	10803fcc 	andi	r2,r2,255
   94c88:	1080201c 	xori	r2,r2,128
   94c8c:	10bfe004 	addi	r2,r2,-128
   94c90:	00c00c04 	movi	r3,48
   94c94:	10ffb026 	beq	r2,r3,94b58 <__ram_exceptions_end+0xfff74924>
   94c98:	88ffffc5 	stb	r3,-1(r17)
   94c9c:	d8c01e17 	ldw	r3,120(sp)
   94ca0:	88bfffc4 	addi	r2,r17,-1
   94ca4:	1023883a 	mov	r17,r2
   94ca8:	18a9c83a 	sub	r20,r3,r2
   94cac:	003fc606 	br	94bc8 <__ram_exceptions_end+0xfff74994>
   94cb0:	d8c02417 	ldw	r3,144(sp)
   94cb4:	04800044 	movi	r18,1
   94cb8:	8821883a 	mov	r16,r17
   94cbc:	18800017 	ldw	r2,0(r3)
   94cc0:	18c00104 	addi	r3,r3,4
   94cc4:	b811883a 	mov	r8,r23
   94cc8:	d8001d85 	stb	zero,118(sp)
   94ccc:	d8801005 	stb	r2,64(sp)
   94cd0:	d8c02415 	stw	r3,144(sp)
   94cd4:	9029883a 	mov	r20,r18
   94cd8:	dc401004 	addi	r17,sp,64
   94cdc:	d8002015 	stw	zero,128(sp)
   94ce0:	80c0008c 	andi	r3,r16,2
   94ce4:	d8c02115 	stw	r3,132(sp)
   94ce8:	18000126 	beq	r3,zero,94cf0 <___svfiprintf_internal_r+0x5b8>
   94cec:	94800084 	addi	r18,r18,2
   94cf0:	80c0210c 	andi	r3,r16,132
   94cf4:	d8c02215 	stw	r3,136(sp)
   94cf8:	1801321e 	bne	r3,zero,951c4 <___svfiprintf_internal_r+0xa8c>
   94cfc:	d9002517 	ldw	r4,148(sp)
   94d00:	24b9c83a 	sub	fp,r4,r18
   94d04:	07012f0e 	bge	zero,fp,951c4 <___svfiprintf_internal_r+0xa8c>
   94d08:	02400404 	movi	r9,16
   94d0c:	d8c01c17 	ldw	r3,112(sp)
   94d10:	d8801b17 	ldw	r2,108(sp)
   94d14:	4f03250e 	bge	r9,fp,959ac <___svfiprintf_internal_r+0x1274>
   94d18:	010002b4 	movhi	r4,10
   94d1c:	2139f384 	addi	r4,r4,-6194
   94d20:	dc002a15 	stw	r16,168(sp)
   94d24:	dc402b15 	stw	r17,172(sp)
   94d28:	d9002815 	stw	r4,160(sp)
   94d2c:	e023883a 	mov	r17,fp
   94d30:	482f883a 	mov	r23,r9
   94d34:	9839883a 	mov	fp,r19
   94d38:	054001c4 	movi	r21,7
   94d3c:	9027883a 	mov	r19,r18
   94d40:	dc002717 	ldw	r16,156(sp)
   94d44:	dc802317 	ldw	r18,140(sp)
   94d48:	00000306 	br	94d58 <___svfiprintf_internal_r+0x620>
   94d4c:	8c7ffc04 	addi	r17,r17,-16
   94d50:	42000204 	addi	r8,r8,8
   94d54:	bc40130e 	bge	r23,r17,94da4 <___svfiprintf_internal_r+0x66c>
   94d58:	014002b4 	movhi	r5,10
   94d5c:	18c00404 	addi	r3,r3,16
   94d60:	10800044 	addi	r2,r2,1
   94d64:	2979f384 	addi	r5,r5,-6194
   94d68:	41400015 	stw	r5,0(r8)
   94d6c:	45c00115 	stw	r23,4(r8)
   94d70:	d8c01c15 	stw	r3,112(sp)
   94d74:	d8801b15 	stw	r2,108(sp)
   94d78:	a8bff40e 	bge	r21,r2,94d4c <__ram_exceptions_end+0xfff74b18>
   94d7c:	d9801a04 	addi	r6,sp,104
   94d80:	900b883a 	mov	r5,r18
   94d84:	8009883a 	mov	r4,r16
   94d88:	00945680 	call	94568 <__ssprint_r>
   94d8c:	1001aa1e 	bne	r2,zero,95438 <___svfiprintf_internal_r+0xd00>
   94d90:	8c7ffc04 	addi	r17,r17,-16
   94d94:	d8c01c17 	ldw	r3,112(sp)
   94d98:	d8801b17 	ldw	r2,108(sp)
   94d9c:	d811883a 	mov	r8,sp
   94da0:	bc7fed16 	blt	r23,r17,94d58 <__ram_exceptions_end+0xfff74b24>
   94da4:	9825883a 	mov	r18,r19
   94da8:	dc002a17 	ldw	r16,168(sp)
   94dac:	e027883a 	mov	r19,fp
   94db0:	8839883a 	mov	fp,r17
   94db4:	dc402b17 	ldw	r17,172(sp)
   94db8:	d9002817 	ldw	r4,160(sp)
   94dbc:	e0c7883a 	add	r3,fp,r3
   94dc0:	10800044 	addi	r2,r2,1
   94dc4:	41000015 	stw	r4,0(r8)
   94dc8:	47000115 	stw	fp,4(r8)
   94dcc:	d8c01c15 	stw	r3,112(sp)
   94dd0:	d8801b15 	stw	r2,108(sp)
   94dd4:	010001c4 	movi	r4,7
   94dd8:	20821616 	blt	r4,r2,95634 <___svfiprintf_internal_r+0xefc>
   94ddc:	42000204 	addi	r8,r8,8
   94de0:	0000fa06 	br	951cc <___svfiprintf_internal_r+0xa94>
   94de4:	8821883a 	mov	r16,r17
   94de8:	dc402103 	ldbu	r17,132(sp)
   94dec:	b811883a 	mov	r8,r23
   94df0:	8c403fcc 	andi	r17,r17,255
   94df4:	8803361e 	bne	r17,zero,95ad0 <___svfiprintf_internal_r+0x1398>
   94df8:	014002b4 	movhi	r5,10
   94dfc:	29787a04 	addi	r5,r5,-7704
   94e00:	d9402915 	stw	r5,164(sp)
   94e04:	8080080c 	andi	r2,r16,32
   94e08:	103f331e 	bne	r2,zero,94ad8 <__ram_exceptions_end+0xfff748a4>
   94e0c:	8080040c 	andi	r2,r16,16
   94e10:	1002551e 	bne	r2,zero,95768 <___svfiprintf_internal_r+0x1030>
   94e14:	8080100c 	andi	r2,r16,64
   94e18:	1002a626 	beq	r2,zero,958b4 <___svfiprintf_internal_r+0x117c>
   94e1c:	d8802417 	ldw	r2,144(sp)
   94e20:	0029883a 	mov	r20,zero
   94e24:	1480000b 	ldhu	r18,0(r2)
   94e28:	10800104 	addi	r2,r2,4
   94e2c:	d8802415 	stw	r2,144(sp)
   94e30:	003f2e06 	br	94aec <__ram_exceptions_end+0xfff748b8>
   94e34:	8821883a 	mov	r16,r17
   94e38:	dc402103 	ldbu	r17,132(sp)
   94e3c:	b811883a 	mov	r8,r23
   94e40:	8c403fcc 	andi	r17,r17,255
   94e44:	88030b1e 	bne	r17,zero,95a74 <___svfiprintf_internal_r+0x133c>
   94e48:	8080080c 	andi	r2,r16,32
   94e4c:	1002271e 	bne	r2,zero,956ec <___svfiprintf_internal_r+0xfb4>
   94e50:	8080040c 	andi	r2,r16,16
   94e54:	10028e26 	beq	r2,zero,95890 <___svfiprintf_internal_r+0x1158>
   94e58:	d8c02417 	ldw	r3,144(sp)
   94e5c:	d9002617 	ldw	r4,152(sp)
   94e60:	18800017 	ldw	r2,0(r3)
   94e64:	18c00104 	addi	r3,r3,4
   94e68:	d8c02415 	stw	r3,144(sp)
   94e6c:	11000015 	stw	r4,0(r2)
   94e70:	003e5306 	br	947c0 <__ram_exceptions_end+0xfff7458c>
   94e74:	98c00007 	ldb	r3,0(r19)
   94e78:	01401b04 	movi	r5,108
   94e7c:	19424f26 	beq	r3,r5,957bc <___svfiprintf_internal_r+0x1084>
   94e80:	8c400414 	ori	r17,r17,16
   94e84:	003e7806 	br	94868 <__ram_exceptions_end+0xfff74634>
   94e88:	8c401014 	ori	r17,r17,64
   94e8c:	98c00007 	ldb	r3,0(r19)
   94e90:	003e7506 	br	94868 <__ram_exceptions_end+0xfff74634>
   94e94:	8821883a 	mov	r16,r17
   94e98:	dc402103 	ldbu	r17,132(sp)
   94e9c:	b811883a 	mov	r8,r23
   94ea0:	8c403fcc 	andi	r17,r17,255
   94ea4:	8802fe1e 	bne	r17,zero,95aa0 <___svfiprintf_internal_r+0x1368>
   94ea8:	8080080c 	andi	r2,r16,32
   94eac:	10004626 	beq	r2,zero,94fc8 <___svfiprintf_internal_r+0x890>
   94eb0:	d9002417 	ldw	r4,144(sp)
   94eb4:	20800117 	ldw	r2,4(r4)
   94eb8:	24800017 	ldw	r18,0(r4)
   94ebc:	21000204 	addi	r4,r4,8
   94ec0:	d9002415 	stw	r4,144(sp)
   94ec4:	1029883a 	mov	r20,r2
   94ec8:	10004a16 	blt	r2,zero,94ff4 <___svfiprintf_internal_r+0x8bc>
   94ecc:	d9002017 	ldw	r4,128(sp)
   94ed0:	dd401d83 	ldbu	r21,118(sp)
   94ed4:	2001eb16 	blt	r4,zero,95684 <___svfiprintf_internal_r+0xf4c>
   94ed8:	00ffdfc4 	movi	r3,-129
   94edc:	9504b03a 	or	r2,r18,r20
   94ee0:	80e0703a 	and	r16,r16,r3
   94ee4:	103f3326 	beq	r2,zero,94bb4 <__ram_exceptions_end+0xfff74980>
   94ee8:	a0009426 	beq	r20,zero,9513c <___svfiprintf_internal_r+0xa04>
   94eec:	dc401a04 	addi	r17,sp,104
   94ef0:	402f883a 	mov	r23,r8
   94ef4:	9009883a 	mov	r4,r18
   94ef8:	a00b883a 	mov	r5,r20
   94efc:	01800284 	movi	r6,10
   94f00:	000f883a 	mov	r7,zero
   94f04:	009643c0 	call	9643c <__umoddi3>
   94f08:	10800c04 	addi	r2,r2,48
   94f0c:	8c7fffc4 	addi	r17,r17,-1
   94f10:	9009883a 	mov	r4,r18
   94f14:	a00b883a 	mov	r5,r20
   94f18:	88800005 	stb	r2,0(r17)
   94f1c:	01800284 	movi	r6,10
   94f20:	000f883a 	mov	r7,zero
   94f24:	0095e400 	call	95e40 <__udivdi3>
   94f28:	1025883a 	mov	r18,r2
   94f2c:	10c4b03a 	or	r2,r2,r3
   94f30:	1829883a 	mov	r20,r3
   94f34:	103fef1e 	bne	r2,zero,94ef4 <__ram_exceptions_end+0xfff74cc0>
   94f38:	d9001e17 	ldw	r4,120(sp)
   94f3c:	b811883a 	mov	r8,r23
   94f40:	2469c83a 	sub	r20,r4,r17
   94f44:	003f2006 	br	94bc8 <__ram_exceptions_end+0xfff74994>
   94f48:	d8802417 	ldw	r2,144(sp)
   94f4c:	8821883a 	mov	r16,r17
   94f50:	d8001d85 	stb	zero,118(sp)
   94f54:	14400017 	ldw	r17,0(r2)
   94f58:	b811883a 	mov	r8,r23
   94f5c:	15c00104 	addi	r23,r2,4
   94f60:	88026c26 	beq	r17,zero,95914 <___svfiprintf_internal_r+0x11dc>
   94f64:	d8c02017 	ldw	r3,128(sp)
   94f68:	18025f16 	blt	r3,zero,958e8 <___svfiprintf_internal_r+0x11b0>
   94f6c:	180d883a 	mov	r6,r3
   94f70:	000b883a 	mov	r5,zero
   94f74:	8809883a 	mov	r4,r17
   94f78:	da002d15 	stw	r8,180(sp)
   94f7c:	008a0500 	call	8a050 <memchr>
   94f80:	da002d17 	ldw	r8,180(sp)
   94f84:	1002a526 	beq	r2,zero,95a1c <___svfiprintf_internal_r+0x12e4>
   94f88:	1469c83a 	sub	r20,r2,r17
   94f8c:	dd401d83 	ldbu	r21,118(sp)
   94f90:	ddc02415 	stw	r23,144(sp)
   94f94:	d8002015 	stw	zero,128(sp)
   94f98:	003f0b06 	br	94bc8 <__ram_exceptions_end+0xfff74994>
   94f9c:	8c400814 	ori	r17,r17,32
   94fa0:	98c00007 	ldb	r3,0(r19)
   94fa4:	003e3006 	br	94868 <__ram_exceptions_end+0xfff74634>
   94fa8:	8821883a 	mov	r16,r17
   94fac:	dc402103 	ldbu	r17,132(sp)
   94fb0:	b811883a 	mov	r8,r23
   94fb4:	8c403fcc 	andi	r17,r17,255
   94fb8:	8802b01e 	bne	r17,zero,95a7c <___svfiprintf_internal_r+0x1344>
   94fbc:	84000414 	ori	r16,r16,16
   94fc0:	8080080c 	andi	r2,r16,32
   94fc4:	103fba1e 	bne	r2,zero,94eb0 <__ram_exceptions_end+0xfff74c7c>
   94fc8:	8080040c 	andi	r2,r16,16
   94fcc:	1001df1e 	bne	r2,zero,9574c <___svfiprintf_internal_r+0x1014>
   94fd0:	8080100c 	andi	r2,r16,64
   94fd4:	10023d26 	beq	r2,zero,958cc <___svfiprintf_internal_r+0x1194>
   94fd8:	d8802417 	ldw	r2,144(sp)
   94fdc:	1480000f 	ldh	r18,0(r2)
   94fe0:	10800104 	addi	r2,r2,4
   94fe4:	d8802415 	stw	r2,144(sp)
   94fe8:	9029d7fa 	srai	r20,r18,31
   94fec:	a005883a 	mov	r2,r20
   94ff0:	103fb60e 	bge	r2,zero,94ecc <__ram_exceptions_end+0xfff74c98>
   94ff4:	d9402017 	ldw	r5,128(sp)
   94ff8:	04a5c83a 	sub	r18,zero,r18
   94ffc:	05400b44 	movi	r21,45
   95000:	9004c03a 	cmpne	r2,r18,zero
   95004:	0529c83a 	sub	r20,zero,r20
   95008:	dd401d85 	stb	r21,118(sp)
   9500c:	a0a9c83a 	sub	r20,r20,r2
   95010:	28026c16 	blt	r5,zero,959c4 <___svfiprintf_internal_r+0x128c>
   95014:	00bfdfc4 	movi	r2,-129
   95018:	80a0703a 	and	r16,r16,r2
   9501c:	a03fb31e 	bne	r20,zero,94eec <__ram_exceptions_end+0xfff74cb8>
   95020:	00004606 	br	9513c <___svfiprintf_internal_r+0xa04>
   95024:	9839883a 	mov	fp,r19
   95028:	d8002515 	stw	zero,148(sp)
   9502c:	1c3ff404 	addi	r16,r3,-48
   95030:	0009883a 	mov	r4,zero
   95034:	01400284 	movi	r5,10
   95038:	00822140 	call	82214 <__mulsi3>
   9503c:	e0c00007 	ldb	r3,0(fp)
   95040:	8089883a 	add	r4,r16,r2
   95044:	9cc00044 	addi	r19,r19,1
   95048:	1c3ff404 	addi	r16,r3,-48
   9504c:	9839883a 	mov	fp,r19
   95050:	a43ff82e 	bgeu	r20,r16,95034 <__ram_exceptions_end+0xfff74e00>
   95054:	d9002515 	stw	r4,148(sp)
   95058:	18bff804 	addi	r2,r3,-32
   9505c:	90be052e 	bgeu	r18,r2,94874 <__ram_exceptions_end+0xfff74640>
   95060:	8821883a 	mov	r16,r17
   95064:	dc402103 	ldbu	r17,132(sp)
   95068:	b811883a 	mov	r8,r23
   9506c:	8c403fcc 	andi	r17,r17,255
   95070:	88028d1e 	bne	r17,zero,95aa8 <___svfiprintf_internal_r+0x1370>
   95074:	1800ea26 	beq	r3,zero,95420 <___svfiprintf_internal_r+0xce8>
   95078:	04800044 	movi	r18,1
   9507c:	d8c01005 	stb	r3,64(sp)
   95080:	d8001d85 	stb	zero,118(sp)
   95084:	9029883a 	mov	r20,r18
   95088:	dc401004 	addi	r17,sp,64
   9508c:	003f1306 	br	94cdc <__ram_exceptions_end+0xfff74aa8>
   95090:	8c402014 	ori	r17,r17,128
   95094:	98c00007 	ldb	r3,0(r19)
   95098:	003df306 	br	94868 <__ram_exceptions_end+0xfff74634>
   9509c:	98c00007 	ldb	r3,0(r19)
   950a0:	01000a84 	movi	r4,42
   950a4:	9f000044 	addi	fp,r19,1
   950a8:	19026326 	beq	r3,r4,95a38 <___svfiprintf_internal_r+0x1300>
   950ac:	1c3ff404 	addi	r16,r3,-48
   950b0:	0009883a 	mov	r4,zero
   950b4:	a4025636 	bltu	r20,r16,95a10 <___svfiprintf_internal_r+0x12d8>
   950b8:	01400284 	movi	r5,10
   950bc:	00822140 	call	82214 <__mulsi3>
   950c0:	e0c00007 	ldb	r3,0(fp)
   950c4:	1409883a 	add	r4,r2,r16
   950c8:	e4c00044 	addi	r19,fp,1
   950cc:	1c3ff404 	addi	r16,r3,-48
   950d0:	9839883a 	mov	fp,r19
   950d4:	a43ff82e 	bgeu	r20,r16,950b8 <__ram_exceptions_end+0xfff74e84>
   950d8:	20020c16 	blt	r4,zero,9590c <___svfiprintf_internal_r+0x11d4>
   950dc:	d9002015 	stw	r4,128(sp)
   950e0:	003de206 	br	9486c <__ram_exceptions_end+0xfff74638>
   950e4:	8821883a 	mov	r16,r17
   950e8:	dc402103 	ldbu	r17,132(sp)
   950ec:	b811883a 	mov	r8,r23
   950f0:	8c403fcc 	andi	r17,r17,255
   950f4:	8802721e 	bne	r17,zero,95ac0 <___svfiprintf_internal_r+0x1388>
   950f8:	84000414 	ori	r16,r16,16
   950fc:	8080080c 	andi	r2,r16,32
   95100:	103e9f1e 	bne	r2,zero,94b80 <__ram_exceptions_end+0xfff7494c>
   95104:	8080040c 	andi	r2,r16,16
   95108:	10015326 	beq	r2,zero,95658 <___svfiprintf_internal_r+0xf20>
   9510c:	d8c02417 	ldw	r3,144(sp)
   95110:	d9002017 	ldw	r4,128(sp)
   95114:	d8001d85 	stb	zero,118(sp)
   95118:	18800104 	addi	r2,r3,4
   9511c:	1c800017 	ldw	r18,0(r3)
   95120:	0029883a 	mov	r20,zero
   95124:	20015516 	blt	r4,zero,9567c <___svfiprintf_internal_r+0xf44>
   95128:	00ffdfc4 	movi	r3,-129
   9512c:	d8802415 	stw	r2,144(sp)
   95130:	80e0703a 	and	r16,r16,r3
   95134:	002b883a 	mov	r21,zero
   95138:	903e9e26 	beq	r18,zero,94bb4 <__ram_exceptions_end+0xfff74980>
   9513c:	00800244 	movi	r2,9
   95140:	14bf6a36 	bltu	r2,r18,94eec <__ram_exceptions_end+0xfff74cb8>
   95144:	94800c04 	addi	r18,r18,48
   95148:	dc8019c5 	stb	r18,103(sp)
   9514c:	dd002c17 	ldw	r20,176(sp)
   95150:	dc4019c4 	addi	r17,sp,103
   95154:	003e9c06 	br	94bc8 <__ram_exceptions_end+0xfff74994>
   95158:	8821883a 	mov	r16,r17
   9515c:	dc402103 	ldbu	r17,132(sp)
   95160:	b811883a 	mov	r8,r23
   95164:	8c403fcc 	andi	r17,r17,255
   95168:	8802571e 	bne	r17,zero,95ac8 <___svfiprintf_internal_r+0x1390>
   9516c:	84000414 	ori	r16,r16,16
   95170:	8080080c 	andi	r2,r16,32
   95174:	103ea91e 	bne	r2,zero,94c1c <__ram_exceptions_end+0xfff749e8>
   95178:	8080040c 	andi	r2,r16,16
   9517c:	10018026 	beq	r2,zero,95780 <___svfiprintf_internal_r+0x1048>
   95180:	d9402417 	ldw	r5,144(sp)
   95184:	d8c02017 	ldw	r3,128(sp)
   95188:	d8001d85 	stb	zero,118(sp)
   9518c:	28800104 	addi	r2,r5,4
   95190:	2c800017 	ldw	r18,0(r5)
   95194:	0029883a 	mov	r20,zero
   95198:	18018216 	blt	r3,zero,957a4 <___svfiprintf_internal_r+0x106c>
   9519c:	00ffdfc4 	movi	r3,-129
   951a0:	d8802415 	stw	r2,144(sp)
   951a4:	80e0703a 	and	r16,r16,r3
   951a8:	903ea81e 	bne	r18,zero,94c4c <__ram_exceptions_end+0xfff74a18>
   951ac:	d8802017 	ldw	r2,128(sp)
   951b0:	002b883a 	mov	r21,zero
   951b4:	1001f226 	beq	r2,zero,95980 <___svfiprintf_internal_r+0x1248>
   951b8:	0025883a 	mov	r18,zero
   951bc:	0029883a 	mov	r20,zero
   951c0:	003ea306 	br	94c50 <__ram_exceptions_end+0xfff74a1c>
   951c4:	d8c01c17 	ldw	r3,112(sp)
   951c8:	d8801b17 	ldw	r2,108(sp)
   951cc:	d9001d87 	ldb	r4,118(sp)
   951d0:	20000b26 	beq	r4,zero,95200 <___svfiprintf_internal_r+0xac8>
   951d4:	d9001d84 	addi	r4,sp,118
   951d8:	18c00044 	addi	r3,r3,1
   951dc:	10800044 	addi	r2,r2,1
   951e0:	41000015 	stw	r4,0(r8)
   951e4:	01000044 	movi	r4,1
   951e8:	41000115 	stw	r4,4(r8)
   951ec:	d8c01c15 	stw	r3,112(sp)
   951f0:	d8801b15 	stw	r2,108(sp)
   951f4:	010001c4 	movi	r4,7
   951f8:	2080f316 	blt	r4,r2,955c8 <___svfiprintf_internal_r+0xe90>
   951fc:	42000204 	addi	r8,r8,8
   95200:	d9402117 	ldw	r5,132(sp)
   95204:	28000b26 	beq	r5,zero,95234 <___svfiprintf_internal_r+0xafc>
   95208:	d9001d04 	addi	r4,sp,116
   9520c:	18c00084 	addi	r3,r3,2
   95210:	10800044 	addi	r2,r2,1
   95214:	41000015 	stw	r4,0(r8)
   95218:	01000084 	movi	r4,2
   9521c:	41000115 	stw	r4,4(r8)
   95220:	d8c01c15 	stw	r3,112(sp)
   95224:	d8801b15 	stw	r2,108(sp)
   95228:	010001c4 	movi	r4,7
   9522c:	2080ef16 	blt	r4,r2,955ec <___svfiprintf_internal_r+0xeb4>
   95230:	42000204 	addi	r8,r8,8
   95234:	d9402217 	ldw	r5,136(sp)
   95238:	01002004 	movi	r4,128
   9523c:	29008f26 	beq	r5,r4,9547c <___svfiprintf_internal_r+0xd44>
   95240:	d9002017 	ldw	r4,128(sp)
   95244:	252fc83a 	sub	r23,r4,r20
   95248:	05c0310e 	bge	zero,r23,95310 <___svfiprintf_internal_r+0xbd8>
   9524c:	07000404 	movi	fp,16
   95250:	e5c17d0e 	bge	fp,r23,95848 <___svfiprintf_internal_r+0x1110>
   95254:	010002b4 	movhi	r4,10
   95258:	2139ef84 	addi	r4,r4,-6210
   9525c:	dc002015 	stw	r16,128(sp)
   95260:	dc402215 	stw	r17,136(sp)
   95264:	d9002115 	stw	r4,132(sp)
   95268:	b823883a 	mov	r17,r23
   9526c:	054001c4 	movi	r21,7
   95270:	982f883a 	mov	r23,r19
   95274:	dc002717 	ldw	r16,156(sp)
   95278:	9027883a 	mov	r19,r18
   9527c:	dc802317 	ldw	r18,140(sp)
   95280:	00000306 	br	95290 <___svfiprintf_internal_r+0xb58>
   95284:	8c7ffc04 	addi	r17,r17,-16
   95288:	42000204 	addi	r8,r8,8
   9528c:	e440110e 	bge	fp,r17,952d4 <___svfiprintf_internal_r+0xb9c>
   95290:	18c00404 	addi	r3,r3,16
   95294:	10800044 	addi	r2,r2,1
   95298:	45800015 	stw	r22,0(r8)
   9529c:	47000115 	stw	fp,4(r8)
   952a0:	d8c01c15 	stw	r3,112(sp)
   952a4:	d8801b15 	stw	r2,108(sp)
   952a8:	a8bff60e 	bge	r21,r2,95284 <__ram_exceptions_end+0xfff75050>
   952ac:	d9801a04 	addi	r6,sp,104
   952b0:	900b883a 	mov	r5,r18
   952b4:	8009883a 	mov	r4,r16
   952b8:	00945680 	call	94568 <__ssprint_r>
   952bc:	10005e1e 	bne	r2,zero,95438 <___svfiprintf_internal_r+0xd00>
   952c0:	8c7ffc04 	addi	r17,r17,-16
   952c4:	d8c01c17 	ldw	r3,112(sp)
   952c8:	d8801b17 	ldw	r2,108(sp)
   952cc:	d811883a 	mov	r8,sp
   952d0:	e47fef16 	blt	fp,r17,95290 <__ram_exceptions_end+0xfff7505c>
   952d4:	9825883a 	mov	r18,r19
   952d8:	dc002017 	ldw	r16,128(sp)
   952dc:	b827883a 	mov	r19,r23
   952e0:	882f883a 	mov	r23,r17
   952e4:	dc402217 	ldw	r17,136(sp)
   952e8:	d9402117 	ldw	r5,132(sp)
   952ec:	1dc7883a 	add	r3,r3,r23
   952f0:	10800044 	addi	r2,r2,1
   952f4:	41400015 	stw	r5,0(r8)
   952f8:	45c00115 	stw	r23,4(r8)
   952fc:	d8c01c15 	stw	r3,112(sp)
   95300:	d8801b15 	stw	r2,108(sp)
   95304:	010001c4 	movi	r4,7
   95308:	2080a616 	blt	r4,r2,955a4 <___svfiprintf_internal_r+0xe6c>
   9530c:	42000204 	addi	r8,r8,8
   95310:	a0c7883a 	add	r3,r20,r3
   95314:	10800044 	addi	r2,r2,1
   95318:	44400015 	stw	r17,0(r8)
   9531c:	45000115 	stw	r20,4(r8)
   95320:	d8c01c15 	stw	r3,112(sp)
   95324:	d8801b15 	stw	r2,108(sp)
   95328:	010001c4 	movi	r4,7
   9532c:	20808816 	blt	r4,r2,95550 <___svfiprintf_internal_r+0xe18>
   95330:	42000204 	addi	r8,r8,8
   95334:	8400010c 	andi	r16,r16,4
   95338:	80002c26 	beq	r16,zero,953ec <___svfiprintf_internal_r+0xcb4>
   9533c:	d8802517 	ldw	r2,148(sp)
   95340:	14a1c83a 	sub	r16,r2,r18
   95344:	0400290e 	bge	zero,r16,953ec <___svfiprintf_internal_r+0xcb4>
   95348:	04400404 	movi	r17,16
   9534c:	d8801b17 	ldw	r2,108(sp)
   95350:	8c01a70e 	bge	r17,r16,959f0 <___svfiprintf_internal_r+0x12b8>
   95354:	014002b4 	movhi	r5,10
   95358:	2979f384 	addi	r5,r5,-6194
   9535c:	d9402815 	stw	r5,160(sp)
   95360:	050001c4 	movi	r20,7
   95364:	dd402717 	ldw	r21,156(sp)
   95368:	ddc02317 	ldw	r23,140(sp)
   9536c:	00000306 	br	9537c <___svfiprintf_internal_r+0xc44>
   95370:	843ffc04 	addi	r16,r16,-16
   95374:	42000204 	addi	r8,r8,8
   95378:	8c00130e 	bge	r17,r16,953c8 <___svfiprintf_internal_r+0xc90>
   9537c:	010002b4 	movhi	r4,10
   95380:	18c00404 	addi	r3,r3,16
   95384:	10800044 	addi	r2,r2,1
   95388:	2139f384 	addi	r4,r4,-6194
   9538c:	41000015 	stw	r4,0(r8)
   95390:	44400115 	stw	r17,4(r8)
   95394:	d8c01c15 	stw	r3,112(sp)
   95398:	d8801b15 	stw	r2,108(sp)
   9539c:	a0bff40e 	bge	r20,r2,95370 <__ram_exceptions_end+0xfff7513c>
   953a0:	d9801a04 	addi	r6,sp,104
   953a4:	b80b883a 	mov	r5,r23
   953a8:	a809883a 	mov	r4,r21
   953ac:	00945680 	call	94568 <__ssprint_r>
   953b0:	1000211e 	bne	r2,zero,95438 <___svfiprintf_internal_r+0xd00>
   953b4:	843ffc04 	addi	r16,r16,-16
   953b8:	d8c01c17 	ldw	r3,112(sp)
   953bc:	d8801b17 	ldw	r2,108(sp)
   953c0:	d811883a 	mov	r8,sp
   953c4:	8c3fed16 	blt	r17,r16,9537c <__ram_exceptions_end+0xfff75148>
   953c8:	d9402817 	ldw	r5,160(sp)
   953cc:	1c07883a 	add	r3,r3,r16
   953d0:	10800044 	addi	r2,r2,1
   953d4:	41400015 	stw	r5,0(r8)
   953d8:	44000115 	stw	r16,4(r8)
   953dc:	d8c01c15 	stw	r3,112(sp)
   953e0:	d8801b15 	stw	r2,108(sp)
   953e4:	010001c4 	movi	r4,7
   953e8:	2080b516 	blt	r4,r2,956c0 <___svfiprintf_internal_r+0xf88>
   953ec:	d8802517 	ldw	r2,148(sp)
   953f0:	1480010e 	bge	r2,r18,953f8 <___svfiprintf_internal_r+0xcc0>
   953f4:	9005883a 	mov	r2,r18
   953f8:	d9002617 	ldw	r4,152(sp)
   953fc:	2089883a 	add	r4,r4,r2
   95400:	d9002615 	stw	r4,152(sp)
   95404:	18005a1e 	bne	r3,zero,95570 <___svfiprintf_internal_r+0xe38>
   95408:	98800007 	ldb	r2,0(r19)
   9540c:	d8001b15 	stw	zero,108(sp)
   95410:	d811883a 	mov	r8,sp
   95414:	103cec1e 	bne	r2,zero,947c8 <__ram_exceptions_end+0xfff74594>
   95418:	9825883a 	mov	r18,r19
   9541c:	003d0206 	br	94828 <__ram_exceptions_end+0xfff745f4>
   95420:	d8801c17 	ldw	r2,112(sp)
   95424:	10000426 	beq	r2,zero,95438 <___svfiprintf_internal_r+0xd00>
   95428:	d9402317 	ldw	r5,140(sp)
   9542c:	d9002717 	ldw	r4,156(sp)
   95430:	d9801a04 	addi	r6,sp,104
   95434:	00945680 	call	94568 <__ssprint_r>
   95438:	d9402317 	ldw	r5,140(sp)
   9543c:	d8802617 	ldw	r2,152(sp)
   95440:	28c0030b 	ldhu	r3,12(r5)
   95444:	18c0100c 	andi	r3,r3,64
   95448:	18015c1e 	bne	r3,zero,959bc <___svfiprintf_internal_r+0x1284>
   9544c:	dfc03717 	ldw	ra,220(sp)
   95450:	df003617 	ldw	fp,216(sp)
   95454:	ddc03517 	ldw	r23,212(sp)
   95458:	dd803417 	ldw	r22,208(sp)
   9545c:	dd403317 	ldw	r21,204(sp)
   95460:	dd003217 	ldw	r20,200(sp)
   95464:	dcc03117 	ldw	r19,196(sp)
   95468:	dc803017 	ldw	r18,192(sp)
   9546c:	dc402f17 	ldw	r17,188(sp)
   95470:	dc002e17 	ldw	r16,184(sp)
   95474:	dec03804 	addi	sp,sp,224
   95478:	f800283a 	ret
   9547c:	d9002517 	ldw	r4,148(sp)
   95480:	24afc83a 	sub	r23,r4,r18
   95484:	05ff6e0e 	bge	zero,r23,95240 <__ram_exceptions_end+0xfff7500c>
   95488:	07000404 	movi	fp,16
   9548c:	e5c15c0e 	bge	fp,r23,95a00 <___svfiprintf_internal_r+0x12c8>
   95490:	010002b4 	movhi	r4,10
   95494:	2139ef84 	addi	r4,r4,-6210
   95498:	dc002215 	stw	r16,136(sp)
   9549c:	dc402815 	stw	r17,160(sp)
   954a0:	d9002115 	stw	r4,132(sp)
   954a4:	b823883a 	mov	r17,r23
   954a8:	054001c4 	movi	r21,7
   954ac:	982f883a 	mov	r23,r19
   954b0:	dc002717 	ldw	r16,156(sp)
   954b4:	9027883a 	mov	r19,r18
   954b8:	dc802317 	ldw	r18,140(sp)
   954bc:	00000306 	br	954cc <___svfiprintf_internal_r+0xd94>
   954c0:	8c7ffc04 	addi	r17,r17,-16
   954c4:	42000204 	addi	r8,r8,8
   954c8:	e440110e 	bge	fp,r17,95510 <___svfiprintf_internal_r+0xdd8>
   954cc:	18c00404 	addi	r3,r3,16
   954d0:	10800044 	addi	r2,r2,1
   954d4:	45800015 	stw	r22,0(r8)
   954d8:	47000115 	stw	fp,4(r8)
   954dc:	d8c01c15 	stw	r3,112(sp)
   954e0:	d8801b15 	stw	r2,108(sp)
   954e4:	a8bff60e 	bge	r21,r2,954c0 <__ram_exceptions_end+0xfff7528c>
   954e8:	d9801a04 	addi	r6,sp,104
   954ec:	900b883a 	mov	r5,r18
   954f0:	8009883a 	mov	r4,r16
   954f4:	00945680 	call	94568 <__ssprint_r>
   954f8:	103fcf1e 	bne	r2,zero,95438 <__ram_exceptions_end+0xfff75204>
   954fc:	8c7ffc04 	addi	r17,r17,-16
   95500:	d8c01c17 	ldw	r3,112(sp)
   95504:	d8801b17 	ldw	r2,108(sp)
   95508:	d811883a 	mov	r8,sp
   9550c:	e47fef16 	blt	fp,r17,954cc <__ram_exceptions_end+0xfff75298>
   95510:	9825883a 	mov	r18,r19
   95514:	dc002217 	ldw	r16,136(sp)
   95518:	b827883a 	mov	r19,r23
   9551c:	882f883a 	mov	r23,r17
   95520:	dc402817 	ldw	r17,160(sp)
   95524:	d9402117 	ldw	r5,132(sp)
   95528:	1dc7883a 	add	r3,r3,r23
   9552c:	10800044 	addi	r2,r2,1
   95530:	41400015 	stw	r5,0(r8)
   95534:	45c00115 	stw	r23,4(r8)
   95538:	d8c01c15 	stw	r3,112(sp)
   9553c:	d8801b15 	stw	r2,108(sp)
   95540:	010001c4 	movi	r4,7
   95544:	2080b716 	blt	r4,r2,95824 <___svfiprintf_internal_r+0x10ec>
   95548:	42000204 	addi	r8,r8,8
   9554c:	003f3c06 	br	95240 <__ram_exceptions_end+0xfff7500c>
   95550:	d9402317 	ldw	r5,140(sp)
   95554:	d9002717 	ldw	r4,156(sp)
   95558:	d9801a04 	addi	r6,sp,104
   9555c:	00945680 	call	94568 <__ssprint_r>
   95560:	103fb51e 	bne	r2,zero,95438 <__ram_exceptions_end+0xfff75204>
   95564:	d8c01c17 	ldw	r3,112(sp)
   95568:	d811883a 	mov	r8,sp
   9556c:	003f7106 	br	95334 <__ram_exceptions_end+0xfff75100>
   95570:	d9402317 	ldw	r5,140(sp)
   95574:	d9002717 	ldw	r4,156(sp)
   95578:	d9801a04 	addi	r6,sp,104
   9557c:	00945680 	call	94568 <__ssprint_r>
   95580:	103fa126 	beq	r2,zero,95408 <__ram_exceptions_end+0xfff751d4>
   95584:	003fac06 	br	95438 <__ram_exceptions_end+0xfff75204>
   95588:	d9402317 	ldw	r5,140(sp)
   9558c:	d9002717 	ldw	r4,156(sp)
   95590:	d9801a04 	addi	r6,sp,104
   95594:	00945680 	call	94568 <__ssprint_r>
   95598:	103fa71e 	bne	r2,zero,95438 <__ram_exceptions_end+0xfff75204>
   9559c:	d811883a 	mov	r8,sp
   955a0:	003c9e06 	br	9481c <__ram_exceptions_end+0xfff745e8>
   955a4:	d9402317 	ldw	r5,140(sp)
   955a8:	d9002717 	ldw	r4,156(sp)
   955ac:	d9801a04 	addi	r6,sp,104
   955b0:	00945680 	call	94568 <__ssprint_r>
   955b4:	103fa01e 	bne	r2,zero,95438 <__ram_exceptions_end+0xfff75204>
   955b8:	d8c01c17 	ldw	r3,112(sp)
   955bc:	d8801b17 	ldw	r2,108(sp)
   955c0:	d811883a 	mov	r8,sp
   955c4:	003f5206 	br	95310 <__ram_exceptions_end+0xfff750dc>
   955c8:	d9402317 	ldw	r5,140(sp)
   955cc:	d9002717 	ldw	r4,156(sp)
   955d0:	d9801a04 	addi	r6,sp,104
   955d4:	00945680 	call	94568 <__ssprint_r>
   955d8:	103f971e 	bne	r2,zero,95438 <__ram_exceptions_end+0xfff75204>
   955dc:	d8c01c17 	ldw	r3,112(sp)
   955e0:	d8801b17 	ldw	r2,108(sp)
   955e4:	d811883a 	mov	r8,sp
   955e8:	003f0506 	br	95200 <__ram_exceptions_end+0xfff74fcc>
   955ec:	d9402317 	ldw	r5,140(sp)
   955f0:	d9002717 	ldw	r4,156(sp)
   955f4:	d9801a04 	addi	r6,sp,104
   955f8:	00945680 	call	94568 <__ssprint_r>
   955fc:	103f8e1e 	bne	r2,zero,95438 <__ram_exceptions_end+0xfff75204>
   95600:	d8c01c17 	ldw	r3,112(sp)
   95604:	d8801b17 	ldw	r2,108(sp)
   95608:	d811883a 	mov	r8,sp
   9560c:	003f0906 	br	95234 <__ram_exceptions_end+0xfff75000>
   95610:	d9402017 	ldw	r5,128(sp)
   95614:	d8001d85 	stb	zero,118(sp)
   95618:	28007716 	blt	r5,zero,957f8 <___svfiprintf_internal_r+0x10c0>
   9561c:	00ffdfc4 	movi	r3,-129
   95620:	9504b03a 	or	r2,r18,r20
   95624:	80e0703a 	and	r16,r16,r3
   95628:	103d3926 	beq	r2,zero,94b10 <__ram_exceptions_end+0xfff748dc>
   9562c:	002b883a 	mov	r21,zero
   95630:	003d3c06 	br	94b24 <__ram_exceptions_end+0xfff748f0>
   95634:	d9402317 	ldw	r5,140(sp)
   95638:	d9002717 	ldw	r4,156(sp)
   9563c:	d9801a04 	addi	r6,sp,104
   95640:	00945680 	call	94568 <__ssprint_r>
   95644:	103f7c1e 	bne	r2,zero,95438 <__ram_exceptions_end+0xfff75204>
   95648:	d8c01c17 	ldw	r3,112(sp)
   9564c:	d8801b17 	ldw	r2,108(sp)
   95650:	d811883a 	mov	r8,sp
   95654:	003edd06 	br	951cc <__ram_exceptions_end+0xfff74f98>
   95658:	8080100c 	andi	r2,r16,64
   9565c:	d8001d85 	stb	zero,118(sp)
   95660:	10008426 	beq	r2,zero,95874 <___svfiprintf_internal_r+0x113c>
   95664:	d9402417 	ldw	r5,144(sp)
   95668:	d8c02017 	ldw	r3,128(sp)
   9566c:	0029883a 	mov	r20,zero
   95670:	28800104 	addi	r2,r5,4
   95674:	2c80000b 	ldhu	r18,0(r5)
   95678:	183eab0e 	bge	r3,zero,95128 <__ram_exceptions_end+0xfff74ef4>
   9567c:	d8802415 	stw	r2,144(sp)
   95680:	002b883a 	mov	r21,zero
   95684:	9504b03a 	or	r2,r18,r20
   95688:	103e171e 	bne	r2,zero,94ee8 <__ram_exceptions_end+0xfff74cb4>
   9568c:	00800044 	movi	r2,1
   95690:	10803fcc 	andi	r2,r2,255
   95694:	00c00044 	movi	r3,1
   95698:	10c05c26 	beq	r2,r3,9580c <___svfiprintf_internal_r+0x10d4>
   9569c:	00c00084 	movi	r3,2
   956a0:	10fd1e26 	beq	r2,r3,94b1c <__ram_exceptions_end+0xfff748e8>
   956a4:	003ec406 	br	951b8 <__ram_exceptions_end+0xfff74f84>
   956a8:	d9401e17 	ldw	r5,120(sp)
   956ac:	2c69c83a 	sub	r20,r5,r17
   956b0:	003d4506 	br	94bc8 <__ram_exceptions_end+0xfff74994>
   956b4:	d8802415 	stw	r2,144(sp)
   956b8:	98c00007 	ldb	r3,0(r19)
   956bc:	003c6a06 	br	94868 <__ram_exceptions_end+0xfff74634>
   956c0:	d9402317 	ldw	r5,140(sp)
   956c4:	d9002717 	ldw	r4,156(sp)
   956c8:	d9801a04 	addi	r6,sp,104
   956cc:	00945680 	call	94568 <__ssprint_r>
   956d0:	103f591e 	bne	r2,zero,95438 <__ram_exceptions_end+0xfff75204>
   956d4:	d8c01c17 	ldw	r3,112(sp)
   956d8:	003f4406 	br	953ec <__ram_exceptions_end+0xfff751b8>
   956dc:	014002b4 	movhi	r5,10
   956e0:	29787f04 	addi	r5,r5,-7684
   956e4:	d9402915 	stw	r5,164(sp)
   956e8:	003d0906 	br	94b10 <__ram_exceptions_end+0xfff748dc>
   956ec:	d8c02417 	ldw	r3,144(sp)
   956f0:	d9002617 	ldw	r4,152(sp)
   956f4:	d9402417 	ldw	r5,144(sp)
   956f8:	18800017 	ldw	r2,0(r3)
   956fc:	2007d7fa 	srai	r3,r4,31
   95700:	29400104 	addi	r5,r5,4
   95704:	d9402415 	stw	r5,144(sp)
   95708:	11000015 	stw	r4,0(r2)
   9570c:	10c00115 	stw	r3,4(r2)
   95710:	003c2b06 	br	947c0 <__ram_exceptions_end+0xfff7458c>
   95714:	d8c01d45 	stb	r3,117(sp)
   95718:	d8c02017 	ldw	r3,128(sp)
   9571c:	00800c04 	movi	r2,48
   95720:	d8801d05 	stb	r2,116(sp)
   95724:	d8001d85 	stb	zero,118(sp)
   95728:	80800094 	ori	r2,r16,2
   9572c:	1800ac16 	blt	r3,zero,959e0 <___svfiprintf_internal_r+0x12a8>
   95730:	00bfdfc4 	movi	r2,-129
   95734:	80a0703a 	and	r16,r16,r2
   95738:	84000094 	ori	r16,r16,2
   9573c:	002b883a 	mov	r21,zero
   95740:	003cf806 	br	94b24 <__ram_exceptions_end+0xfff748f0>
   95744:	98c00007 	ldb	r3,0(r19)
   95748:	003c4706 	br	94868 <__ram_exceptions_end+0xfff74634>
   9574c:	d9402417 	ldw	r5,144(sp)
   95750:	2c800017 	ldw	r18,0(r5)
   95754:	29400104 	addi	r5,r5,4
   95758:	d9402415 	stw	r5,144(sp)
   9575c:	9029d7fa 	srai	r20,r18,31
   95760:	a005883a 	mov	r2,r20
   95764:	003dd806 	br	94ec8 <__ram_exceptions_end+0xfff74c94>
   95768:	d9402417 	ldw	r5,144(sp)
   9576c:	0029883a 	mov	r20,zero
   95770:	2c800017 	ldw	r18,0(r5)
   95774:	29400104 	addi	r5,r5,4
   95778:	d9402415 	stw	r5,144(sp)
   9577c:	003cdb06 	br	94aec <__ram_exceptions_end+0xfff748b8>
   95780:	8080100c 	andi	r2,r16,64
   95784:	d8001d85 	stb	zero,118(sp)
   95788:	10003326 	beq	r2,zero,95858 <___svfiprintf_internal_r+0x1120>
   9578c:	d9002417 	ldw	r4,144(sp)
   95790:	d9402017 	ldw	r5,128(sp)
   95794:	0029883a 	mov	r20,zero
   95798:	20800104 	addi	r2,r4,4
   9579c:	2480000b 	ldhu	r18,0(r4)
   957a0:	283e7e0e 	bge	r5,zero,9519c <__ram_exceptions_end+0xfff74f68>
   957a4:	9506b03a 	or	r3,r18,r20
   957a8:	d8802415 	stw	r2,144(sp)
   957ac:	183d271e 	bne	r3,zero,94c4c <__ram_exceptions_end+0xfff74a18>
   957b0:	002b883a 	mov	r21,zero
   957b4:	0005883a 	mov	r2,zero
   957b8:	003fb506 	br	95690 <__ram_exceptions_end+0xfff7545c>
   957bc:	98c00043 	ldbu	r3,1(r19)
   957c0:	8c400814 	ori	r17,r17,32
   957c4:	9cc00044 	addi	r19,r19,1
   957c8:	18c03fcc 	andi	r3,r3,255
   957cc:	18c0201c 	xori	r3,r3,128
   957d0:	18ffe004 	addi	r3,r3,-128
   957d4:	003c2406 	br	94868 <__ram_exceptions_end+0xfff74634>
   957d8:	d8c02415 	stw	r3,144(sp)
   957dc:	002b883a 	mov	r21,zero
   957e0:	003fa806 	br	95684 <__ram_exceptions_end+0xfff75450>
   957e4:	010002b4 	movhi	r4,10
   957e8:	21387f04 	addi	r4,r4,-7684
   957ec:	d9002915 	stw	r4,164(sp)
   957f0:	d8c02415 	stw	r3,144(sp)
   957f4:	1021883a 	mov	r16,r2
   957f8:	9504b03a 	or	r2,r18,r20
   957fc:	103f8b1e 	bne	r2,zero,9562c <__ram_exceptions_end+0xfff753f8>
   95800:	002b883a 	mov	r21,zero
   95804:	00800084 	movi	r2,2
   95808:	003fa106 	br	95690 <__ram_exceptions_end+0xfff7545c>
   9580c:	0025883a 	mov	r18,zero
   95810:	94800c04 	addi	r18,r18,48
   95814:	dc8019c5 	stb	r18,103(sp)
   95818:	dd002c17 	ldw	r20,176(sp)
   9581c:	dc4019c4 	addi	r17,sp,103
   95820:	003ce906 	br	94bc8 <__ram_exceptions_end+0xfff74994>
   95824:	d9402317 	ldw	r5,140(sp)
   95828:	d9002717 	ldw	r4,156(sp)
   9582c:	d9801a04 	addi	r6,sp,104
   95830:	00945680 	call	94568 <__ssprint_r>
   95834:	103f001e 	bne	r2,zero,95438 <__ram_exceptions_end+0xfff75204>
   95838:	d8c01c17 	ldw	r3,112(sp)
   9583c:	d8801b17 	ldw	r2,108(sp)
   95840:	d811883a 	mov	r8,sp
   95844:	003e7e06 	br	95240 <__ram_exceptions_end+0xfff7500c>
   95848:	014002b4 	movhi	r5,10
   9584c:	2979ef84 	addi	r5,r5,-6210
   95850:	d9402115 	stw	r5,132(sp)
   95854:	003ea406 	br	952e8 <__ram_exceptions_end+0xfff750b4>
   95858:	d8c02417 	ldw	r3,144(sp)
   9585c:	d9002017 	ldw	r4,128(sp)
   95860:	0029883a 	mov	r20,zero
   95864:	18800104 	addi	r2,r3,4
   95868:	1c800017 	ldw	r18,0(r3)
   9586c:	203e4b0e 	bge	r4,zero,9519c <__ram_exceptions_end+0xfff74f68>
   95870:	003fcc06 	br	957a4 <__ram_exceptions_end+0xfff75570>
   95874:	d9002417 	ldw	r4,144(sp)
   95878:	d9402017 	ldw	r5,128(sp)
   9587c:	0029883a 	mov	r20,zero
   95880:	20800104 	addi	r2,r4,4
   95884:	24800017 	ldw	r18,0(r4)
   95888:	283e270e 	bge	r5,zero,95128 <__ram_exceptions_end+0xfff74ef4>
   9588c:	003f7b06 	br	9567c <__ram_exceptions_end+0xfff75448>
   95890:	8400100c 	andi	r16,r16,64
   95894:	80003326 	beq	r16,zero,95964 <___svfiprintf_internal_r+0x122c>
   95898:	d9402417 	ldw	r5,144(sp)
   9589c:	d8c02617 	ldw	r3,152(sp)
   958a0:	28800017 	ldw	r2,0(r5)
   958a4:	29400104 	addi	r5,r5,4
   958a8:	d9402415 	stw	r5,144(sp)
   958ac:	10c0000d 	sth	r3,0(r2)
   958b0:	003bc306 	br	947c0 <__ram_exceptions_end+0xfff7458c>
   958b4:	d9002417 	ldw	r4,144(sp)
   958b8:	0029883a 	mov	r20,zero
   958bc:	24800017 	ldw	r18,0(r4)
   958c0:	21000104 	addi	r4,r4,4
   958c4:	d9002415 	stw	r4,144(sp)
   958c8:	003c8806 	br	94aec <__ram_exceptions_end+0xfff748b8>
   958cc:	d8c02417 	ldw	r3,144(sp)
   958d0:	1c800017 	ldw	r18,0(r3)
   958d4:	18c00104 	addi	r3,r3,4
   958d8:	d8c02415 	stw	r3,144(sp)
   958dc:	9029d7fa 	srai	r20,r18,31
   958e0:	a005883a 	mov	r2,r20
   958e4:	003d7806 	br	94ec8 <__ram_exceptions_end+0xfff74c94>
   958e8:	8809883a 	mov	r4,r17
   958ec:	da002d15 	stw	r8,180(sp)
   958f0:	00831980 	call	83198 <strlen>
   958f4:	1029883a 	mov	r20,r2
   958f8:	dd401d83 	ldbu	r21,118(sp)
   958fc:	ddc02415 	stw	r23,144(sp)
   95900:	d8002015 	stw	zero,128(sp)
   95904:	da002d17 	ldw	r8,180(sp)
   95908:	003caf06 	br	94bc8 <__ram_exceptions_end+0xfff74994>
   9590c:	013fffc4 	movi	r4,-1
   95910:	003df206 	br	950dc <__ram_exceptions_end+0xfff74ea8>
   95914:	dd002017 	ldw	r20,128(sp)
   95918:	00800184 	movi	r2,6
   9591c:	1500012e 	bgeu	r2,r20,95924 <___svfiprintf_internal_r+0x11ec>
   95920:	1029883a 	mov	r20,r2
   95924:	a025883a 	mov	r18,r20
   95928:	a0004116 	blt	r20,zero,95a30 <___svfiprintf_internal_r+0x12f8>
   9592c:	044002b4 	movhi	r17,10
   95930:	ddc02415 	stw	r23,144(sp)
   95934:	8c788404 	addi	r17,r17,-7664
   95938:	003ce806 	br	94cdc <__ram_exceptions_end+0xfff74aa8>
   9593c:	04001004 	movi	r16,64
   95940:	800b883a 	mov	r5,r16
   95944:	008235c0 	call	8235c <_malloc_r>
   95948:	d8c02317 	ldw	r3,140(sp)
   9594c:	18800015 	stw	r2,0(r3)
   95950:	18800415 	stw	r2,16(r3)
   95954:	10004d26 	beq	r2,zero,95a8c <___svfiprintf_internal_r+0x1354>
   95958:	d9402317 	ldw	r5,140(sp)
   9595c:	2c000515 	stw	r16,20(r5)
   95960:	003b8906 	br	94788 <__ram_exceptions_end+0xfff74554>
   95964:	d9002417 	ldw	r4,144(sp)
   95968:	d9402617 	ldw	r5,152(sp)
   9596c:	20800017 	ldw	r2,0(r4)
   95970:	21000104 	addi	r4,r4,4
   95974:	d9002415 	stw	r4,144(sp)
   95978:	11400015 	stw	r5,0(r2)
   9597c:	003b9006 	br	947c0 <__ram_exceptions_end+0xfff7458c>
   95980:	8080004c 	andi	r2,r16,1
   95984:	002b883a 	mov	r21,zero
   95988:	10000526 	beq	r2,zero,959a0 <___svfiprintf_internal_r+0x1268>
   9598c:	00800c04 	movi	r2,48
   95990:	d88019c5 	stb	r2,103(sp)
   95994:	dd002c17 	ldw	r20,176(sp)
   95998:	dc4019c4 	addi	r17,sp,103
   9599c:	003c8a06 	br	94bc8 <__ram_exceptions_end+0xfff74994>
   959a0:	0029883a 	mov	r20,zero
   959a4:	dc401a04 	addi	r17,sp,104
   959a8:	003c8706 	br	94bc8 <__ram_exceptions_end+0xfff74994>
   959ac:	014002b4 	movhi	r5,10
   959b0:	2979f384 	addi	r5,r5,-6194
   959b4:	d9402815 	stw	r5,160(sp)
   959b8:	003cff06 	br	94db8 <__ram_exceptions_end+0xfff74b84>
   959bc:	00bfffc4 	movi	r2,-1
   959c0:	003ea206 	br	9544c <__ram_exceptions_end+0xfff75218>
   959c4:	00800044 	movi	r2,1
   959c8:	10803fcc 	andi	r2,r2,255
   959cc:	00c00044 	movi	r3,1
   959d0:	10fd4526 	beq	r2,r3,94ee8 <__ram_exceptions_end+0xfff74cb4>
   959d4:	00c00084 	movi	r3,2
   959d8:	10fc5226 	beq	r2,r3,94b24 <__ram_exceptions_end+0xfff748f0>
   959dc:	003c9c06 	br	94c50 <__ram_exceptions_end+0xfff74a1c>
   959e0:	1021883a 	mov	r16,r2
   959e4:	002b883a 	mov	r21,zero
   959e8:	00800084 	movi	r2,2
   959ec:	003ff606 	br	959c8 <__ram_exceptions_end+0xfff75794>
   959f0:	010002b4 	movhi	r4,10
   959f4:	2139f384 	addi	r4,r4,-6194
   959f8:	d9002815 	stw	r4,160(sp)
   959fc:	003e7206 	br	953c8 <__ram_exceptions_end+0xfff75194>
   95a00:	014002b4 	movhi	r5,10
   95a04:	2979ef84 	addi	r5,r5,-6210
   95a08:	d9402115 	stw	r5,132(sp)
   95a0c:	003ec506 	br	95524 <__ram_exceptions_end+0xfff752f0>
   95a10:	e027883a 	mov	r19,fp
   95a14:	d8002015 	stw	zero,128(sp)
   95a18:	003b9406 	br	9486c <__ram_exceptions_end+0xfff74638>
   95a1c:	dd002017 	ldw	r20,128(sp)
   95a20:	dd401d83 	ldbu	r21,118(sp)
   95a24:	ddc02415 	stw	r23,144(sp)
   95a28:	d8002015 	stw	zero,128(sp)
   95a2c:	003c6606 	br	94bc8 <__ram_exceptions_end+0xfff74994>
   95a30:	0025883a 	mov	r18,zero
   95a34:	003fbd06 	br	9592c <__ram_exceptions_end+0xfff756f8>
   95a38:	d9402417 	ldw	r5,144(sp)
   95a3c:	d8c02417 	ldw	r3,144(sp)
   95a40:	29400017 	ldw	r5,0(r5)
   95a44:	19000104 	addi	r4,r3,4
   95a48:	d9002415 	stw	r4,144(sp)
   95a4c:	d9402015 	stw	r5,128(sp)
   95a50:	98c00043 	ldbu	r3,1(r19)
   95a54:	e027883a 	mov	r19,fp
   95a58:	283f5b0e 	bge	r5,zero,957c8 <__ram_exceptions_end+0xfff75594>
   95a5c:	18c03fcc 	andi	r3,r3,255
   95a60:	013fffc4 	movi	r4,-1
   95a64:	18c0201c 	xori	r3,r3,128
   95a68:	d9002015 	stw	r4,128(sp)
   95a6c:	18ffe004 	addi	r3,r3,-128
   95a70:	003b7d06 	br	94868 <__ram_exceptions_end+0xfff74634>
   95a74:	dd401d85 	stb	r21,118(sp)
   95a78:	003cf306 	br	94e48 <__ram_exceptions_end+0xfff74c14>
   95a7c:	dd401d85 	stb	r21,118(sp)
   95a80:	003d4e06 	br	94fbc <__ram_exceptions_end+0xfff74d88>
   95a84:	dd401d85 	stb	r21,118(sp)
   95a88:	003c0e06 	br	94ac4 <__ram_exceptions_end+0xfff74890>
   95a8c:	d9002717 	ldw	r4,156(sp)
   95a90:	00800304 	movi	r2,12
   95a94:	20800015 	stw	r2,0(r4)
   95a98:	00bfffc4 	movi	r2,-1
   95a9c:	003e6b06 	br	9544c <__ram_exceptions_end+0xfff75218>
   95aa0:	dd401d85 	stb	r21,118(sp)
   95aa4:	003d0006 	br	94ea8 <__ram_exceptions_end+0xfff74c74>
   95aa8:	dd401d85 	stb	r21,118(sp)
   95aac:	003d7106 	br	95074 <__ram_exceptions_end+0xfff74e40>
   95ab0:	dd401d85 	stb	r21,118(sp)
   95ab4:	003c5706 	br	94c14 <__ram_exceptions_end+0xfff749e0>
   95ab8:	dd401d85 	stb	r21,118(sp)
   95abc:	003c2e06 	br	94b78 <__ram_exceptions_end+0xfff74944>
   95ac0:	dd401d85 	stb	r21,118(sp)
   95ac4:	003d8c06 	br	950f8 <__ram_exceptions_end+0xfff74ec4>
   95ac8:	dd401d85 	stb	r21,118(sp)
   95acc:	003da706 	br	9516c <__ram_exceptions_end+0xfff74f38>
   95ad0:	dd401d85 	stb	r21,118(sp)
   95ad4:	003cc806 	br	94df8 <__ram_exceptions_end+0xfff74bc4>

00095ad8 <_wcrtomb_r>:
   95ad8:	defff604 	addi	sp,sp,-40
   95adc:	008002b4 	movhi	r2,10
   95ae0:	dc800815 	stw	r18,32(sp)
   95ae4:	dc400715 	stw	r17,28(sp)
   95ae8:	dc000615 	stw	r16,24(sp)
   95aec:	10818004 	addi	r2,r2,1536
   95af0:	dfc00915 	stw	ra,36(sp)
   95af4:	2021883a 	mov	r16,r4
   95af8:	3823883a 	mov	r17,r7
   95afc:	14800017 	ldw	r18,0(r2)
   95b00:	28001426 	beq	r5,zero,95b54 <_wcrtomb_r+0x7c>
   95b04:	d9400415 	stw	r5,16(sp)
   95b08:	d9800515 	stw	r6,20(sp)
   95b0c:	0089bb00 	call	89bb0 <__locale_charset>
   95b10:	d9800517 	ldw	r6,20(sp)
   95b14:	d9400417 	ldw	r5,16(sp)
   95b18:	100f883a 	mov	r7,r2
   95b1c:	dc400015 	stw	r17,0(sp)
   95b20:	8009883a 	mov	r4,r16
   95b24:	903ee83a 	callr	r18
   95b28:	00ffffc4 	movi	r3,-1
   95b2c:	10c0031e 	bne	r2,r3,95b3c <_wcrtomb_r+0x64>
   95b30:	88000015 	stw	zero,0(r17)
   95b34:	00c02284 	movi	r3,138
   95b38:	80c00015 	stw	r3,0(r16)
   95b3c:	dfc00917 	ldw	ra,36(sp)
   95b40:	dc800817 	ldw	r18,32(sp)
   95b44:	dc400717 	ldw	r17,28(sp)
   95b48:	dc000617 	ldw	r16,24(sp)
   95b4c:	dec00a04 	addi	sp,sp,40
   95b50:	f800283a 	ret
   95b54:	0089bb00 	call	89bb0 <__locale_charset>
   95b58:	100f883a 	mov	r7,r2
   95b5c:	dc400015 	stw	r17,0(sp)
   95b60:	000d883a 	mov	r6,zero
   95b64:	d9400104 	addi	r5,sp,4
   95b68:	8009883a 	mov	r4,r16
   95b6c:	903ee83a 	callr	r18
   95b70:	003fed06 	br	95b28 <__ram_exceptions_end+0xfff758f4>

00095b74 <wcrtomb>:
   95b74:	defff604 	addi	sp,sp,-40
   95b78:	008002b4 	movhi	r2,10
   95b7c:	dc800615 	stw	r18,24(sp)
   95b80:	dc400515 	stw	r17,20(sp)
   95b84:	10817a04 	addi	r2,r2,1512
   95b88:	dfc00915 	stw	ra,36(sp)
   95b8c:	dd000815 	stw	r20,32(sp)
   95b90:	dcc00715 	stw	r19,28(sp)
   95b94:	dc000415 	stw	r16,16(sp)
   95b98:	3025883a 	mov	r18,r6
   95b9c:	14400017 	ldw	r17,0(r2)
   95ba0:	20001926 	beq	r4,zero,95c08 <wcrtomb+0x94>
   95ba4:	008002b4 	movhi	r2,10
   95ba8:	10818004 	addi	r2,r2,1536
   95bac:	15000017 	ldw	r20,0(r2)
   95bb0:	2021883a 	mov	r16,r4
   95bb4:	2827883a 	mov	r19,r5
   95bb8:	0089bb00 	call	89bb0 <__locale_charset>
   95bbc:	100f883a 	mov	r7,r2
   95bc0:	dc800015 	stw	r18,0(sp)
   95bc4:	980d883a 	mov	r6,r19
   95bc8:	800b883a 	mov	r5,r16
   95bcc:	8809883a 	mov	r4,r17
   95bd0:	a03ee83a 	callr	r20
   95bd4:	00ffffc4 	movi	r3,-1
   95bd8:	10c0031e 	bne	r2,r3,95be8 <wcrtomb+0x74>
   95bdc:	90000015 	stw	zero,0(r18)
   95be0:	00c02284 	movi	r3,138
   95be4:	88c00015 	stw	r3,0(r17)
   95be8:	dfc00917 	ldw	ra,36(sp)
   95bec:	dd000817 	ldw	r20,32(sp)
   95bf0:	dcc00717 	ldw	r19,28(sp)
   95bf4:	dc800617 	ldw	r18,24(sp)
   95bf8:	dc400517 	ldw	r17,20(sp)
   95bfc:	dc000417 	ldw	r16,16(sp)
   95c00:	dec00a04 	addi	sp,sp,40
   95c04:	f800283a 	ret
   95c08:	008002b4 	movhi	r2,10
   95c0c:	10818004 	addi	r2,r2,1536
   95c10:	14000017 	ldw	r16,0(r2)
   95c14:	0089bb00 	call	89bb0 <__locale_charset>
   95c18:	100f883a 	mov	r7,r2
   95c1c:	dc800015 	stw	r18,0(sp)
   95c20:	000d883a 	mov	r6,zero
   95c24:	d9400104 	addi	r5,sp,4
   95c28:	8809883a 	mov	r4,r17
   95c2c:	803ee83a 	callr	r16
   95c30:	003fe806 	br	95bd4 <__ram_exceptions_end+0xfff759a0>

00095c34 <__ascii_wctomb>:
   95c34:	28000526 	beq	r5,zero,95c4c <__ascii_wctomb+0x18>
   95c38:	00803fc4 	movi	r2,255
   95c3c:	11800536 	bltu	r2,r6,95c54 <__ascii_wctomb+0x20>
   95c40:	29800005 	stb	r6,0(r5)
   95c44:	00800044 	movi	r2,1
   95c48:	f800283a 	ret
   95c4c:	0005883a 	mov	r2,zero
   95c50:	f800283a 	ret
   95c54:	00802284 	movi	r2,138
   95c58:	20800015 	stw	r2,0(r4)
   95c5c:	00bfffc4 	movi	r2,-1
   95c60:	f800283a 	ret

00095c64 <_wctomb_r>:
   95c64:	008002b4 	movhi	r2,10
   95c68:	defff904 	addi	sp,sp,-28
   95c6c:	10818004 	addi	r2,r2,1536
   95c70:	dfc00615 	stw	ra,24(sp)
   95c74:	dc400515 	stw	r17,20(sp)
   95c78:	dc000415 	stw	r16,16(sp)
   95c7c:	3823883a 	mov	r17,r7
   95c80:	14000017 	ldw	r16,0(r2)
   95c84:	d9000115 	stw	r4,4(sp)
   95c88:	d9400215 	stw	r5,8(sp)
   95c8c:	d9800315 	stw	r6,12(sp)
   95c90:	0089bb00 	call	89bb0 <__locale_charset>
   95c94:	d9800317 	ldw	r6,12(sp)
   95c98:	d9400217 	ldw	r5,8(sp)
   95c9c:	d9000117 	ldw	r4,4(sp)
   95ca0:	100f883a 	mov	r7,r2
   95ca4:	dc400015 	stw	r17,0(sp)
   95ca8:	803ee83a 	callr	r16
   95cac:	dfc00617 	ldw	ra,24(sp)
   95cb0:	dc400517 	ldw	r17,20(sp)
   95cb4:	dc000417 	ldw	r16,16(sp)
   95cb8:	dec00704 	addi	sp,sp,28
   95cbc:	f800283a 	ret

00095cc0 <__muldi3>:
   95cc0:	defff604 	addi	sp,sp,-40
   95cc4:	dd800615 	stw	r22,24(sp)
   95cc8:	dd400515 	stw	r21,20(sp)
   95ccc:	dc400115 	stw	r17,4(sp)
   95cd0:	357fffcc 	andi	r21,r6,65535
   95cd4:	2022d43a 	srli	r17,r4,16
   95cd8:	25bfffcc 	andi	r22,r4,65535
   95cdc:	dcc00315 	stw	r19,12(sp)
   95ce0:	dc800215 	stw	r18,8(sp)
   95ce4:	2027883a 	mov	r19,r4
   95ce8:	2825883a 	mov	r18,r5
   95cec:	b009883a 	mov	r4,r22
   95cf0:	a80b883a 	mov	r5,r21
   95cf4:	dfc00915 	stw	ra,36(sp)
   95cf8:	df000815 	stw	fp,32(sp)
   95cfc:	ddc00715 	stw	r23,28(sp)
   95d00:	3839883a 	mov	fp,r7
   95d04:	302ed43a 	srli	r23,r6,16
   95d08:	dd000415 	stw	r20,16(sp)
   95d0c:	dc000015 	stw	r16,0(sp)
   95d10:	3029883a 	mov	r20,r6
   95d14:	00822140 	call	82214 <__mulsi3>
   95d18:	a80b883a 	mov	r5,r21
   95d1c:	8809883a 	mov	r4,r17
   95d20:	1021883a 	mov	r16,r2
   95d24:	00822140 	call	82214 <__mulsi3>
   95d28:	8809883a 	mov	r4,r17
   95d2c:	b80b883a 	mov	r5,r23
   95d30:	102b883a 	mov	r21,r2
   95d34:	00822140 	call	82214 <__mulsi3>
   95d38:	b80b883a 	mov	r5,r23
   95d3c:	b009883a 	mov	r4,r22
   95d40:	1023883a 	mov	r17,r2
   95d44:	00822140 	call	82214 <__mulsi3>
   95d48:	8006d43a 	srli	r3,r16,16
   95d4c:	1545883a 	add	r2,r2,r21
   95d50:	1885883a 	add	r2,r3,r2
   95d54:	1540022e 	bgeu	r2,r21,95d60 <__muldi3+0xa0>
   95d58:	00c00074 	movhi	r3,1
   95d5c:	88e3883a 	add	r17,r17,r3
   95d60:	1006d43a 	srli	r3,r2,16
   95d64:	1004943a 	slli	r2,r2,16
   95d68:	e00b883a 	mov	r5,fp
   95d6c:	9809883a 	mov	r4,r19
   95d70:	843fffcc 	andi	r16,r16,65535
   95d74:	1c63883a 	add	r17,r3,r17
   95d78:	1421883a 	add	r16,r2,r16
   95d7c:	00822140 	call	82214 <__mulsi3>
   95d80:	900b883a 	mov	r5,r18
   95d84:	a009883a 	mov	r4,r20
   95d88:	1027883a 	mov	r19,r2
   95d8c:	00822140 	call	82214 <__mulsi3>
   95d90:	9885883a 	add	r2,r19,r2
   95d94:	1447883a 	add	r3,r2,r17
   95d98:	8005883a 	mov	r2,r16
   95d9c:	dfc00917 	ldw	ra,36(sp)
   95da0:	df000817 	ldw	fp,32(sp)
   95da4:	ddc00717 	ldw	r23,28(sp)
   95da8:	dd800617 	ldw	r22,24(sp)
   95dac:	dd400517 	ldw	r21,20(sp)
   95db0:	dd000417 	ldw	r20,16(sp)
   95db4:	dcc00317 	ldw	r19,12(sp)
   95db8:	dc800217 	ldw	r18,8(sp)
   95dbc:	dc400117 	ldw	r17,4(sp)
   95dc0:	dc000017 	ldw	r16,0(sp)
   95dc4:	dec00a04 	addi	sp,sp,40
   95dc8:	f800283a 	ret

00095dcc <__fixunsdfsi>:
   95dcc:	defffd04 	addi	sp,sp,-12
   95dd0:	000d883a 	mov	r6,zero
   95dd4:	01d07834 	movhi	r7,16864
   95dd8:	dc400115 	stw	r17,4(sp)
   95ddc:	dc000015 	stw	r16,0(sp)
   95de0:	dfc00215 	stw	ra,8(sp)
   95de4:	2023883a 	mov	r17,r4
   95de8:	2821883a 	mov	r16,r5
   95dec:	0097f000 	call	97f00 <__gedf2>
   95df0:	1000080e 	bge	r2,zero,95e14 <__fixunsdfsi+0x48>
   95df4:	8809883a 	mov	r4,r17
   95df8:	800b883a 	mov	r5,r16
   95dfc:	00992380 	call	99238 <__fixdfsi>
   95e00:	dfc00217 	ldw	ra,8(sp)
   95e04:	dc400117 	ldw	r17,4(sp)
   95e08:	dc000017 	ldw	r16,0(sp)
   95e0c:	dec00304 	addi	sp,sp,12
   95e10:	f800283a 	ret
   95e14:	000d883a 	mov	r6,zero
   95e18:	01d07834 	movhi	r7,16864
   95e1c:	8809883a 	mov	r4,r17
   95e20:	800b883a 	mov	r5,r16
   95e24:	009893c0 	call	9893c <__subdf3>
   95e28:	180b883a 	mov	r5,r3
   95e2c:	1009883a 	mov	r4,r2
   95e30:	00992380 	call	99238 <__fixdfsi>
   95e34:	00e00034 	movhi	r3,32768
   95e38:	10c5883a 	add	r2,r2,r3
   95e3c:	003ff006 	br	95e00 <__ram_exceptions_end+0xfff75bcc>

00095e40 <__udivdi3>:
   95e40:	defff404 	addi	sp,sp,-48
   95e44:	dcc00515 	stw	r19,20(sp)
   95e48:	dc000215 	stw	r16,8(sp)
   95e4c:	dfc00b15 	stw	ra,44(sp)
   95e50:	df000a15 	stw	fp,40(sp)
   95e54:	ddc00915 	stw	r23,36(sp)
   95e58:	dd800815 	stw	r22,32(sp)
   95e5c:	dd400715 	stw	r21,28(sp)
   95e60:	dd000615 	stw	r20,24(sp)
   95e64:	dc800415 	stw	r18,16(sp)
   95e68:	dc400315 	stw	r17,12(sp)
   95e6c:	2027883a 	mov	r19,r4
   95e70:	2821883a 	mov	r16,r5
   95e74:	3800461e 	bne	r7,zero,95f90 <__udivdi3+0x150>
   95e78:	3023883a 	mov	r17,r6
   95e7c:	2025883a 	mov	r18,r4
   95e80:	2980572e 	bgeu	r5,r6,95fe0 <__udivdi3+0x1a0>
   95e84:	00bfffd4 	movui	r2,65535
   95e88:	282d883a 	mov	r22,r5
   95e8c:	1180b236 	bltu	r2,r6,96158 <__udivdi3+0x318>
   95e90:	00803fc4 	movi	r2,255
   95e94:	1185803a 	cmpltu	r2,r2,r6
   95e98:	100490fa 	slli	r2,r2,3
   95e9c:	3086d83a 	srl	r3,r6,r2
   95ea0:	010002b4 	movhi	r4,10
   95ea4:	2139f784 	addi	r4,r4,-6178
   95ea8:	20c7883a 	add	r3,r4,r3
   95eac:	18c00003 	ldbu	r3,0(r3)
   95eb0:	1885883a 	add	r2,r3,r2
   95eb4:	00c00804 	movi	r3,32
   95eb8:	1887c83a 	sub	r3,r3,r2
   95ebc:	18000526 	beq	r3,zero,95ed4 <__udivdi3+0x94>
   95ec0:	80e0983a 	sll	r16,r16,r3
   95ec4:	9884d83a 	srl	r2,r19,r2
   95ec8:	30e2983a 	sll	r17,r6,r3
   95ecc:	98e4983a 	sll	r18,r19,r3
   95ed0:	142cb03a 	or	r22,r2,r16
   95ed4:	882ad43a 	srli	r21,r17,16
   95ed8:	b009883a 	mov	r4,r22
   95edc:	8d3fffcc 	andi	r20,r17,65535
   95ee0:	a80b883a 	mov	r5,r21
   95ee4:	00821bc0 	call	821bc <__umodsi3>
   95ee8:	b009883a 	mov	r4,r22
   95eec:	a80b883a 	mov	r5,r21
   95ef0:	1027883a 	mov	r19,r2
   95ef4:	00821580 	call	82158 <__udivsi3>
   95ef8:	100b883a 	mov	r5,r2
   95efc:	a009883a 	mov	r4,r20
   95f00:	102d883a 	mov	r22,r2
   95f04:	00822140 	call	82214 <__mulsi3>
   95f08:	9826943a 	slli	r19,r19,16
   95f0c:	9006d43a 	srli	r3,r18,16
   95f10:	1cc6b03a 	or	r3,r3,r19
   95f14:	1880052e 	bgeu	r3,r2,95f2c <__udivdi3+0xec>
   95f18:	1c47883a 	add	r3,r3,r17
   95f1c:	b13fffc4 	addi	r4,r22,-1
   95f20:	1c400136 	bltu	r3,r17,95f28 <__udivdi3+0xe8>
   95f24:	18814236 	bltu	r3,r2,96430 <__udivdi3+0x5f0>
   95f28:	202d883a 	mov	r22,r4
   95f2c:	18a1c83a 	sub	r16,r3,r2
   95f30:	8009883a 	mov	r4,r16
   95f34:	a80b883a 	mov	r5,r21
   95f38:	00821bc0 	call	821bc <__umodsi3>
   95f3c:	1027883a 	mov	r19,r2
   95f40:	8009883a 	mov	r4,r16
   95f44:	a80b883a 	mov	r5,r21
   95f48:	9826943a 	slli	r19,r19,16
   95f4c:	00821580 	call	82158 <__udivsi3>
   95f50:	100b883a 	mov	r5,r2
   95f54:	a009883a 	mov	r4,r20
   95f58:	94bfffcc 	andi	r18,r18,65535
   95f5c:	1021883a 	mov	r16,r2
   95f60:	94e4b03a 	or	r18,r18,r19
   95f64:	00822140 	call	82214 <__mulsi3>
   95f68:	9080052e 	bgeu	r18,r2,95f80 <__udivdi3+0x140>
   95f6c:	8ca5883a 	add	r18,r17,r18
   95f70:	80ffffc4 	addi	r3,r16,-1
   95f74:	94410c36 	bltu	r18,r17,963a8 <__udivdi3+0x568>
   95f78:	90810b2e 	bgeu	r18,r2,963a8 <__udivdi3+0x568>
   95f7c:	843fff84 	addi	r16,r16,-2
   95f80:	b004943a 	slli	r2,r22,16
   95f84:	0007883a 	mov	r3,zero
   95f88:	1404b03a 	or	r2,r2,r16
   95f8c:	00005e06 	br	96108 <__udivdi3+0x2c8>
   95f90:	29c05b36 	bltu	r5,r7,96100 <__udivdi3+0x2c0>
   95f94:	00bfffd4 	movui	r2,65535
   95f98:	11c0672e 	bgeu	r2,r7,96138 <__udivdi3+0x2f8>
   95f9c:	00804034 	movhi	r2,256
   95fa0:	10bfffc4 	addi	r2,r2,-1
   95fa4:	11c10a36 	bltu	r2,r7,963d0 <__udivdi3+0x590>
   95fa8:	00800404 	movi	r2,16
   95fac:	3886d83a 	srl	r3,r7,r2
   95fb0:	010002b4 	movhi	r4,10
   95fb4:	2139f784 	addi	r4,r4,-6178
   95fb8:	20c7883a 	add	r3,r4,r3
   95fbc:	18c00003 	ldbu	r3,0(r3)
   95fc0:	05c00804 	movi	r23,32
   95fc4:	1885883a 	add	r2,r3,r2
   95fc8:	b8afc83a 	sub	r23,r23,r2
   95fcc:	b800671e 	bne	r23,zero,9616c <__udivdi3+0x32c>
   95fd0:	3c010536 	bltu	r7,r16,963e8 <__udivdi3+0x5a8>
   95fd4:	9985403a 	cmpgeu	r2,r19,r6
   95fd8:	0007883a 	mov	r3,zero
   95fdc:	00004a06 	br	96108 <__udivdi3+0x2c8>
   95fe0:	3000041e 	bne	r6,zero,95ff4 <__udivdi3+0x1b4>
   95fe4:	000b883a 	mov	r5,zero
   95fe8:	01000044 	movi	r4,1
   95fec:	00821580 	call	82158 <__udivsi3>
   95ff0:	1023883a 	mov	r17,r2
   95ff4:	00bfffd4 	movui	r2,65535
   95ff8:	1440532e 	bgeu	r2,r17,96148 <__udivdi3+0x308>
   95ffc:	00804034 	movhi	r2,256
   96000:	10bfffc4 	addi	r2,r2,-1
   96004:	1440f436 	bltu	r2,r17,963d8 <__udivdi3+0x598>
   96008:	00800404 	movi	r2,16
   9600c:	8886d83a 	srl	r3,r17,r2
   96010:	010002b4 	movhi	r4,10
   96014:	2139f784 	addi	r4,r4,-6178
   96018:	20c7883a 	add	r3,r4,r3
   9601c:	18c00003 	ldbu	r3,0(r3)
   96020:	1885883a 	add	r2,r3,r2
   96024:	00c00804 	movi	r3,32
   96028:	1887c83a 	sub	r3,r3,r2
   9602c:	1800a51e 	bne	r3,zero,962c4 <__udivdi3+0x484>
   96030:	882ad43a 	srli	r21,r17,16
   96034:	8461c83a 	sub	r16,r16,r17
   96038:	8d3fffcc 	andi	r20,r17,65535
   9603c:	00c00044 	movi	r3,1
   96040:	a80b883a 	mov	r5,r21
   96044:	8009883a 	mov	r4,r16
   96048:	d8c00115 	stw	r3,4(sp)
   9604c:	00821bc0 	call	821bc <__umodsi3>
   96050:	a80b883a 	mov	r5,r21
   96054:	8009883a 	mov	r4,r16
   96058:	1027883a 	mov	r19,r2
   9605c:	00821580 	call	82158 <__udivsi3>
   96060:	a00b883a 	mov	r5,r20
   96064:	1009883a 	mov	r4,r2
   96068:	102d883a 	mov	r22,r2
   9606c:	00822140 	call	82214 <__mulsi3>
   96070:	9826943a 	slli	r19,r19,16
   96074:	900ed43a 	srli	r7,r18,16
   96078:	d8c00117 	ldw	r3,4(sp)
   9607c:	3cceb03a 	or	r7,r7,r19
   96080:	3880052e 	bgeu	r7,r2,96098 <__udivdi3+0x258>
   96084:	3c4f883a 	add	r7,r7,r17
   96088:	b13fffc4 	addi	r4,r22,-1
   9608c:	3c400136 	bltu	r7,r17,96094 <__udivdi3+0x254>
   96090:	3880e436 	bltu	r7,r2,96424 <__udivdi3+0x5e4>
   96094:	202d883a 	mov	r22,r4
   96098:	38a1c83a 	sub	r16,r7,r2
   9609c:	8009883a 	mov	r4,r16
   960a0:	a80b883a 	mov	r5,r21
   960a4:	d8c00115 	stw	r3,4(sp)
   960a8:	00821bc0 	call	821bc <__umodsi3>
   960ac:	1027883a 	mov	r19,r2
   960b0:	8009883a 	mov	r4,r16
   960b4:	a80b883a 	mov	r5,r21
   960b8:	9826943a 	slli	r19,r19,16
   960bc:	00821580 	call	82158 <__udivsi3>
   960c0:	a00b883a 	mov	r5,r20
   960c4:	1009883a 	mov	r4,r2
   960c8:	94bfffcc 	andi	r18,r18,65535
   960cc:	1021883a 	mov	r16,r2
   960d0:	94e4b03a 	or	r18,r18,r19
   960d4:	00822140 	call	82214 <__mulsi3>
   960d8:	d8c00117 	ldw	r3,4(sp)
   960dc:	9080052e 	bgeu	r18,r2,960f4 <__udivdi3+0x2b4>
   960e0:	8ca5883a 	add	r18,r17,r18
   960e4:	813fffc4 	addi	r4,r16,-1
   960e8:	9440ad36 	bltu	r18,r17,963a0 <__udivdi3+0x560>
   960ec:	9080ac2e 	bgeu	r18,r2,963a0 <__udivdi3+0x560>
   960f0:	843fff84 	addi	r16,r16,-2
   960f4:	b004943a 	slli	r2,r22,16
   960f8:	1404b03a 	or	r2,r2,r16
   960fc:	00000206 	br	96108 <__udivdi3+0x2c8>
   96100:	0007883a 	mov	r3,zero
   96104:	0005883a 	mov	r2,zero
   96108:	dfc00b17 	ldw	ra,44(sp)
   9610c:	df000a17 	ldw	fp,40(sp)
   96110:	ddc00917 	ldw	r23,36(sp)
   96114:	dd800817 	ldw	r22,32(sp)
   96118:	dd400717 	ldw	r21,28(sp)
   9611c:	dd000617 	ldw	r20,24(sp)
   96120:	dcc00517 	ldw	r19,20(sp)
   96124:	dc800417 	ldw	r18,16(sp)
   96128:	dc400317 	ldw	r17,12(sp)
   9612c:	dc000217 	ldw	r16,8(sp)
   96130:	dec00c04 	addi	sp,sp,48
   96134:	f800283a 	ret
   96138:	00803fc4 	movi	r2,255
   9613c:	11c5803a 	cmpltu	r2,r2,r7
   96140:	100490fa 	slli	r2,r2,3
   96144:	003f9906 	br	95fac <__ram_exceptions_end+0xfff75d78>
   96148:	00803fc4 	movi	r2,255
   9614c:	1445803a 	cmpltu	r2,r2,r17
   96150:	100490fa 	slli	r2,r2,3
   96154:	003fad06 	br	9600c <__ram_exceptions_end+0xfff75dd8>
   96158:	00804034 	movhi	r2,256
   9615c:	10bfffc4 	addi	r2,r2,-1
   96160:	11809f36 	bltu	r2,r6,963e0 <__udivdi3+0x5a0>
   96164:	00800404 	movi	r2,16
   96168:	003f4c06 	br	95e9c <__ram_exceptions_end+0xfff75c68>
   9616c:	3dce983a 	sll	r7,r7,r23
   96170:	30b8d83a 	srl	fp,r6,r2
   96174:	80a2d83a 	srl	r17,r16,r2
   96178:	35cc983a 	sll	r6,r6,r23
   9617c:	3f38b03a 	or	fp,r7,fp
   96180:	e024d43a 	srli	r18,fp,16
   96184:	9884d83a 	srl	r2,r19,r2
   96188:	85e0983a 	sll	r16,r16,r23
   9618c:	8809883a 	mov	r4,r17
   96190:	900b883a 	mov	r5,r18
   96194:	d9800015 	stw	r6,0(sp)
   96198:	1420b03a 	or	r16,r2,r16
   9619c:	00821bc0 	call	821bc <__umodsi3>
   961a0:	900b883a 	mov	r5,r18
   961a4:	8809883a 	mov	r4,r17
   961a8:	1029883a 	mov	r20,r2
   961ac:	e5bfffcc 	andi	r22,fp,65535
   961b0:	00821580 	call	82158 <__udivsi3>
   961b4:	100b883a 	mov	r5,r2
   961b8:	b009883a 	mov	r4,r22
   961bc:	102b883a 	mov	r21,r2
   961c0:	00822140 	call	82214 <__mulsi3>
   961c4:	a028943a 	slli	r20,r20,16
   961c8:	8006d43a 	srli	r3,r16,16
   961cc:	1d06b03a 	or	r3,r3,r20
   961d0:	1880042e 	bgeu	r3,r2,961e4 <__udivdi3+0x3a4>
   961d4:	1f07883a 	add	r3,r3,fp
   961d8:	a93fffc4 	addi	r4,r21,-1
   961dc:	1f00892e 	bgeu	r3,fp,96404 <__udivdi3+0x5c4>
   961e0:	202b883a 	mov	r21,r4
   961e4:	18a3c83a 	sub	r17,r3,r2
   961e8:	8809883a 	mov	r4,r17
   961ec:	900b883a 	mov	r5,r18
   961f0:	00821bc0 	call	821bc <__umodsi3>
   961f4:	1029883a 	mov	r20,r2
   961f8:	8809883a 	mov	r4,r17
   961fc:	900b883a 	mov	r5,r18
   96200:	a028943a 	slli	r20,r20,16
   96204:	00821580 	call	82158 <__udivsi3>
   96208:	100b883a 	mov	r5,r2
   9620c:	b009883a 	mov	r4,r22
   96210:	843fffcc 	andi	r16,r16,65535
   96214:	1023883a 	mov	r17,r2
   96218:	8520b03a 	or	r16,r16,r20
   9621c:	00822140 	call	82214 <__mulsi3>
   96220:	8080042e 	bgeu	r16,r2,96234 <__udivdi3+0x3f4>
   96224:	8721883a 	add	r16,r16,fp
   96228:	88ffffc4 	addi	r3,r17,-1
   9622c:	8700712e 	bgeu	r16,fp,963f4 <__udivdi3+0x5b4>
   96230:	1823883a 	mov	r17,r3
   96234:	a80e943a 	slli	r7,r21,16
   96238:	d8c00017 	ldw	r3,0(sp)
   9623c:	80a1c83a 	sub	r16,r16,r2
   96240:	3c64b03a 	or	r18,r7,r17
   96244:	1d3fffcc 	andi	r20,r3,65535
   96248:	9022d43a 	srli	r17,r18,16
   9624c:	95bfffcc 	andi	r22,r18,65535
   96250:	a00b883a 	mov	r5,r20
   96254:	b009883a 	mov	r4,r22
   96258:	182ad43a 	srli	r21,r3,16
   9625c:	00822140 	call	82214 <__mulsi3>
   96260:	a00b883a 	mov	r5,r20
   96264:	8809883a 	mov	r4,r17
   96268:	1039883a 	mov	fp,r2
   9626c:	00822140 	call	82214 <__mulsi3>
   96270:	8809883a 	mov	r4,r17
   96274:	a80b883a 	mov	r5,r21
   96278:	1029883a 	mov	r20,r2
   9627c:	00822140 	call	82214 <__mulsi3>
   96280:	a80b883a 	mov	r5,r21
   96284:	b009883a 	mov	r4,r22
   96288:	1023883a 	mov	r17,r2
   9628c:	00822140 	call	82214 <__mulsi3>
   96290:	e006d43a 	srli	r3,fp,16
   96294:	1505883a 	add	r2,r2,r20
   96298:	1887883a 	add	r3,r3,r2
   9629c:	1d00022e 	bgeu	r3,r20,962a8 <__udivdi3+0x468>
   962a0:	00800074 	movhi	r2,1
   962a4:	88a3883a 	add	r17,r17,r2
   962a8:	1804d43a 	srli	r2,r3,16
   962ac:	1463883a 	add	r17,r2,r17
   962b0:	84404436 	bltu	r16,r17,963c4 <__udivdi3+0x584>
   962b4:	84403e26 	beq	r16,r17,963b0 <__udivdi3+0x570>
   962b8:	9005883a 	mov	r2,r18
   962bc:	0007883a 	mov	r3,zero
   962c0:	003f9106 	br	96108 <__ram_exceptions_end+0xfff75ed4>
   962c4:	88e2983a 	sll	r17,r17,r3
   962c8:	80aed83a 	srl	r23,r16,r2
   962cc:	80e0983a 	sll	r16,r16,r3
   962d0:	882ad43a 	srli	r21,r17,16
   962d4:	9884d83a 	srl	r2,r19,r2
   962d8:	b809883a 	mov	r4,r23
   962dc:	a80b883a 	mov	r5,r21
   962e0:	98e4983a 	sll	r18,r19,r3
   962e4:	142cb03a 	or	r22,r2,r16
   962e8:	00821bc0 	call	821bc <__umodsi3>
   962ec:	b809883a 	mov	r4,r23
   962f0:	a80b883a 	mov	r5,r21
   962f4:	1027883a 	mov	r19,r2
   962f8:	8d3fffcc 	andi	r20,r17,65535
   962fc:	00821580 	call	82158 <__udivsi3>
   96300:	a009883a 	mov	r4,r20
   96304:	100b883a 	mov	r5,r2
   96308:	102f883a 	mov	r23,r2
   9630c:	00822140 	call	82214 <__mulsi3>
   96310:	9826943a 	slli	r19,r19,16
   96314:	b008d43a 	srli	r4,r22,16
   96318:	24c8b03a 	or	r4,r4,r19
   9631c:	2080062e 	bgeu	r4,r2,96338 <__udivdi3+0x4f8>
   96320:	2449883a 	add	r4,r4,r17
   96324:	b8ffffc4 	addi	r3,r23,-1
   96328:	24403c36 	bltu	r4,r17,9641c <__udivdi3+0x5dc>
   9632c:	20803b2e 	bgeu	r4,r2,9641c <__udivdi3+0x5dc>
   96330:	bdffff84 	addi	r23,r23,-2
   96334:	2449883a 	add	r4,r4,r17
   96338:	20a1c83a 	sub	r16,r4,r2
   9633c:	a80b883a 	mov	r5,r21
   96340:	8009883a 	mov	r4,r16
   96344:	00821bc0 	call	821bc <__umodsi3>
   96348:	a80b883a 	mov	r5,r21
   9634c:	8009883a 	mov	r4,r16
   96350:	1027883a 	mov	r19,r2
   96354:	00821580 	call	82158 <__udivsi3>
   96358:	a009883a 	mov	r4,r20
   9635c:	100b883a 	mov	r5,r2
   96360:	9826943a 	slli	r19,r19,16
   96364:	1039883a 	mov	fp,r2
   96368:	00822140 	call	82214 <__mulsi3>
   9636c:	b13fffcc 	andi	r4,r22,65535
   96370:	24c8b03a 	or	r4,r4,r19
   96374:	2080062e 	bgeu	r4,r2,96390 <__udivdi3+0x550>
   96378:	2449883a 	add	r4,r4,r17
   9637c:	e0ffffc4 	addi	r3,fp,-1
   96380:	24402436 	bltu	r4,r17,96414 <__udivdi3+0x5d4>
   96384:	2080232e 	bgeu	r4,r2,96414 <__udivdi3+0x5d4>
   96388:	e73fff84 	addi	fp,fp,-2
   9638c:	2449883a 	add	r4,r4,r17
   96390:	b82e943a 	slli	r23,r23,16
   96394:	20a1c83a 	sub	r16,r4,r2
   96398:	bf06b03a 	or	r3,r23,fp
   9639c:	003f2806 	br	96040 <__ram_exceptions_end+0xfff75e0c>
   963a0:	2021883a 	mov	r16,r4
   963a4:	003f5306 	br	960f4 <__ram_exceptions_end+0xfff75ec0>
   963a8:	1821883a 	mov	r16,r3
   963ac:	003ef406 	br	95f80 <__ram_exceptions_end+0xfff75d4c>
   963b0:	1806943a 	slli	r3,r3,16
   963b4:	9de6983a 	sll	r19,r19,r23
   963b8:	e73fffcc 	andi	fp,fp,65535
   963bc:	1f07883a 	add	r3,r3,fp
   963c0:	98ffbd2e 	bgeu	r19,r3,962b8 <__ram_exceptions_end+0xfff76084>
   963c4:	90bfffc4 	addi	r2,r18,-1
   963c8:	0007883a 	mov	r3,zero
   963cc:	003f4e06 	br	96108 <__ram_exceptions_end+0xfff75ed4>
   963d0:	00800604 	movi	r2,24
   963d4:	003ef506 	br	95fac <__ram_exceptions_end+0xfff75d78>
   963d8:	00800604 	movi	r2,24
   963dc:	003f0b06 	br	9600c <__ram_exceptions_end+0xfff75dd8>
   963e0:	00800604 	movi	r2,24
   963e4:	003ead06 	br	95e9c <__ram_exceptions_end+0xfff75c68>
   963e8:	0007883a 	mov	r3,zero
   963ec:	00800044 	movi	r2,1
   963f0:	003f4506 	br	96108 <__ram_exceptions_end+0xfff75ed4>
   963f4:	80bf8e2e 	bgeu	r16,r2,96230 <__ram_exceptions_end+0xfff75ffc>
   963f8:	8c7fff84 	addi	r17,r17,-2
   963fc:	8721883a 	add	r16,r16,fp
   96400:	003f8c06 	br	96234 <__ram_exceptions_end+0xfff76000>
   96404:	18bf762e 	bgeu	r3,r2,961e0 <__ram_exceptions_end+0xfff75fac>
   96408:	ad7fff84 	addi	r21,r21,-2
   9640c:	1f07883a 	add	r3,r3,fp
   96410:	003f7406 	br	961e4 <__ram_exceptions_end+0xfff75fb0>
   96414:	1839883a 	mov	fp,r3
   96418:	003fdd06 	br	96390 <__ram_exceptions_end+0xfff7615c>
   9641c:	182f883a 	mov	r23,r3
   96420:	003fc506 	br	96338 <__ram_exceptions_end+0xfff76104>
   96424:	b5bfff84 	addi	r22,r22,-2
   96428:	3c4f883a 	add	r7,r7,r17
   9642c:	003f1a06 	br	96098 <__ram_exceptions_end+0xfff75e64>
   96430:	b5bfff84 	addi	r22,r22,-2
   96434:	1c47883a 	add	r3,r3,r17
   96438:	003ebc06 	br	95f2c <__ram_exceptions_end+0xfff75cf8>

0009643c <__umoddi3>:
   9643c:	defff304 	addi	sp,sp,-52
   96440:	df000b15 	stw	fp,44(sp)
   96444:	dc400415 	stw	r17,16(sp)
   96448:	dc000315 	stw	r16,12(sp)
   9644c:	dfc00c15 	stw	ra,48(sp)
   96450:	ddc00a15 	stw	r23,40(sp)
   96454:	dd800915 	stw	r22,36(sp)
   96458:	dd400815 	stw	r21,32(sp)
   9645c:	dd000715 	stw	r20,28(sp)
   96460:	dcc00615 	stw	r19,24(sp)
   96464:	dc800515 	stw	r18,20(sp)
   96468:	2021883a 	mov	r16,r4
   9646c:	2823883a 	mov	r17,r5
   96470:	2839883a 	mov	fp,r5
   96474:	3800401e 	bne	r7,zero,96578 <__umoddi3+0x13c>
   96478:	3027883a 	mov	r19,r6
   9647c:	2029883a 	mov	r20,r4
   96480:	2980552e 	bgeu	r5,r6,965d8 <__umoddi3+0x19c>
   96484:	00bfffd4 	movui	r2,65535
   96488:	1180a236 	bltu	r2,r6,96714 <__umoddi3+0x2d8>
   9648c:	01003fc4 	movi	r4,255
   96490:	2189803a 	cmpltu	r4,r4,r6
   96494:	200890fa 	slli	r4,r4,3
   96498:	3104d83a 	srl	r2,r6,r4
   9649c:	00c002b4 	movhi	r3,10
   964a0:	18f9f784 	addi	r3,r3,-6178
   964a4:	1885883a 	add	r2,r3,r2
   964a8:	10c00003 	ldbu	r3,0(r2)
   964ac:	00800804 	movi	r2,32
   964b0:	1909883a 	add	r4,r3,r4
   964b4:	1125c83a 	sub	r18,r2,r4
   964b8:	90000526 	beq	r18,zero,964d0 <__umoddi3+0x94>
   964bc:	8ca2983a 	sll	r17,r17,r18
   964c0:	8108d83a 	srl	r4,r16,r4
   964c4:	34a6983a 	sll	r19,r6,r18
   964c8:	84a8983a 	sll	r20,r16,r18
   964cc:	2478b03a 	or	fp,r4,r17
   964d0:	982cd43a 	srli	r22,r19,16
   964d4:	e009883a 	mov	r4,fp
   964d8:	9dffffcc 	andi	r23,r19,65535
   964dc:	b00b883a 	mov	r5,r22
   964e0:	00821bc0 	call	821bc <__umodsi3>
   964e4:	b00b883a 	mov	r5,r22
   964e8:	e009883a 	mov	r4,fp
   964ec:	102b883a 	mov	r21,r2
   964f0:	00821580 	call	82158 <__udivsi3>
   964f4:	100b883a 	mov	r5,r2
   964f8:	b809883a 	mov	r4,r23
   964fc:	00822140 	call	82214 <__mulsi3>
   96500:	a82a943a 	slli	r21,r21,16
   96504:	a006d43a 	srli	r3,r20,16
   96508:	1d46b03a 	or	r3,r3,r21
   9650c:	1880032e 	bgeu	r3,r2,9651c <__umoddi3+0xe0>
   96510:	1cc7883a 	add	r3,r3,r19
   96514:	1cc00136 	bltu	r3,r19,9651c <__umoddi3+0xe0>
   96518:	18813136 	bltu	r3,r2,969e0 <__umoddi3+0x5a4>
   9651c:	18a1c83a 	sub	r16,r3,r2
   96520:	b00b883a 	mov	r5,r22
   96524:	8009883a 	mov	r4,r16
   96528:	00821bc0 	call	821bc <__umodsi3>
   9652c:	b00b883a 	mov	r5,r22
   96530:	8009883a 	mov	r4,r16
   96534:	1023883a 	mov	r17,r2
   96538:	00821580 	call	82158 <__udivsi3>
   9653c:	100b883a 	mov	r5,r2
   96540:	b809883a 	mov	r4,r23
   96544:	8822943a 	slli	r17,r17,16
   96548:	00822140 	call	82214 <__mulsi3>
   9654c:	a0ffffcc 	andi	r3,r20,65535
   96550:	1c46b03a 	or	r3,r3,r17
   96554:	1880042e 	bgeu	r3,r2,96568 <__umoddi3+0x12c>
   96558:	1cc7883a 	add	r3,r3,r19
   9655c:	1cc00236 	bltu	r3,r19,96568 <__umoddi3+0x12c>
   96560:	1880012e 	bgeu	r3,r2,96568 <__umoddi3+0x12c>
   96564:	1cc7883a 	add	r3,r3,r19
   96568:	1885c83a 	sub	r2,r3,r2
   9656c:	1484d83a 	srl	r2,r2,r18
   96570:	0007883a 	mov	r3,zero
   96574:	00005306 	br	966c4 <__umoddi3+0x288>
   96578:	29c05036 	bltu	r5,r7,966bc <__umoddi3+0x280>
   9657c:	00bfffd4 	movui	r2,65535
   96580:	11c05c2e 	bgeu	r2,r7,966f4 <__umoddi3+0x2b8>
   96584:	00804034 	movhi	r2,256
   96588:	10bfffc4 	addi	r2,r2,-1
   9658c:	11c10636 	bltu	r2,r7,969a8 <__umoddi3+0x56c>
   96590:	01000404 	movi	r4,16
   96594:	3904d83a 	srl	r2,r7,r4
   96598:	00c002b4 	movhi	r3,10
   9659c:	18f9f784 	addi	r3,r3,-6178
   965a0:	1885883a 	add	r2,r3,r2
   965a4:	14c00003 	ldbu	r19,0(r2)
   965a8:	00c00804 	movi	r3,32
   965ac:	9927883a 	add	r19,r19,r4
   965b0:	1ce9c83a 	sub	r20,r3,r19
   965b4:	a0005c1e 	bne	r20,zero,96728 <__umoddi3+0x2ec>
   965b8:	3c400136 	bltu	r7,r17,965c0 <__umoddi3+0x184>
   965bc:	81810a36 	bltu	r16,r6,969e8 <__umoddi3+0x5ac>
   965c0:	8185c83a 	sub	r2,r16,r6
   965c4:	89e3c83a 	sub	r17,r17,r7
   965c8:	8089803a 	cmpltu	r4,r16,r2
   965cc:	8939c83a 	sub	fp,r17,r4
   965d0:	e007883a 	mov	r3,fp
   965d4:	00003b06 	br	966c4 <__umoddi3+0x288>
   965d8:	3000041e 	bne	r6,zero,965ec <__umoddi3+0x1b0>
   965dc:	000b883a 	mov	r5,zero
   965e0:	01000044 	movi	r4,1
   965e4:	00821580 	call	82158 <__udivsi3>
   965e8:	1027883a 	mov	r19,r2
   965ec:	00bfffd4 	movui	r2,65535
   965f0:	14c0442e 	bgeu	r2,r19,96704 <__umoddi3+0x2c8>
   965f4:	00804034 	movhi	r2,256
   965f8:	10bfffc4 	addi	r2,r2,-1
   965fc:	14c0ec36 	bltu	r2,r19,969b0 <__umoddi3+0x574>
   96600:	00800404 	movi	r2,16
   96604:	9886d83a 	srl	r3,r19,r2
   96608:	010002b4 	movhi	r4,10
   9660c:	2139f784 	addi	r4,r4,-6178
   96610:	20c7883a 	add	r3,r4,r3
   96614:	18c00003 	ldbu	r3,0(r3)
   96618:	1887883a 	add	r3,r3,r2
   9661c:	00800804 	movi	r2,32
   96620:	10e5c83a 	sub	r18,r2,r3
   96624:	9000ab1e 	bne	r18,zero,968d4 <__umoddi3+0x498>
   96628:	982cd43a 	srli	r22,r19,16
   9662c:	8ce3c83a 	sub	r17,r17,r19
   96630:	9dffffcc 	andi	r23,r19,65535
   96634:	b00b883a 	mov	r5,r22
   96638:	8809883a 	mov	r4,r17
   9663c:	00821bc0 	call	821bc <__umodsi3>
   96640:	b00b883a 	mov	r5,r22
   96644:	8809883a 	mov	r4,r17
   96648:	102b883a 	mov	r21,r2
   9664c:	00821580 	call	82158 <__udivsi3>
   96650:	b80b883a 	mov	r5,r23
   96654:	1009883a 	mov	r4,r2
   96658:	00822140 	call	82214 <__mulsi3>
   9665c:	a82a943a 	slli	r21,r21,16
   96660:	a006d43a 	srli	r3,r20,16
   96664:	1d46b03a 	or	r3,r3,r21
   96668:	1880042e 	bgeu	r3,r2,9667c <__umoddi3+0x240>
   9666c:	1cc7883a 	add	r3,r3,r19
   96670:	1cc00236 	bltu	r3,r19,9667c <__umoddi3+0x240>
   96674:	1880012e 	bgeu	r3,r2,9667c <__umoddi3+0x240>
   96678:	1cc7883a 	add	r3,r3,r19
   9667c:	18a1c83a 	sub	r16,r3,r2
   96680:	b00b883a 	mov	r5,r22
   96684:	8009883a 	mov	r4,r16
   96688:	00821bc0 	call	821bc <__umodsi3>
   9668c:	1023883a 	mov	r17,r2
   96690:	b00b883a 	mov	r5,r22
   96694:	8009883a 	mov	r4,r16
   96698:	00821580 	call	82158 <__udivsi3>
   9669c:	8822943a 	slli	r17,r17,16
   966a0:	b80b883a 	mov	r5,r23
   966a4:	1009883a 	mov	r4,r2
   966a8:	00822140 	call	82214 <__mulsi3>
   966ac:	a53fffcc 	andi	r20,r20,65535
   966b0:	a446b03a 	or	r3,r20,r17
   966b4:	18bfac2e 	bgeu	r3,r2,96568 <__ram_exceptions_end+0xfff76334>
   966b8:	003fa706 	br	96558 <__ram_exceptions_end+0xfff76324>
   966bc:	2005883a 	mov	r2,r4
   966c0:	2807883a 	mov	r3,r5
   966c4:	dfc00c17 	ldw	ra,48(sp)
   966c8:	df000b17 	ldw	fp,44(sp)
   966cc:	ddc00a17 	ldw	r23,40(sp)
   966d0:	dd800917 	ldw	r22,36(sp)
   966d4:	dd400817 	ldw	r21,32(sp)
   966d8:	dd000717 	ldw	r20,28(sp)
   966dc:	dcc00617 	ldw	r19,24(sp)
   966e0:	dc800517 	ldw	r18,20(sp)
   966e4:	dc400417 	ldw	r17,16(sp)
   966e8:	dc000317 	ldw	r16,12(sp)
   966ec:	dec00d04 	addi	sp,sp,52
   966f0:	f800283a 	ret
   966f4:	04c03fc4 	movi	r19,255
   966f8:	99c9803a 	cmpltu	r4,r19,r7
   966fc:	200890fa 	slli	r4,r4,3
   96700:	003fa406 	br	96594 <__ram_exceptions_end+0xfff76360>
   96704:	00803fc4 	movi	r2,255
   96708:	14c5803a 	cmpltu	r2,r2,r19
   9670c:	100490fa 	slli	r2,r2,3
   96710:	003fbc06 	br	96604 <__ram_exceptions_end+0xfff763d0>
   96714:	00804034 	movhi	r2,256
   96718:	10bfffc4 	addi	r2,r2,-1
   9671c:	1180a636 	bltu	r2,r6,969b8 <__umoddi3+0x57c>
   96720:	01000404 	movi	r4,16
   96724:	003f5c06 	br	96498 <__ram_exceptions_end+0xfff76264>
   96728:	3d0e983a 	sll	r7,r7,r20
   9672c:	34ead83a 	srl	r21,r6,r19
   96730:	8cc6d83a 	srl	r3,r17,r19
   96734:	8d10983a 	sll	r8,r17,r20
   96738:	3d6ab03a 	or	r21,r7,r21
   9673c:	a82cd43a 	srli	r22,r21,16
   96740:	84e2d83a 	srl	r17,r16,r19
   96744:	1809883a 	mov	r4,r3
   96748:	b00b883a 	mov	r5,r22
   9674c:	8a22b03a 	or	r17,r17,r8
   96750:	3524983a 	sll	r18,r6,r20
   96754:	dc400015 	stw	r17,0(sp)
   96758:	d8c00115 	stw	r3,4(sp)
   9675c:	00821bc0 	call	821bc <__umodsi3>
   96760:	d8c00117 	ldw	r3,4(sp)
   96764:	b00b883a 	mov	r5,r22
   96768:	1039883a 	mov	fp,r2
   9676c:	1809883a 	mov	r4,r3
   96770:	00821580 	call	82158 <__udivsi3>
   96774:	adffffcc 	andi	r23,r21,65535
   96778:	100b883a 	mov	r5,r2
   9677c:	b809883a 	mov	r4,r23
   96780:	1023883a 	mov	r17,r2
   96784:	00822140 	call	82214 <__mulsi3>
   96788:	d9400017 	ldw	r5,0(sp)
   9678c:	e008943a 	slli	r4,fp,16
   96790:	8520983a 	sll	r16,r16,r20
   96794:	2806d43a 	srli	r3,r5,16
   96798:	1906b03a 	or	r3,r3,r4
   9679c:	1880042e 	bgeu	r3,r2,967b0 <__umoddi3+0x374>
   967a0:	1d47883a 	add	r3,r3,r21
   967a4:	893fffc4 	addi	r4,r17,-1
   967a8:	1d40892e 	bgeu	r3,r21,969d0 <__umoddi3+0x594>
   967ac:	2023883a 	mov	r17,r4
   967b0:	18b9c83a 	sub	fp,r3,r2
   967b4:	b00b883a 	mov	r5,r22
   967b8:	e009883a 	mov	r4,fp
   967bc:	00821bc0 	call	821bc <__umodsi3>
   967c0:	b00b883a 	mov	r5,r22
   967c4:	e009883a 	mov	r4,fp
   967c8:	d8800215 	stw	r2,8(sp)
   967cc:	00821580 	call	82158 <__udivsi3>
   967d0:	100b883a 	mov	r5,r2
   967d4:	b809883a 	mov	r4,r23
   967d8:	102d883a 	mov	r22,r2
   967dc:	00822140 	call	82214 <__mulsi3>
   967e0:	d9800217 	ldw	r6,8(sp)
   967e4:	d8c00017 	ldw	r3,0(sp)
   967e8:	300c943a 	slli	r6,r6,16
   967ec:	1a3fffcc 	andi	r8,r3,65535
   967f0:	4190b03a 	or	r8,r8,r6
   967f4:	4080042e 	bgeu	r8,r2,96808 <__umoddi3+0x3cc>
   967f8:	4551883a 	add	r8,r8,r21
   967fc:	b0ffffc4 	addi	r3,r22,-1
   96800:	45406f2e 	bgeu	r8,r21,969c0 <__umoddi3+0x584>
   96804:	182d883a 	mov	r22,r3
   96808:	880e943a 	slli	r7,r17,16
   9680c:	9006d43a 	srli	r3,r18,16
   96810:	91bfffcc 	andi	r6,r18,65535
   96814:	3dacb03a 	or	r22,r7,r22
   96818:	b02ed43a 	srli	r23,r22,16
   9681c:	b5bfffcc 	andi	r22,r22,65535
   96820:	300b883a 	mov	r5,r6
   96824:	b009883a 	mov	r4,r22
   96828:	40a3c83a 	sub	r17,r8,r2
   9682c:	d8c00115 	stw	r3,4(sp)
   96830:	d9800215 	stw	r6,8(sp)
   96834:	00822140 	call	82214 <__mulsi3>
   96838:	d9800217 	ldw	r6,8(sp)
   9683c:	b809883a 	mov	r4,r23
   96840:	1039883a 	mov	fp,r2
   96844:	300b883a 	mov	r5,r6
   96848:	00822140 	call	82214 <__mulsi3>
   9684c:	d8c00117 	ldw	r3,4(sp)
   96850:	b809883a 	mov	r4,r23
   96854:	d8800215 	stw	r2,8(sp)
   96858:	180b883a 	mov	r5,r3
   9685c:	00822140 	call	82214 <__mulsi3>
   96860:	d8c00117 	ldw	r3,4(sp)
   96864:	b009883a 	mov	r4,r22
   96868:	102f883a 	mov	r23,r2
   9686c:	180b883a 	mov	r5,r3
   96870:	00822140 	call	82214 <__mulsi3>
   96874:	d9800217 	ldw	r6,8(sp)
   96878:	e006d43a 	srli	r3,fp,16
   9687c:	1185883a 	add	r2,r2,r6
   96880:	1885883a 	add	r2,r3,r2
   96884:	1180022e 	bgeu	r2,r6,96890 <__umoddi3+0x454>
   96888:	00c00074 	movhi	r3,1
   9688c:	b8ef883a 	add	r23,r23,r3
   96890:	1006d43a 	srli	r3,r2,16
   96894:	1004943a 	slli	r2,r2,16
   96898:	e73fffcc 	andi	fp,fp,65535
   9689c:	1dc7883a 	add	r3,r3,r23
   968a0:	1739883a 	add	fp,r2,fp
   968a4:	88c03a36 	bltu	r17,r3,96990 <__umoddi3+0x554>
   968a8:	88c05126 	beq	r17,r3,969f0 <__umoddi3+0x5b4>
   968ac:	88c9c83a 	sub	r4,r17,r3
   968b0:	e00f883a 	mov	r7,fp
   968b4:	81cfc83a 	sub	r7,r16,r7
   968b8:	81c7803a 	cmpltu	r3,r16,r7
   968bc:	20c7c83a 	sub	r3,r4,r3
   968c0:	1cc4983a 	sll	r2,r3,r19
   968c4:	3d0ed83a 	srl	r7,r7,r20
   968c8:	1d06d83a 	srl	r3,r3,r20
   968cc:	11c4b03a 	or	r2,r2,r7
   968d0:	003f7c06 	br	966c4 <__ram_exceptions_end+0xfff76490>
   968d4:	9ca6983a 	sll	r19,r19,r18
   968d8:	88f8d83a 	srl	fp,r17,r3
   968dc:	80c4d83a 	srl	r2,r16,r3
   968e0:	982cd43a 	srli	r22,r19,16
   968e4:	8ca2983a 	sll	r17,r17,r18
   968e8:	e009883a 	mov	r4,fp
   968ec:	b00b883a 	mov	r5,r22
   968f0:	146ab03a 	or	r21,r2,r17
   968f4:	00821bc0 	call	821bc <__umodsi3>
   968f8:	b00b883a 	mov	r5,r22
   968fc:	e009883a 	mov	r4,fp
   96900:	1029883a 	mov	r20,r2
   96904:	9dffffcc 	andi	r23,r19,65535
   96908:	00821580 	call	82158 <__udivsi3>
   9690c:	b809883a 	mov	r4,r23
   96910:	100b883a 	mov	r5,r2
   96914:	00822140 	call	82214 <__mulsi3>
   96918:	a008943a 	slli	r4,r20,16
   9691c:	a806d43a 	srli	r3,r21,16
   96920:	84a8983a 	sll	r20,r16,r18
   96924:	1906b03a 	or	r3,r3,r4
   96928:	1880042e 	bgeu	r3,r2,9693c <__umoddi3+0x500>
   9692c:	1cc7883a 	add	r3,r3,r19
   96930:	1cc00236 	bltu	r3,r19,9693c <__umoddi3+0x500>
   96934:	1880012e 	bgeu	r3,r2,9693c <__umoddi3+0x500>
   96938:	1cc7883a 	add	r3,r3,r19
   9693c:	18a3c83a 	sub	r17,r3,r2
   96940:	b00b883a 	mov	r5,r22
   96944:	8809883a 	mov	r4,r17
   96948:	00821bc0 	call	821bc <__umodsi3>
   9694c:	b00b883a 	mov	r5,r22
   96950:	8809883a 	mov	r4,r17
   96954:	1021883a 	mov	r16,r2
   96958:	00821580 	call	82158 <__udivsi3>
   9695c:	100b883a 	mov	r5,r2
   96960:	b809883a 	mov	r4,r23
   96964:	8020943a 	slli	r16,r16,16
   96968:	00822140 	call	82214 <__mulsi3>
   9696c:	a8ffffcc 	andi	r3,r21,65535
   96970:	1c06b03a 	or	r3,r3,r16
   96974:	1880042e 	bgeu	r3,r2,96988 <__umoddi3+0x54c>
   96978:	1cc7883a 	add	r3,r3,r19
   9697c:	1cc00236 	bltu	r3,r19,96988 <__umoddi3+0x54c>
   96980:	1880012e 	bgeu	r3,r2,96988 <__umoddi3+0x54c>
   96984:	1cc7883a 	add	r3,r3,r19
   96988:	18a3c83a 	sub	r17,r3,r2
   9698c:	003f2906 	br	96634 <__ram_exceptions_end+0xfff76400>
   96990:	e48fc83a 	sub	r7,fp,r18
   96994:	1d49c83a 	sub	r4,r3,r21
   96998:	e1f9803a 	cmpltu	fp,fp,r7
   9699c:	2739c83a 	sub	fp,r4,fp
   969a0:	8f09c83a 	sub	r4,r17,fp
   969a4:	003fc306 	br	968b4 <__ram_exceptions_end+0xfff76680>
   969a8:	01000604 	movi	r4,24
   969ac:	003ef906 	br	96594 <__ram_exceptions_end+0xfff76360>
   969b0:	00800604 	movi	r2,24
   969b4:	003f1306 	br	96604 <__ram_exceptions_end+0xfff763d0>
   969b8:	01000604 	movi	r4,24
   969bc:	003eb606 	br	96498 <__ram_exceptions_end+0xfff76264>
   969c0:	40bf902e 	bgeu	r8,r2,96804 <__ram_exceptions_end+0xfff765d0>
   969c4:	b5bfff84 	addi	r22,r22,-2
   969c8:	4551883a 	add	r8,r8,r21
   969cc:	003f8e06 	br	96808 <__ram_exceptions_end+0xfff765d4>
   969d0:	18bf762e 	bgeu	r3,r2,967ac <__ram_exceptions_end+0xfff76578>
   969d4:	8c7fff84 	addi	r17,r17,-2
   969d8:	1d47883a 	add	r3,r3,r21
   969dc:	003f7406 	br	967b0 <__ram_exceptions_end+0xfff7657c>
   969e0:	1cc7883a 	add	r3,r3,r19
   969e4:	003ecd06 	br	9651c <__ram_exceptions_end+0xfff762e8>
   969e8:	8005883a 	mov	r2,r16
   969ec:	003ef806 	br	965d0 <__ram_exceptions_end+0xfff7639c>
   969f0:	873fe736 	bltu	r16,fp,96990 <__ram_exceptions_end+0xfff7675c>
   969f4:	e00f883a 	mov	r7,fp
   969f8:	0009883a 	mov	r4,zero
   969fc:	003fad06 	br	968b4 <__ram_exceptions_end+0xfff76680>

00096a00 <__eqsf2>:
   96a00:	2006d5fa 	srli	r3,r4,23
   96a04:	280cd5fa 	srli	r6,r5,23
   96a08:	01c02034 	movhi	r7,128
   96a0c:	39ffffc4 	addi	r7,r7,-1
   96a10:	18c03fcc 	andi	r3,r3,255
   96a14:	02003fc4 	movi	r8,255
   96a18:	3904703a 	and	r2,r7,r4
   96a1c:	31803fcc 	andi	r6,r6,255
   96a20:	394e703a 	and	r7,r7,r5
   96a24:	2008d7fa 	srli	r4,r4,31
   96a28:	280ad7fa 	srli	r5,r5,31
   96a2c:	1a000d26 	beq	r3,r8,96a64 <__eqsf2+0x64>
   96a30:	02003fc4 	movi	r8,255
   96a34:	32000826 	beq	r6,r8,96a58 <__eqsf2+0x58>
   96a38:	19800226 	beq	r3,r6,96a44 <__eqsf2+0x44>
   96a3c:	00800044 	movi	r2,1
   96a40:	f800283a 	ret
   96a44:	11fffd1e 	bne	r2,r7,96a3c <__ram_exceptions_end+0xfff76808>
   96a48:	21400926 	beq	r4,r5,96a70 <__eqsf2+0x70>
   96a4c:	183ffb1e 	bne	r3,zero,96a3c <__ram_exceptions_end+0xfff76808>
   96a50:	1004c03a 	cmpne	r2,r2,zero
   96a54:	f800283a 	ret
   96a58:	383ff726 	beq	r7,zero,96a38 <__ram_exceptions_end+0xfff76804>
   96a5c:	00800044 	movi	r2,1
   96a60:	f800283a 	ret
   96a64:	103ff226 	beq	r2,zero,96a30 <__ram_exceptions_end+0xfff767fc>
   96a68:	00800044 	movi	r2,1
   96a6c:	f800283a 	ret
   96a70:	0005883a 	mov	r2,zero
   96a74:	f800283a 	ret

00096a78 <__gesf2>:
   96a78:	2004d5fa 	srli	r2,r4,23
   96a7c:	2806d5fa 	srli	r3,r5,23
   96a80:	01802034 	movhi	r6,128
   96a84:	31bfffc4 	addi	r6,r6,-1
   96a88:	10803fcc 	andi	r2,r2,255
   96a8c:	01c03fc4 	movi	r7,255
   96a90:	3110703a 	and	r8,r6,r4
   96a94:	18c03fcc 	andi	r3,r3,255
   96a98:	314c703a 	and	r6,r6,r5
   96a9c:	2008d7fa 	srli	r4,r4,31
   96aa0:	280ad7fa 	srli	r5,r5,31
   96aa4:	11c01926 	beq	r2,r7,96b0c <__gesf2+0x94>
   96aa8:	01c03fc4 	movi	r7,255
   96aac:	19c00f26 	beq	r3,r7,96aec <__gesf2+0x74>
   96ab0:	1000061e 	bne	r2,zero,96acc <__gesf2+0x54>
   96ab4:	400f003a 	cmpeq	r7,r8,zero
   96ab8:	1800071e 	bne	r3,zero,96ad8 <__gesf2+0x60>
   96abc:	3000061e 	bne	r6,zero,96ad8 <__gesf2+0x60>
   96ac0:	0005883a 	mov	r2,zero
   96ac4:	40000e1e 	bne	r8,zero,96b00 <__gesf2+0x88>
   96ac8:	f800283a 	ret
   96acc:	18000a1e 	bne	r3,zero,96af8 <__gesf2+0x80>
   96ad0:	30000b26 	beq	r6,zero,96b00 <__gesf2+0x88>
   96ad4:	000f883a 	mov	r7,zero
   96ad8:	29403fcc 	andi	r5,r5,255
   96adc:	38000726 	beq	r7,zero,96afc <__gesf2+0x84>
   96ae0:	28000826 	beq	r5,zero,96b04 <__gesf2+0x8c>
   96ae4:	00800044 	movi	r2,1
   96ae8:	f800283a 	ret
   96aec:	303ff026 	beq	r6,zero,96ab0 <__ram_exceptions_end+0xfff7687c>
   96af0:	00bfff84 	movi	r2,-2
   96af4:	f800283a 	ret
   96af8:	29403fcc 	andi	r5,r5,255
   96afc:	21400526 	beq	r4,r5,96b14 <__gesf2+0x9c>
   96b00:	203ff826 	beq	r4,zero,96ae4 <__ram_exceptions_end+0xfff768b0>
   96b04:	00bfffc4 	movi	r2,-1
   96b08:	f800283a 	ret
   96b0c:	403fe626 	beq	r8,zero,96aa8 <__ram_exceptions_end+0xfff76874>
   96b10:	003ff706 	br	96af0 <__ram_exceptions_end+0xfff768bc>
   96b14:	18bffa16 	blt	r3,r2,96b00 <__ram_exceptions_end+0xfff768cc>
   96b18:	10c00216 	blt	r2,r3,96b24 <__gesf2+0xac>
   96b1c:	323ff836 	bltu	r6,r8,96b00 <__ram_exceptions_end+0xfff768cc>
   96b20:	4180022e 	bgeu	r8,r6,96b2c <__gesf2+0xb4>
   96b24:	203fef1e 	bne	r4,zero,96ae4 <__ram_exceptions_end+0xfff768b0>
   96b28:	003ff606 	br	96b04 <__ram_exceptions_end+0xfff768d0>
   96b2c:	0005883a 	mov	r2,zero
   96b30:	f800283a 	ret

00096b34 <__lesf2>:
   96b34:	2004d5fa 	srli	r2,r4,23
   96b38:	280cd5fa 	srli	r6,r5,23
   96b3c:	00c02034 	movhi	r3,128
   96b40:	18ffffc4 	addi	r3,r3,-1
   96b44:	10803fcc 	andi	r2,r2,255
   96b48:	01c03fc4 	movi	r7,255
   96b4c:	1910703a 	and	r8,r3,r4
   96b50:	31803fcc 	andi	r6,r6,255
   96b54:	1946703a 	and	r3,r3,r5
   96b58:	2008d7fa 	srli	r4,r4,31
   96b5c:	280ad7fa 	srli	r5,r5,31
   96b60:	11c01b26 	beq	r2,r7,96bd0 <__lesf2+0x9c>
   96b64:	01c03fc4 	movi	r7,255
   96b68:	31c01126 	beq	r6,r7,96bb0 <__lesf2+0x7c>
   96b6c:	1000071e 	bne	r2,zero,96b8c <__lesf2+0x58>
   96b70:	400f003a 	cmpeq	r7,r8,zero
   96b74:	21003fcc 	andi	r4,r4,255
   96b78:	3000081e 	bne	r6,zero,96b9c <__lesf2+0x68>
   96b7c:	1800071e 	bne	r3,zero,96b9c <__lesf2+0x68>
   96b80:	0005883a 	mov	r2,zero
   96b84:	40000f1e 	bne	r8,zero,96bc4 <__lesf2+0x90>
   96b88:	f800283a 	ret
   96b8c:	21003fcc 	andi	r4,r4,255
   96b90:	30000a1e 	bne	r6,zero,96bbc <__lesf2+0x88>
   96b94:	18000b26 	beq	r3,zero,96bc4 <__lesf2+0x90>
   96b98:	000f883a 	mov	r7,zero
   96b9c:	29403fcc 	andi	r5,r5,255
   96ba0:	38000726 	beq	r7,zero,96bc0 <__lesf2+0x8c>
   96ba4:	28000826 	beq	r5,zero,96bc8 <__lesf2+0x94>
   96ba8:	00800044 	movi	r2,1
   96bac:	f800283a 	ret
   96bb0:	183fee26 	beq	r3,zero,96b6c <__ram_exceptions_end+0xfff76938>
   96bb4:	00800084 	movi	r2,2
   96bb8:	f800283a 	ret
   96bbc:	29403fcc 	andi	r5,r5,255
   96bc0:	21400626 	beq	r4,r5,96bdc <__lesf2+0xa8>
   96bc4:	203ff826 	beq	r4,zero,96ba8 <__ram_exceptions_end+0xfff76974>
   96bc8:	00bfffc4 	movi	r2,-1
   96bcc:	f800283a 	ret
   96bd0:	403fe426 	beq	r8,zero,96b64 <__ram_exceptions_end+0xfff76930>
   96bd4:	00800084 	movi	r2,2
   96bd8:	f800283a 	ret
   96bdc:	30bff916 	blt	r6,r2,96bc4 <__ram_exceptions_end+0xfff76990>
   96be0:	11800216 	blt	r2,r6,96bec <__lesf2+0xb8>
   96be4:	1a3ff736 	bltu	r3,r8,96bc4 <__ram_exceptions_end+0xfff76990>
   96be8:	40c0022e 	bgeu	r8,r3,96bf4 <__lesf2+0xc0>
   96bec:	203fee1e 	bne	r4,zero,96ba8 <__ram_exceptions_end+0xfff76974>
   96bf0:	003ff506 	br	96bc8 <__ram_exceptions_end+0xfff76994>
   96bf4:	0005883a 	mov	r2,zero
   96bf8:	f800283a 	ret

00096bfc <__adddf3>:
   96bfc:	02c00434 	movhi	r11,16
   96c00:	5affffc4 	addi	r11,r11,-1
   96c04:	2806d7fa 	srli	r3,r5,31
   96c08:	2ad4703a 	and	r10,r5,r11
   96c0c:	3ad2703a 	and	r9,r7,r11
   96c10:	3804d53a 	srli	r2,r7,20
   96c14:	3018d77a 	srli	r12,r6,29
   96c18:	280ad53a 	srli	r5,r5,20
   96c1c:	501490fa 	slli	r10,r10,3
   96c20:	2010d77a 	srli	r8,r4,29
   96c24:	481290fa 	slli	r9,r9,3
   96c28:	380ed7fa 	srli	r7,r7,31
   96c2c:	defffb04 	addi	sp,sp,-20
   96c30:	dc800215 	stw	r18,8(sp)
   96c34:	dc400115 	stw	r17,4(sp)
   96c38:	dc000015 	stw	r16,0(sp)
   96c3c:	dfc00415 	stw	ra,16(sp)
   96c40:	dcc00315 	stw	r19,12(sp)
   96c44:	1c803fcc 	andi	r18,r3,255
   96c48:	2c01ffcc 	andi	r16,r5,2047
   96c4c:	5210b03a 	or	r8,r10,r8
   96c50:	202290fa 	slli	r17,r4,3
   96c54:	1081ffcc 	andi	r2,r2,2047
   96c58:	4b12b03a 	or	r9,r9,r12
   96c5c:	300c90fa 	slli	r6,r6,3
   96c60:	91c07526 	beq	r18,r7,96e38 <__adddf3+0x23c>
   96c64:	8087c83a 	sub	r3,r16,r2
   96c68:	00c0ab0e 	bge	zero,r3,96f18 <__adddf3+0x31c>
   96c6c:	10002a1e 	bne	r2,zero,96d18 <__adddf3+0x11c>
   96c70:	4984b03a 	or	r2,r9,r6
   96c74:	1000961e 	bne	r2,zero,96ed0 <__adddf3+0x2d4>
   96c78:	888001cc 	andi	r2,r17,7
   96c7c:	10000726 	beq	r2,zero,96c9c <__adddf3+0xa0>
   96c80:	888003cc 	andi	r2,r17,15
   96c84:	00c00104 	movi	r3,4
   96c88:	10c00426 	beq	r2,r3,96c9c <__adddf3+0xa0>
   96c8c:	88c7883a 	add	r3,r17,r3
   96c90:	1c63803a 	cmpltu	r17,r3,r17
   96c94:	4451883a 	add	r8,r8,r17
   96c98:	1823883a 	mov	r17,r3
   96c9c:	4080202c 	andhi	r2,r8,128
   96ca0:	10005926 	beq	r2,zero,96e08 <__adddf3+0x20c>
   96ca4:	84000044 	addi	r16,r16,1
   96ca8:	0081ffc4 	movi	r2,2047
   96cac:	8080ba26 	beq	r16,r2,96f98 <__adddf3+0x39c>
   96cb0:	00bfe034 	movhi	r2,65408
   96cb4:	10bfffc4 	addi	r2,r2,-1
   96cb8:	4090703a 	and	r8,r8,r2
   96cbc:	4004977a 	slli	r2,r8,29
   96cc0:	4010927a 	slli	r8,r8,9
   96cc4:	8822d0fa 	srli	r17,r17,3
   96cc8:	8401ffcc 	andi	r16,r16,2047
   96ccc:	4010d33a 	srli	r8,r8,12
   96cd0:	9007883a 	mov	r3,r18
   96cd4:	1444b03a 	or	r2,r2,r17
   96cd8:	8401ffcc 	andi	r16,r16,2047
   96cdc:	8020953a 	slli	r16,r16,20
   96ce0:	18c03fcc 	andi	r3,r3,255
   96ce4:	01000434 	movhi	r4,16
   96ce8:	213fffc4 	addi	r4,r4,-1
   96cec:	180697fa 	slli	r3,r3,31
   96cf0:	4110703a 	and	r8,r8,r4
   96cf4:	4410b03a 	or	r8,r8,r16
   96cf8:	40c6b03a 	or	r3,r8,r3
   96cfc:	dfc00417 	ldw	ra,16(sp)
   96d00:	dcc00317 	ldw	r19,12(sp)
   96d04:	dc800217 	ldw	r18,8(sp)
   96d08:	dc400117 	ldw	r17,4(sp)
   96d0c:	dc000017 	ldw	r16,0(sp)
   96d10:	dec00504 	addi	sp,sp,20
   96d14:	f800283a 	ret
   96d18:	0081ffc4 	movi	r2,2047
   96d1c:	80bfd626 	beq	r16,r2,96c78 <__ram_exceptions_end+0xfff76a44>
   96d20:	4a402034 	orhi	r9,r9,128
   96d24:	00800e04 	movi	r2,56
   96d28:	10c09f16 	blt	r2,r3,96fa8 <__adddf3+0x3ac>
   96d2c:	008007c4 	movi	r2,31
   96d30:	10c0c216 	blt	r2,r3,9703c <__adddf3+0x440>
   96d34:	00800804 	movi	r2,32
   96d38:	10c5c83a 	sub	r2,r2,r3
   96d3c:	488a983a 	sll	r5,r9,r2
   96d40:	30c8d83a 	srl	r4,r6,r3
   96d44:	3084983a 	sll	r2,r6,r2
   96d48:	48c6d83a 	srl	r3,r9,r3
   96d4c:	290cb03a 	or	r6,r5,r4
   96d50:	1004c03a 	cmpne	r2,r2,zero
   96d54:	308cb03a 	or	r6,r6,r2
   96d58:	898dc83a 	sub	r6,r17,r6
   96d5c:	89a3803a 	cmpltu	r17,r17,r6
   96d60:	40d1c83a 	sub	r8,r8,r3
   96d64:	4451c83a 	sub	r8,r8,r17
   96d68:	3023883a 	mov	r17,r6
   96d6c:	4080202c 	andhi	r2,r8,128
   96d70:	10002326 	beq	r2,zero,96e00 <__adddf3+0x204>
   96d74:	04c02034 	movhi	r19,128
   96d78:	9cffffc4 	addi	r19,r19,-1
   96d7c:	44e6703a 	and	r19,r8,r19
   96d80:	98007626 	beq	r19,zero,96f5c <__adddf3+0x360>
   96d84:	9809883a 	mov	r4,r19
   96d88:	00995e40 	call	995e4 <__clzsi2>
   96d8c:	10fffe04 	addi	r3,r2,-8
   96d90:	010007c4 	movi	r4,31
   96d94:	20c07716 	blt	r4,r3,96f74 <__adddf3+0x378>
   96d98:	00800804 	movi	r2,32
   96d9c:	10c5c83a 	sub	r2,r2,r3
   96da0:	8884d83a 	srl	r2,r17,r2
   96da4:	98d0983a 	sll	r8,r19,r3
   96da8:	88e2983a 	sll	r17,r17,r3
   96dac:	1204b03a 	or	r2,r2,r8
   96db0:	1c007416 	blt	r3,r16,96f84 <__adddf3+0x388>
   96db4:	1c21c83a 	sub	r16,r3,r16
   96db8:	82000044 	addi	r8,r16,1
   96dbc:	00c007c4 	movi	r3,31
   96dc0:	1a009116 	blt	r3,r8,97008 <__adddf3+0x40c>
   96dc4:	00c00804 	movi	r3,32
   96dc8:	1a07c83a 	sub	r3,r3,r8
   96dcc:	8a08d83a 	srl	r4,r17,r8
   96dd0:	88e2983a 	sll	r17,r17,r3
   96dd4:	10c6983a 	sll	r3,r2,r3
   96dd8:	1210d83a 	srl	r8,r2,r8
   96ddc:	8804c03a 	cmpne	r2,r17,zero
   96de0:	1906b03a 	or	r3,r3,r4
   96de4:	18a2b03a 	or	r17,r3,r2
   96de8:	0021883a 	mov	r16,zero
   96dec:	003fa206 	br	96c78 <__ram_exceptions_end+0xfff76a44>
   96df0:	1890b03a 	or	r8,r3,r2
   96df4:	40017d26 	beq	r8,zero,973ec <__adddf3+0x7f0>
   96df8:	1011883a 	mov	r8,r2
   96dfc:	1823883a 	mov	r17,r3
   96e00:	888001cc 	andi	r2,r17,7
   96e04:	103f9e1e 	bne	r2,zero,96c80 <__ram_exceptions_end+0xfff76a4c>
   96e08:	4004977a 	slli	r2,r8,29
   96e0c:	8822d0fa 	srli	r17,r17,3
   96e10:	4010d0fa 	srli	r8,r8,3
   96e14:	9007883a 	mov	r3,r18
   96e18:	1444b03a 	or	r2,r2,r17
   96e1c:	0101ffc4 	movi	r4,2047
   96e20:	81002426 	beq	r16,r4,96eb4 <__adddf3+0x2b8>
   96e24:	8120703a 	and	r16,r16,r4
   96e28:	01000434 	movhi	r4,16
   96e2c:	213fffc4 	addi	r4,r4,-1
   96e30:	4110703a 	and	r8,r8,r4
   96e34:	003fa806 	br	96cd8 <__ram_exceptions_end+0xfff76aa4>
   96e38:	8089c83a 	sub	r4,r16,r2
   96e3c:	01005e0e 	bge	zero,r4,96fb8 <__adddf3+0x3bc>
   96e40:	10002b26 	beq	r2,zero,96ef0 <__adddf3+0x2f4>
   96e44:	0081ffc4 	movi	r2,2047
   96e48:	80bf8b26 	beq	r16,r2,96c78 <__ram_exceptions_end+0xfff76a44>
   96e4c:	4a402034 	orhi	r9,r9,128
   96e50:	00800e04 	movi	r2,56
   96e54:	1100a40e 	bge	r2,r4,970e8 <__adddf3+0x4ec>
   96e58:	498cb03a 	or	r6,r9,r6
   96e5c:	300ac03a 	cmpne	r5,r6,zero
   96e60:	0013883a 	mov	r9,zero
   96e64:	2c4b883a 	add	r5,r5,r17
   96e68:	2c63803a 	cmpltu	r17,r5,r17
   96e6c:	4a11883a 	add	r8,r9,r8
   96e70:	8a11883a 	add	r8,r17,r8
   96e74:	2823883a 	mov	r17,r5
   96e78:	4080202c 	andhi	r2,r8,128
   96e7c:	103fe026 	beq	r2,zero,96e00 <__ram_exceptions_end+0xfff76bcc>
   96e80:	84000044 	addi	r16,r16,1
   96e84:	0081ffc4 	movi	r2,2047
   96e88:	8080d226 	beq	r16,r2,971d4 <__adddf3+0x5d8>
   96e8c:	00bfe034 	movhi	r2,65408
   96e90:	10bfffc4 	addi	r2,r2,-1
   96e94:	4090703a 	and	r8,r8,r2
   96e98:	880ad07a 	srli	r5,r17,1
   96e9c:	400897fa 	slli	r4,r8,31
   96ea0:	88c0004c 	andi	r3,r17,1
   96ea4:	28e2b03a 	or	r17,r5,r3
   96ea8:	4010d07a 	srli	r8,r8,1
   96eac:	2462b03a 	or	r17,r4,r17
   96eb0:	003f7106 	br	96c78 <__ram_exceptions_end+0xfff76a44>
   96eb4:	4088b03a 	or	r4,r8,r2
   96eb8:	20014526 	beq	r4,zero,973d0 <__adddf3+0x7d4>
   96ebc:	01000434 	movhi	r4,16
   96ec0:	42000234 	orhi	r8,r8,8
   96ec4:	213fffc4 	addi	r4,r4,-1
   96ec8:	4110703a 	and	r8,r8,r4
   96ecc:	003f8206 	br	96cd8 <__ram_exceptions_end+0xfff76aa4>
   96ed0:	18ffffc4 	addi	r3,r3,-1
   96ed4:	1800491e 	bne	r3,zero,96ffc <__adddf3+0x400>
   96ed8:	898bc83a 	sub	r5,r17,r6
   96edc:	8963803a 	cmpltu	r17,r17,r5
   96ee0:	4251c83a 	sub	r8,r8,r9
   96ee4:	4451c83a 	sub	r8,r8,r17
   96ee8:	2823883a 	mov	r17,r5
   96eec:	003f9f06 	br	96d6c <__ram_exceptions_end+0xfff76b38>
   96ef0:	4984b03a 	or	r2,r9,r6
   96ef4:	103f6026 	beq	r2,zero,96c78 <__ram_exceptions_end+0xfff76a44>
   96ef8:	213fffc4 	addi	r4,r4,-1
   96efc:	2000931e 	bne	r4,zero,9714c <__adddf3+0x550>
   96f00:	898d883a 	add	r6,r17,r6
   96f04:	3463803a 	cmpltu	r17,r6,r17
   96f08:	4251883a 	add	r8,r8,r9
   96f0c:	8a11883a 	add	r8,r17,r8
   96f10:	3023883a 	mov	r17,r6
   96f14:	003fd806 	br	96e78 <__ram_exceptions_end+0xfff76c44>
   96f18:	1800541e 	bne	r3,zero,9706c <__adddf3+0x470>
   96f1c:	80800044 	addi	r2,r16,1
   96f20:	1081ffcc 	andi	r2,r2,2047
   96f24:	00c00044 	movi	r3,1
   96f28:	1880a00e 	bge	r3,r2,971ac <__adddf3+0x5b0>
   96f2c:	8989c83a 	sub	r4,r17,r6
   96f30:	8905803a 	cmpltu	r2,r17,r4
   96f34:	4267c83a 	sub	r19,r8,r9
   96f38:	98a7c83a 	sub	r19,r19,r2
   96f3c:	9880202c 	andhi	r2,r19,128
   96f40:	10006326 	beq	r2,zero,970d0 <__adddf3+0x4d4>
   96f44:	3463c83a 	sub	r17,r6,r17
   96f48:	4a07c83a 	sub	r3,r9,r8
   96f4c:	344d803a 	cmpltu	r6,r6,r17
   96f50:	19a7c83a 	sub	r19,r3,r6
   96f54:	3825883a 	mov	r18,r7
   96f58:	983f8a1e 	bne	r19,zero,96d84 <__ram_exceptions_end+0xfff76b50>
   96f5c:	8809883a 	mov	r4,r17
   96f60:	00995e40 	call	995e4 <__clzsi2>
   96f64:	10800804 	addi	r2,r2,32
   96f68:	10fffe04 	addi	r3,r2,-8
   96f6c:	010007c4 	movi	r4,31
   96f70:	20ff890e 	bge	r4,r3,96d98 <__ram_exceptions_end+0xfff76b64>
   96f74:	10bff604 	addi	r2,r2,-40
   96f78:	8884983a 	sll	r2,r17,r2
   96f7c:	0023883a 	mov	r17,zero
   96f80:	1c3f8c0e 	bge	r3,r16,96db4 <__ram_exceptions_end+0xfff76b80>
   96f84:	023fe034 	movhi	r8,65408
   96f88:	423fffc4 	addi	r8,r8,-1
   96f8c:	80e1c83a 	sub	r16,r16,r3
   96f90:	1210703a 	and	r8,r2,r8
   96f94:	003f3806 	br	96c78 <__ram_exceptions_end+0xfff76a44>
   96f98:	9007883a 	mov	r3,r18
   96f9c:	0011883a 	mov	r8,zero
   96fa0:	0005883a 	mov	r2,zero
   96fa4:	003f4c06 	br	96cd8 <__ram_exceptions_end+0xfff76aa4>
   96fa8:	498cb03a 	or	r6,r9,r6
   96fac:	300cc03a 	cmpne	r6,r6,zero
   96fb0:	0007883a 	mov	r3,zero
   96fb4:	003f6806 	br	96d58 <__ram_exceptions_end+0xfff76b24>
   96fb8:	20009c1e 	bne	r4,zero,9722c <__adddf3+0x630>
   96fbc:	80800044 	addi	r2,r16,1
   96fc0:	1141ffcc 	andi	r5,r2,2047
   96fc4:	01000044 	movi	r4,1
   96fc8:	2140670e 	bge	r4,r5,97168 <__adddf3+0x56c>
   96fcc:	0101ffc4 	movi	r4,2047
   96fd0:	11007f26 	beq	r2,r4,971d0 <__adddf3+0x5d4>
   96fd4:	898d883a 	add	r6,r17,r6
   96fd8:	4247883a 	add	r3,r8,r9
   96fdc:	3451803a 	cmpltu	r8,r6,r17
   96fe0:	40d1883a 	add	r8,r8,r3
   96fe4:	402297fa 	slli	r17,r8,31
   96fe8:	300cd07a 	srli	r6,r6,1
   96fec:	4010d07a 	srli	r8,r8,1
   96ff0:	1021883a 	mov	r16,r2
   96ff4:	89a2b03a 	or	r17,r17,r6
   96ff8:	003f1f06 	br	96c78 <__ram_exceptions_end+0xfff76a44>
   96ffc:	0081ffc4 	movi	r2,2047
   97000:	80bf481e 	bne	r16,r2,96d24 <__ram_exceptions_end+0xfff76af0>
   97004:	003f1c06 	br	96c78 <__ram_exceptions_end+0xfff76a44>
   97008:	843ff844 	addi	r16,r16,-31
   9700c:	01000804 	movi	r4,32
   97010:	1406d83a 	srl	r3,r2,r16
   97014:	41005026 	beq	r8,r4,97158 <__adddf3+0x55c>
   97018:	01001004 	movi	r4,64
   9701c:	2211c83a 	sub	r8,r4,r8
   97020:	1204983a 	sll	r2,r2,r8
   97024:	88a2b03a 	or	r17,r17,r2
   97028:	8822c03a 	cmpne	r17,r17,zero
   9702c:	1c62b03a 	or	r17,r3,r17
   97030:	0011883a 	mov	r8,zero
   97034:	0021883a 	mov	r16,zero
   97038:	003f7106 	br	96e00 <__ram_exceptions_end+0xfff76bcc>
   9703c:	193ff804 	addi	r4,r3,-32
   97040:	00800804 	movi	r2,32
   97044:	4908d83a 	srl	r4,r9,r4
   97048:	18804526 	beq	r3,r2,97160 <__adddf3+0x564>
   9704c:	00801004 	movi	r2,64
   97050:	10c5c83a 	sub	r2,r2,r3
   97054:	4886983a 	sll	r3,r9,r2
   97058:	198cb03a 	or	r6,r3,r6
   9705c:	300cc03a 	cmpne	r6,r6,zero
   97060:	218cb03a 	or	r6,r4,r6
   97064:	0007883a 	mov	r3,zero
   97068:	003f3b06 	br	96d58 <__ram_exceptions_end+0xfff76b24>
   9706c:	80002a26 	beq	r16,zero,97118 <__adddf3+0x51c>
   97070:	0101ffc4 	movi	r4,2047
   97074:	11006826 	beq	r2,r4,97218 <__adddf3+0x61c>
   97078:	00c7c83a 	sub	r3,zero,r3
   9707c:	42002034 	orhi	r8,r8,128
   97080:	01000e04 	movi	r4,56
   97084:	20c07c16 	blt	r4,r3,97278 <__adddf3+0x67c>
   97088:	010007c4 	movi	r4,31
   9708c:	20c0da16 	blt	r4,r3,973f8 <__adddf3+0x7fc>
   97090:	01000804 	movi	r4,32
   97094:	20c9c83a 	sub	r4,r4,r3
   97098:	4114983a 	sll	r10,r8,r4
   9709c:	88cad83a 	srl	r5,r17,r3
   970a0:	8908983a 	sll	r4,r17,r4
   970a4:	40c6d83a 	srl	r3,r8,r3
   970a8:	5162b03a 	or	r17,r10,r5
   970ac:	2008c03a 	cmpne	r4,r4,zero
   970b0:	8922b03a 	or	r17,r17,r4
   970b4:	3463c83a 	sub	r17,r6,r17
   970b8:	48c7c83a 	sub	r3,r9,r3
   970bc:	344d803a 	cmpltu	r6,r6,r17
   970c0:	1991c83a 	sub	r8,r3,r6
   970c4:	1021883a 	mov	r16,r2
   970c8:	3825883a 	mov	r18,r7
   970cc:	003f2706 	br	96d6c <__ram_exceptions_end+0xfff76b38>
   970d0:	24d0b03a 	or	r8,r4,r19
   970d4:	40001b1e 	bne	r8,zero,97144 <__adddf3+0x548>
   970d8:	0005883a 	mov	r2,zero
   970dc:	0007883a 	mov	r3,zero
   970e0:	0021883a 	mov	r16,zero
   970e4:	003f4d06 	br	96e1c <__ram_exceptions_end+0xfff76be8>
   970e8:	008007c4 	movi	r2,31
   970ec:	11003c16 	blt	r2,r4,971e0 <__adddf3+0x5e4>
   970f0:	00800804 	movi	r2,32
   970f4:	1105c83a 	sub	r2,r2,r4
   970f8:	488e983a 	sll	r7,r9,r2
   970fc:	310ad83a 	srl	r5,r6,r4
   97100:	3084983a 	sll	r2,r6,r2
   97104:	4912d83a 	srl	r9,r9,r4
   97108:	394ab03a 	or	r5,r7,r5
   9710c:	1004c03a 	cmpne	r2,r2,zero
   97110:	288ab03a 	or	r5,r5,r2
   97114:	003f5306 	br	96e64 <__ram_exceptions_end+0xfff76c30>
   97118:	4448b03a 	or	r4,r8,r17
   9711c:	20003e26 	beq	r4,zero,97218 <__adddf3+0x61c>
   97120:	00c6303a 	nor	r3,zero,r3
   97124:	18003a1e 	bne	r3,zero,97210 <__adddf3+0x614>
   97128:	3463c83a 	sub	r17,r6,r17
   9712c:	4a07c83a 	sub	r3,r9,r8
   97130:	344d803a 	cmpltu	r6,r6,r17
   97134:	1991c83a 	sub	r8,r3,r6
   97138:	1021883a 	mov	r16,r2
   9713c:	3825883a 	mov	r18,r7
   97140:	003f0a06 	br	96d6c <__ram_exceptions_end+0xfff76b38>
   97144:	2023883a 	mov	r17,r4
   97148:	003f0d06 	br	96d80 <__ram_exceptions_end+0xfff76b4c>
   9714c:	0081ffc4 	movi	r2,2047
   97150:	80bf3f1e 	bne	r16,r2,96e50 <__ram_exceptions_end+0xfff76c1c>
   97154:	003ec806 	br	96c78 <__ram_exceptions_end+0xfff76a44>
   97158:	0005883a 	mov	r2,zero
   9715c:	003fb106 	br	97024 <__ram_exceptions_end+0xfff76df0>
   97160:	0007883a 	mov	r3,zero
   97164:	003fbc06 	br	97058 <__ram_exceptions_end+0xfff76e24>
   97168:	4444b03a 	or	r2,r8,r17
   9716c:	8000871e 	bne	r16,zero,9738c <__adddf3+0x790>
   97170:	1000ba26 	beq	r2,zero,9745c <__adddf3+0x860>
   97174:	4984b03a 	or	r2,r9,r6
   97178:	103ebf26 	beq	r2,zero,96c78 <__ram_exceptions_end+0xfff76a44>
   9717c:	8985883a 	add	r2,r17,r6
   97180:	4247883a 	add	r3,r8,r9
   97184:	1451803a 	cmpltu	r8,r2,r17
   97188:	40d1883a 	add	r8,r8,r3
   9718c:	40c0202c 	andhi	r3,r8,128
   97190:	1023883a 	mov	r17,r2
   97194:	183f1a26 	beq	r3,zero,96e00 <__ram_exceptions_end+0xfff76bcc>
   97198:	00bfe034 	movhi	r2,65408
   9719c:	10bfffc4 	addi	r2,r2,-1
   971a0:	2021883a 	mov	r16,r4
   971a4:	4090703a 	and	r8,r8,r2
   971a8:	003eb306 	br	96c78 <__ram_exceptions_end+0xfff76a44>
   971ac:	4444b03a 	or	r2,r8,r17
   971b0:	8000291e 	bne	r16,zero,97258 <__adddf3+0x65c>
   971b4:	10004b1e 	bne	r2,zero,972e4 <__adddf3+0x6e8>
   971b8:	4990b03a 	or	r8,r9,r6
   971bc:	40008b26 	beq	r8,zero,973ec <__adddf3+0x7f0>
   971c0:	4811883a 	mov	r8,r9
   971c4:	3023883a 	mov	r17,r6
   971c8:	3825883a 	mov	r18,r7
   971cc:	003eaa06 	br	96c78 <__ram_exceptions_end+0xfff76a44>
   971d0:	1021883a 	mov	r16,r2
   971d4:	0011883a 	mov	r8,zero
   971d8:	0005883a 	mov	r2,zero
   971dc:	003f0f06 	br	96e1c <__ram_exceptions_end+0xfff76be8>
   971e0:	217ff804 	addi	r5,r4,-32
   971e4:	00800804 	movi	r2,32
   971e8:	494ad83a 	srl	r5,r9,r5
   971ec:	20807d26 	beq	r4,r2,973e4 <__adddf3+0x7e8>
   971f0:	00801004 	movi	r2,64
   971f4:	1109c83a 	sub	r4,r2,r4
   971f8:	4912983a 	sll	r9,r9,r4
   971fc:	498cb03a 	or	r6,r9,r6
   97200:	300cc03a 	cmpne	r6,r6,zero
   97204:	298ab03a 	or	r5,r5,r6
   97208:	0013883a 	mov	r9,zero
   9720c:	003f1506 	br	96e64 <__ram_exceptions_end+0xfff76c30>
   97210:	0101ffc4 	movi	r4,2047
   97214:	113f9a1e 	bne	r2,r4,97080 <__ram_exceptions_end+0xfff76e4c>
   97218:	4811883a 	mov	r8,r9
   9721c:	3023883a 	mov	r17,r6
   97220:	1021883a 	mov	r16,r2
   97224:	3825883a 	mov	r18,r7
   97228:	003e9306 	br	96c78 <__ram_exceptions_end+0xfff76a44>
   9722c:	8000161e 	bne	r16,zero,97288 <__adddf3+0x68c>
   97230:	444ab03a 	or	r5,r8,r17
   97234:	28005126 	beq	r5,zero,9737c <__adddf3+0x780>
   97238:	0108303a 	nor	r4,zero,r4
   9723c:	20004d1e 	bne	r4,zero,97374 <__adddf3+0x778>
   97240:	89a3883a 	add	r17,r17,r6
   97244:	4253883a 	add	r9,r8,r9
   97248:	898d803a 	cmpltu	r6,r17,r6
   9724c:	3251883a 	add	r8,r6,r9
   97250:	1021883a 	mov	r16,r2
   97254:	003f0806 	br	96e78 <__ram_exceptions_end+0xfff76c44>
   97258:	1000301e 	bne	r2,zero,9731c <__adddf3+0x720>
   9725c:	4984b03a 	or	r2,r9,r6
   97260:	10007126 	beq	r2,zero,97428 <__adddf3+0x82c>
   97264:	4811883a 	mov	r8,r9
   97268:	3023883a 	mov	r17,r6
   9726c:	3825883a 	mov	r18,r7
   97270:	0401ffc4 	movi	r16,2047
   97274:	003e8006 	br	96c78 <__ram_exceptions_end+0xfff76a44>
   97278:	4462b03a 	or	r17,r8,r17
   9727c:	8822c03a 	cmpne	r17,r17,zero
   97280:	0007883a 	mov	r3,zero
   97284:	003f8b06 	br	970b4 <__ram_exceptions_end+0xfff76e80>
   97288:	0141ffc4 	movi	r5,2047
   9728c:	11403b26 	beq	r2,r5,9737c <__adddf3+0x780>
   97290:	0109c83a 	sub	r4,zero,r4
   97294:	42002034 	orhi	r8,r8,128
   97298:	01400e04 	movi	r5,56
   9729c:	29006716 	blt	r5,r4,9743c <__adddf3+0x840>
   972a0:	014007c4 	movi	r5,31
   972a4:	29007016 	blt	r5,r4,97468 <__adddf3+0x86c>
   972a8:	01400804 	movi	r5,32
   972ac:	290bc83a 	sub	r5,r5,r4
   972b0:	4154983a 	sll	r10,r8,r5
   972b4:	890ed83a 	srl	r7,r17,r4
   972b8:	894a983a 	sll	r5,r17,r5
   972bc:	4108d83a 	srl	r4,r8,r4
   972c0:	51e2b03a 	or	r17,r10,r7
   972c4:	280ac03a 	cmpne	r5,r5,zero
   972c8:	8962b03a 	or	r17,r17,r5
   972cc:	89a3883a 	add	r17,r17,r6
   972d0:	2253883a 	add	r9,r4,r9
   972d4:	898d803a 	cmpltu	r6,r17,r6
   972d8:	3251883a 	add	r8,r6,r9
   972dc:	1021883a 	mov	r16,r2
   972e0:	003ee506 	br	96e78 <__ram_exceptions_end+0xfff76c44>
   972e4:	4984b03a 	or	r2,r9,r6
   972e8:	103e6326 	beq	r2,zero,96c78 <__ram_exceptions_end+0xfff76a44>
   972ec:	8987c83a 	sub	r3,r17,r6
   972f0:	88c9803a 	cmpltu	r4,r17,r3
   972f4:	4245c83a 	sub	r2,r8,r9
   972f8:	1105c83a 	sub	r2,r2,r4
   972fc:	1100202c 	andhi	r4,r2,128
   97300:	203ebb26 	beq	r4,zero,96df0 <__ram_exceptions_end+0xfff76bbc>
   97304:	3463c83a 	sub	r17,r6,r17
   97308:	4a07c83a 	sub	r3,r9,r8
   9730c:	344d803a 	cmpltu	r6,r6,r17
   97310:	1991c83a 	sub	r8,r3,r6
   97314:	3825883a 	mov	r18,r7
   97318:	003e5706 	br	96c78 <__ram_exceptions_end+0xfff76a44>
   9731c:	4984b03a 	or	r2,r9,r6
   97320:	10002e26 	beq	r2,zero,973dc <__adddf3+0x7e0>
   97324:	4004d0fa 	srli	r2,r8,3
   97328:	8822d0fa 	srli	r17,r17,3
   9732c:	4010977a 	slli	r8,r8,29
   97330:	10c0022c 	andhi	r3,r2,8
   97334:	4462b03a 	or	r17,r8,r17
   97338:	18000826 	beq	r3,zero,9735c <__adddf3+0x760>
   9733c:	4808d0fa 	srli	r4,r9,3
   97340:	20c0022c 	andhi	r3,r4,8
   97344:	1800051e 	bne	r3,zero,9735c <__adddf3+0x760>
   97348:	300cd0fa 	srli	r6,r6,3
   9734c:	4806977a 	slli	r3,r9,29
   97350:	2005883a 	mov	r2,r4
   97354:	3825883a 	mov	r18,r7
   97358:	19a2b03a 	or	r17,r3,r6
   9735c:	8810d77a 	srli	r8,r17,29
   97360:	100490fa 	slli	r2,r2,3
   97364:	882290fa 	slli	r17,r17,3
   97368:	0401ffc4 	movi	r16,2047
   9736c:	4090b03a 	or	r8,r8,r2
   97370:	003e4106 	br	96c78 <__ram_exceptions_end+0xfff76a44>
   97374:	0141ffc4 	movi	r5,2047
   97378:	117fc71e 	bne	r2,r5,97298 <__ram_exceptions_end+0xfff77064>
   9737c:	4811883a 	mov	r8,r9
   97380:	3023883a 	mov	r17,r6
   97384:	1021883a 	mov	r16,r2
   97388:	003e3b06 	br	96c78 <__ram_exceptions_end+0xfff76a44>
   9738c:	10002f26 	beq	r2,zero,9744c <__adddf3+0x850>
   97390:	4984b03a 	or	r2,r9,r6
   97394:	10001126 	beq	r2,zero,973dc <__adddf3+0x7e0>
   97398:	4004d0fa 	srli	r2,r8,3
   9739c:	8822d0fa 	srli	r17,r17,3
   973a0:	4010977a 	slli	r8,r8,29
   973a4:	10c0022c 	andhi	r3,r2,8
   973a8:	4462b03a 	or	r17,r8,r17
   973ac:	183feb26 	beq	r3,zero,9735c <__ram_exceptions_end+0xfff77128>
   973b0:	4808d0fa 	srli	r4,r9,3
   973b4:	20c0022c 	andhi	r3,r4,8
   973b8:	183fe81e 	bne	r3,zero,9735c <__ram_exceptions_end+0xfff77128>
   973bc:	300cd0fa 	srli	r6,r6,3
   973c0:	4806977a 	slli	r3,r9,29
   973c4:	2005883a 	mov	r2,r4
   973c8:	19a2b03a 	or	r17,r3,r6
   973cc:	003fe306 	br	9735c <__ram_exceptions_end+0xfff77128>
   973d0:	0011883a 	mov	r8,zero
   973d4:	0005883a 	mov	r2,zero
   973d8:	003e3f06 	br	96cd8 <__ram_exceptions_end+0xfff76aa4>
   973dc:	0401ffc4 	movi	r16,2047
   973e0:	003e2506 	br	96c78 <__ram_exceptions_end+0xfff76a44>
   973e4:	0013883a 	mov	r9,zero
   973e8:	003f8406 	br	971fc <__ram_exceptions_end+0xfff76fc8>
   973ec:	0005883a 	mov	r2,zero
   973f0:	0007883a 	mov	r3,zero
   973f4:	003e8906 	br	96e1c <__ram_exceptions_end+0xfff76be8>
   973f8:	197ff804 	addi	r5,r3,-32
   973fc:	01000804 	movi	r4,32
   97400:	414ad83a 	srl	r5,r8,r5
   97404:	19002426 	beq	r3,r4,97498 <__adddf3+0x89c>
   97408:	01001004 	movi	r4,64
   9740c:	20c7c83a 	sub	r3,r4,r3
   97410:	40c6983a 	sll	r3,r8,r3
   97414:	1c46b03a 	or	r3,r3,r17
   97418:	1806c03a 	cmpne	r3,r3,zero
   9741c:	28e2b03a 	or	r17,r5,r3
   97420:	0007883a 	mov	r3,zero
   97424:	003f2306 	br	970b4 <__ram_exceptions_end+0xfff76e80>
   97428:	0007883a 	mov	r3,zero
   9742c:	5811883a 	mov	r8,r11
   97430:	00bfffc4 	movi	r2,-1
   97434:	0401ffc4 	movi	r16,2047
   97438:	003e7806 	br	96e1c <__ram_exceptions_end+0xfff76be8>
   9743c:	4462b03a 	or	r17,r8,r17
   97440:	8822c03a 	cmpne	r17,r17,zero
   97444:	0009883a 	mov	r4,zero
   97448:	003fa006 	br	972cc <__ram_exceptions_end+0xfff77098>
   9744c:	4811883a 	mov	r8,r9
   97450:	3023883a 	mov	r17,r6
   97454:	0401ffc4 	movi	r16,2047
   97458:	003e0706 	br	96c78 <__ram_exceptions_end+0xfff76a44>
   9745c:	4811883a 	mov	r8,r9
   97460:	3023883a 	mov	r17,r6
   97464:	003e0406 	br	96c78 <__ram_exceptions_end+0xfff76a44>
   97468:	21fff804 	addi	r7,r4,-32
   9746c:	01400804 	movi	r5,32
   97470:	41ced83a 	srl	r7,r8,r7
   97474:	21400a26 	beq	r4,r5,974a0 <__adddf3+0x8a4>
   97478:	01401004 	movi	r5,64
   9747c:	2909c83a 	sub	r4,r5,r4
   97480:	4108983a 	sll	r4,r8,r4
   97484:	2448b03a 	or	r4,r4,r17
   97488:	2008c03a 	cmpne	r4,r4,zero
   9748c:	3922b03a 	or	r17,r7,r4
   97490:	0009883a 	mov	r4,zero
   97494:	003f8d06 	br	972cc <__ram_exceptions_end+0xfff77098>
   97498:	0007883a 	mov	r3,zero
   9749c:	003fdd06 	br	97414 <__ram_exceptions_end+0xfff771e0>
   974a0:	0009883a 	mov	r4,zero
   974a4:	003ff706 	br	97484 <__ram_exceptions_end+0xfff77250>

000974a8 <__divdf3>:
   974a8:	defff004 	addi	sp,sp,-64
   974ac:	dc800815 	stw	r18,32(sp)
   974b0:	2824d53a 	srli	r18,r5,20
   974b4:	dd800c15 	stw	r22,48(sp)
   974b8:	282cd7fa 	srli	r22,r5,31
   974bc:	dc000615 	stw	r16,24(sp)
   974c0:	04000434 	movhi	r16,16
   974c4:	843fffc4 	addi	r16,r16,-1
   974c8:	dfc00f15 	stw	ra,60(sp)
   974cc:	df000e15 	stw	fp,56(sp)
   974d0:	ddc00d15 	stw	r23,52(sp)
   974d4:	dd400b15 	stw	r21,44(sp)
   974d8:	dd000a15 	stw	r20,40(sp)
   974dc:	dcc00915 	stw	r19,36(sp)
   974e0:	dc400715 	stw	r17,28(sp)
   974e4:	9481ffcc 	andi	r18,r18,2047
   974e8:	2c20703a 	and	r16,r5,r16
   974ec:	b2003fcc 	andi	r8,r22,255
   974f0:	90006126 	beq	r18,zero,97678 <__divdf3+0x1d0>
   974f4:	0081ffc4 	movi	r2,2047
   974f8:	202b883a 	mov	r21,r4
   974fc:	90803726 	beq	r18,r2,975dc <__divdf3+0x134>
   97500:	80800434 	orhi	r2,r16,16
   97504:	100490fa 	slli	r2,r2,3
   97508:	2020d77a 	srli	r16,r4,29
   9750c:	202a90fa 	slli	r21,r4,3
   97510:	94bf0044 	addi	r18,r18,-1023
   97514:	80a0b03a 	or	r16,r16,r2
   97518:	0013883a 	mov	r9,zero
   9751c:	000b883a 	mov	r5,zero
   97520:	3806d53a 	srli	r3,r7,20
   97524:	382ed7fa 	srli	r23,r7,31
   97528:	04400434 	movhi	r17,16
   9752c:	8c7fffc4 	addi	r17,r17,-1
   97530:	18c1ffcc 	andi	r3,r3,2047
   97534:	3029883a 	mov	r20,r6
   97538:	3c62703a 	and	r17,r7,r17
   9753c:	bf003fcc 	andi	fp,r23,255
   97540:	18006e26 	beq	r3,zero,976fc <__divdf3+0x254>
   97544:	0081ffc4 	movi	r2,2047
   97548:	18806626 	beq	r3,r2,976e4 <__divdf3+0x23c>
   9754c:	88800434 	orhi	r2,r17,16
   97550:	100490fa 	slli	r2,r2,3
   97554:	3022d77a 	srli	r17,r6,29
   97558:	302890fa 	slli	r20,r6,3
   9755c:	18ff0044 	addi	r3,r3,-1023
   97560:	88a2b03a 	or	r17,r17,r2
   97564:	000f883a 	mov	r7,zero
   97568:	b5e6f03a 	xor	r19,r22,r23
   9756c:	3a4cb03a 	or	r6,r7,r9
   97570:	008003c4 	movi	r2,15
   97574:	9809883a 	mov	r4,r19
   97578:	90c7c83a 	sub	r3,r18,r3
   9757c:	9cc03fcc 	andi	r19,r19,255
   97580:	11809636 	bltu	r2,r6,977dc <__divdf3+0x334>
   97584:	300c90ba 	slli	r6,r6,2
   97588:	00800274 	movhi	r2,9
   9758c:	109d6704 	addi	r2,r2,30108
   97590:	308d883a 	add	r6,r6,r2
   97594:	30800017 	ldw	r2,0(r6)
   97598:	1000683a 	jmp	r2
   9759c:	000977dc 	xori	zero,zero,9695
   975a0:	00097614 	movui	zero,9688
   975a4:	000977cc 	andi	zero,zero,9695
   975a8:	00097608 	cmpgei	zero,zero,9688
   975ac:	000977cc 	andi	zero,zero,9695
   975b0:	000977a0 	cmpeqi	zero,zero,9694
   975b4:	000977cc 	andi	zero,zero,9695
   975b8:	00097608 	cmpgei	zero,zero,9688
   975bc:	00097614 	movui	zero,9688
   975c0:	00097614 	movui	zero,9688
   975c4:	000977a0 	cmpeqi	zero,zero,9694
   975c8:	00097608 	cmpgei	zero,zero,9688
   975cc:	000975f8 	rdprs	zero,zero,9687
   975d0:	000975f8 	rdprs	zero,zero,9687
   975d4:	000975f8 	rdprs	zero,zero,9687
   975d8:	00097b64 	muli	zero,zero,9709
   975dc:	2404b03a 	or	r2,r4,r16
   975e0:	10006c1e 	bne	r2,zero,97794 <__divdf3+0x2ec>
   975e4:	02400204 	movi	r9,8
   975e8:	0021883a 	mov	r16,zero
   975ec:	002b883a 	mov	r21,zero
   975f0:	01400084 	movi	r5,2
   975f4:	003fca06 	br	97520 <__ram_exceptions_end+0xfff772ec>
   975f8:	8023883a 	mov	r17,r16
   975fc:	a829883a 	mov	r20,r21
   97600:	4039883a 	mov	fp,r8
   97604:	280f883a 	mov	r7,r5
   97608:	00800084 	movi	r2,2
   9760c:	3881601e 	bne	r7,r2,97b90 <__divdf3+0x6e8>
   97610:	e027883a 	mov	r19,fp
   97614:	9900004c 	andi	r4,r19,1
   97618:	0081ffc4 	movi	r2,2047
   9761c:	0021883a 	mov	r16,zero
   97620:	002b883a 	mov	r21,zero
   97624:	1004953a 	slli	r2,r2,20
   97628:	20c03fcc 	andi	r3,r4,255
   9762c:	01400434 	movhi	r5,16
   97630:	297fffc4 	addi	r5,r5,-1
   97634:	180697fa 	slli	r3,r3,31
   97638:	8160703a 	and	r16,r16,r5
   9763c:	80a0b03a 	or	r16,r16,r2
   97640:	80c6b03a 	or	r3,r16,r3
   97644:	a805883a 	mov	r2,r21
   97648:	dfc00f17 	ldw	ra,60(sp)
   9764c:	df000e17 	ldw	fp,56(sp)
   97650:	ddc00d17 	ldw	r23,52(sp)
   97654:	dd800c17 	ldw	r22,48(sp)
   97658:	dd400b17 	ldw	r21,44(sp)
   9765c:	dd000a17 	ldw	r20,40(sp)
   97660:	dcc00917 	ldw	r19,36(sp)
   97664:	dc800817 	ldw	r18,32(sp)
   97668:	dc400717 	ldw	r17,28(sp)
   9766c:	dc000617 	ldw	r16,24(sp)
   97670:	dec01004 	addi	sp,sp,64
   97674:	f800283a 	ret
   97678:	2404b03a 	or	r2,r4,r16
   9767c:	2023883a 	mov	r17,r4
   97680:	10003f26 	beq	r2,zero,97780 <__divdf3+0x2d8>
   97684:	80015e26 	beq	r16,zero,97c00 <__divdf3+0x758>
   97688:	8009883a 	mov	r4,r16
   9768c:	d9800215 	stw	r6,8(sp)
   97690:	d9c00515 	stw	r7,20(sp)
   97694:	da000415 	stw	r8,16(sp)
   97698:	00995e40 	call	995e4 <__clzsi2>
   9769c:	d9800217 	ldw	r6,8(sp)
   976a0:	d9c00517 	ldw	r7,20(sp)
   976a4:	da000417 	ldw	r8,16(sp)
   976a8:	113ffd44 	addi	r4,r2,-11
   976ac:	00c00704 	movi	r3,28
   976b0:	19014f16 	blt	r3,r4,97bf0 <__divdf3+0x748>
   976b4:	00c00744 	movi	r3,29
   976b8:	157ffe04 	addi	r21,r2,-8
   976bc:	1907c83a 	sub	r3,r3,r4
   976c0:	8560983a 	sll	r16,r16,r21
   976c4:	88c6d83a 	srl	r3,r17,r3
   976c8:	8d6a983a 	sll	r21,r17,r21
   976cc:	1c20b03a 	or	r16,r3,r16
   976d0:	1080fcc4 	addi	r2,r2,1011
   976d4:	00a5c83a 	sub	r18,zero,r2
   976d8:	0013883a 	mov	r9,zero
   976dc:	000b883a 	mov	r5,zero
   976e0:	003f8f06 	br	97520 <__ram_exceptions_end+0xfff772ec>
   976e4:	3444b03a 	or	r2,r6,r17
   976e8:	1000231e 	bne	r2,zero,97778 <__divdf3+0x2d0>
   976ec:	0023883a 	mov	r17,zero
   976f0:	0029883a 	mov	r20,zero
   976f4:	01c00084 	movi	r7,2
   976f8:	003f9b06 	br	97568 <__ram_exceptions_end+0xfff77334>
   976fc:	3444b03a 	or	r2,r6,r17
   97700:	10001926 	beq	r2,zero,97768 <__divdf3+0x2c0>
   97704:	88014b26 	beq	r17,zero,97c34 <__divdf3+0x78c>
   97708:	8809883a 	mov	r4,r17
   9770c:	d9400115 	stw	r5,4(sp)
   97710:	d9800215 	stw	r6,8(sp)
   97714:	da000415 	stw	r8,16(sp)
   97718:	da400315 	stw	r9,12(sp)
   9771c:	00995e40 	call	995e4 <__clzsi2>
   97720:	d9400117 	ldw	r5,4(sp)
   97724:	d9800217 	ldw	r6,8(sp)
   97728:	da000417 	ldw	r8,16(sp)
   9772c:	da400317 	ldw	r9,12(sp)
   97730:	113ffd44 	addi	r4,r2,-11
   97734:	00c00704 	movi	r3,28
   97738:	19013a16 	blt	r3,r4,97c24 <__divdf3+0x77c>
   9773c:	00c00744 	movi	r3,29
   97740:	153ffe04 	addi	r20,r2,-8
   97744:	1907c83a 	sub	r3,r3,r4
   97748:	8d22983a 	sll	r17,r17,r20
   9774c:	30c6d83a 	srl	r3,r6,r3
   97750:	3528983a 	sll	r20,r6,r20
   97754:	1c62b03a 	or	r17,r3,r17
   97758:	1080fcc4 	addi	r2,r2,1011
   9775c:	0087c83a 	sub	r3,zero,r2
   97760:	000f883a 	mov	r7,zero
   97764:	003f8006 	br	97568 <__ram_exceptions_end+0xfff77334>
   97768:	0023883a 	mov	r17,zero
   9776c:	0029883a 	mov	r20,zero
   97770:	01c00044 	movi	r7,1
   97774:	003f7c06 	br	97568 <__ram_exceptions_end+0xfff77334>
   97778:	01c000c4 	movi	r7,3
   9777c:	003f7a06 	br	97568 <__ram_exceptions_end+0xfff77334>
   97780:	02400104 	movi	r9,4
   97784:	0021883a 	mov	r16,zero
   97788:	002b883a 	mov	r21,zero
   9778c:	01400044 	movi	r5,1
   97790:	003f6306 	br	97520 <__ram_exceptions_end+0xfff772ec>
   97794:	02400304 	movi	r9,12
   97798:	014000c4 	movi	r5,3
   9779c:	003f6006 	br	97520 <__ram_exceptions_end+0xfff772ec>
   977a0:	04000434 	movhi	r16,16
   977a4:	0009883a 	mov	r4,zero
   977a8:	843fffc4 	addi	r16,r16,-1
   977ac:	057fffc4 	movi	r21,-1
   977b0:	0081ffc4 	movi	r2,2047
   977b4:	003f9b06 	br	97624 <__ram_exceptions_end+0xfff773f0>
   977b8:	00c00044 	movi	r3,1
   977bc:	1887c83a 	sub	r3,r3,r2
   977c0:	01000e04 	movi	r4,56
   977c4:	20c1530e 	bge	r4,r3,97d14 <__divdf3+0x86c>
   977c8:	9900004c 	andi	r4,r19,1
   977cc:	0005883a 	mov	r2,zero
   977d0:	0021883a 	mov	r16,zero
   977d4:	002b883a 	mov	r21,zero
   977d8:	003f9206 	br	97624 <__ram_exceptions_end+0xfff773f0>
   977dc:	8c012e36 	bltu	r17,r16,97c98 <__divdf3+0x7f0>
   977e0:	84412c26 	beq	r16,r17,97c94 <__divdf3+0x7ec>
   977e4:	a82f883a 	mov	r23,r21
   977e8:	18ffffc4 	addi	r3,r3,-1
   977ec:	002b883a 	mov	r21,zero
   977f0:	a004d63a 	srli	r2,r20,24
   977f4:	8822923a 	slli	r17,r17,8
   977f8:	a028923a 	slli	r20,r20,8
   977fc:	8009883a 	mov	r4,r16
   97800:	88acb03a 	or	r22,r17,r2
   97804:	dd000015 	stw	r20,0(sp)
   97808:	b028d43a 	srli	r20,r22,16
   9780c:	d8c00215 	stw	r3,8(sp)
   97810:	b4bfffcc 	andi	r18,r22,65535
   97814:	a00b883a 	mov	r5,r20
   97818:	00821580 	call	82158 <__udivsi3>
   9781c:	100b883a 	mov	r5,r2
   97820:	9009883a 	mov	r4,r18
   97824:	1023883a 	mov	r17,r2
   97828:	00822140 	call	82214 <__mulsi3>
   9782c:	8009883a 	mov	r4,r16
   97830:	a00b883a 	mov	r5,r20
   97834:	1039883a 	mov	fp,r2
   97838:	00821bc0 	call	821bc <__umodsi3>
   9783c:	1004943a 	slli	r2,r2,16
   97840:	b808d43a 	srli	r4,r23,16
   97844:	d8c00217 	ldw	r3,8(sp)
   97848:	2084b03a 	or	r2,r4,r2
   9784c:	1700062e 	bgeu	r2,fp,97868 <__divdf3+0x3c0>
   97850:	1585883a 	add	r2,r2,r22
   97854:	893fffc4 	addi	r4,r17,-1
   97858:	15811d36 	bltu	r2,r22,97cd0 <__divdf3+0x828>
   9785c:	17011c2e 	bgeu	r2,fp,97cd0 <__divdf3+0x828>
   97860:	8c7fff84 	addi	r17,r17,-2
   97864:	1585883a 	add	r2,r2,r22
   97868:	1739c83a 	sub	fp,r2,fp
   9786c:	a00b883a 	mov	r5,r20
   97870:	e009883a 	mov	r4,fp
   97874:	d8c00215 	stw	r3,8(sp)
   97878:	00821580 	call	82158 <__udivsi3>
   9787c:	100b883a 	mov	r5,r2
   97880:	9009883a 	mov	r4,r18
   97884:	1021883a 	mov	r16,r2
   97888:	00822140 	call	82214 <__mulsi3>
   9788c:	a00b883a 	mov	r5,r20
   97890:	e009883a 	mov	r4,fp
   97894:	d8800415 	stw	r2,16(sp)
   97898:	00821bc0 	call	821bc <__umodsi3>
   9789c:	1004943a 	slli	r2,r2,16
   978a0:	da000417 	ldw	r8,16(sp)
   978a4:	bdffffcc 	andi	r23,r23,65535
   978a8:	b884b03a 	or	r2,r23,r2
   978ac:	d8c00217 	ldw	r3,8(sp)
   978b0:	1200062e 	bgeu	r2,r8,978cc <__divdf3+0x424>
   978b4:	1585883a 	add	r2,r2,r22
   978b8:	813fffc4 	addi	r4,r16,-1
   978bc:	15810236 	bltu	r2,r22,97cc8 <__divdf3+0x820>
   978c0:	1201012e 	bgeu	r2,r8,97cc8 <__divdf3+0x820>
   978c4:	843fff84 	addi	r16,r16,-2
   978c8:	1585883a 	add	r2,r2,r22
   978cc:	8822943a 	slli	r17,r17,16
   978d0:	d9800017 	ldw	r6,0(sp)
   978d4:	1211c83a 	sub	r8,r2,r8
   978d8:	8c22b03a 	or	r17,r17,r16
   978dc:	373fffcc 	andi	fp,r6,65535
   978e0:	8abfffcc 	andi	r10,r17,65535
   978e4:	8820d43a 	srli	r16,r17,16
   978e8:	5009883a 	mov	r4,r10
   978ec:	e00b883a 	mov	r5,fp
   978f0:	302ed43a 	srli	r23,r6,16
   978f4:	d8c00215 	stw	r3,8(sp)
   978f8:	da000415 	stw	r8,16(sp)
   978fc:	da800115 	stw	r10,4(sp)
   97900:	00822140 	call	82214 <__mulsi3>
   97904:	800b883a 	mov	r5,r16
   97908:	e009883a 	mov	r4,fp
   9790c:	d8800515 	stw	r2,20(sp)
   97910:	00822140 	call	82214 <__mulsi3>
   97914:	8009883a 	mov	r4,r16
   97918:	b80b883a 	mov	r5,r23
   9791c:	d8800315 	stw	r2,12(sp)
   97920:	00822140 	call	82214 <__mulsi3>
   97924:	da800117 	ldw	r10,4(sp)
   97928:	b80b883a 	mov	r5,r23
   9792c:	1021883a 	mov	r16,r2
   97930:	5009883a 	mov	r4,r10
   97934:	00822140 	call	82214 <__mulsi3>
   97938:	d9c00517 	ldw	r7,20(sp)
   9793c:	da400317 	ldw	r9,12(sp)
   97940:	d8c00217 	ldw	r3,8(sp)
   97944:	3808d43a 	srli	r4,r7,16
   97948:	1245883a 	add	r2,r2,r9
   9794c:	da000417 	ldw	r8,16(sp)
   97950:	2085883a 	add	r2,r4,r2
   97954:	1240022e 	bgeu	r2,r9,97960 <__divdf3+0x4b8>
   97958:	01000074 	movhi	r4,1
   9795c:	8121883a 	add	r16,r16,r4
   97960:	1008d43a 	srli	r4,r2,16
   97964:	1004943a 	slli	r2,r2,16
   97968:	39ffffcc 	andi	r7,r7,65535
   9796c:	2409883a 	add	r4,r4,r16
   97970:	11c5883a 	add	r2,r2,r7
   97974:	4100bb36 	bltu	r8,r4,97c64 <__divdf3+0x7bc>
   97978:	4100d726 	beq	r8,r4,97cd8 <__divdf3+0x830>
   9797c:	4109c83a 	sub	r4,r8,r4
   97980:	a8a1c83a 	sub	r16,r21,r2
   97984:	ac2b803a 	cmpltu	r21,r21,r16
   97988:	256bc83a 	sub	r21,r4,r21
   9798c:	b540d926 	beq	r22,r21,97cf4 <__divdf3+0x84c>
   97990:	a00b883a 	mov	r5,r20
   97994:	a809883a 	mov	r4,r21
   97998:	d8c00215 	stw	r3,8(sp)
   9799c:	00821580 	call	82158 <__udivsi3>
   979a0:	100b883a 	mov	r5,r2
   979a4:	9009883a 	mov	r4,r18
   979a8:	d8800515 	stw	r2,20(sp)
   979ac:	00822140 	call	82214 <__mulsi3>
   979b0:	a809883a 	mov	r4,r21
   979b4:	a00b883a 	mov	r5,r20
   979b8:	d8800415 	stw	r2,16(sp)
   979bc:	00821bc0 	call	821bc <__umodsi3>
   979c0:	1004943a 	slli	r2,r2,16
   979c4:	8008d43a 	srli	r4,r16,16
   979c8:	da000417 	ldw	r8,16(sp)
   979cc:	d8c00217 	ldw	r3,8(sp)
   979d0:	2084b03a 	or	r2,r4,r2
   979d4:	d9c00517 	ldw	r7,20(sp)
   979d8:	1200062e 	bgeu	r2,r8,979f4 <__divdf3+0x54c>
   979dc:	1585883a 	add	r2,r2,r22
   979e0:	393fffc4 	addi	r4,r7,-1
   979e4:	1580c536 	bltu	r2,r22,97cfc <__divdf3+0x854>
   979e8:	1200c42e 	bgeu	r2,r8,97cfc <__divdf3+0x854>
   979ec:	39ffff84 	addi	r7,r7,-2
   979f0:	1585883a 	add	r2,r2,r22
   979f4:	122bc83a 	sub	r21,r2,r8
   979f8:	a00b883a 	mov	r5,r20
   979fc:	a809883a 	mov	r4,r21
   97a00:	d8c00215 	stw	r3,8(sp)
   97a04:	d9c00515 	stw	r7,20(sp)
   97a08:	00821580 	call	82158 <__udivsi3>
   97a0c:	9009883a 	mov	r4,r18
   97a10:	100b883a 	mov	r5,r2
   97a14:	d8800415 	stw	r2,16(sp)
   97a18:	00822140 	call	82214 <__mulsi3>
   97a1c:	a809883a 	mov	r4,r21
   97a20:	a00b883a 	mov	r5,r20
   97a24:	1025883a 	mov	r18,r2
   97a28:	00821bc0 	call	821bc <__umodsi3>
   97a2c:	1004943a 	slli	r2,r2,16
   97a30:	813fffcc 	andi	r4,r16,65535
   97a34:	d8c00217 	ldw	r3,8(sp)
   97a38:	20a0b03a 	or	r16,r4,r2
   97a3c:	d9c00517 	ldw	r7,20(sp)
   97a40:	da000417 	ldw	r8,16(sp)
   97a44:	8480062e 	bgeu	r16,r18,97a60 <__divdf3+0x5b8>
   97a48:	85a1883a 	add	r16,r16,r22
   97a4c:	40bfffc4 	addi	r2,r8,-1
   97a50:	8580ac36 	bltu	r16,r22,97d04 <__divdf3+0x85c>
   97a54:	8480ab2e 	bgeu	r16,r18,97d04 <__divdf3+0x85c>
   97a58:	423fff84 	addi	r8,r8,-2
   97a5c:	85a1883a 	add	r16,r16,r22
   97a60:	3804943a 	slli	r2,r7,16
   97a64:	84a1c83a 	sub	r16,r16,r18
   97a68:	e009883a 	mov	r4,fp
   97a6c:	1228b03a 	or	r20,r2,r8
   97a70:	a1ffffcc 	andi	r7,r20,65535
   97a74:	a024d43a 	srli	r18,r20,16
   97a78:	380b883a 	mov	r5,r7
   97a7c:	d8c00215 	stw	r3,8(sp)
   97a80:	d9c00515 	stw	r7,20(sp)
   97a84:	00822140 	call	82214 <__mulsi3>
   97a88:	900b883a 	mov	r5,r18
   97a8c:	e009883a 	mov	r4,fp
   97a90:	102b883a 	mov	r21,r2
   97a94:	00822140 	call	82214 <__mulsi3>
   97a98:	900b883a 	mov	r5,r18
   97a9c:	b809883a 	mov	r4,r23
   97aa0:	1039883a 	mov	fp,r2
   97aa4:	00822140 	call	82214 <__mulsi3>
   97aa8:	d9c00517 	ldw	r7,20(sp)
   97aac:	b80b883a 	mov	r5,r23
   97ab0:	1025883a 	mov	r18,r2
   97ab4:	3809883a 	mov	r4,r7
   97ab8:	00822140 	call	82214 <__mulsi3>
   97abc:	a808d43a 	srli	r4,r21,16
   97ac0:	1705883a 	add	r2,r2,fp
   97ac4:	d8c00217 	ldw	r3,8(sp)
   97ac8:	2085883a 	add	r2,r4,r2
   97acc:	1700022e 	bgeu	r2,fp,97ad8 <__divdf3+0x630>
   97ad0:	01000074 	movhi	r4,1
   97ad4:	9125883a 	add	r18,r18,r4
   97ad8:	1008d43a 	srli	r4,r2,16
   97adc:	1004943a 	slli	r2,r2,16
   97ae0:	ad7fffcc 	andi	r21,r21,65535
   97ae4:	2489883a 	add	r4,r4,r18
   97ae8:	1545883a 	add	r2,r2,r21
   97aec:	81003836 	bltu	r16,r4,97bd0 <__divdf3+0x728>
   97af0:	81003626 	beq	r16,r4,97bcc <__divdf3+0x724>
   97af4:	a5000054 	ori	r20,r20,1
   97af8:	1880ffc4 	addi	r2,r3,1023
   97afc:	00bf2e0e 	bge	zero,r2,977b8 <__ram_exceptions_end+0xfff77584>
   97b00:	a10001cc 	andi	r4,r20,7
   97b04:	20000726 	beq	r4,zero,97b24 <__divdf3+0x67c>
   97b08:	a10003cc 	andi	r4,r20,15
   97b0c:	01400104 	movi	r5,4
   97b10:	21400426 	beq	r4,r5,97b24 <__divdf3+0x67c>
   97b14:	a149883a 	add	r4,r20,r5
   97b18:	2529803a 	cmpltu	r20,r4,r20
   97b1c:	8d23883a 	add	r17,r17,r20
   97b20:	2029883a 	mov	r20,r4
   97b24:	8900402c 	andhi	r4,r17,256
   97b28:	20000426 	beq	r4,zero,97b3c <__divdf3+0x694>
   97b2c:	18810004 	addi	r2,r3,1024
   97b30:	00ffc034 	movhi	r3,65280
   97b34:	18ffffc4 	addi	r3,r3,-1
   97b38:	88e2703a 	and	r17,r17,r3
   97b3c:	00c1ff84 	movi	r3,2046
   97b40:	18beb416 	blt	r3,r2,97614 <__ram_exceptions_end+0xfff773e0>
   97b44:	a028d0fa 	srli	r20,r20,3
   97b48:	882a977a 	slli	r21,r17,29
   97b4c:	8820927a 	slli	r16,r17,9
   97b50:	1081ffcc 	andi	r2,r2,2047
   97b54:	ad2ab03a 	or	r21,r21,r20
   97b58:	8020d33a 	srli	r16,r16,12
   97b5c:	9900004c 	andi	r4,r19,1
   97b60:	003eb006 	br	97624 <__ram_exceptions_end+0xfff773f0>
   97b64:	8080022c 	andhi	r2,r16,8
   97b68:	10001226 	beq	r2,zero,97bb4 <__divdf3+0x70c>
   97b6c:	8880022c 	andhi	r2,r17,8
   97b70:	1000101e 	bne	r2,zero,97bb4 <__divdf3+0x70c>
   97b74:	00800434 	movhi	r2,16
   97b78:	8c000234 	orhi	r16,r17,8
   97b7c:	10bfffc4 	addi	r2,r2,-1
   97b80:	b809883a 	mov	r4,r23
   97b84:	80a0703a 	and	r16,r16,r2
   97b88:	a02b883a 	mov	r21,r20
   97b8c:	003f0806 	br	977b0 <__ram_exceptions_end+0xfff7757c>
   97b90:	008000c4 	movi	r2,3
   97b94:	3880b126 	beq	r7,r2,97e5c <__divdf3+0x9b4>
   97b98:	00800044 	movi	r2,1
   97b9c:	38805b1e 	bne	r7,r2,97d0c <__divdf3+0x864>
   97ba0:	e009883a 	mov	r4,fp
   97ba4:	0005883a 	mov	r2,zero
   97ba8:	0021883a 	mov	r16,zero
   97bac:	002b883a 	mov	r21,zero
   97bb0:	003e9c06 	br	97624 <__ram_exceptions_end+0xfff773f0>
   97bb4:	00800434 	movhi	r2,16
   97bb8:	84000234 	orhi	r16,r16,8
   97bbc:	10bfffc4 	addi	r2,r2,-1
   97bc0:	b009883a 	mov	r4,r22
   97bc4:	80a0703a 	and	r16,r16,r2
   97bc8:	003ef906 	br	977b0 <__ram_exceptions_end+0xfff7757c>
   97bcc:	103fca26 	beq	r2,zero,97af8 <__ram_exceptions_end+0xfff778c4>
   97bd0:	b421883a 	add	r16,r22,r16
   97bd4:	a17fffc4 	addi	r5,r20,-1
   97bd8:	8580422e 	bgeu	r16,r22,97ce4 <__divdf3+0x83c>
   97bdc:	2829883a 	mov	r20,r5
   97be0:	813fc41e 	bne	r16,r4,97af4 <__ram_exceptions_end+0xfff778c0>
   97be4:	d9800017 	ldw	r6,0(sp)
   97be8:	30bfc21e 	bne	r6,r2,97af4 <__ram_exceptions_end+0xfff778c0>
   97bec:	003fc206 	br	97af8 <__ram_exceptions_end+0xfff778c4>
   97bf0:	143ff604 	addi	r16,r2,-40
   97bf4:	8c20983a 	sll	r16,r17,r16
   97bf8:	002b883a 	mov	r21,zero
   97bfc:	003eb406 	br	976d0 <__ram_exceptions_end+0xfff7749c>
   97c00:	d9800215 	stw	r6,8(sp)
   97c04:	d9c00515 	stw	r7,20(sp)
   97c08:	da000415 	stw	r8,16(sp)
   97c0c:	00995e40 	call	995e4 <__clzsi2>
   97c10:	10800804 	addi	r2,r2,32
   97c14:	da000417 	ldw	r8,16(sp)
   97c18:	d9c00517 	ldw	r7,20(sp)
   97c1c:	d9800217 	ldw	r6,8(sp)
   97c20:	003ea106 	br	976a8 <__ram_exceptions_end+0xfff77474>
   97c24:	147ff604 	addi	r17,r2,-40
   97c28:	3462983a 	sll	r17,r6,r17
   97c2c:	0029883a 	mov	r20,zero
   97c30:	003ec906 	br	97758 <__ram_exceptions_end+0xfff77524>
   97c34:	3009883a 	mov	r4,r6
   97c38:	d9400115 	stw	r5,4(sp)
   97c3c:	d9800215 	stw	r6,8(sp)
   97c40:	da000415 	stw	r8,16(sp)
   97c44:	da400315 	stw	r9,12(sp)
   97c48:	00995e40 	call	995e4 <__clzsi2>
   97c4c:	10800804 	addi	r2,r2,32
   97c50:	da400317 	ldw	r9,12(sp)
   97c54:	da000417 	ldw	r8,16(sp)
   97c58:	d9800217 	ldw	r6,8(sp)
   97c5c:	d9400117 	ldw	r5,4(sp)
   97c60:	003eb306 	br	97730 <__ram_exceptions_end+0xfff774fc>
   97c64:	d9800017 	ldw	r6,0(sp)
   97c68:	a9ab883a 	add	r21,r21,r6
   97c6c:	a98b803a 	cmpltu	r5,r21,r6
   97c70:	2d8b883a 	add	r5,r5,r22
   97c74:	2a11883a 	add	r8,r5,r8
   97c78:	897fffc4 	addi	r5,r17,-1
   97c7c:	b2000c2e 	bgeu	r22,r8,97cb0 <__divdf3+0x808>
   97c80:	41003f36 	bltu	r8,r4,97d80 <__divdf3+0x8d8>
   97c84:	22006c26 	beq	r4,r8,97e38 <__divdf3+0x990>
   97c88:	4109c83a 	sub	r4,r8,r4
   97c8c:	2823883a 	mov	r17,r5
   97c90:	003f3b06 	br	97980 <__ram_exceptions_end+0xfff7774c>
   97c94:	ad3ed336 	bltu	r21,r20,977e4 <__ram_exceptions_end+0xfff775b0>
   97c98:	a804d07a 	srli	r2,r21,1
   97c9c:	802e97fa 	slli	r23,r16,31
   97ca0:	a82a97fa 	slli	r21,r21,31
   97ca4:	8020d07a 	srli	r16,r16,1
   97ca8:	b8aeb03a 	or	r23,r23,r2
   97cac:	003ed006 	br	977f0 <__ram_exceptions_end+0xfff775bc>
   97cb0:	b23ff51e 	bne	r22,r8,97c88 <__ram_exceptions_end+0xfff77a54>
   97cb4:	d9800017 	ldw	r6,0(sp)
   97cb8:	a9bff12e 	bgeu	r21,r6,97c80 <__ram_exceptions_end+0xfff77a4c>
   97cbc:	b109c83a 	sub	r4,r22,r4
   97cc0:	2823883a 	mov	r17,r5
   97cc4:	003f2e06 	br	97980 <__ram_exceptions_end+0xfff7774c>
   97cc8:	2021883a 	mov	r16,r4
   97ccc:	003eff06 	br	978cc <__ram_exceptions_end+0xfff77698>
   97cd0:	2023883a 	mov	r17,r4
   97cd4:	003ee406 	br	97868 <__ram_exceptions_end+0xfff77634>
   97cd8:	a8bfe236 	bltu	r21,r2,97c64 <__ram_exceptions_end+0xfff77a30>
   97cdc:	0009883a 	mov	r4,zero
   97ce0:	003f2706 	br	97980 <__ram_exceptions_end+0xfff7774c>
   97ce4:	81002d36 	bltu	r16,r4,97d9c <__divdf3+0x8f4>
   97ce8:	24005626 	beq	r4,r16,97e44 <__divdf3+0x99c>
   97cec:	2829883a 	mov	r20,r5
   97cf0:	003f8006 	br	97af4 <__ram_exceptions_end+0xfff778c0>
   97cf4:	053fffc4 	movi	r20,-1
   97cf8:	003f7f06 	br	97af8 <__ram_exceptions_end+0xfff778c4>
   97cfc:	200f883a 	mov	r7,r4
   97d00:	003f3c06 	br	979f4 <__ram_exceptions_end+0xfff777c0>
   97d04:	1011883a 	mov	r8,r2
   97d08:	003f5506 	br	97a60 <__ram_exceptions_end+0xfff7782c>
   97d0c:	e027883a 	mov	r19,fp
   97d10:	003f7906 	br	97af8 <__ram_exceptions_end+0xfff778c4>
   97d14:	010007c4 	movi	r4,31
   97d18:	20c02816 	blt	r4,r3,97dbc <__divdf3+0x914>
   97d1c:	00800804 	movi	r2,32
   97d20:	10c5c83a 	sub	r2,r2,r3
   97d24:	888a983a 	sll	r5,r17,r2
   97d28:	a0c8d83a 	srl	r4,r20,r3
   97d2c:	a084983a 	sll	r2,r20,r2
   97d30:	88e2d83a 	srl	r17,r17,r3
   97d34:	2906b03a 	or	r3,r5,r4
   97d38:	1004c03a 	cmpne	r2,r2,zero
   97d3c:	1886b03a 	or	r3,r3,r2
   97d40:	188001cc 	andi	r2,r3,7
   97d44:	10000726 	beq	r2,zero,97d64 <__divdf3+0x8bc>
   97d48:	188003cc 	andi	r2,r3,15
   97d4c:	01000104 	movi	r4,4
   97d50:	11000426 	beq	r2,r4,97d64 <__divdf3+0x8bc>
   97d54:	1805883a 	mov	r2,r3
   97d58:	10c00104 	addi	r3,r2,4
   97d5c:	1885803a 	cmpltu	r2,r3,r2
   97d60:	88a3883a 	add	r17,r17,r2
   97d64:	8880202c 	andhi	r2,r17,128
   97d68:	10002926 	beq	r2,zero,97e10 <__divdf3+0x968>
   97d6c:	9900004c 	andi	r4,r19,1
   97d70:	00800044 	movi	r2,1
   97d74:	0021883a 	mov	r16,zero
   97d78:	002b883a 	mov	r21,zero
   97d7c:	003e2906 	br	97624 <__ram_exceptions_end+0xfff773f0>
   97d80:	d9800017 	ldw	r6,0(sp)
   97d84:	8c7fff84 	addi	r17,r17,-2
   97d88:	a9ab883a 	add	r21,r21,r6
   97d8c:	a98b803a 	cmpltu	r5,r21,r6
   97d90:	2d8b883a 	add	r5,r5,r22
   97d94:	2a11883a 	add	r8,r5,r8
   97d98:	003ef806 	br	9797c <__ram_exceptions_end+0xfff77748>
   97d9c:	d9800017 	ldw	r6,0(sp)
   97da0:	318f883a 	add	r7,r6,r6
   97da4:	398b803a 	cmpltu	r5,r7,r6
   97da8:	2d8d883a 	add	r6,r5,r22
   97dac:	81a1883a 	add	r16,r16,r6
   97db0:	a17fff84 	addi	r5,r20,-2
   97db4:	d9c00015 	stw	r7,0(sp)
   97db8:	003f8806 	br	97bdc <__ram_exceptions_end+0xfff779a8>
   97dbc:	013ff844 	movi	r4,-31
   97dc0:	2085c83a 	sub	r2,r4,r2
   97dc4:	8888d83a 	srl	r4,r17,r2
   97dc8:	00800804 	movi	r2,32
   97dcc:	18802126 	beq	r3,r2,97e54 <__divdf3+0x9ac>
   97dd0:	04001004 	movi	r16,64
   97dd4:	80c7c83a 	sub	r3,r16,r3
   97dd8:	88e0983a 	sll	r16,r17,r3
   97ddc:	8504b03a 	or	r2,r16,r20
   97de0:	1004c03a 	cmpne	r2,r2,zero
   97de4:	2084b03a 	or	r2,r4,r2
   97de8:	144001cc 	andi	r17,r2,7
   97dec:	88000d1e 	bne	r17,zero,97e24 <__divdf3+0x97c>
   97df0:	0021883a 	mov	r16,zero
   97df4:	102ad0fa 	srli	r21,r2,3
   97df8:	9900004c 	andi	r4,r19,1
   97dfc:	0005883a 	mov	r2,zero
   97e00:	ac6ab03a 	or	r21,r21,r17
   97e04:	003e0706 	br	97624 <__ram_exceptions_end+0xfff773f0>
   97e08:	1007883a 	mov	r3,r2
   97e0c:	0023883a 	mov	r17,zero
   97e10:	8820927a 	slli	r16,r17,9
   97e14:	1805883a 	mov	r2,r3
   97e18:	8822977a 	slli	r17,r17,29
   97e1c:	8020d33a 	srli	r16,r16,12
   97e20:	003ff406 	br	97df4 <__ram_exceptions_end+0xfff77bc0>
   97e24:	10c003cc 	andi	r3,r2,15
   97e28:	01000104 	movi	r4,4
   97e2c:	193ff626 	beq	r3,r4,97e08 <__ram_exceptions_end+0xfff77bd4>
   97e30:	0023883a 	mov	r17,zero
   97e34:	003fc806 	br	97d58 <__ram_exceptions_end+0xfff77b24>
   97e38:	a8bfd136 	bltu	r21,r2,97d80 <__ram_exceptions_end+0xfff77b4c>
   97e3c:	2823883a 	mov	r17,r5
   97e40:	003fa606 	br	97cdc <__ram_exceptions_end+0xfff77aa8>
   97e44:	d9800017 	ldw	r6,0(sp)
   97e48:	30bfd436 	bltu	r6,r2,97d9c <__ram_exceptions_end+0xfff77b68>
   97e4c:	2829883a 	mov	r20,r5
   97e50:	003f6406 	br	97be4 <__ram_exceptions_end+0xfff779b0>
   97e54:	0021883a 	mov	r16,zero
   97e58:	003fe006 	br	97ddc <__ram_exceptions_end+0xfff77ba8>
   97e5c:	00800434 	movhi	r2,16
   97e60:	8c000234 	orhi	r16,r17,8
   97e64:	10bfffc4 	addi	r2,r2,-1
   97e68:	e009883a 	mov	r4,fp
   97e6c:	80a0703a 	and	r16,r16,r2
   97e70:	a02b883a 	mov	r21,r20
   97e74:	003e4e06 	br	977b0 <__ram_exceptions_end+0xfff7757c>

00097e78 <__eqdf2>:
   97e78:	2804d53a 	srli	r2,r5,20
   97e7c:	3806d53a 	srli	r3,r7,20
   97e80:	02000434 	movhi	r8,16
   97e84:	423fffc4 	addi	r8,r8,-1
   97e88:	1081ffcc 	andi	r2,r2,2047
   97e8c:	0281ffc4 	movi	r10,2047
   97e90:	2a12703a 	and	r9,r5,r8
   97e94:	18c1ffcc 	andi	r3,r3,2047
   97e98:	3a10703a 	and	r8,r7,r8
   97e9c:	280ad7fa 	srli	r5,r5,31
   97ea0:	380ed7fa 	srli	r7,r7,31
   97ea4:	12801026 	beq	r2,r10,97ee8 <__eqdf2+0x70>
   97ea8:	0281ffc4 	movi	r10,2047
   97eac:	1a800a26 	beq	r3,r10,97ed8 <__eqdf2+0x60>
   97eb0:	10c00226 	beq	r2,r3,97ebc <__eqdf2+0x44>
   97eb4:	00800044 	movi	r2,1
   97eb8:	f800283a 	ret
   97ebc:	4a3ffd1e 	bne	r9,r8,97eb4 <__ram_exceptions_end+0xfff77c80>
   97ec0:	21bffc1e 	bne	r4,r6,97eb4 <__ram_exceptions_end+0xfff77c80>
   97ec4:	29c00c26 	beq	r5,r7,97ef8 <__eqdf2+0x80>
   97ec8:	103ffa1e 	bne	r2,zero,97eb4 <__ram_exceptions_end+0xfff77c80>
   97ecc:	2244b03a 	or	r2,r4,r9
   97ed0:	1004c03a 	cmpne	r2,r2,zero
   97ed4:	f800283a 	ret
   97ed8:	3214b03a 	or	r10,r6,r8
   97edc:	503ff426 	beq	r10,zero,97eb0 <__ram_exceptions_end+0xfff77c7c>
   97ee0:	00800044 	movi	r2,1
   97ee4:	f800283a 	ret
   97ee8:	2254b03a 	or	r10,r4,r9
   97eec:	503fee26 	beq	r10,zero,97ea8 <__ram_exceptions_end+0xfff77c74>
   97ef0:	00800044 	movi	r2,1
   97ef4:	f800283a 	ret
   97ef8:	0005883a 	mov	r2,zero
   97efc:	f800283a 	ret

00097f00 <__gedf2>:
   97f00:	2804d53a 	srli	r2,r5,20
   97f04:	3806d53a 	srli	r3,r7,20
   97f08:	02000434 	movhi	r8,16
   97f0c:	423fffc4 	addi	r8,r8,-1
   97f10:	1081ffcc 	andi	r2,r2,2047
   97f14:	0241ffc4 	movi	r9,2047
   97f18:	2a14703a 	and	r10,r5,r8
   97f1c:	18c1ffcc 	andi	r3,r3,2047
   97f20:	3a10703a 	and	r8,r7,r8
   97f24:	280ad7fa 	srli	r5,r5,31
   97f28:	380ed7fa 	srli	r7,r7,31
   97f2c:	12401d26 	beq	r2,r9,97fa4 <__gedf2+0xa4>
   97f30:	0241ffc4 	movi	r9,2047
   97f34:	1a401226 	beq	r3,r9,97f80 <__gedf2+0x80>
   97f38:	1000081e 	bne	r2,zero,97f5c <__gedf2+0x5c>
   97f3c:	2296b03a 	or	r11,r4,r10
   97f40:	5813003a 	cmpeq	r9,r11,zero
   97f44:	1800091e 	bne	r3,zero,97f6c <__gedf2+0x6c>
   97f48:	3218b03a 	or	r12,r6,r8
   97f4c:	6000071e 	bne	r12,zero,97f6c <__gedf2+0x6c>
   97f50:	0005883a 	mov	r2,zero
   97f54:	5800101e 	bne	r11,zero,97f98 <__gedf2+0x98>
   97f58:	f800283a 	ret
   97f5c:	18000c1e 	bne	r3,zero,97f90 <__gedf2+0x90>
   97f60:	3212b03a 	or	r9,r6,r8
   97f64:	48000c26 	beq	r9,zero,97f98 <__gedf2+0x98>
   97f68:	0013883a 	mov	r9,zero
   97f6c:	39c03fcc 	andi	r7,r7,255
   97f70:	48000826 	beq	r9,zero,97f94 <__gedf2+0x94>
   97f74:	38000926 	beq	r7,zero,97f9c <__gedf2+0x9c>
   97f78:	00800044 	movi	r2,1
   97f7c:	f800283a 	ret
   97f80:	3212b03a 	or	r9,r6,r8
   97f84:	483fec26 	beq	r9,zero,97f38 <__ram_exceptions_end+0xfff77d04>
   97f88:	00bfff84 	movi	r2,-2
   97f8c:	f800283a 	ret
   97f90:	39c03fcc 	andi	r7,r7,255
   97f94:	29c00626 	beq	r5,r7,97fb0 <__gedf2+0xb0>
   97f98:	283ff726 	beq	r5,zero,97f78 <__ram_exceptions_end+0xfff77d44>
   97f9c:	00bfffc4 	movi	r2,-1
   97fa0:	f800283a 	ret
   97fa4:	2292b03a 	or	r9,r4,r10
   97fa8:	483fe126 	beq	r9,zero,97f30 <__ram_exceptions_end+0xfff77cfc>
   97fac:	003ff606 	br	97f88 <__ram_exceptions_end+0xfff77d54>
   97fb0:	18bff916 	blt	r3,r2,97f98 <__ram_exceptions_end+0xfff77d64>
   97fb4:	10c00316 	blt	r2,r3,97fc4 <__gedf2+0xc4>
   97fb8:	42bff736 	bltu	r8,r10,97f98 <__ram_exceptions_end+0xfff77d64>
   97fbc:	52000326 	beq	r10,r8,97fcc <__gedf2+0xcc>
   97fc0:	5200042e 	bgeu	r10,r8,97fd4 <__gedf2+0xd4>
   97fc4:	283fec1e 	bne	r5,zero,97f78 <__ram_exceptions_end+0xfff77d44>
   97fc8:	003ff406 	br	97f9c <__ram_exceptions_end+0xfff77d68>
   97fcc:	313ff236 	bltu	r6,r4,97f98 <__ram_exceptions_end+0xfff77d64>
   97fd0:	21bffc36 	bltu	r4,r6,97fc4 <__ram_exceptions_end+0xfff77d90>
   97fd4:	0005883a 	mov	r2,zero
   97fd8:	f800283a 	ret

00097fdc <__ledf2>:
   97fdc:	2804d53a 	srli	r2,r5,20
   97fe0:	3810d53a 	srli	r8,r7,20
   97fe4:	00c00434 	movhi	r3,16
   97fe8:	18ffffc4 	addi	r3,r3,-1
   97fec:	1081ffcc 	andi	r2,r2,2047
   97ff0:	0241ffc4 	movi	r9,2047
   97ff4:	28d4703a 	and	r10,r5,r3
   97ff8:	4201ffcc 	andi	r8,r8,2047
   97ffc:	38c6703a 	and	r3,r7,r3
   98000:	280ad7fa 	srli	r5,r5,31
   98004:	380ed7fa 	srli	r7,r7,31
   98008:	12401f26 	beq	r2,r9,98088 <__ledf2+0xac>
   9800c:	0241ffc4 	movi	r9,2047
   98010:	42401426 	beq	r8,r9,98064 <__ledf2+0x88>
   98014:	1000091e 	bne	r2,zero,9803c <__ledf2+0x60>
   98018:	2296b03a 	or	r11,r4,r10
   9801c:	5813003a 	cmpeq	r9,r11,zero
   98020:	29403fcc 	andi	r5,r5,255
   98024:	40000a1e 	bne	r8,zero,98050 <__ledf2+0x74>
   98028:	30d8b03a 	or	r12,r6,r3
   9802c:	6000081e 	bne	r12,zero,98050 <__ledf2+0x74>
   98030:	0005883a 	mov	r2,zero
   98034:	5800111e 	bne	r11,zero,9807c <__ledf2+0xa0>
   98038:	f800283a 	ret
   9803c:	29403fcc 	andi	r5,r5,255
   98040:	40000c1e 	bne	r8,zero,98074 <__ledf2+0x98>
   98044:	30d2b03a 	or	r9,r6,r3
   98048:	48000c26 	beq	r9,zero,9807c <__ledf2+0xa0>
   9804c:	0013883a 	mov	r9,zero
   98050:	39c03fcc 	andi	r7,r7,255
   98054:	48000826 	beq	r9,zero,98078 <__ledf2+0x9c>
   98058:	38001126 	beq	r7,zero,980a0 <__ledf2+0xc4>
   9805c:	00800044 	movi	r2,1
   98060:	f800283a 	ret
   98064:	30d2b03a 	or	r9,r6,r3
   98068:	483fea26 	beq	r9,zero,98014 <__ram_exceptions_end+0xfff77de0>
   9806c:	00800084 	movi	r2,2
   98070:	f800283a 	ret
   98074:	39c03fcc 	andi	r7,r7,255
   98078:	39400726 	beq	r7,r5,98098 <__ledf2+0xbc>
   9807c:	2800081e 	bne	r5,zero,980a0 <__ledf2+0xc4>
   98080:	00800044 	movi	r2,1
   98084:	f800283a 	ret
   98088:	2292b03a 	or	r9,r4,r10
   9808c:	483fdf26 	beq	r9,zero,9800c <__ram_exceptions_end+0xfff77dd8>
   98090:	00800084 	movi	r2,2
   98094:	f800283a 	ret
   98098:	4080030e 	bge	r8,r2,980a8 <__ledf2+0xcc>
   9809c:	383fef26 	beq	r7,zero,9805c <__ram_exceptions_end+0xfff77e28>
   980a0:	00bfffc4 	movi	r2,-1
   980a4:	f800283a 	ret
   980a8:	123feb16 	blt	r2,r8,98058 <__ram_exceptions_end+0xfff77e24>
   980ac:	1abff336 	bltu	r3,r10,9807c <__ram_exceptions_end+0xfff77e48>
   980b0:	50c00326 	beq	r10,r3,980c0 <__ledf2+0xe4>
   980b4:	50c0042e 	bgeu	r10,r3,980c8 <__ledf2+0xec>
   980b8:	283fe81e 	bne	r5,zero,9805c <__ram_exceptions_end+0xfff77e28>
   980bc:	003ff806 	br	980a0 <__ram_exceptions_end+0xfff77e6c>
   980c0:	313fee36 	bltu	r6,r4,9807c <__ram_exceptions_end+0xfff77e48>
   980c4:	21bffc36 	bltu	r4,r6,980b8 <__ram_exceptions_end+0xfff77e84>
   980c8:	0005883a 	mov	r2,zero
   980cc:	f800283a 	ret

000980d0 <__muldf3>:
   980d0:	deffee04 	addi	sp,sp,-72
   980d4:	dd000c15 	stw	r20,48(sp)
   980d8:	2828d53a 	srli	r20,r5,20
   980dc:	ddc00f15 	stw	r23,60(sp)
   980e0:	282ed7fa 	srli	r23,r5,31
   980e4:	dc000815 	stw	r16,32(sp)
   980e8:	04000434 	movhi	r16,16
   980ec:	dcc00b15 	stw	r19,44(sp)
   980f0:	843fffc4 	addi	r16,r16,-1
   980f4:	dfc01115 	stw	ra,68(sp)
   980f8:	df001015 	stw	fp,64(sp)
   980fc:	dd800e15 	stw	r22,56(sp)
   98100:	dd400d15 	stw	r21,52(sp)
   98104:	dc800a15 	stw	r18,40(sp)
   98108:	dc400915 	stw	r17,36(sp)
   9810c:	a501ffcc 	andi	r20,r20,2047
   98110:	2c20703a 	and	r16,r5,r16
   98114:	b827883a 	mov	r19,r23
   98118:	ba403fcc 	andi	r9,r23,255
   9811c:	a0006026 	beq	r20,zero,982a0 <__muldf3+0x1d0>
   98120:	0081ffc4 	movi	r2,2047
   98124:	202d883a 	mov	r22,r4
   98128:	a0803626 	beq	r20,r2,98204 <__muldf3+0x134>
   9812c:	84000434 	orhi	r16,r16,16
   98130:	200ad77a 	srli	r5,r4,29
   98134:	800490fa 	slli	r2,r16,3
   98138:	202c90fa 	slli	r22,r4,3
   9813c:	a53f0044 	addi	r20,r20,-1023
   98140:	28a0b03a 	or	r16,r5,r2
   98144:	002b883a 	mov	r21,zero
   98148:	000b883a 	mov	r5,zero
   9814c:	3804d53a 	srli	r2,r7,20
   98150:	3838d7fa 	srli	fp,r7,31
   98154:	04400434 	movhi	r17,16
   98158:	8c7fffc4 	addi	r17,r17,-1
   9815c:	1081ffcc 	andi	r2,r2,2047
   98160:	3025883a 	mov	r18,r6
   98164:	3c62703a 	and	r17,r7,r17
   98168:	e2803fcc 	andi	r10,fp,255
   9816c:	10006d26 	beq	r2,zero,98324 <__muldf3+0x254>
   98170:	00c1ffc4 	movi	r3,2047
   98174:	10c06526 	beq	r2,r3,9830c <__muldf3+0x23c>
   98178:	8c400434 	orhi	r17,r17,16
   9817c:	300ed77a 	srli	r7,r6,29
   98180:	880690fa 	slli	r3,r17,3
   98184:	302490fa 	slli	r18,r6,3
   98188:	10bf0044 	addi	r2,r2,-1023
   9818c:	38e2b03a 	or	r17,r7,r3
   98190:	000f883a 	mov	r7,zero
   98194:	a087883a 	add	r3,r20,r2
   98198:	010003c4 	movi	r4,15
   9819c:	3d44b03a 	or	r2,r7,r21
   981a0:	e5ccf03a 	xor	r6,fp,r23
   981a4:	1a000044 	addi	r8,r3,1
   981a8:	20809b36 	bltu	r4,r2,98418 <__muldf3+0x348>
   981ac:	100490ba 	slli	r2,r2,2
   981b0:	010002b4 	movhi	r4,10
   981b4:	21207104 	addi	r4,r4,-32316
   981b8:	1105883a 	add	r2,r2,r4
   981bc:	10800017 	ldw	r2,0(r2)
   981c0:	1000683a 	jmp	r2
   981c4:	00098418 	cmpnei	zero,zero,9744
   981c8:	00098224 	muli	zero,zero,9736
   981cc:	00098224 	muli	zero,zero,9736
   981d0:	00098220 	cmpeqi	zero,zero,9736
   981d4:	000983f4 	movhi	zero,9743
   981d8:	000983f4 	movhi	zero,9743
   981dc:	000983dc 	xori	zero,zero,9743
   981e0:	00098220 	cmpeqi	zero,zero,9736
   981e4:	000983f4 	movhi	zero,9743
   981e8:	000983dc 	xori	zero,zero,9743
   981ec:	000983f4 	movhi	zero,9743
   981f0:	00098220 	cmpeqi	zero,zero,9736
   981f4:	00098404 	movi	zero,9744
   981f8:	00098404 	movi	zero,9744
   981fc:	00098404 	movi	zero,9744
   98200:	00098764 	muli	zero,zero,9757
   98204:	2404b03a 	or	r2,r4,r16
   98208:	1000711e 	bne	r2,zero,983d0 <__muldf3+0x300>
   9820c:	05400204 	movi	r21,8
   98210:	0021883a 	mov	r16,zero
   98214:	002d883a 	mov	r22,zero
   98218:	01400084 	movi	r5,2
   9821c:	003fcb06 	br	9814c <__ram_exceptions_end+0xfff77f18>
   98220:	500d883a 	mov	r6,r10
   98224:	00800084 	movi	r2,2
   98228:	38805926 	beq	r7,r2,98390 <__muldf3+0x2c0>
   9822c:	008000c4 	movi	r2,3
   98230:	3881bb26 	beq	r7,r2,98920 <__muldf3+0x850>
   98234:	00800044 	movi	r2,1
   98238:	3881961e 	bne	r7,r2,98894 <__muldf3+0x7c4>
   9823c:	3027883a 	mov	r19,r6
   98240:	0005883a 	mov	r2,zero
   98244:	0021883a 	mov	r16,zero
   98248:	002d883a 	mov	r22,zero
   9824c:	1004953a 	slli	r2,r2,20
   98250:	98c03fcc 	andi	r3,r19,255
   98254:	04400434 	movhi	r17,16
   98258:	8c7fffc4 	addi	r17,r17,-1
   9825c:	180697fa 	slli	r3,r3,31
   98260:	8460703a 	and	r16,r16,r17
   98264:	80a0b03a 	or	r16,r16,r2
   98268:	80c6b03a 	or	r3,r16,r3
   9826c:	b005883a 	mov	r2,r22
   98270:	dfc01117 	ldw	ra,68(sp)
   98274:	df001017 	ldw	fp,64(sp)
   98278:	ddc00f17 	ldw	r23,60(sp)
   9827c:	dd800e17 	ldw	r22,56(sp)
   98280:	dd400d17 	ldw	r21,52(sp)
   98284:	dd000c17 	ldw	r20,48(sp)
   98288:	dcc00b17 	ldw	r19,44(sp)
   9828c:	dc800a17 	ldw	r18,40(sp)
   98290:	dc400917 	ldw	r17,36(sp)
   98294:	dc000817 	ldw	r16,32(sp)
   98298:	dec01204 	addi	sp,sp,72
   9829c:	f800283a 	ret
   982a0:	2404b03a 	or	r2,r4,r16
   982a4:	202b883a 	mov	r21,r4
   982a8:	10004426 	beq	r2,zero,983bc <__muldf3+0x2ec>
   982ac:	80015126 	beq	r16,zero,987f4 <__muldf3+0x724>
   982b0:	8009883a 	mov	r4,r16
   982b4:	d9800715 	stw	r6,28(sp)
   982b8:	d9c00215 	stw	r7,8(sp)
   982bc:	da400415 	stw	r9,16(sp)
   982c0:	00995e40 	call	995e4 <__clzsi2>
   982c4:	d9800717 	ldw	r6,28(sp)
   982c8:	d9c00217 	ldw	r7,8(sp)
   982cc:	da400417 	ldw	r9,16(sp)
   982d0:	113ffd44 	addi	r4,r2,-11
   982d4:	00c00704 	movi	r3,28
   982d8:	19014216 	blt	r3,r4,987e4 <__muldf3+0x714>
   982dc:	00c00744 	movi	r3,29
   982e0:	15bffe04 	addi	r22,r2,-8
   982e4:	1907c83a 	sub	r3,r3,r4
   982e8:	85a0983a 	sll	r16,r16,r22
   982ec:	a8c6d83a 	srl	r3,r21,r3
   982f0:	adac983a 	sll	r22,r21,r22
   982f4:	1c20b03a 	or	r16,r3,r16
   982f8:	1080fcc4 	addi	r2,r2,1011
   982fc:	00a9c83a 	sub	r20,zero,r2
   98300:	002b883a 	mov	r21,zero
   98304:	000b883a 	mov	r5,zero
   98308:	003f9006 	br	9814c <__ram_exceptions_end+0xfff77f18>
   9830c:	3446b03a 	or	r3,r6,r17
   98310:	1800281e 	bne	r3,zero,983b4 <__muldf3+0x2e4>
   98314:	0023883a 	mov	r17,zero
   98318:	0025883a 	mov	r18,zero
   9831c:	01c00084 	movi	r7,2
   98320:	003f9c06 	br	98194 <__ram_exceptions_end+0xfff77f60>
   98324:	3446b03a 	or	r3,r6,r17
   98328:	18001e26 	beq	r3,zero,983a4 <__muldf3+0x2d4>
   9832c:	88012126 	beq	r17,zero,987b4 <__muldf3+0x6e4>
   98330:	8809883a 	mov	r4,r17
   98334:	d9400215 	stw	r5,8(sp)
   98338:	d9800715 	stw	r6,28(sp)
   9833c:	da400415 	stw	r9,16(sp)
   98340:	da800315 	stw	r10,12(sp)
   98344:	00995e40 	call	995e4 <__clzsi2>
   98348:	d9400217 	ldw	r5,8(sp)
   9834c:	d9800717 	ldw	r6,28(sp)
   98350:	da400417 	ldw	r9,16(sp)
   98354:	da800317 	ldw	r10,12(sp)
   98358:	113ffd44 	addi	r4,r2,-11
   9835c:	00c00704 	movi	r3,28
   98360:	19011016 	blt	r3,r4,987a4 <__muldf3+0x6d4>
   98364:	00c00744 	movi	r3,29
   98368:	14bffe04 	addi	r18,r2,-8
   9836c:	1907c83a 	sub	r3,r3,r4
   98370:	8ca2983a 	sll	r17,r17,r18
   98374:	30c6d83a 	srl	r3,r6,r3
   98378:	34a4983a 	sll	r18,r6,r18
   9837c:	1c62b03a 	or	r17,r3,r17
   98380:	1080fcc4 	addi	r2,r2,1011
   98384:	0085c83a 	sub	r2,zero,r2
   98388:	000f883a 	mov	r7,zero
   9838c:	003f8106 	br	98194 <__ram_exceptions_end+0xfff77f60>
   98390:	3027883a 	mov	r19,r6
   98394:	0081ffc4 	movi	r2,2047
   98398:	0021883a 	mov	r16,zero
   9839c:	002d883a 	mov	r22,zero
   983a0:	003faa06 	br	9824c <__ram_exceptions_end+0xfff78018>
   983a4:	0023883a 	mov	r17,zero
   983a8:	0025883a 	mov	r18,zero
   983ac:	01c00044 	movi	r7,1
   983b0:	003f7806 	br	98194 <__ram_exceptions_end+0xfff77f60>
   983b4:	01c000c4 	movi	r7,3
   983b8:	003f7606 	br	98194 <__ram_exceptions_end+0xfff77f60>
   983bc:	05400104 	movi	r21,4
   983c0:	0021883a 	mov	r16,zero
   983c4:	002d883a 	mov	r22,zero
   983c8:	01400044 	movi	r5,1
   983cc:	003f5f06 	br	9814c <__ram_exceptions_end+0xfff77f18>
   983d0:	05400304 	movi	r21,12
   983d4:	014000c4 	movi	r5,3
   983d8:	003f5c06 	br	9814c <__ram_exceptions_end+0xfff77f18>
   983dc:	04000434 	movhi	r16,16
   983e0:	0027883a 	mov	r19,zero
   983e4:	843fffc4 	addi	r16,r16,-1
   983e8:	05bfffc4 	movi	r22,-1
   983ec:	0081ffc4 	movi	r2,2047
   983f0:	003f9606 	br	9824c <__ram_exceptions_end+0xfff78018>
   983f4:	8023883a 	mov	r17,r16
   983f8:	b025883a 	mov	r18,r22
   983fc:	280f883a 	mov	r7,r5
   98400:	003f8806 	br	98224 <__ram_exceptions_end+0xfff77ff0>
   98404:	8023883a 	mov	r17,r16
   98408:	b025883a 	mov	r18,r22
   9840c:	480d883a 	mov	r6,r9
   98410:	280f883a 	mov	r7,r5
   98414:	003f8306 	br	98224 <__ram_exceptions_end+0xfff77ff0>
   98418:	b026d43a 	srli	r19,r22,16
   9841c:	902ed43a 	srli	r23,r18,16
   98420:	b5bfffcc 	andi	r22,r22,65535
   98424:	94bfffcc 	andi	r18,r18,65535
   98428:	b00b883a 	mov	r5,r22
   9842c:	9009883a 	mov	r4,r18
   98430:	d8c00515 	stw	r3,20(sp)
   98434:	d9800715 	stw	r6,28(sp)
   98438:	da000615 	stw	r8,24(sp)
   9843c:	00822140 	call	82214 <__mulsi3>
   98440:	980b883a 	mov	r5,r19
   98444:	9009883a 	mov	r4,r18
   98448:	1029883a 	mov	r20,r2
   9844c:	00822140 	call	82214 <__mulsi3>
   98450:	b80b883a 	mov	r5,r23
   98454:	9809883a 	mov	r4,r19
   98458:	102b883a 	mov	r21,r2
   9845c:	00822140 	call	82214 <__mulsi3>
   98460:	b809883a 	mov	r4,r23
   98464:	b00b883a 	mov	r5,r22
   98468:	1039883a 	mov	fp,r2
   9846c:	00822140 	call	82214 <__mulsi3>
   98470:	a008d43a 	srli	r4,r20,16
   98474:	1545883a 	add	r2,r2,r21
   98478:	d8c00517 	ldw	r3,20(sp)
   9847c:	2085883a 	add	r2,r4,r2
   98480:	d9800717 	ldw	r6,28(sp)
   98484:	da000617 	ldw	r8,24(sp)
   98488:	1540022e 	bgeu	r2,r21,98494 <__muldf3+0x3c4>
   9848c:	01000074 	movhi	r4,1
   98490:	e139883a 	add	fp,fp,r4
   98494:	100e943a 	slli	r7,r2,16
   98498:	1004d43a 	srli	r2,r2,16
   9849c:	882ad43a 	srli	r21,r17,16
   984a0:	a53fffcc 	andi	r20,r20,65535
   984a4:	8c7fffcc 	andi	r17,r17,65535
   984a8:	3d29883a 	add	r20,r7,r20
   984ac:	b00b883a 	mov	r5,r22
   984b0:	8809883a 	mov	r4,r17
   984b4:	d8c00515 	stw	r3,20(sp)
   984b8:	d9800715 	stw	r6,28(sp)
   984bc:	da000615 	stw	r8,24(sp)
   984c0:	dd000115 	stw	r20,4(sp)
   984c4:	d8800015 	stw	r2,0(sp)
   984c8:	00822140 	call	82214 <__mulsi3>
   984cc:	980b883a 	mov	r5,r19
   984d0:	8809883a 	mov	r4,r17
   984d4:	d8800215 	stw	r2,8(sp)
   984d8:	00822140 	call	82214 <__mulsi3>
   984dc:	9809883a 	mov	r4,r19
   984e0:	a80b883a 	mov	r5,r21
   984e4:	1029883a 	mov	r20,r2
   984e8:	00822140 	call	82214 <__mulsi3>
   984ec:	b00b883a 	mov	r5,r22
   984f0:	a809883a 	mov	r4,r21
   984f4:	d8800415 	stw	r2,16(sp)
   984f8:	00822140 	call	82214 <__mulsi3>
   984fc:	d9c00217 	ldw	r7,8(sp)
   98500:	1505883a 	add	r2,r2,r20
   98504:	d8c00517 	ldw	r3,20(sp)
   98508:	3826d43a 	srli	r19,r7,16
   9850c:	d9800717 	ldw	r6,28(sp)
   98510:	da000617 	ldw	r8,24(sp)
   98514:	9885883a 	add	r2,r19,r2
   98518:	da400417 	ldw	r9,16(sp)
   9851c:	1500022e 	bgeu	r2,r20,98528 <__muldf3+0x458>
   98520:	01000074 	movhi	r4,1
   98524:	4913883a 	add	r9,r9,r4
   98528:	1028d43a 	srli	r20,r2,16
   9852c:	1004943a 	slli	r2,r2,16
   98530:	802cd43a 	srli	r22,r16,16
   98534:	843fffcc 	andi	r16,r16,65535
   98538:	3cffffcc 	andi	r19,r7,65535
   9853c:	9009883a 	mov	r4,r18
   98540:	800b883a 	mov	r5,r16
   98544:	a269883a 	add	r20,r20,r9
   98548:	d8c00515 	stw	r3,20(sp)
   9854c:	d9800715 	stw	r6,28(sp)
   98550:	da000615 	stw	r8,24(sp)
   98554:	14e7883a 	add	r19,r2,r19
   98558:	00822140 	call	82214 <__mulsi3>
   9855c:	9009883a 	mov	r4,r18
   98560:	b00b883a 	mov	r5,r22
   98564:	d8800315 	stw	r2,12(sp)
   98568:	00822140 	call	82214 <__mulsi3>
   9856c:	b809883a 	mov	r4,r23
   98570:	b00b883a 	mov	r5,r22
   98574:	d8800215 	stw	r2,8(sp)
   98578:	00822140 	call	82214 <__mulsi3>
   9857c:	b80b883a 	mov	r5,r23
   98580:	8009883a 	mov	r4,r16
   98584:	d8800415 	stw	r2,16(sp)
   98588:	00822140 	call	82214 <__mulsi3>
   9858c:	da800317 	ldw	r10,12(sp)
   98590:	d9c00217 	ldw	r7,8(sp)
   98594:	d9000017 	ldw	r4,0(sp)
   98598:	502ed43a 	srli	r23,r10,16
   9859c:	11c5883a 	add	r2,r2,r7
   985a0:	24e5883a 	add	r18,r4,r19
   985a4:	b885883a 	add	r2,r23,r2
   985a8:	d8c00517 	ldw	r3,20(sp)
   985ac:	d9800717 	ldw	r6,28(sp)
   985b0:	da000617 	ldw	r8,24(sp)
   985b4:	da400417 	ldw	r9,16(sp)
   985b8:	11c0022e 	bgeu	r2,r7,985c4 <__muldf3+0x4f4>
   985bc:	01000074 	movhi	r4,1
   985c0:	4913883a 	add	r9,r9,r4
   985c4:	100ed43a 	srli	r7,r2,16
   985c8:	1004943a 	slli	r2,r2,16
   985cc:	55ffffcc 	andi	r23,r10,65535
   985d0:	3a53883a 	add	r9,r7,r9
   985d4:	8809883a 	mov	r4,r17
   985d8:	800b883a 	mov	r5,r16
   985dc:	d8c00515 	stw	r3,20(sp)
   985e0:	d9800715 	stw	r6,28(sp)
   985e4:	da000615 	stw	r8,24(sp)
   985e8:	da400415 	stw	r9,16(sp)
   985ec:	15ef883a 	add	r23,r2,r23
   985f0:	00822140 	call	82214 <__mulsi3>
   985f4:	8809883a 	mov	r4,r17
   985f8:	b00b883a 	mov	r5,r22
   985fc:	d8800215 	stw	r2,8(sp)
   98600:	00822140 	call	82214 <__mulsi3>
   98604:	b00b883a 	mov	r5,r22
   98608:	a809883a 	mov	r4,r21
   9860c:	d8800315 	stw	r2,12(sp)
   98610:	00822140 	call	82214 <__mulsi3>
   98614:	8009883a 	mov	r4,r16
   98618:	a80b883a 	mov	r5,r21
   9861c:	1023883a 	mov	r17,r2
   98620:	00822140 	call	82214 <__mulsi3>
   98624:	d9c00217 	ldw	r7,8(sp)
   98628:	da800317 	ldw	r10,12(sp)
   9862c:	d8c00517 	ldw	r3,20(sp)
   98630:	3808d43a 	srli	r4,r7,16
   98634:	1285883a 	add	r2,r2,r10
   98638:	d9800717 	ldw	r6,28(sp)
   9863c:	2085883a 	add	r2,r4,r2
   98640:	da000617 	ldw	r8,24(sp)
   98644:	da400417 	ldw	r9,16(sp)
   98648:	1280022e 	bgeu	r2,r10,98654 <__muldf3+0x584>
   9864c:	01000074 	movhi	r4,1
   98650:	8923883a 	add	r17,r17,r4
   98654:	1008943a 	slli	r4,r2,16
   98658:	39ffffcc 	andi	r7,r7,65535
   9865c:	e4b9883a 	add	fp,fp,r18
   98660:	21cf883a 	add	r7,r4,r7
   98664:	e4e7803a 	cmpltu	r19,fp,r19
   98668:	3d0f883a 	add	r7,r7,r20
   9866c:	bf39883a 	add	fp,r23,fp
   98670:	99c9883a 	add	r4,r19,r7
   98674:	e5ef803a 	cmpltu	r23,fp,r23
   98678:	490b883a 	add	r5,r9,r4
   9867c:	1004d43a 	srli	r2,r2,16
   98680:	b965883a 	add	r18,r23,r5
   98684:	24c9803a 	cmpltu	r4,r4,r19
   98688:	3d29803a 	cmpltu	r20,r7,r20
   9868c:	a128b03a 	or	r20,r20,r4
   98690:	95ef803a 	cmpltu	r23,r18,r23
   98694:	2a53803a 	cmpltu	r9,r5,r9
   98698:	a0a9883a 	add	r20,r20,r2
   9869c:	4deeb03a 	or	r23,r9,r23
   986a0:	a5ef883a 	add	r23,r20,r23
   986a4:	bc63883a 	add	r17,r23,r17
   986a8:	e004927a 	slli	r2,fp,9
   986ac:	d9000117 	ldw	r4,4(sp)
   986b0:	882e927a 	slli	r23,r17,9
   986b4:	9022d5fa 	srli	r17,r18,23
   986b8:	e038d5fa 	srli	fp,fp,23
   986bc:	1104b03a 	or	r2,r2,r4
   986c0:	9024927a 	slli	r18,r18,9
   986c4:	1004c03a 	cmpne	r2,r2,zero
   986c8:	bc62b03a 	or	r17,r23,r17
   986cc:	1738b03a 	or	fp,r2,fp
   986d0:	8880402c 	andhi	r2,r17,256
   986d4:	e4a4b03a 	or	r18,fp,r18
   986d8:	10000726 	beq	r2,zero,986f8 <__muldf3+0x628>
   986dc:	9006d07a 	srli	r3,r18,1
   986e0:	880497fa 	slli	r2,r17,31
   986e4:	9480004c 	andi	r18,r18,1
   986e8:	8822d07a 	srli	r17,r17,1
   986ec:	1ca4b03a 	or	r18,r3,r18
   986f0:	14a4b03a 	or	r18,r2,r18
   986f4:	4007883a 	mov	r3,r8
   986f8:	1880ffc4 	addi	r2,r3,1023
   986fc:	0080460e 	bge	zero,r2,98818 <__muldf3+0x748>
   98700:	910001cc 	andi	r4,r18,7
   98704:	20000726 	beq	r4,zero,98724 <__muldf3+0x654>
   98708:	910003cc 	andi	r4,r18,15
   9870c:	01400104 	movi	r5,4
   98710:	21400426 	beq	r4,r5,98724 <__muldf3+0x654>
   98714:	9149883a 	add	r4,r18,r5
   98718:	24a5803a 	cmpltu	r18,r4,r18
   9871c:	8ca3883a 	add	r17,r17,r18
   98720:	2025883a 	mov	r18,r4
   98724:	8900402c 	andhi	r4,r17,256
   98728:	20000426 	beq	r4,zero,9873c <__muldf3+0x66c>
   9872c:	18810004 	addi	r2,r3,1024
   98730:	00ffc034 	movhi	r3,65280
   98734:	18ffffc4 	addi	r3,r3,-1
   98738:	88e2703a 	and	r17,r17,r3
   9873c:	00c1ff84 	movi	r3,2046
   98740:	18bf1316 	blt	r3,r2,98390 <__ram_exceptions_end+0xfff7815c>
   98744:	882c977a 	slli	r22,r17,29
   98748:	9024d0fa 	srli	r18,r18,3
   9874c:	8822927a 	slli	r17,r17,9
   98750:	1081ffcc 	andi	r2,r2,2047
   98754:	b4acb03a 	or	r22,r22,r18
   98758:	8820d33a 	srli	r16,r17,12
   9875c:	3027883a 	mov	r19,r6
   98760:	003eba06 	br	9824c <__ram_exceptions_end+0xfff78018>
   98764:	8080022c 	andhi	r2,r16,8
   98768:	10000926 	beq	r2,zero,98790 <__muldf3+0x6c0>
   9876c:	8880022c 	andhi	r2,r17,8
   98770:	1000071e 	bne	r2,zero,98790 <__muldf3+0x6c0>
   98774:	00800434 	movhi	r2,16
   98778:	8c000234 	orhi	r16,r17,8
   9877c:	10bfffc4 	addi	r2,r2,-1
   98780:	e027883a 	mov	r19,fp
   98784:	80a0703a 	and	r16,r16,r2
   98788:	902d883a 	mov	r22,r18
   9878c:	003f1706 	br	983ec <__ram_exceptions_end+0xfff781b8>
   98790:	00800434 	movhi	r2,16
   98794:	84000234 	orhi	r16,r16,8
   98798:	10bfffc4 	addi	r2,r2,-1
   9879c:	80a0703a 	and	r16,r16,r2
   987a0:	003f1206 	br	983ec <__ram_exceptions_end+0xfff781b8>
   987a4:	147ff604 	addi	r17,r2,-40
   987a8:	3462983a 	sll	r17,r6,r17
   987ac:	0025883a 	mov	r18,zero
   987b0:	003ef306 	br	98380 <__ram_exceptions_end+0xfff7814c>
   987b4:	3009883a 	mov	r4,r6
   987b8:	d9400215 	stw	r5,8(sp)
   987bc:	d9800715 	stw	r6,28(sp)
   987c0:	da400415 	stw	r9,16(sp)
   987c4:	da800315 	stw	r10,12(sp)
   987c8:	00995e40 	call	995e4 <__clzsi2>
   987cc:	10800804 	addi	r2,r2,32
   987d0:	da800317 	ldw	r10,12(sp)
   987d4:	da400417 	ldw	r9,16(sp)
   987d8:	d9800717 	ldw	r6,28(sp)
   987dc:	d9400217 	ldw	r5,8(sp)
   987e0:	003edd06 	br	98358 <__ram_exceptions_end+0xfff78124>
   987e4:	143ff604 	addi	r16,r2,-40
   987e8:	ac20983a 	sll	r16,r21,r16
   987ec:	002d883a 	mov	r22,zero
   987f0:	003ec106 	br	982f8 <__ram_exceptions_end+0xfff780c4>
   987f4:	d9800715 	stw	r6,28(sp)
   987f8:	d9c00215 	stw	r7,8(sp)
   987fc:	da400415 	stw	r9,16(sp)
   98800:	00995e40 	call	995e4 <__clzsi2>
   98804:	10800804 	addi	r2,r2,32
   98808:	da400417 	ldw	r9,16(sp)
   9880c:	d9c00217 	ldw	r7,8(sp)
   98810:	d9800717 	ldw	r6,28(sp)
   98814:	003eae06 	br	982d0 <__ram_exceptions_end+0xfff7809c>
   98818:	00c00044 	movi	r3,1
   9881c:	1887c83a 	sub	r3,r3,r2
   98820:	01000e04 	movi	r4,56
   98824:	20fe8516 	blt	r4,r3,9823c <__ram_exceptions_end+0xfff78008>
   98828:	010007c4 	movi	r4,31
   9882c:	20c01b16 	blt	r4,r3,9889c <__muldf3+0x7cc>
   98830:	00800804 	movi	r2,32
   98834:	10c5c83a 	sub	r2,r2,r3
   98838:	888a983a 	sll	r5,r17,r2
   9883c:	90c8d83a 	srl	r4,r18,r3
   98840:	9084983a 	sll	r2,r18,r2
   98844:	88e2d83a 	srl	r17,r17,r3
   98848:	2906b03a 	or	r3,r5,r4
   9884c:	1004c03a 	cmpne	r2,r2,zero
   98850:	1886b03a 	or	r3,r3,r2
   98854:	188001cc 	andi	r2,r3,7
   98858:	10000726 	beq	r2,zero,98878 <__muldf3+0x7a8>
   9885c:	188003cc 	andi	r2,r3,15
   98860:	01000104 	movi	r4,4
   98864:	11000426 	beq	r2,r4,98878 <__muldf3+0x7a8>
   98868:	1805883a 	mov	r2,r3
   9886c:	10c00104 	addi	r3,r2,4
   98870:	1885803a 	cmpltu	r2,r3,r2
   98874:	88a3883a 	add	r17,r17,r2
   98878:	8880202c 	andhi	r2,r17,128
   9887c:	10001c26 	beq	r2,zero,988f0 <__muldf3+0x820>
   98880:	3027883a 	mov	r19,r6
   98884:	00800044 	movi	r2,1
   98888:	0021883a 	mov	r16,zero
   9888c:	002d883a 	mov	r22,zero
   98890:	003e6e06 	br	9824c <__ram_exceptions_end+0xfff78018>
   98894:	4007883a 	mov	r3,r8
   98898:	003f9706 	br	986f8 <__ram_exceptions_end+0xfff784c4>
   9889c:	017ff844 	movi	r5,-31
   988a0:	2885c83a 	sub	r2,r5,r2
   988a4:	888ad83a 	srl	r5,r17,r2
   988a8:	00800804 	movi	r2,32
   988ac:	18801a26 	beq	r3,r2,98918 <__muldf3+0x848>
   988b0:	01001004 	movi	r4,64
   988b4:	20c7c83a 	sub	r3,r4,r3
   988b8:	88e2983a 	sll	r17,r17,r3
   988bc:	8ca4b03a 	or	r18,r17,r18
   988c0:	9004c03a 	cmpne	r2,r18,zero
   988c4:	2884b03a 	or	r2,r5,r2
   988c8:	144001cc 	andi	r17,r2,7
   988cc:	88000d1e 	bne	r17,zero,98904 <__muldf3+0x834>
   988d0:	0021883a 	mov	r16,zero
   988d4:	102cd0fa 	srli	r22,r2,3
   988d8:	3027883a 	mov	r19,r6
   988dc:	0005883a 	mov	r2,zero
   988e0:	b46cb03a 	or	r22,r22,r17
   988e4:	003e5906 	br	9824c <__ram_exceptions_end+0xfff78018>
   988e8:	1007883a 	mov	r3,r2
   988ec:	0023883a 	mov	r17,zero
   988f0:	8820927a 	slli	r16,r17,9
   988f4:	1805883a 	mov	r2,r3
   988f8:	8822977a 	slli	r17,r17,29
   988fc:	8020d33a 	srli	r16,r16,12
   98900:	003ff406 	br	988d4 <__ram_exceptions_end+0xfff786a0>
   98904:	10c003cc 	andi	r3,r2,15
   98908:	01000104 	movi	r4,4
   9890c:	193ff626 	beq	r3,r4,988e8 <__ram_exceptions_end+0xfff786b4>
   98910:	0023883a 	mov	r17,zero
   98914:	003fd506 	br	9886c <__ram_exceptions_end+0xfff78638>
   98918:	0023883a 	mov	r17,zero
   9891c:	003fe706 	br	988bc <__ram_exceptions_end+0xfff78688>
   98920:	00800434 	movhi	r2,16
   98924:	8c000234 	orhi	r16,r17,8
   98928:	10bfffc4 	addi	r2,r2,-1
   9892c:	3027883a 	mov	r19,r6
   98930:	80a0703a 	and	r16,r16,r2
   98934:	902d883a 	mov	r22,r18
   98938:	003eac06 	br	983ec <__ram_exceptions_end+0xfff781b8>

0009893c <__subdf3>:
   9893c:	02000434 	movhi	r8,16
   98940:	423fffc4 	addi	r8,r8,-1
   98944:	defffb04 	addi	sp,sp,-20
   98948:	2a14703a 	and	r10,r5,r8
   9894c:	3812d53a 	srli	r9,r7,20
   98950:	3a10703a 	and	r8,r7,r8
   98954:	2006d77a 	srli	r3,r4,29
   98958:	3004d77a 	srli	r2,r6,29
   9895c:	dc000015 	stw	r16,0(sp)
   98960:	501490fa 	slli	r10,r10,3
   98964:	2820d53a 	srli	r16,r5,20
   98968:	401090fa 	slli	r8,r8,3
   9896c:	dc800215 	stw	r18,8(sp)
   98970:	dc400115 	stw	r17,4(sp)
   98974:	dfc00415 	stw	ra,16(sp)
   98978:	202290fa 	slli	r17,r4,3
   9897c:	dcc00315 	stw	r19,12(sp)
   98980:	4a41ffcc 	andi	r9,r9,2047
   98984:	0101ffc4 	movi	r4,2047
   98988:	2824d7fa 	srli	r18,r5,31
   9898c:	8401ffcc 	andi	r16,r16,2047
   98990:	50c6b03a 	or	r3,r10,r3
   98994:	380ed7fa 	srli	r7,r7,31
   98998:	408ab03a 	or	r5,r8,r2
   9899c:	300c90fa 	slli	r6,r6,3
   989a0:	49009626 	beq	r9,r4,98bfc <__subdf3+0x2c0>
   989a4:	39c0005c 	xori	r7,r7,1
   989a8:	8245c83a 	sub	r2,r16,r9
   989ac:	3c807426 	beq	r7,r18,98b80 <__subdf3+0x244>
   989b0:	0080af0e 	bge	zero,r2,98c70 <__subdf3+0x334>
   989b4:	48002a1e 	bne	r9,zero,98a60 <__subdf3+0x124>
   989b8:	2988b03a 	or	r4,r5,r6
   989bc:	20009a1e 	bne	r4,zero,98c28 <__subdf3+0x2ec>
   989c0:	888001cc 	andi	r2,r17,7
   989c4:	10000726 	beq	r2,zero,989e4 <__subdf3+0xa8>
   989c8:	888003cc 	andi	r2,r17,15
   989cc:	01000104 	movi	r4,4
   989d0:	11000426 	beq	r2,r4,989e4 <__subdf3+0xa8>
   989d4:	890b883a 	add	r5,r17,r4
   989d8:	2c63803a 	cmpltu	r17,r5,r17
   989dc:	1c47883a 	add	r3,r3,r17
   989e0:	2823883a 	mov	r17,r5
   989e4:	1880202c 	andhi	r2,r3,128
   989e8:	10005926 	beq	r2,zero,98b50 <__subdf3+0x214>
   989ec:	84000044 	addi	r16,r16,1
   989f0:	0081ffc4 	movi	r2,2047
   989f4:	8080be26 	beq	r16,r2,98cf0 <__subdf3+0x3b4>
   989f8:	017fe034 	movhi	r5,65408
   989fc:	297fffc4 	addi	r5,r5,-1
   98a00:	1946703a 	and	r3,r3,r5
   98a04:	1804977a 	slli	r2,r3,29
   98a08:	1806927a 	slli	r3,r3,9
   98a0c:	8822d0fa 	srli	r17,r17,3
   98a10:	8401ffcc 	andi	r16,r16,2047
   98a14:	180ad33a 	srli	r5,r3,12
   98a18:	9100004c 	andi	r4,r18,1
   98a1c:	1444b03a 	or	r2,r2,r17
   98a20:	80c1ffcc 	andi	r3,r16,2047
   98a24:	1820953a 	slli	r16,r3,20
   98a28:	20c03fcc 	andi	r3,r4,255
   98a2c:	180897fa 	slli	r4,r3,31
   98a30:	00c00434 	movhi	r3,16
   98a34:	18ffffc4 	addi	r3,r3,-1
   98a38:	28c6703a 	and	r3,r5,r3
   98a3c:	1c06b03a 	or	r3,r3,r16
   98a40:	1906b03a 	or	r3,r3,r4
   98a44:	dfc00417 	ldw	ra,16(sp)
   98a48:	dcc00317 	ldw	r19,12(sp)
   98a4c:	dc800217 	ldw	r18,8(sp)
   98a50:	dc400117 	ldw	r17,4(sp)
   98a54:	dc000017 	ldw	r16,0(sp)
   98a58:	dec00504 	addi	sp,sp,20
   98a5c:	f800283a 	ret
   98a60:	0101ffc4 	movi	r4,2047
   98a64:	813fd626 	beq	r16,r4,989c0 <__ram_exceptions_end+0xfff7878c>
   98a68:	29402034 	orhi	r5,r5,128
   98a6c:	01000e04 	movi	r4,56
   98a70:	2080a316 	blt	r4,r2,98d00 <__subdf3+0x3c4>
   98a74:	010007c4 	movi	r4,31
   98a78:	2080c616 	blt	r4,r2,98d94 <__subdf3+0x458>
   98a7c:	01000804 	movi	r4,32
   98a80:	2089c83a 	sub	r4,r4,r2
   98a84:	2910983a 	sll	r8,r5,r4
   98a88:	308ed83a 	srl	r7,r6,r2
   98a8c:	3108983a 	sll	r4,r6,r4
   98a90:	2884d83a 	srl	r2,r5,r2
   98a94:	41ccb03a 	or	r6,r8,r7
   98a98:	2008c03a 	cmpne	r4,r4,zero
   98a9c:	310cb03a 	or	r6,r6,r4
   98aa0:	898dc83a 	sub	r6,r17,r6
   98aa4:	89a3803a 	cmpltu	r17,r17,r6
   98aa8:	1887c83a 	sub	r3,r3,r2
   98aac:	1c47c83a 	sub	r3,r3,r17
   98ab0:	3023883a 	mov	r17,r6
   98ab4:	1880202c 	andhi	r2,r3,128
   98ab8:	10002326 	beq	r2,zero,98b48 <__subdf3+0x20c>
   98abc:	04c02034 	movhi	r19,128
   98ac0:	9cffffc4 	addi	r19,r19,-1
   98ac4:	1ce6703a 	and	r19,r3,r19
   98ac8:	98007a26 	beq	r19,zero,98cb4 <__subdf3+0x378>
   98acc:	9809883a 	mov	r4,r19
   98ad0:	00995e40 	call	995e4 <__clzsi2>
   98ad4:	113ffe04 	addi	r4,r2,-8
   98ad8:	00c007c4 	movi	r3,31
   98adc:	19007b16 	blt	r3,r4,98ccc <__subdf3+0x390>
   98ae0:	00800804 	movi	r2,32
   98ae4:	1105c83a 	sub	r2,r2,r4
   98ae8:	8884d83a 	srl	r2,r17,r2
   98aec:	9906983a 	sll	r3,r19,r4
   98af0:	8922983a 	sll	r17,r17,r4
   98af4:	10c4b03a 	or	r2,r2,r3
   98af8:	24007816 	blt	r4,r16,98cdc <__subdf3+0x3a0>
   98afc:	2421c83a 	sub	r16,r4,r16
   98b00:	80c00044 	addi	r3,r16,1
   98b04:	010007c4 	movi	r4,31
   98b08:	20c09516 	blt	r4,r3,98d60 <__subdf3+0x424>
   98b0c:	01400804 	movi	r5,32
   98b10:	28cbc83a 	sub	r5,r5,r3
   98b14:	88c8d83a 	srl	r4,r17,r3
   98b18:	8962983a 	sll	r17,r17,r5
   98b1c:	114a983a 	sll	r5,r2,r5
   98b20:	10c6d83a 	srl	r3,r2,r3
   98b24:	8804c03a 	cmpne	r2,r17,zero
   98b28:	290ab03a 	or	r5,r5,r4
   98b2c:	28a2b03a 	or	r17,r5,r2
   98b30:	0021883a 	mov	r16,zero
   98b34:	003fa206 	br	989c0 <__ram_exceptions_end+0xfff7878c>
   98b38:	2090b03a 	or	r8,r4,r2
   98b3c:	40018e26 	beq	r8,zero,99178 <__subdf3+0x83c>
   98b40:	1007883a 	mov	r3,r2
   98b44:	2023883a 	mov	r17,r4
   98b48:	888001cc 	andi	r2,r17,7
   98b4c:	103f9e1e 	bne	r2,zero,989c8 <__ram_exceptions_end+0xfff78794>
   98b50:	1804977a 	slli	r2,r3,29
   98b54:	8822d0fa 	srli	r17,r17,3
   98b58:	1810d0fa 	srli	r8,r3,3
   98b5c:	9100004c 	andi	r4,r18,1
   98b60:	1444b03a 	or	r2,r2,r17
   98b64:	00c1ffc4 	movi	r3,2047
   98b68:	80c02826 	beq	r16,r3,98c0c <__subdf3+0x2d0>
   98b6c:	01400434 	movhi	r5,16
   98b70:	297fffc4 	addi	r5,r5,-1
   98b74:	80e0703a 	and	r16,r16,r3
   98b78:	414a703a 	and	r5,r8,r5
   98b7c:	003fa806 	br	98a20 <__ram_exceptions_end+0xfff787ec>
   98b80:	0080630e 	bge	zero,r2,98d10 <__subdf3+0x3d4>
   98b84:	48003026 	beq	r9,zero,98c48 <__subdf3+0x30c>
   98b88:	0101ffc4 	movi	r4,2047
   98b8c:	813f8c26 	beq	r16,r4,989c0 <__ram_exceptions_end+0xfff7878c>
   98b90:	29402034 	orhi	r5,r5,128
   98b94:	01000e04 	movi	r4,56
   98b98:	2080a90e 	bge	r4,r2,98e40 <__subdf3+0x504>
   98b9c:	298cb03a 	or	r6,r5,r6
   98ba0:	3012c03a 	cmpne	r9,r6,zero
   98ba4:	0005883a 	mov	r2,zero
   98ba8:	4c53883a 	add	r9,r9,r17
   98bac:	4c63803a 	cmpltu	r17,r9,r17
   98bb0:	10c7883a 	add	r3,r2,r3
   98bb4:	88c7883a 	add	r3,r17,r3
   98bb8:	4823883a 	mov	r17,r9
   98bbc:	1880202c 	andhi	r2,r3,128
   98bc0:	1000d026 	beq	r2,zero,98f04 <__subdf3+0x5c8>
   98bc4:	84000044 	addi	r16,r16,1
   98bc8:	0081ffc4 	movi	r2,2047
   98bcc:	8080fe26 	beq	r16,r2,98fc8 <__subdf3+0x68c>
   98bd0:	00bfe034 	movhi	r2,65408
   98bd4:	10bfffc4 	addi	r2,r2,-1
   98bd8:	1886703a 	and	r3,r3,r2
   98bdc:	880ad07a 	srli	r5,r17,1
   98be0:	180497fa 	slli	r2,r3,31
   98be4:	8900004c 	andi	r4,r17,1
   98be8:	2922b03a 	or	r17,r5,r4
   98bec:	1806d07a 	srli	r3,r3,1
   98bf0:	1462b03a 	or	r17,r2,r17
   98bf4:	3825883a 	mov	r18,r7
   98bf8:	003f7106 	br	989c0 <__ram_exceptions_end+0xfff7878c>
   98bfc:	2984b03a 	or	r2,r5,r6
   98c00:	103f6826 	beq	r2,zero,989a4 <__ram_exceptions_end+0xfff78770>
   98c04:	39c03fcc 	andi	r7,r7,255
   98c08:	003f6706 	br	989a8 <__ram_exceptions_end+0xfff78774>
   98c0c:	4086b03a 	or	r3,r8,r2
   98c10:	18015226 	beq	r3,zero,9915c <__subdf3+0x820>
   98c14:	00c00434 	movhi	r3,16
   98c18:	41400234 	orhi	r5,r8,8
   98c1c:	18ffffc4 	addi	r3,r3,-1
   98c20:	28ca703a 	and	r5,r5,r3
   98c24:	003f7e06 	br	98a20 <__ram_exceptions_end+0xfff787ec>
   98c28:	10bfffc4 	addi	r2,r2,-1
   98c2c:	1000491e 	bne	r2,zero,98d54 <__subdf3+0x418>
   98c30:	898fc83a 	sub	r7,r17,r6
   98c34:	89e3803a 	cmpltu	r17,r17,r7
   98c38:	1947c83a 	sub	r3,r3,r5
   98c3c:	1c47c83a 	sub	r3,r3,r17
   98c40:	3823883a 	mov	r17,r7
   98c44:	003f9b06 	br	98ab4 <__ram_exceptions_end+0xfff78880>
   98c48:	2988b03a 	or	r4,r5,r6
   98c4c:	203f5c26 	beq	r4,zero,989c0 <__ram_exceptions_end+0xfff7878c>
   98c50:	10bfffc4 	addi	r2,r2,-1
   98c54:	1000931e 	bne	r2,zero,98ea4 <__subdf3+0x568>
   98c58:	898d883a 	add	r6,r17,r6
   98c5c:	3463803a 	cmpltu	r17,r6,r17
   98c60:	1947883a 	add	r3,r3,r5
   98c64:	88c7883a 	add	r3,r17,r3
   98c68:	3023883a 	mov	r17,r6
   98c6c:	003fd306 	br	98bbc <__ram_exceptions_end+0xfff78988>
   98c70:	1000541e 	bne	r2,zero,98dc4 <__subdf3+0x488>
   98c74:	80800044 	addi	r2,r16,1
   98c78:	1081ffcc 	andi	r2,r2,2047
   98c7c:	01000044 	movi	r4,1
   98c80:	2080a20e 	bge	r4,r2,98f0c <__subdf3+0x5d0>
   98c84:	8989c83a 	sub	r4,r17,r6
   98c88:	8905803a 	cmpltu	r2,r17,r4
   98c8c:	1967c83a 	sub	r19,r3,r5
   98c90:	98a7c83a 	sub	r19,r19,r2
   98c94:	9880202c 	andhi	r2,r19,128
   98c98:	10006326 	beq	r2,zero,98e28 <__subdf3+0x4ec>
   98c9c:	3463c83a 	sub	r17,r6,r17
   98ca0:	28c7c83a 	sub	r3,r5,r3
   98ca4:	344d803a 	cmpltu	r6,r6,r17
   98ca8:	19a7c83a 	sub	r19,r3,r6
   98cac:	3825883a 	mov	r18,r7
   98cb0:	983f861e 	bne	r19,zero,98acc <__ram_exceptions_end+0xfff78898>
   98cb4:	8809883a 	mov	r4,r17
   98cb8:	00995e40 	call	995e4 <__clzsi2>
   98cbc:	10800804 	addi	r2,r2,32
   98cc0:	113ffe04 	addi	r4,r2,-8
   98cc4:	00c007c4 	movi	r3,31
   98cc8:	193f850e 	bge	r3,r4,98ae0 <__ram_exceptions_end+0xfff788ac>
   98ccc:	10bff604 	addi	r2,r2,-40
   98cd0:	8884983a 	sll	r2,r17,r2
   98cd4:	0023883a 	mov	r17,zero
   98cd8:	243f880e 	bge	r4,r16,98afc <__ram_exceptions_end+0xfff788c8>
   98cdc:	00ffe034 	movhi	r3,65408
   98ce0:	18ffffc4 	addi	r3,r3,-1
   98ce4:	8121c83a 	sub	r16,r16,r4
   98ce8:	10c6703a 	and	r3,r2,r3
   98cec:	003f3406 	br	989c0 <__ram_exceptions_end+0xfff7878c>
   98cf0:	9100004c 	andi	r4,r18,1
   98cf4:	000b883a 	mov	r5,zero
   98cf8:	0005883a 	mov	r2,zero
   98cfc:	003f4806 	br	98a20 <__ram_exceptions_end+0xfff787ec>
   98d00:	298cb03a 	or	r6,r5,r6
   98d04:	300cc03a 	cmpne	r6,r6,zero
   98d08:	0005883a 	mov	r2,zero
   98d0c:	003f6406 	br	98aa0 <__ram_exceptions_end+0xfff7886c>
   98d10:	10009a1e 	bne	r2,zero,98f7c <__subdf3+0x640>
   98d14:	82400044 	addi	r9,r16,1
   98d18:	4881ffcc 	andi	r2,r9,2047
   98d1c:	02800044 	movi	r10,1
   98d20:	5080670e 	bge	r10,r2,98ec0 <__subdf3+0x584>
   98d24:	0081ffc4 	movi	r2,2047
   98d28:	4880af26 	beq	r9,r2,98fe8 <__subdf3+0x6ac>
   98d2c:	898d883a 	add	r6,r17,r6
   98d30:	1945883a 	add	r2,r3,r5
   98d34:	3447803a 	cmpltu	r3,r6,r17
   98d38:	1887883a 	add	r3,r3,r2
   98d3c:	182297fa 	slli	r17,r3,31
   98d40:	300cd07a 	srli	r6,r6,1
   98d44:	1806d07a 	srli	r3,r3,1
   98d48:	4821883a 	mov	r16,r9
   98d4c:	89a2b03a 	or	r17,r17,r6
   98d50:	003f1b06 	br	989c0 <__ram_exceptions_end+0xfff7878c>
   98d54:	0101ffc4 	movi	r4,2047
   98d58:	813f441e 	bne	r16,r4,98a6c <__ram_exceptions_end+0xfff78838>
   98d5c:	003f1806 	br	989c0 <__ram_exceptions_end+0xfff7878c>
   98d60:	843ff844 	addi	r16,r16,-31
   98d64:	01400804 	movi	r5,32
   98d68:	1408d83a 	srl	r4,r2,r16
   98d6c:	19405026 	beq	r3,r5,98eb0 <__subdf3+0x574>
   98d70:	01401004 	movi	r5,64
   98d74:	28c7c83a 	sub	r3,r5,r3
   98d78:	10c4983a 	sll	r2,r2,r3
   98d7c:	88a2b03a 	or	r17,r17,r2
   98d80:	8822c03a 	cmpne	r17,r17,zero
   98d84:	2462b03a 	or	r17,r4,r17
   98d88:	0007883a 	mov	r3,zero
   98d8c:	0021883a 	mov	r16,zero
   98d90:	003f6d06 	br	98b48 <__ram_exceptions_end+0xfff78914>
   98d94:	11fff804 	addi	r7,r2,-32
   98d98:	01000804 	movi	r4,32
   98d9c:	29ced83a 	srl	r7,r5,r7
   98da0:	11004526 	beq	r2,r4,98eb8 <__subdf3+0x57c>
   98da4:	01001004 	movi	r4,64
   98da8:	2089c83a 	sub	r4,r4,r2
   98dac:	2904983a 	sll	r2,r5,r4
   98db0:	118cb03a 	or	r6,r2,r6
   98db4:	300cc03a 	cmpne	r6,r6,zero
   98db8:	398cb03a 	or	r6,r7,r6
   98dbc:	0005883a 	mov	r2,zero
   98dc0:	003f3706 	br	98aa0 <__ram_exceptions_end+0xfff7886c>
   98dc4:	80002a26 	beq	r16,zero,98e70 <__subdf3+0x534>
   98dc8:	0101ffc4 	movi	r4,2047
   98dcc:	49006626 	beq	r9,r4,98f68 <__subdf3+0x62c>
   98dd0:	0085c83a 	sub	r2,zero,r2
   98dd4:	18c02034 	orhi	r3,r3,128
   98dd8:	01000e04 	movi	r4,56
   98ddc:	20807e16 	blt	r4,r2,98fd8 <__subdf3+0x69c>
   98de0:	010007c4 	movi	r4,31
   98de4:	2080e716 	blt	r4,r2,99184 <__subdf3+0x848>
   98de8:	01000804 	movi	r4,32
   98dec:	2089c83a 	sub	r4,r4,r2
   98df0:	1914983a 	sll	r10,r3,r4
   98df4:	8890d83a 	srl	r8,r17,r2
   98df8:	8908983a 	sll	r4,r17,r4
   98dfc:	1884d83a 	srl	r2,r3,r2
   98e00:	5222b03a 	or	r17,r10,r8
   98e04:	2006c03a 	cmpne	r3,r4,zero
   98e08:	88e2b03a 	or	r17,r17,r3
   98e0c:	3463c83a 	sub	r17,r6,r17
   98e10:	2885c83a 	sub	r2,r5,r2
   98e14:	344d803a 	cmpltu	r6,r6,r17
   98e18:	1187c83a 	sub	r3,r2,r6
   98e1c:	4821883a 	mov	r16,r9
   98e20:	3825883a 	mov	r18,r7
   98e24:	003f2306 	br	98ab4 <__ram_exceptions_end+0xfff78880>
   98e28:	24d0b03a 	or	r8,r4,r19
   98e2c:	40001b1e 	bne	r8,zero,98e9c <__subdf3+0x560>
   98e30:	0005883a 	mov	r2,zero
   98e34:	0009883a 	mov	r4,zero
   98e38:	0021883a 	mov	r16,zero
   98e3c:	003f4906 	br	98b64 <__ram_exceptions_end+0xfff78930>
   98e40:	010007c4 	movi	r4,31
   98e44:	20803a16 	blt	r4,r2,98f30 <__subdf3+0x5f4>
   98e48:	01000804 	movi	r4,32
   98e4c:	2089c83a 	sub	r4,r4,r2
   98e50:	2912983a 	sll	r9,r5,r4
   98e54:	3090d83a 	srl	r8,r6,r2
   98e58:	3108983a 	sll	r4,r6,r4
   98e5c:	2884d83a 	srl	r2,r5,r2
   98e60:	4a12b03a 	or	r9,r9,r8
   98e64:	2008c03a 	cmpne	r4,r4,zero
   98e68:	4912b03a 	or	r9,r9,r4
   98e6c:	003f4e06 	br	98ba8 <__ram_exceptions_end+0xfff78974>
   98e70:	1c48b03a 	or	r4,r3,r17
   98e74:	20003c26 	beq	r4,zero,98f68 <__subdf3+0x62c>
   98e78:	0084303a 	nor	r2,zero,r2
   98e7c:	1000381e 	bne	r2,zero,98f60 <__subdf3+0x624>
   98e80:	3463c83a 	sub	r17,r6,r17
   98e84:	28c5c83a 	sub	r2,r5,r3
   98e88:	344d803a 	cmpltu	r6,r6,r17
   98e8c:	1187c83a 	sub	r3,r2,r6
   98e90:	4821883a 	mov	r16,r9
   98e94:	3825883a 	mov	r18,r7
   98e98:	003f0606 	br	98ab4 <__ram_exceptions_end+0xfff78880>
   98e9c:	2023883a 	mov	r17,r4
   98ea0:	003f0906 	br	98ac8 <__ram_exceptions_end+0xfff78894>
   98ea4:	0101ffc4 	movi	r4,2047
   98ea8:	813f3a1e 	bne	r16,r4,98b94 <__ram_exceptions_end+0xfff78960>
   98eac:	003ec406 	br	989c0 <__ram_exceptions_end+0xfff7878c>
   98eb0:	0005883a 	mov	r2,zero
   98eb4:	003fb106 	br	98d7c <__ram_exceptions_end+0xfff78b48>
   98eb8:	0005883a 	mov	r2,zero
   98ebc:	003fbc06 	br	98db0 <__ram_exceptions_end+0xfff78b7c>
   98ec0:	1c44b03a 	or	r2,r3,r17
   98ec4:	80008e1e 	bne	r16,zero,99100 <__subdf3+0x7c4>
   98ec8:	1000c826 	beq	r2,zero,991ec <__subdf3+0x8b0>
   98ecc:	2984b03a 	or	r2,r5,r6
   98ed0:	103ebb26 	beq	r2,zero,989c0 <__ram_exceptions_end+0xfff7878c>
   98ed4:	8989883a 	add	r4,r17,r6
   98ed8:	1945883a 	add	r2,r3,r5
   98edc:	2447803a 	cmpltu	r3,r4,r17
   98ee0:	1887883a 	add	r3,r3,r2
   98ee4:	1880202c 	andhi	r2,r3,128
   98ee8:	2023883a 	mov	r17,r4
   98eec:	103f1626 	beq	r2,zero,98b48 <__ram_exceptions_end+0xfff78914>
   98ef0:	00bfe034 	movhi	r2,65408
   98ef4:	10bfffc4 	addi	r2,r2,-1
   98ef8:	5021883a 	mov	r16,r10
   98efc:	1886703a 	and	r3,r3,r2
   98f00:	003eaf06 	br	989c0 <__ram_exceptions_end+0xfff7878c>
   98f04:	3825883a 	mov	r18,r7
   98f08:	003f0f06 	br	98b48 <__ram_exceptions_end+0xfff78914>
   98f0c:	1c44b03a 	or	r2,r3,r17
   98f10:	8000251e 	bne	r16,zero,98fa8 <__subdf3+0x66c>
   98f14:	1000661e 	bne	r2,zero,990b0 <__subdf3+0x774>
   98f18:	2990b03a 	or	r8,r5,r6
   98f1c:	40009626 	beq	r8,zero,99178 <__subdf3+0x83c>
   98f20:	2807883a 	mov	r3,r5
   98f24:	3023883a 	mov	r17,r6
   98f28:	3825883a 	mov	r18,r7
   98f2c:	003ea406 	br	989c0 <__ram_exceptions_end+0xfff7878c>
   98f30:	127ff804 	addi	r9,r2,-32
   98f34:	01000804 	movi	r4,32
   98f38:	2a52d83a 	srl	r9,r5,r9
   98f3c:	11008c26 	beq	r2,r4,99170 <__subdf3+0x834>
   98f40:	01001004 	movi	r4,64
   98f44:	2085c83a 	sub	r2,r4,r2
   98f48:	2884983a 	sll	r2,r5,r2
   98f4c:	118cb03a 	or	r6,r2,r6
   98f50:	300cc03a 	cmpne	r6,r6,zero
   98f54:	4992b03a 	or	r9,r9,r6
   98f58:	0005883a 	mov	r2,zero
   98f5c:	003f1206 	br	98ba8 <__ram_exceptions_end+0xfff78974>
   98f60:	0101ffc4 	movi	r4,2047
   98f64:	493f9c1e 	bne	r9,r4,98dd8 <__ram_exceptions_end+0xfff78ba4>
   98f68:	2807883a 	mov	r3,r5
   98f6c:	3023883a 	mov	r17,r6
   98f70:	4821883a 	mov	r16,r9
   98f74:	3825883a 	mov	r18,r7
   98f78:	003e9106 	br	989c0 <__ram_exceptions_end+0xfff7878c>
   98f7c:	80001f1e 	bne	r16,zero,98ffc <__subdf3+0x6c0>
   98f80:	1c48b03a 	or	r4,r3,r17
   98f84:	20005a26 	beq	r4,zero,990f0 <__subdf3+0x7b4>
   98f88:	0084303a 	nor	r2,zero,r2
   98f8c:	1000561e 	bne	r2,zero,990e8 <__subdf3+0x7ac>
   98f90:	89a3883a 	add	r17,r17,r6
   98f94:	1945883a 	add	r2,r3,r5
   98f98:	898d803a 	cmpltu	r6,r17,r6
   98f9c:	3087883a 	add	r3,r6,r2
   98fa0:	4821883a 	mov	r16,r9
   98fa4:	003f0506 	br	98bbc <__ram_exceptions_end+0xfff78988>
   98fa8:	10002b1e 	bne	r2,zero,99058 <__subdf3+0x71c>
   98fac:	2984b03a 	or	r2,r5,r6
   98fb0:	10008026 	beq	r2,zero,991b4 <__subdf3+0x878>
   98fb4:	2807883a 	mov	r3,r5
   98fb8:	3023883a 	mov	r17,r6
   98fbc:	3825883a 	mov	r18,r7
   98fc0:	0401ffc4 	movi	r16,2047
   98fc4:	003e7e06 	br	989c0 <__ram_exceptions_end+0xfff7878c>
   98fc8:	3809883a 	mov	r4,r7
   98fcc:	0011883a 	mov	r8,zero
   98fd0:	0005883a 	mov	r2,zero
   98fd4:	003ee306 	br	98b64 <__ram_exceptions_end+0xfff78930>
   98fd8:	1c62b03a 	or	r17,r3,r17
   98fdc:	8822c03a 	cmpne	r17,r17,zero
   98fe0:	0005883a 	mov	r2,zero
   98fe4:	003f8906 	br	98e0c <__ram_exceptions_end+0xfff78bd8>
   98fe8:	3809883a 	mov	r4,r7
   98fec:	4821883a 	mov	r16,r9
   98ff0:	0011883a 	mov	r8,zero
   98ff4:	0005883a 	mov	r2,zero
   98ff8:	003eda06 	br	98b64 <__ram_exceptions_end+0xfff78930>
   98ffc:	0101ffc4 	movi	r4,2047
   99000:	49003b26 	beq	r9,r4,990f0 <__subdf3+0x7b4>
   99004:	0085c83a 	sub	r2,zero,r2
   99008:	18c02034 	orhi	r3,r3,128
   9900c:	01000e04 	movi	r4,56
   99010:	20806e16 	blt	r4,r2,991cc <__subdf3+0x890>
   99014:	010007c4 	movi	r4,31
   99018:	20807716 	blt	r4,r2,991f8 <__subdf3+0x8bc>
   9901c:	01000804 	movi	r4,32
   99020:	2089c83a 	sub	r4,r4,r2
   99024:	1914983a 	sll	r10,r3,r4
   99028:	8890d83a 	srl	r8,r17,r2
   9902c:	8908983a 	sll	r4,r17,r4
   99030:	1884d83a 	srl	r2,r3,r2
   99034:	5222b03a 	or	r17,r10,r8
   99038:	2006c03a 	cmpne	r3,r4,zero
   9903c:	88e2b03a 	or	r17,r17,r3
   99040:	89a3883a 	add	r17,r17,r6
   99044:	1145883a 	add	r2,r2,r5
   99048:	898d803a 	cmpltu	r6,r17,r6
   9904c:	3087883a 	add	r3,r6,r2
   99050:	4821883a 	mov	r16,r9
   99054:	003ed906 	br	98bbc <__ram_exceptions_end+0xfff78988>
   99058:	2984b03a 	or	r2,r5,r6
   9905c:	10004226 	beq	r2,zero,99168 <__subdf3+0x82c>
   99060:	1808d0fa 	srli	r4,r3,3
   99064:	8822d0fa 	srli	r17,r17,3
   99068:	1806977a 	slli	r3,r3,29
   9906c:	2080022c 	andhi	r2,r4,8
   99070:	1c62b03a 	or	r17,r3,r17
   99074:	10000826 	beq	r2,zero,99098 <__subdf3+0x75c>
   99078:	2812d0fa 	srli	r9,r5,3
   9907c:	4880022c 	andhi	r2,r9,8
   99080:	1000051e 	bne	r2,zero,99098 <__subdf3+0x75c>
   99084:	300cd0fa 	srli	r6,r6,3
   99088:	2804977a 	slli	r2,r5,29
   9908c:	4809883a 	mov	r4,r9
   99090:	3825883a 	mov	r18,r7
   99094:	11a2b03a 	or	r17,r2,r6
   99098:	8806d77a 	srli	r3,r17,29
   9909c:	200890fa 	slli	r4,r4,3
   990a0:	882290fa 	slli	r17,r17,3
   990a4:	0401ffc4 	movi	r16,2047
   990a8:	1906b03a 	or	r3,r3,r4
   990ac:	003e4406 	br	989c0 <__ram_exceptions_end+0xfff7878c>
   990b0:	2984b03a 	or	r2,r5,r6
   990b4:	103e4226 	beq	r2,zero,989c0 <__ram_exceptions_end+0xfff7878c>
   990b8:	8989c83a 	sub	r4,r17,r6
   990bc:	8911803a 	cmpltu	r8,r17,r4
   990c0:	1945c83a 	sub	r2,r3,r5
   990c4:	1205c83a 	sub	r2,r2,r8
   990c8:	1200202c 	andhi	r8,r2,128
   990cc:	403e9a26 	beq	r8,zero,98b38 <__ram_exceptions_end+0xfff78904>
   990d0:	3463c83a 	sub	r17,r6,r17
   990d4:	28c5c83a 	sub	r2,r5,r3
   990d8:	344d803a 	cmpltu	r6,r6,r17
   990dc:	1187c83a 	sub	r3,r2,r6
   990e0:	3825883a 	mov	r18,r7
   990e4:	003e3606 	br	989c0 <__ram_exceptions_end+0xfff7878c>
   990e8:	0101ffc4 	movi	r4,2047
   990ec:	493fc71e 	bne	r9,r4,9900c <__ram_exceptions_end+0xfff78dd8>
   990f0:	2807883a 	mov	r3,r5
   990f4:	3023883a 	mov	r17,r6
   990f8:	4821883a 	mov	r16,r9
   990fc:	003e3006 	br	989c0 <__ram_exceptions_end+0xfff7878c>
   99100:	10003626 	beq	r2,zero,991dc <__subdf3+0x8a0>
   99104:	2984b03a 	or	r2,r5,r6
   99108:	10001726 	beq	r2,zero,99168 <__subdf3+0x82c>
   9910c:	1808d0fa 	srli	r4,r3,3
   99110:	8822d0fa 	srli	r17,r17,3
   99114:	1806977a 	slli	r3,r3,29
   99118:	2080022c 	andhi	r2,r4,8
   9911c:	1c62b03a 	or	r17,r3,r17
   99120:	10000726 	beq	r2,zero,99140 <__subdf3+0x804>
   99124:	2812d0fa 	srli	r9,r5,3
   99128:	4880022c 	andhi	r2,r9,8
   9912c:	1000041e 	bne	r2,zero,99140 <__subdf3+0x804>
   99130:	300cd0fa 	srli	r6,r6,3
   99134:	2804977a 	slli	r2,r5,29
   99138:	4809883a 	mov	r4,r9
   9913c:	11a2b03a 	or	r17,r2,r6
   99140:	8806d77a 	srli	r3,r17,29
   99144:	200890fa 	slli	r4,r4,3
   99148:	882290fa 	slli	r17,r17,3
   9914c:	3825883a 	mov	r18,r7
   99150:	1906b03a 	or	r3,r3,r4
   99154:	0401ffc4 	movi	r16,2047
   99158:	003e1906 	br	989c0 <__ram_exceptions_end+0xfff7878c>
   9915c:	000b883a 	mov	r5,zero
   99160:	0005883a 	mov	r2,zero
   99164:	003e2e06 	br	98a20 <__ram_exceptions_end+0xfff787ec>
   99168:	0401ffc4 	movi	r16,2047
   9916c:	003e1406 	br	989c0 <__ram_exceptions_end+0xfff7878c>
   99170:	0005883a 	mov	r2,zero
   99174:	003f7506 	br	98f4c <__ram_exceptions_end+0xfff78d18>
   99178:	0005883a 	mov	r2,zero
   9917c:	0009883a 	mov	r4,zero
   99180:	003e7806 	br	98b64 <__ram_exceptions_end+0xfff78930>
   99184:	123ff804 	addi	r8,r2,-32
   99188:	01000804 	movi	r4,32
   9918c:	1a10d83a 	srl	r8,r3,r8
   99190:	11002526 	beq	r2,r4,99228 <__subdf3+0x8ec>
   99194:	01001004 	movi	r4,64
   99198:	2085c83a 	sub	r2,r4,r2
   9919c:	1884983a 	sll	r2,r3,r2
   991a0:	1444b03a 	or	r2,r2,r17
   991a4:	1004c03a 	cmpne	r2,r2,zero
   991a8:	40a2b03a 	or	r17,r8,r2
   991ac:	0005883a 	mov	r2,zero
   991b0:	003f1606 	br	98e0c <__ram_exceptions_end+0xfff78bd8>
   991b4:	02000434 	movhi	r8,16
   991b8:	0009883a 	mov	r4,zero
   991bc:	423fffc4 	addi	r8,r8,-1
   991c0:	00bfffc4 	movi	r2,-1
   991c4:	0401ffc4 	movi	r16,2047
   991c8:	003e6606 	br	98b64 <__ram_exceptions_end+0xfff78930>
   991cc:	1c62b03a 	or	r17,r3,r17
   991d0:	8822c03a 	cmpne	r17,r17,zero
   991d4:	0005883a 	mov	r2,zero
   991d8:	003f9906 	br	99040 <__ram_exceptions_end+0xfff78e0c>
   991dc:	2807883a 	mov	r3,r5
   991e0:	3023883a 	mov	r17,r6
   991e4:	0401ffc4 	movi	r16,2047
   991e8:	003df506 	br	989c0 <__ram_exceptions_end+0xfff7878c>
   991ec:	2807883a 	mov	r3,r5
   991f0:	3023883a 	mov	r17,r6
   991f4:	003df206 	br	989c0 <__ram_exceptions_end+0xfff7878c>
   991f8:	123ff804 	addi	r8,r2,-32
   991fc:	01000804 	movi	r4,32
   99200:	1a10d83a 	srl	r8,r3,r8
   99204:	11000a26 	beq	r2,r4,99230 <__subdf3+0x8f4>
   99208:	01001004 	movi	r4,64
   9920c:	2085c83a 	sub	r2,r4,r2
   99210:	1884983a 	sll	r2,r3,r2
   99214:	1444b03a 	or	r2,r2,r17
   99218:	1004c03a 	cmpne	r2,r2,zero
   9921c:	40a2b03a 	or	r17,r8,r2
   99220:	0005883a 	mov	r2,zero
   99224:	003f8606 	br	99040 <__ram_exceptions_end+0xfff78e0c>
   99228:	0005883a 	mov	r2,zero
   9922c:	003fdc06 	br	991a0 <__ram_exceptions_end+0xfff78f6c>
   99230:	0005883a 	mov	r2,zero
   99234:	003ff706 	br	99214 <__ram_exceptions_end+0xfff78fe0>

00099238 <__fixdfsi>:
   99238:	280cd53a 	srli	r6,r5,20
   9923c:	00c00434 	movhi	r3,16
   99240:	18ffffc4 	addi	r3,r3,-1
   99244:	3181ffcc 	andi	r6,r6,2047
   99248:	01c0ff84 	movi	r7,1022
   9924c:	28c6703a 	and	r3,r5,r3
   99250:	280ad7fa 	srli	r5,r5,31
   99254:	3980120e 	bge	r7,r6,992a0 <__fixdfsi+0x68>
   99258:	00810744 	movi	r2,1053
   9925c:	11800c16 	blt	r2,r6,99290 <__fixdfsi+0x58>
   99260:	00810cc4 	movi	r2,1075
   99264:	1185c83a 	sub	r2,r2,r6
   99268:	01c007c4 	movi	r7,31
   9926c:	18c00434 	orhi	r3,r3,16
   99270:	38800d16 	blt	r7,r2,992a8 <__fixdfsi+0x70>
   99274:	31befb44 	addi	r6,r6,-1043
   99278:	2084d83a 	srl	r2,r4,r2
   9927c:	1986983a 	sll	r3,r3,r6
   99280:	1884b03a 	or	r2,r3,r2
   99284:	28000726 	beq	r5,zero,992a4 <__fixdfsi+0x6c>
   99288:	0085c83a 	sub	r2,zero,r2
   9928c:	f800283a 	ret
   99290:	00a00034 	movhi	r2,32768
   99294:	10bfffc4 	addi	r2,r2,-1
   99298:	2885883a 	add	r2,r5,r2
   9929c:	f800283a 	ret
   992a0:	0005883a 	mov	r2,zero
   992a4:	f800283a 	ret
   992a8:	008104c4 	movi	r2,1043
   992ac:	1185c83a 	sub	r2,r2,r6
   992b0:	1884d83a 	srl	r2,r3,r2
   992b4:	003ff306 	br	99284 <__ram_exceptions_end+0xfff79050>

000992b8 <__floatsidf>:
   992b8:	defffd04 	addi	sp,sp,-12
   992bc:	dfc00215 	stw	ra,8(sp)
   992c0:	dc400115 	stw	r17,4(sp)
   992c4:	dc000015 	stw	r16,0(sp)
   992c8:	20002b26 	beq	r4,zero,99378 <__floatsidf+0xc0>
   992cc:	2023883a 	mov	r17,r4
   992d0:	2020d7fa 	srli	r16,r4,31
   992d4:	20002d16 	blt	r4,zero,9938c <__floatsidf+0xd4>
   992d8:	8809883a 	mov	r4,r17
   992dc:	00995e40 	call	995e4 <__clzsi2>
   992e0:	01410784 	movi	r5,1054
   992e4:	288bc83a 	sub	r5,r5,r2
   992e8:	01010cc4 	movi	r4,1075
   992ec:	2149c83a 	sub	r4,r4,r5
   992f0:	00c007c4 	movi	r3,31
   992f4:	1900160e 	bge	r3,r4,99350 <__floatsidf+0x98>
   992f8:	00c104c4 	movi	r3,1043
   992fc:	1947c83a 	sub	r3,r3,r5
   99300:	88c6983a 	sll	r3,r17,r3
   99304:	00800434 	movhi	r2,16
   99308:	10bfffc4 	addi	r2,r2,-1
   9930c:	1886703a 	and	r3,r3,r2
   99310:	2941ffcc 	andi	r5,r5,2047
   99314:	800d883a 	mov	r6,r16
   99318:	0005883a 	mov	r2,zero
   9931c:	280a953a 	slli	r5,r5,20
   99320:	31803fcc 	andi	r6,r6,255
   99324:	01000434 	movhi	r4,16
   99328:	300c97fa 	slli	r6,r6,31
   9932c:	213fffc4 	addi	r4,r4,-1
   99330:	1906703a 	and	r3,r3,r4
   99334:	1946b03a 	or	r3,r3,r5
   99338:	1986b03a 	or	r3,r3,r6
   9933c:	dfc00217 	ldw	ra,8(sp)
   99340:	dc400117 	ldw	r17,4(sp)
   99344:	dc000017 	ldw	r16,0(sp)
   99348:	dec00304 	addi	sp,sp,12
   9934c:	f800283a 	ret
   99350:	00c002c4 	movi	r3,11
   99354:	1887c83a 	sub	r3,r3,r2
   99358:	88c6d83a 	srl	r3,r17,r3
   9935c:	8904983a 	sll	r2,r17,r4
   99360:	01000434 	movhi	r4,16
   99364:	213fffc4 	addi	r4,r4,-1
   99368:	2941ffcc 	andi	r5,r5,2047
   9936c:	1906703a 	and	r3,r3,r4
   99370:	800d883a 	mov	r6,r16
   99374:	003fe906 	br	9931c <__ram_exceptions_end+0xfff790e8>
   99378:	000d883a 	mov	r6,zero
   9937c:	000b883a 	mov	r5,zero
   99380:	0007883a 	mov	r3,zero
   99384:	0005883a 	mov	r2,zero
   99388:	003fe406 	br	9931c <__ram_exceptions_end+0xfff790e8>
   9938c:	0123c83a 	sub	r17,zero,r4
   99390:	003fd106 	br	992d8 <__ram_exceptions_end+0xfff790a4>

00099394 <__floatunsidf>:
   99394:	defffe04 	addi	sp,sp,-8
   99398:	dc000015 	stw	r16,0(sp)
   9939c:	dfc00115 	stw	ra,4(sp)
   993a0:	2021883a 	mov	r16,r4
   993a4:	20002226 	beq	r4,zero,99430 <__floatunsidf+0x9c>
   993a8:	00995e40 	call	995e4 <__clzsi2>
   993ac:	01010784 	movi	r4,1054
   993b0:	2089c83a 	sub	r4,r4,r2
   993b4:	01810cc4 	movi	r6,1075
   993b8:	310dc83a 	sub	r6,r6,r4
   993bc:	00c007c4 	movi	r3,31
   993c0:	1980120e 	bge	r3,r6,9940c <__floatunsidf+0x78>
   993c4:	00c104c4 	movi	r3,1043
   993c8:	1907c83a 	sub	r3,r3,r4
   993cc:	80ca983a 	sll	r5,r16,r3
   993d0:	00800434 	movhi	r2,16
   993d4:	10bfffc4 	addi	r2,r2,-1
   993d8:	2101ffcc 	andi	r4,r4,2047
   993dc:	0021883a 	mov	r16,zero
   993e0:	288a703a 	and	r5,r5,r2
   993e4:	2008953a 	slli	r4,r4,20
   993e8:	00c00434 	movhi	r3,16
   993ec:	18ffffc4 	addi	r3,r3,-1
   993f0:	28c6703a 	and	r3,r5,r3
   993f4:	8005883a 	mov	r2,r16
   993f8:	1906b03a 	or	r3,r3,r4
   993fc:	dfc00117 	ldw	ra,4(sp)
   99400:	dc000017 	ldw	r16,0(sp)
   99404:	dec00204 	addi	sp,sp,8
   99408:	f800283a 	ret
   9940c:	00c002c4 	movi	r3,11
   99410:	188bc83a 	sub	r5,r3,r2
   99414:	814ad83a 	srl	r5,r16,r5
   99418:	00c00434 	movhi	r3,16
   9941c:	18ffffc4 	addi	r3,r3,-1
   99420:	81a0983a 	sll	r16,r16,r6
   99424:	2101ffcc 	andi	r4,r4,2047
   99428:	28ca703a 	and	r5,r5,r3
   9942c:	003fed06 	br	993e4 <__ram_exceptions_end+0xfff791b0>
   99430:	0009883a 	mov	r4,zero
   99434:	000b883a 	mov	r5,zero
   99438:	003fea06 	br	993e4 <__ram_exceptions_end+0xfff791b0>

0009943c <__truncdfsf2>:
   9943c:	2810d53a 	srli	r8,r5,20
   99440:	01c00434 	movhi	r7,16
   99444:	39ffffc4 	addi	r7,r7,-1
   99448:	29ce703a 	and	r7,r5,r7
   9944c:	4201ffcc 	andi	r8,r8,2047
   99450:	380e90fa 	slli	r7,r7,3
   99454:	200cd77a 	srli	r6,r4,29
   99458:	42400044 	addi	r9,r8,1
   9945c:	4a41ffcc 	andi	r9,r9,2047
   99460:	00c00044 	movi	r3,1
   99464:	280ad7fa 	srli	r5,r5,31
   99468:	31ceb03a 	or	r7,r6,r7
   9946c:	200490fa 	slli	r2,r4,3
   99470:	1a40230e 	bge	r3,r9,99500 <__truncdfsf2+0xc4>
   99474:	40ff2004 	addi	r3,r8,-896
   99478:	01803f84 	movi	r6,254
   9947c:	30c01516 	blt	r6,r3,994d4 <__truncdfsf2+0x98>
   99480:	00c0380e 	bge	zero,r3,99564 <__truncdfsf2+0x128>
   99484:	200c91ba 	slli	r6,r4,6
   99488:	380e90fa 	slli	r7,r7,3
   9948c:	1004d77a 	srli	r2,r2,29
   99490:	300cc03a 	cmpne	r6,r6,zero
   99494:	31ccb03a 	or	r6,r6,r7
   99498:	308cb03a 	or	r6,r6,r2
   9949c:	308001cc 	andi	r2,r6,7
   994a0:	10000426 	beq	r2,zero,994b4 <__truncdfsf2+0x78>
   994a4:	308003cc 	andi	r2,r6,15
   994a8:	01000104 	movi	r4,4
   994ac:	11000126 	beq	r2,r4,994b4 <__truncdfsf2+0x78>
   994b0:	31800104 	addi	r6,r6,4
   994b4:	3081002c 	andhi	r2,r6,1024
   994b8:	10001626 	beq	r2,zero,99514 <__truncdfsf2+0xd8>
   994bc:	18c00044 	addi	r3,r3,1
   994c0:	00803fc4 	movi	r2,255
   994c4:	18800326 	beq	r3,r2,994d4 <__truncdfsf2+0x98>
   994c8:	300c91ba 	slli	r6,r6,6
   994cc:	300cd27a 	srli	r6,r6,9
   994d0:	00000206 	br	994dc <__truncdfsf2+0xa0>
   994d4:	00ffffc4 	movi	r3,-1
   994d8:	000d883a 	mov	r6,zero
   994dc:	18c03fcc 	andi	r3,r3,255
   994e0:	180895fa 	slli	r4,r3,23
   994e4:	00c02034 	movhi	r3,128
   994e8:	280a97fa 	slli	r5,r5,31
   994ec:	18ffffc4 	addi	r3,r3,-1
   994f0:	30c6703a 	and	r3,r6,r3
   994f4:	1906b03a 	or	r3,r3,r4
   994f8:	1944b03a 	or	r2,r3,r5
   994fc:	f800283a 	ret
   99500:	40000b1e 	bne	r8,zero,99530 <__truncdfsf2+0xf4>
   99504:	388cb03a 	or	r6,r7,r2
   99508:	0007883a 	mov	r3,zero
   9950c:	30000426 	beq	r6,zero,99520 <__truncdfsf2+0xe4>
   99510:	01800144 	movi	r6,5
   99514:	00803fc4 	movi	r2,255
   99518:	300cd0fa 	srli	r6,r6,3
   9951c:	18800a26 	beq	r3,r2,99548 <__truncdfsf2+0x10c>
   99520:	00802034 	movhi	r2,128
   99524:	10bfffc4 	addi	r2,r2,-1
   99528:	308c703a 	and	r6,r6,r2
   9952c:	003feb06 	br	994dc <__ram_exceptions_end+0xfff792a8>
   99530:	3888b03a 	or	r4,r7,r2
   99534:	203fe726 	beq	r4,zero,994d4 <__ram_exceptions_end+0xfff792a0>
   99538:	380c90fa 	slli	r6,r7,3
   9953c:	00c03fc4 	movi	r3,255
   99540:	31808034 	orhi	r6,r6,512
   99544:	003fd506 	br	9949c <__ram_exceptions_end+0xfff79268>
   99548:	303fe226 	beq	r6,zero,994d4 <__ram_exceptions_end+0xfff792a0>
   9954c:	00802034 	movhi	r2,128
   99550:	31801034 	orhi	r6,r6,64
   99554:	10bfffc4 	addi	r2,r2,-1
   99558:	00ffffc4 	movi	r3,-1
   9955c:	308c703a 	and	r6,r6,r2
   99560:	003fde06 	br	994dc <__ram_exceptions_end+0xfff792a8>
   99564:	013ffa44 	movi	r4,-23
   99568:	19000e16 	blt	r3,r4,995a4 <__truncdfsf2+0x168>
   9956c:	01000784 	movi	r4,30
   99570:	20c9c83a 	sub	r4,r4,r3
   99574:	018007c4 	movi	r6,31
   99578:	39c02034 	orhi	r7,r7,128
   9957c:	31000b16 	blt	r6,r4,995ac <__truncdfsf2+0x170>
   99580:	423f2084 	addi	r8,r8,-894
   99584:	120c983a 	sll	r6,r2,r8
   99588:	3a0e983a 	sll	r7,r7,r8
   9958c:	1104d83a 	srl	r2,r2,r4
   99590:	300cc03a 	cmpne	r6,r6,zero
   99594:	31ceb03a 	or	r7,r6,r7
   99598:	388cb03a 	or	r6,r7,r2
   9959c:	0007883a 	mov	r3,zero
   995a0:	003fbe06 	br	9949c <__ram_exceptions_end+0xfff79268>
   995a4:	0007883a 	mov	r3,zero
   995a8:	003fd906 	br	99510 <__ram_exceptions_end+0xfff792dc>
   995ac:	01bfff84 	movi	r6,-2
   995b0:	30cdc83a 	sub	r6,r6,r3
   995b4:	00c00804 	movi	r3,32
   995b8:	398cd83a 	srl	r6,r7,r6
   995bc:	20c00726 	beq	r4,r3,995dc <__truncdfsf2+0x1a0>
   995c0:	423f2884 	addi	r8,r8,-862
   995c4:	3a0e983a 	sll	r7,r7,r8
   995c8:	3884b03a 	or	r2,r7,r2
   995cc:	1004c03a 	cmpne	r2,r2,zero
   995d0:	118cb03a 	or	r6,r2,r6
   995d4:	0007883a 	mov	r3,zero
   995d8:	003fb006 	br	9949c <__ram_exceptions_end+0xfff79268>
   995dc:	000f883a 	mov	r7,zero
   995e0:	003ff906 	br	995c8 <__ram_exceptions_end+0xfff79394>

000995e4 <__clzsi2>:
   995e4:	00bfffd4 	movui	r2,65535
   995e8:	11000536 	bltu	r2,r4,99600 <__clzsi2+0x1c>
   995ec:	00803fc4 	movi	r2,255
   995f0:	11000f36 	bltu	r2,r4,99630 <__clzsi2+0x4c>
   995f4:	00800804 	movi	r2,32
   995f8:	0007883a 	mov	r3,zero
   995fc:	00000506 	br	99614 <__clzsi2+0x30>
   99600:	00804034 	movhi	r2,256
   99604:	10bfffc4 	addi	r2,r2,-1
   99608:	11000c2e 	bgeu	r2,r4,9963c <__clzsi2+0x58>
   9960c:	00800204 	movi	r2,8
   99610:	00c00604 	movi	r3,24
   99614:	20c8d83a 	srl	r4,r4,r3
   99618:	00c002b4 	movhi	r3,10
   9961c:	18f9f784 	addi	r3,r3,-6178
   99620:	1909883a 	add	r4,r3,r4
   99624:	20c00003 	ldbu	r3,0(r4)
   99628:	10c5c83a 	sub	r2,r2,r3
   9962c:	f800283a 	ret
   99630:	00800604 	movi	r2,24
   99634:	00c00204 	movi	r3,8
   99638:	003ff606 	br	99614 <__ram_exceptions_end+0xfff793e0>
   9963c:	00800404 	movi	r2,16
   99640:	1007883a 	mov	r3,r2
   99644:	003ff306 	br	99614 <__ram_exceptions_end+0xfff793e0>

00099648 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   99648:	defffe04 	addi	sp,sp,-8
   9964c:	dfc00115 	stw	ra,4(sp)
   99650:	df000015 	stw	fp,0(sp)
   99654:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   99658:	d0a00d17 	ldw	r2,-32716(gp)
   9965c:	10000326 	beq	r2,zero,9966c <alt_get_errno+0x24>
   99660:	d0a00d17 	ldw	r2,-32716(gp)
   99664:	103ee83a 	callr	r2
   99668:	00000106 	br	99670 <alt_get_errno+0x28>
   9966c:	d0a75804 	addi	r2,gp,-25248
}
   99670:	e037883a 	mov	sp,fp
   99674:	dfc00117 	ldw	ra,4(sp)
   99678:	df000017 	ldw	fp,0(sp)
   9967c:	dec00204 	addi	sp,sp,8
   99680:	f800283a 	ret

00099684 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   99684:	defffb04 	addi	sp,sp,-20
   99688:	dfc00415 	stw	ra,16(sp)
   9968c:	df000315 	stw	fp,12(sp)
   99690:	df000304 	addi	fp,sp,12
   99694:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   99698:	e0bfff17 	ldw	r2,-4(fp)
   9969c:	10000816 	blt	r2,zero,996c0 <close+0x3c>
   996a0:	01400304 	movi	r5,12
   996a4:	e13fff17 	ldw	r4,-4(fp)
   996a8:	00822140 	call	82214 <__mulsi3>
   996ac:	1007883a 	mov	r3,r2
   996b0:	008002b4 	movhi	r2,10
   996b4:	10bc8504 	addi	r2,r2,-3564
   996b8:	1885883a 	add	r2,r3,r2
   996bc:	00000106 	br	996c4 <close+0x40>
   996c0:	0005883a 	mov	r2,zero
   996c4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   996c8:	e0bffd17 	ldw	r2,-12(fp)
   996cc:	10001926 	beq	r2,zero,99734 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   996d0:	e0bffd17 	ldw	r2,-12(fp)
   996d4:	10800017 	ldw	r2,0(r2)
   996d8:	10800417 	ldw	r2,16(r2)
   996dc:	10000626 	beq	r2,zero,996f8 <close+0x74>
   996e0:	e0bffd17 	ldw	r2,-12(fp)
   996e4:	10800017 	ldw	r2,0(r2)
   996e8:	10800417 	ldw	r2,16(r2)
   996ec:	e13ffd17 	ldw	r4,-12(fp)
   996f0:	103ee83a 	callr	r2
   996f4:	00000106 	br	996fc <close+0x78>
   996f8:	0005883a 	mov	r2,zero
   996fc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   99700:	e13fff17 	ldw	r4,-4(fp)
   99704:	0099e280 	call	99e28 <alt_release_fd>
    if (rval < 0)
   99708:	e0bffe17 	ldw	r2,-8(fp)
   9970c:	1000070e 	bge	r2,zero,9972c <close+0xa8>
    {
      ALT_ERRNO = -rval;
   99710:	00996480 	call	99648 <alt_get_errno>
   99714:	1007883a 	mov	r3,r2
   99718:	e0bffe17 	ldw	r2,-8(fp)
   9971c:	0085c83a 	sub	r2,zero,r2
   99720:	18800015 	stw	r2,0(r3)
      return -1;
   99724:	00bfffc4 	movi	r2,-1
   99728:	00000706 	br	99748 <close+0xc4>
    }
    return 0;
   9972c:	0005883a 	mov	r2,zero
   99730:	00000506 	br	99748 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   99734:	00996480 	call	99648 <alt_get_errno>
   99738:	1007883a 	mov	r3,r2
   9973c:	00801444 	movi	r2,81
   99740:	18800015 	stw	r2,0(r3)
    return -1;
   99744:	00bfffc4 	movi	r2,-1
  }
}
   99748:	e037883a 	mov	sp,fp
   9974c:	dfc00117 	ldw	ra,4(sp)
   99750:	df000017 	ldw	fp,0(sp)
   99754:	dec00204 	addi	sp,sp,8
   99758:	f800283a 	ret

0009975c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   9975c:	defffc04 	addi	sp,sp,-16
   99760:	df000315 	stw	fp,12(sp)
   99764:	df000304 	addi	fp,sp,12
   99768:	e13ffd15 	stw	r4,-12(fp)
   9976c:	e17ffe15 	stw	r5,-8(fp)
   99770:	e1bfff15 	stw	r6,-4(fp)
  return len;
   99774:	e0bfff17 	ldw	r2,-4(fp)
}
   99778:	e037883a 	mov	sp,fp
   9977c:	df000017 	ldw	fp,0(sp)
   99780:	dec00104 	addi	sp,sp,4
   99784:	f800283a 	ret

00099788 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
   99788:	defffc04 	addi	sp,sp,-16
   9978c:	dfc00315 	stw	ra,12(sp)
   99790:	df000215 	stw	fp,8(sp)
   99794:	df000204 	addi	fp,sp,8
   99798:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
   9979c:	d1600e04 	addi	r5,gp,-32712
   997a0:	e13fff17 	ldw	r4,-4(fp)
   997a4:	009c9700 	call	9c970 <alt_find_dev>
   997a8:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
   997ac:	e0bffe17 	ldw	r2,-8(fp)
   997b0:	10000926 	beq	r2,zero,997d8 <alt_flash_open_dev+0x50>
   997b4:	e0bffe17 	ldw	r2,-8(fp)
   997b8:	10800317 	ldw	r2,12(r2)
   997bc:	10000626 	beq	r2,zero,997d8 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
   997c0:	e0bffe17 	ldw	r2,-8(fp)
   997c4:	10800317 	ldw	r2,12(r2)
   997c8:	e17fff17 	ldw	r5,-4(fp)
   997cc:	e13ffe17 	ldw	r4,-8(fp)
   997d0:	103ee83a 	callr	r2
   997d4:	00000106 	br	997dc <alt_flash_open_dev+0x54>
  }

  return dev;
   997d8:	e0bffe17 	ldw	r2,-8(fp)
}
   997dc:	e037883a 	mov	sp,fp
   997e0:	dfc00117 	ldw	ra,4(sp)
   997e4:	df000017 	ldw	fp,0(sp)
   997e8:	dec00204 	addi	sp,sp,8
   997ec:	f800283a 	ret

000997f0 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
   997f0:	defffd04 	addi	sp,sp,-12
   997f4:	dfc00215 	stw	ra,8(sp)
   997f8:	df000115 	stw	fp,4(sp)
   997fc:	df000104 	addi	fp,sp,4
   99800:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
   99804:	e0bfff17 	ldw	r2,-4(fp)
   99808:	10000826 	beq	r2,zero,9982c <alt_flash_close_dev+0x3c>
   9980c:	e0bfff17 	ldw	r2,-4(fp)
   99810:	10800417 	ldw	r2,16(r2)
   99814:	10000526 	beq	r2,zero,9982c <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
   99818:	e0bfff17 	ldw	r2,-4(fp)
   9981c:	10800417 	ldw	r2,16(r2)
   99820:	e13fff17 	ldw	r4,-4(fp)
   99824:	103ee83a 	callr	r2
  }
  return;
   99828:	0001883a 	nop
   9982c:	0001883a 	nop
}
   99830:	e037883a 	mov	sp,fp
   99834:	dfc00117 	ldw	ra,4(sp)
   99838:	df000017 	ldw	fp,0(sp)
   9983c:	dec00204 	addi	sp,sp,8
   99840:	f800283a 	ret

00099844 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   99844:	defffe04 	addi	sp,sp,-8
   99848:	dfc00115 	stw	ra,4(sp)
   9984c:	df000015 	stw	fp,0(sp)
   99850:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   99854:	d0a00d17 	ldw	r2,-32716(gp)
   99858:	10000326 	beq	r2,zero,99868 <alt_get_errno+0x24>
   9985c:	d0a00d17 	ldw	r2,-32716(gp)
   99860:	103ee83a 	callr	r2
   99864:	00000106 	br	9986c <alt_get_errno+0x28>
   99868:	d0a75804 	addi	r2,gp,-25248
}
   9986c:	e037883a 	mov	sp,fp
   99870:	dfc00117 	ldw	ra,4(sp)
   99874:	df000017 	ldw	fp,0(sp)
   99878:	dec00204 	addi	sp,sp,8
   9987c:	f800283a 	ret

00099880 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   99880:	defffb04 	addi	sp,sp,-20
   99884:	dfc00415 	stw	ra,16(sp)
   99888:	df000315 	stw	fp,12(sp)
   9988c:	df000304 	addi	fp,sp,12
   99890:	e13ffe15 	stw	r4,-8(fp)
   99894:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   99898:	e0bffe17 	ldw	r2,-8(fp)
   9989c:	10000816 	blt	r2,zero,998c0 <fstat+0x40>
   998a0:	01400304 	movi	r5,12
   998a4:	e13ffe17 	ldw	r4,-8(fp)
   998a8:	00822140 	call	82214 <__mulsi3>
   998ac:	1007883a 	mov	r3,r2
   998b0:	008002b4 	movhi	r2,10
   998b4:	10bc8504 	addi	r2,r2,-3564
   998b8:	1885883a 	add	r2,r3,r2
   998bc:	00000106 	br	998c4 <fstat+0x44>
   998c0:	0005883a 	mov	r2,zero
   998c4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   998c8:	e0bffd17 	ldw	r2,-12(fp)
   998cc:	10001026 	beq	r2,zero,99910 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   998d0:	e0bffd17 	ldw	r2,-12(fp)
   998d4:	10800017 	ldw	r2,0(r2)
   998d8:	10800817 	ldw	r2,32(r2)
   998dc:	10000726 	beq	r2,zero,998fc <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   998e0:	e0bffd17 	ldw	r2,-12(fp)
   998e4:	10800017 	ldw	r2,0(r2)
   998e8:	10800817 	ldw	r2,32(r2)
   998ec:	e17fff17 	ldw	r5,-4(fp)
   998f0:	e13ffd17 	ldw	r4,-12(fp)
   998f4:	103ee83a 	callr	r2
   998f8:	00000a06 	br	99924 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   998fc:	e0bfff17 	ldw	r2,-4(fp)
   99900:	00c80004 	movi	r3,8192
   99904:	10c00115 	stw	r3,4(r2)
      return 0;
   99908:	0005883a 	mov	r2,zero
   9990c:	00000506 	br	99924 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   99910:	00998440 	call	99844 <alt_get_errno>
   99914:	1007883a 	mov	r3,r2
   99918:	00801444 	movi	r2,81
   9991c:	18800015 	stw	r2,0(r3)
    return -1;
   99920:	00bfffc4 	movi	r2,-1
  }
}
   99924:	e037883a 	mov	sp,fp
   99928:	dfc00117 	ldw	ra,4(sp)
   9992c:	df000017 	ldw	fp,0(sp)
   99930:	dec00204 	addi	sp,sp,8
   99934:	f800283a 	ret

00099938 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   99938:	defffe04 	addi	sp,sp,-8
   9993c:	dfc00115 	stw	ra,4(sp)
   99940:	df000015 	stw	fp,0(sp)
   99944:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   99948:	d0a00d17 	ldw	r2,-32716(gp)
   9994c:	10000326 	beq	r2,zero,9995c <alt_get_errno+0x24>
   99950:	d0a00d17 	ldw	r2,-32716(gp)
   99954:	103ee83a 	callr	r2
   99958:	00000106 	br	99960 <alt_get_errno+0x28>
   9995c:	d0a75804 	addi	r2,gp,-25248
}
   99960:	e037883a 	mov	sp,fp
   99964:	dfc00117 	ldw	ra,4(sp)
   99968:	df000017 	ldw	fp,0(sp)
   9996c:	dec00204 	addi	sp,sp,8
   99970:	f800283a 	ret

00099974 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   99974:	deffed04 	addi	sp,sp,-76
   99978:	dfc01215 	stw	ra,72(sp)
   9997c:	df001115 	stw	fp,68(sp)
   99980:	df001104 	addi	fp,sp,68
   99984:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   99988:	e0bfff17 	ldw	r2,-4(fp)
   9998c:	10000816 	blt	r2,zero,999b0 <isatty+0x3c>
   99990:	01400304 	movi	r5,12
   99994:	e13fff17 	ldw	r4,-4(fp)
   99998:	00822140 	call	82214 <__mulsi3>
   9999c:	1007883a 	mov	r3,r2
   999a0:	008002b4 	movhi	r2,10
   999a4:	10bc8504 	addi	r2,r2,-3564
   999a8:	1885883a 	add	r2,r3,r2
   999ac:	00000106 	br	999b4 <isatty+0x40>
   999b0:	0005883a 	mov	r2,zero
   999b4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   999b8:	e0bfef17 	ldw	r2,-68(fp)
   999bc:	10000e26 	beq	r2,zero,999f8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   999c0:	e0bfef17 	ldw	r2,-68(fp)
   999c4:	10800017 	ldw	r2,0(r2)
   999c8:	10800817 	ldw	r2,32(r2)
   999cc:	1000021e 	bne	r2,zero,999d8 <isatty+0x64>
    {
      return 1;
   999d0:	00800044 	movi	r2,1
   999d4:	00000d06 	br	99a0c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   999d8:	e0bff004 	addi	r2,fp,-64
   999dc:	100b883a 	mov	r5,r2
   999e0:	e13fff17 	ldw	r4,-4(fp)
   999e4:	00998800 	call	99880 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   999e8:	e0bff117 	ldw	r2,-60(fp)
   999ec:	10880020 	cmpeqi	r2,r2,8192
   999f0:	10803fcc 	andi	r2,r2,255
   999f4:	00000506 	br	99a0c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   999f8:	00999380 	call	99938 <alt_get_errno>
   999fc:	1007883a 	mov	r3,r2
   99a00:	00801444 	movi	r2,81
   99a04:	18800015 	stw	r2,0(r3)
    return 0;
   99a08:	0005883a 	mov	r2,zero
  }
}
   99a0c:	e037883a 	mov	sp,fp
   99a10:	dfc00117 	ldw	ra,4(sp)
   99a14:	df000017 	ldw	fp,0(sp)
   99a18:	dec00204 	addi	sp,sp,8
   99a1c:	f800283a 	ret

00099a20 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   99a20:	defffc04 	addi	sp,sp,-16
   99a24:	df000315 	stw	fp,12(sp)
   99a28:	df000304 	addi	fp,sp,12
   99a2c:	e13ffd15 	stw	r4,-12(fp)
   99a30:	e17ffe15 	stw	r5,-8(fp)
   99a34:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   99a38:	e0fffe17 	ldw	r3,-8(fp)
   99a3c:	e0bffd17 	ldw	r2,-12(fp)
   99a40:	18800c26 	beq	r3,r2,99a74 <alt_load_section+0x54>
  {
    while( to != end )
   99a44:	00000806 	br	99a68 <alt_load_section+0x48>
    {
      *to++ = *from++;
   99a48:	e0bffe17 	ldw	r2,-8(fp)
   99a4c:	10c00104 	addi	r3,r2,4
   99a50:	e0fffe15 	stw	r3,-8(fp)
   99a54:	e0fffd17 	ldw	r3,-12(fp)
   99a58:	19000104 	addi	r4,r3,4
   99a5c:	e13ffd15 	stw	r4,-12(fp)
   99a60:	18c00017 	ldw	r3,0(r3)
   99a64:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   99a68:	e0fffe17 	ldw	r3,-8(fp)
   99a6c:	e0bfff17 	ldw	r2,-4(fp)
   99a70:	18bff51e 	bne	r3,r2,99a48 <__ram_exceptions_end+0xfff79814>
    {
      *to++ = *from++;
    }
  }
}
   99a74:	0001883a 	nop
   99a78:	e037883a 	mov	sp,fp
   99a7c:	df000017 	ldw	fp,0(sp)
   99a80:	dec00104 	addi	sp,sp,4
   99a84:	f800283a 	ret

00099a88 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   99a88:	defffe04 	addi	sp,sp,-8
   99a8c:	dfc00115 	stw	ra,4(sp)
   99a90:	df000015 	stw	fp,0(sp)
   99a94:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   99a98:	018002b4 	movhi	r6,10
   99a9c:	31818f04 	addi	r6,r6,1596
   99aa0:	014002b4 	movhi	r5,10
   99aa4:	297a5204 	addi	r5,r5,-5816
   99aa8:	010002b4 	movhi	r4,10
   99aac:	21018f04 	addi	r4,r4,1596
   99ab0:	0099a200 	call	99a20 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   99ab4:	018004b4 	movhi	r6,18
   99ab8:	31808d04 	addi	r6,r6,564
   99abc:	014004b4 	movhi	r5,18
   99ac0:	29400804 	addi	r5,r5,32
   99ac4:	010004b4 	movhi	r4,18
   99ac8:	21000804 	addi	r4,r4,32
   99acc:	0099a200 	call	99a20 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   99ad0:	018002b4 	movhi	r6,10
   99ad4:	31ba5204 	addi	r6,r6,-5816
   99ad8:	014002b4 	movhi	r5,10
   99adc:	2975b304 	addi	r5,r5,-10548
   99ae0:	010002b4 	movhi	r4,10
   99ae4:	2135b304 	addi	r4,r4,-10548
   99ae8:	0099a200 	call	99a20 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   99aec:	009c7b00 	call	9c7b0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   99af0:	009ca000 	call	9ca00 <alt_icache_flush_all>
}
   99af4:	0001883a 	nop
   99af8:	e037883a 	mov	sp,fp
   99afc:	dfc00117 	ldw	ra,4(sp)
   99b00:	df000017 	ldw	fp,0(sp)
   99b04:	dec00204 	addi	sp,sp,8
   99b08:	f800283a 	ret

00099b0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   99b0c:	defffe04 	addi	sp,sp,-8
   99b10:	dfc00115 	stw	ra,4(sp)
   99b14:	df000015 	stw	fp,0(sp)
   99b18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   99b1c:	d0a00d17 	ldw	r2,-32716(gp)
   99b20:	10000326 	beq	r2,zero,99b30 <alt_get_errno+0x24>
   99b24:	d0a00d17 	ldw	r2,-32716(gp)
   99b28:	103ee83a 	callr	r2
   99b2c:	00000106 	br	99b34 <alt_get_errno+0x28>
   99b30:	d0a75804 	addi	r2,gp,-25248
}
   99b34:	e037883a 	mov	sp,fp
   99b38:	dfc00117 	ldw	ra,4(sp)
   99b3c:	df000017 	ldw	fp,0(sp)
   99b40:	dec00204 	addi	sp,sp,8
   99b44:	f800283a 	ret

00099b48 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   99b48:	defff904 	addi	sp,sp,-28
   99b4c:	dfc00615 	stw	ra,24(sp)
   99b50:	df000515 	stw	fp,20(sp)
   99b54:	df000504 	addi	fp,sp,20
   99b58:	e13ffd15 	stw	r4,-12(fp)
   99b5c:	e17ffe15 	stw	r5,-8(fp)
   99b60:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   99b64:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   99b68:	e0bffd17 	ldw	r2,-12(fp)
   99b6c:	10000816 	blt	r2,zero,99b90 <lseek+0x48>
   99b70:	01400304 	movi	r5,12
   99b74:	e13ffd17 	ldw	r4,-12(fp)
   99b78:	00822140 	call	82214 <__mulsi3>
   99b7c:	1007883a 	mov	r3,r2
   99b80:	008002b4 	movhi	r2,10
   99b84:	10bc8504 	addi	r2,r2,-3564
   99b88:	1885883a 	add	r2,r3,r2
   99b8c:	00000106 	br	99b94 <lseek+0x4c>
   99b90:	0005883a 	mov	r2,zero
   99b94:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   99b98:	e0bffc17 	ldw	r2,-16(fp)
   99b9c:	10001026 	beq	r2,zero,99be0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   99ba0:	e0bffc17 	ldw	r2,-16(fp)
   99ba4:	10800017 	ldw	r2,0(r2)
   99ba8:	10800717 	ldw	r2,28(r2)
   99bac:	10000926 	beq	r2,zero,99bd4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   99bb0:	e0bffc17 	ldw	r2,-16(fp)
   99bb4:	10800017 	ldw	r2,0(r2)
   99bb8:	10800717 	ldw	r2,28(r2)
   99bbc:	e1bfff17 	ldw	r6,-4(fp)
   99bc0:	e17ffe17 	ldw	r5,-8(fp)
   99bc4:	e13ffc17 	ldw	r4,-16(fp)
   99bc8:	103ee83a 	callr	r2
   99bcc:	e0bffb15 	stw	r2,-20(fp)
   99bd0:	00000506 	br	99be8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   99bd4:	00bfde84 	movi	r2,-134
   99bd8:	e0bffb15 	stw	r2,-20(fp)
   99bdc:	00000206 	br	99be8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   99be0:	00bfebc4 	movi	r2,-81
   99be4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   99be8:	e0bffb17 	ldw	r2,-20(fp)
   99bec:	1000070e 	bge	r2,zero,99c0c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   99bf0:	0099b0c0 	call	99b0c <alt_get_errno>
   99bf4:	1007883a 	mov	r3,r2
   99bf8:	e0bffb17 	ldw	r2,-20(fp)
   99bfc:	0085c83a 	sub	r2,zero,r2
   99c00:	18800015 	stw	r2,0(r3)
    rc = -1;
   99c04:	00bfffc4 	movi	r2,-1
   99c08:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   99c0c:	e0bffb17 	ldw	r2,-20(fp)
}
   99c10:	e037883a 	mov	sp,fp
   99c14:	dfc00117 	ldw	ra,4(sp)
   99c18:	df000017 	ldw	fp,0(sp)
   99c1c:	dec00204 	addi	sp,sp,8
   99c20:	f800283a 	ret

00099c24 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   99c24:	defffd04 	addi	sp,sp,-12
   99c28:	dfc00215 	stw	ra,8(sp)
   99c2c:	df000115 	stw	fp,4(sp)
   99c30:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   99c34:	0009883a 	mov	r4,zero
   99c38:	009a0cc0 	call	9a0cc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   99c3c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   99c40:	009a1040 	call	9a104 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   99c44:	018002b4 	movhi	r6,10
   99c48:	31ba3b04 	addi	r6,r6,-5908
   99c4c:	014002b4 	movhi	r5,10
   99c50:	297a3b04 	addi	r5,r5,-5908
   99c54:	010002b4 	movhi	r4,10
   99c58:	213a3b04 	addi	r4,r4,-5908
   99c5c:	009cb040 	call	9cb04 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   99c60:	009c8b00 	call	9c8b0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   99c64:	010002b4 	movhi	r4,10
   99c68:	21324404 	addi	r4,r4,-14064
   99c6c:	009d3b40 	call	9d3b4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   99c70:	d0a75c17 	ldw	r2,-25232(gp)
   99c74:	d0e75d17 	ldw	r3,-25228(gp)
   99c78:	d1275e17 	ldw	r4,-25224(gp)
   99c7c:	200d883a 	mov	r6,r4
   99c80:	180b883a 	mov	r5,r3
   99c84:	1009883a 	mov	r4,r2
   99c88:	00820100 	call	82010 <main>
   99c8c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   99c90:	01000044 	movi	r4,1
   99c94:	00996840 	call	99684 <close>
  exit (result);
   99c98:	e13fff17 	ldw	r4,-4(fp)
   99c9c:	009d3c80 	call	9d3c8 <exit>

00099ca0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   99ca0:	defffe04 	addi	sp,sp,-8
   99ca4:	df000115 	stw	fp,4(sp)
   99ca8:	df000104 	addi	fp,sp,4
   99cac:	e13fff15 	stw	r4,-4(fp)
}
   99cb0:	0001883a 	nop
   99cb4:	e037883a 	mov	sp,fp
   99cb8:	df000017 	ldw	fp,0(sp)
   99cbc:	dec00104 	addi	sp,sp,4
   99cc0:	f800283a 	ret

00099cc4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   99cc4:	defffe04 	addi	sp,sp,-8
   99cc8:	df000115 	stw	fp,4(sp)
   99ccc:	df000104 	addi	fp,sp,4
   99cd0:	e13fff15 	stw	r4,-4(fp)
}
   99cd4:	0001883a 	nop
   99cd8:	e037883a 	mov	sp,fp
   99cdc:	df000017 	ldw	fp,0(sp)
   99ce0:	dec00104 	addi	sp,sp,4
   99ce4:	f800283a 	ret

00099ce8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   99ce8:	defffe04 	addi	sp,sp,-8
   99cec:	dfc00115 	stw	ra,4(sp)
   99cf0:	df000015 	stw	fp,0(sp)
   99cf4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   99cf8:	d0a00d17 	ldw	r2,-32716(gp)
   99cfc:	10000326 	beq	r2,zero,99d0c <alt_get_errno+0x24>
   99d00:	d0a00d17 	ldw	r2,-32716(gp)
   99d04:	103ee83a 	callr	r2
   99d08:	00000106 	br	99d10 <alt_get_errno+0x28>
   99d0c:	d0a75804 	addi	r2,gp,-25248
}
   99d10:	e037883a 	mov	sp,fp
   99d14:	dfc00117 	ldw	ra,4(sp)
   99d18:	df000017 	ldw	fp,0(sp)
   99d1c:	dec00204 	addi	sp,sp,8
   99d20:	f800283a 	ret

00099d24 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   99d24:	defff904 	addi	sp,sp,-28
   99d28:	dfc00615 	stw	ra,24(sp)
   99d2c:	df000515 	stw	fp,20(sp)
   99d30:	df000504 	addi	fp,sp,20
   99d34:	e13ffd15 	stw	r4,-12(fp)
   99d38:	e17ffe15 	stw	r5,-8(fp)
   99d3c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   99d40:	e0bffd17 	ldw	r2,-12(fp)
   99d44:	10000816 	blt	r2,zero,99d68 <read+0x44>
   99d48:	01400304 	movi	r5,12
   99d4c:	e13ffd17 	ldw	r4,-12(fp)
   99d50:	00822140 	call	82214 <__mulsi3>
   99d54:	1007883a 	mov	r3,r2
   99d58:	008002b4 	movhi	r2,10
   99d5c:	10bc8504 	addi	r2,r2,-3564
   99d60:	1885883a 	add	r2,r3,r2
   99d64:	00000106 	br	99d6c <read+0x48>
   99d68:	0005883a 	mov	r2,zero
   99d6c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   99d70:	e0bffb17 	ldw	r2,-20(fp)
   99d74:	10002226 	beq	r2,zero,99e00 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   99d78:	e0bffb17 	ldw	r2,-20(fp)
   99d7c:	10800217 	ldw	r2,8(r2)
   99d80:	108000cc 	andi	r2,r2,3
   99d84:	10800060 	cmpeqi	r2,r2,1
   99d88:	1000181e 	bne	r2,zero,99dec <read+0xc8>
        (fd->dev->read))
   99d8c:	e0bffb17 	ldw	r2,-20(fp)
   99d90:	10800017 	ldw	r2,0(r2)
   99d94:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   99d98:	10001426 	beq	r2,zero,99dec <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   99d9c:	e0bffb17 	ldw	r2,-20(fp)
   99da0:	10800017 	ldw	r2,0(r2)
   99da4:	10800517 	ldw	r2,20(r2)
   99da8:	e0ffff17 	ldw	r3,-4(fp)
   99dac:	180d883a 	mov	r6,r3
   99db0:	e17ffe17 	ldw	r5,-8(fp)
   99db4:	e13ffb17 	ldw	r4,-20(fp)
   99db8:	103ee83a 	callr	r2
   99dbc:	e0bffc15 	stw	r2,-16(fp)
   99dc0:	e0bffc17 	ldw	r2,-16(fp)
   99dc4:	1000070e 	bge	r2,zero,99de4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   99dc8:	0099ce80 	call	99ce8 <alt_get_errno>
   99dcc:	1007883a 	mov	r3,r2
   99dd0:	e0bffc17 	ldw	r2,-16(fp)
   99dd4:	0085c83a 	sub	r2,zero,r2
   99dd8:	18800015 	stw	r2,0(r3)
          return -1;
   99ddc:	00bfffc4 	movi	r2,-1
   99de0:	00000c06 	br	99e14 <read+0xf0>
        }
        return rval;
   99de4:	e0bffc17 	ldw	r2,-16(fp)
   99de8:	00000a06 	br	99e14 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   99dec:	0099ce80 	call	99ce8 <alt_get_errno>
   99df0:	1007883a 	mov	r3,r2
   99df4:	00800344 	movi	r2,13
   99df8:	18800015 	stw	r2,0(r3)
   99dfc:	00000406 	br	99e10 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   99e00:	0099ce80 	call	99ce8 <alt_get_errno>
   99e04:	1007883a 	mov	r3,r2
   99e08:	00801444 	movi	r2,81
   99e0c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   99e10:	00bfffc4 	movi	r2,-1
}
   99e14:	e037883a 	mov	sp,fp
   99e18:	dfc00117 	ldw	ra,4(sp)
   99e1c:	df000017 	ldw	fp,0(sp)
   99e20:	dec00204 	addi	sp,sp,8
   99e24:	f800283a 	ret

00099e28 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   99e28:	defffc04 	addi	sp,sp,-16
   99e2c:	dfc00315 	stw	ra,12(sp)
   99e30:	df000215 	stw	fp,8(sp)
   99e34:	dc000115 	stw	r16,4(sp)
   99e38:	df000204 	addi	fp,sp,8
   99e3c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   99e40:	e0bffe17 	ldw	r2,-8(fp)
   99e44:	108000d0 	cmplti	r2,r2,3
   99e48:	1000111e 	bne	r2,zero,99e90 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   99e4c:	040002b4 	movhi	r16,10
   99e50:	843c8504 	addi	r16,r16,-3564
   99e54:	e0bffe17 	ldw	r2,-8(fp)
   99e58:	01400304 	movi	r5,12
   99e5c:	1009883a 	mov	r4,r2
   99e60:	00822140 	call	82214 <__mulsi3>
   99e64:	8085883a 	add	r2,r16,r2
   99e68:	10800204 	addi	r2,r2,8
   99e6c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   99e70:	040002b4 	movhi	r16,10
   99e74:	843c8504 	addi	r16,r16,-3564
   99e78:	e0bffe17 	ldw	r2,-8(fp)
   99e7c:	01400304 	movi	r5,12
   99e80:	1009883a 	mov	r4,r2
   99e84:	00822140 	call	82214 <__mulsi3>
   99e88:	8085883a 	add	r2,r16,r2
   99e8c:	10000015 	stw	zero,0(r2)
  }
}
   99e90:	0001883a 	nop
   99e94:	e6ffff04 	addi	sp,fp,-4
   99e98:	dfc00217 	ldw	ra,8(sp)
   99e9c:	df000117 	ldw	fp,4(sp)
   99ea0:	dc000017 	ldw	r16,0(sp)
   99ea4:	dec00304 	addi	sp,sp,12
   99ea8:	f800283a 	ret

00099eac <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   99eac:	defff904 	addi	sp,sp,-28
   99eb0:	df000615 	stw	fp,24(sp)
   99eb4:	df000604 	addi	fp,sp,24
   99eb8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   99ebc:	0005303a 	rdctl	r2,status
   99ec0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   99ec4:	e0fffe17 	ldw	r3,-8(fp)
   99ec8:	00bfff84 	movi	r2,-2
   99ecc:	1884703a 	and	r2,r3,r2
   99ed0:	1001703a 	wrctl	status,r2
  
  return context;
   99ed4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   99ed8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   99edc:	d0a01017 	ldw	r2,-32704(gp)
   99ee0:	10c000c4 	addi	r3,r2,3
   99ee4:	00bfff04 	movi	r2,-4
   99ee8:	1884703a 	and	r2,r3,r2
   99eec:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   99ef0:	d0e01017 	ldw	r3,-32704(gp)
   99ef4:	e0bfff17 	ldw	r2,-4(fp)
   99ef8:	1887883a 	add	r3,r3,r2
   99efc:	008003f4 	movhi	r2,15
   99f00:	10800004 	addi	r2,r2,0
   99f04:	10c0062e 	bgeu	r2,r3,99f20 <sbrk+0x74>
   99f08:	e0bffb17 	ldw	r2,-20(fp)
   99f0c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   99f10:	e0bffa17 	ldw	r2,-24(fp)
   99f14:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   99f18:	00bfffc4 	movi	r2,-1
   99f1c:	00000b06 	br	99f4c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   99f20:	d0a01017 	ldw	r2,-32704(gp)
   99f24:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   99f28:	d0e01017 	ldw	r3,-32704(gp)
   99f2c:	e0bfff17 	ldw	r2,-4(fp)
   99f30:	1885883a 	add	r2,r3,r2
   99f34:	d0a01015 	stw	r2,-32704(gp)
   99f38:	e0bffb17 	ldw	r2,-20(fp)
   99f3c:	e0bffc15 	stw	r2,-16(fp)
   99f40:	e0bffc17 	ldw	r2,-16(fp)
   99f44:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   99f48:	e0bffd17 	ldw	r2,-12(fp)
} 
   99f4c:	e037883a 	mov	sp,fp
   99f50:	df000017 	ldw	fp,0(sp)
   99f54:	dec00104 	addi	sp,sp,4
   99f58:	f800283a 	ret

00099f5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   99f5c:	defffe04 	addi	sp,sp,-8
   99f60:	dfc00115 	stw	ra,4(sp)
   99f64:	df000015 	stw	fp,0(sp)
   99f68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   99f6c:	d0a00d17 	ldw	r2,-32716(gp)
   99f70:	10000326 	beq	r2,zero,99f80 <alt_get_errno+0x24>
   99f74:	d0a00d17 	ldw	r2,-32716(gp)
   99f78:	103ee83a 	callr	r2
   99f7c:	00000106 	br	99f84 <alt_get_errno+0x28>
   99f80:	d0a75804 	addi	r2,gp,-25248
}
   99f84:	e037883a 	mov	sp,fp
   99f88:	dfc00117 	ldw	ra,4(sp)
   99f8c:	df000017 	ldw	fp,0(sp)
   99f90:	dec00204 	addi	sp,sp,8
   99f94:	f800283a 	ret

00099f98 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   99f98:	defff904 	addi	sp,sp,-28
   99f9c:	dfc00615 	stw	ra,24(sp)
   99fa0:	df000515 	stw	fp,20(sp)
   99fa4:	df000504 	addi	fp,sp,20
   99fa8:	e13ffd15 	stw	r4,-12(fp)
   99fac:	e17ffe15 	stw	r5,-8(fp)
   99fb0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   99fb4:	e0bffd17 	ldw	r2,-12(fp)
   99fb8:	10000816 	blt	r2,zero,99fdc <write+0x44>
   99fbc:	01400304 	movi	r5,12
   99fc0:	e13ffd17 	ldw	r4,-12(fp)
   99fc4:	00822140 	call	82214 <__mulsi3>
   99fc8:	1007883a 	mov	r3,r2
   99fcc:	008002b4 	movhi	r2,10
   99fd0:	10bc8504 	addi	r2,r2,-3564
   99fd4:	1885883a 	add	r2,r3,r2
   99fd8:	00000106 	br	99fe0 <write+0x48>
   99fdc:	0005883a 	mov	r2,zero
   99fe0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   99fe4:	e0bffb17 	ldw	r2,-20(fp)
   99fe8:	10002126 	beq	r2,zero,9a070 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   99fec:	e0bffb17 	ldw	r2,-20(fp)
   99ff0:	10800217 	ldw	r2,8(r2)
   99ff4:	108000cc 	andi	r2,r2,3
   99ff8:	10001826 	beq	r2,zero,9a05c <write+0xc4>
   99ffc:	e0bffb17 	ldw	r2,-20(fp)
   9a000:	10800017 	ldw	r2,0(r2)
   9a004:	10800617 	ldw	r2,24(r2)
   9a008:	10001426 	beq	r2,zero,9a05c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   9a00c:	e0bffb17 	ldw	r2,-20(fp)
   9a010:	10800017 	ldw	r2,0(r2)
   9a014:	10800617 	ldw	r2,24(r2)
   9a018:	e0ffff17 	ldw	r3,-4(fp)
   9a01c:	180d883a 	mov	r6,r3
   9a020:	e17ffe17 	ldw	r5,-8(fp)
   9a024:	e13ffb17 	ldw	r4,-20(fp)
   9a028:	103ee83a 	callr	r2
   9a02c:	e0bffc15 	stw	r2,-16(fp)
   9a030:	e0bffc17 	ldw	r2,-16(fp)
   9a034:	1000070e 	bge	r2,zero,9a054 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   9a038:	0099f5c0 	call	99f5c <alt_get_errno>
   9a03c:	1007883a 	mov	r3,r2
   9a040:	e0bffc17 	ldw	r2,-16(fp)
   9a044:	0085c83a 	sub	r2,zero,r2
   9a048:	18800015 	stw	r2,0(r3)
        return -1;
   9a04c:	00bfffc4 	movi	r2,-1
   9a050:	00000c06 	br	9a084 <write+0xec>
      }
      return rval;
   9a054:	e0bffc17 	ldw	r2,-16(fp)
   9a058:	00000a06 	br	9a084 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   9a05c:	0099f5c0 	call	99f5c <alt_get_errno>
   9a060:	1007883a 	mov	r3,r2
   9a064:	00800344 	movi	r2,13
   9a068:	18800015 	stw	r2,0(r3)
   9a06c:	00000406 	br	9a080 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   9a070:	0099f5c0 	call	99f5c <alt_get_errno>
   9a074:	1007883a 	mov	r3,r2
   9a078:	00801444 	movi	r2,81
   9a07c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   9a080:	00bfffc4 	movi	r2,-1
}
   9a084:	e037883a 	mov	sp,fp
   9a088:	dfc00117 	ldw	ra,4(sp)
   9a08c:	df000017 	ldw	fp,0(sp)
   9a090:	dec00204 	addi	sp,sp,8
   9a094:	f800283a 	ret

0009a098 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   9a098:	defffd04 	addi	sp,sp,-12
   9a09c:	dfc00215 	stw	ra,8(sp)
   9a0a0:	df000115 	stw	fp,4(sp)
   9a0a4:	df000104 	addi	fp,sp,4
   9a0a8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   9a0ac:	d1600a04 	addi	r5,gp,-32728
   9a0b0:	e13fff17 	ldw	r4,-4(fp)
   9a0b4:	009c80c0 	call	9c80c <alt_dev_llist_insert>
}
   9a0b8:	e037883a 	mov	sp,fp
   9a0bc:	dfc00117 	ldw	ra,4(sp)
   9a0c0:	df000017 	ldw	fp,0(sp)
   9a0c4:	dec00204 	addi	sp,sp,8
   9a0c8:	f800283a 	ret

0009a0cc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   9a0cc:	defffd04 	addi	sp,sp,-12
   9a0d0:	dfc00215 	stw	ra,8(sp)
   9a0d4:	df000115 	stw	fp,4(sp)
   9a0d8:	df000104 	addi	fp,sp,4
   9a0dc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   9a0e0:	009d1280 	call	9d128 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   9a0e4:	00800044 	movi	r2,1
   9a0e8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   9a0ec:	0001883a 	nop
   9a0f0:	e037883a 	mov	sp,fp
   9a0f4:	dfc00117 	ldw	ra,4(sp)
   9a0f8:	df000017 	ldw	fp,0(sp)
   9a0fc:	dec00204 	addi	sp,sp,8
   9a100:	f800283a 	ret

0009a104 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   9a104:	defffe04 	addi	sp,sp,-8
   9a108:	dfc00115 	stw	ra,4(sp)
   9a10c:	df000015 	stw	fp,0(sp)
   9a110:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_MAIN, timer_main);
   9a114:	01c0fa04 	movi	r7,1000
   9a118:	01800184 	movi	r6,6
   9a11c:	000b883a 	mov	r5,zero
   9a120:	01000534 	movhi	r4,20
   9a124:	21040804 	addi	r4,r4,4128
   9a128:	009ac7c0 	call	9ac7c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_POLL, timer_poll);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   9a12c:	000d883a 	mov	r6,zero
   9a130:	000b883a 	mov	r5,zero
   9a134:	010002b4 	movhi	r4,10
   9a138:	213cef04 	addi	r4,r4,-3140
   9a13c:	009a3040 	call	9a304 <altera_avalon_jtag_uart_init>
   9a140:	010002b4 	movhi	r4,10
   9a144:	213ce504 	addi	r4,r4,-3180
   9a148:	009a0980 	call	9a098 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   9a14c:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
   9a150:	01800144 	movi	r6,5
   9a154:	000b883a 	mov	r5,zero
   9a158:	010002b4 	movhi	r4,10
   9a15c:	21010704 	addi	r4,r4,1052
   9a160:	009ae000 	call	9ae00 <altera_avalon_uart_init>
   9a164:	010002b4 	movhi	r4,10
   9a168:	2100fd04 	addi	r4,r4,1012
   9a16c:	009a0980 	call	9a098 <alt_dev_reg>
    ALTERA_ONCHIP_FLASH_INIT ( ONCHIP_FLASH, onchip_flash);
   9a170:	010002b4 	movhi	r4,10
   9a174:	21012e04 	addi	r4,r4,1208
   9a178:	009be780 	call	9be78 <altera_onchip_flash_init>
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER_SPI, accelerometer_spi);
   9a17c:	010002b4 	movhi	r4,10
   9a180:	21016e04 	addi	r4,r4,1464
   9a184:	009a0980 	call	9a098 <alt_dev_reg>
}
   9a188:	0001883a 	nop
   9a18c:	e037883a 	mov	sp,fp
   9a190:	dfc00117 	ldw	ra,4(sp)
   9a194:	df000017 	ldw	fp,0(sp)
   9a198:	dec00204 	addi	sp,sp,8
   9a19c:	f800283a 	ret

0009a1a0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   9a1a0:	defffa04 	addi	sp,sp,-24
   9a1a4:	dfc00515 	stw	ra,20(sp)
   9a1a8:	df000415 	stw	fp,16(sp)
   9a1ac:	df000404 	addi	fp,sp,16
   9a1b0:	e13ffd15 	stw	r4,-12(fp)
   9a1b4:	e17ffe15 	stw	r5,-8(fp)
   9a1b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   9a1bc:	e0bffd17 	ldw	r2,-12(fp)
   9a1c0:	10800017 	ldw	r2,0(r2)
   9a1c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   9a1c8:	e0bffc17 	ldw	r2,-16(fp)
   9a1cc:	10c00a04 	addi	r3,r2,40
   9a1d0:	e0bffd17 	ldw	r2,-12(fp)
   9a1d4:	10800217 	ldw	r2,8(r2)
   9a1d8:	100f883a 	mov	r7,r2
   9a1dc:	e1bfff17 	ldw	r6,-4(fp)
   9a1e0:	e17ffe17 	ldw	r5,-8(fp)
   9a1e4:	1809883a 	mov	r4,r3
   9a1e8:	009a7c00 	call	9a7c0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   9a1ec:	e037883a 	mov	sp,fp
   9a1f0:	dfc00117 	ldw	ra,4(sp)
   9a1f4:	df000017 	ldw	fp,0(sp)
   9a1f8:	dec00204 	addi	sp,sp,8
   9a1fc:	f800283a 	ret

0009a200 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   9a200:	defffa04 	addi	sp,sp,-24
   9a204:	dfc00515 	stw	ra,20(sp)
   9a208:	df000415 	stw	fp,16(sp)
   9a20c:	df000404 	addi	fp,sp,16
   9a210:	e13ffd15 	stw	r4,-12(fp)
   9a214:	e17ffe15 	stw	r5,-8(fp)
   9a218:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   9a21c:	e0bffd17 	ldw	r2,-12(fp)
   9a220:	10800017 	ldw	r2,0(r2)
   9a224:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   9a228:	e0bffc17 	ldw	r2,-16(fp)
   9a22c:	10c00a04 	addi	r3,r2,40
   9a230:	e0bffd17 	ldw	r2,-12(fp)
   9a234:	10800217 	ldw	r2,8(r2)
   9a238:	100f883a 	mov	r7,r2
   9a23c:	e1bfff17 	ldw	r6,-4(fp)
   9a240:	e17ffe17 	ldw	r5,-8(fp)
   9a244:	1809883a 	mov	r4,r3
   9a248:	009a9dc0 	call	9a9dc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   9a24c:	e037883a 	mov	sp,fp
   9a250:	dfc00117 	ldw	ra,4(sp)
   9a254:	df000017 	ldw	fp,0(sp)
   9a258:	dec00204 	addi	sp,sp,8
   9a25c:	f800283a 	ret

0009a260 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   9a260:	defffc04 	addi	sp,sp,-16
   9a264:	dfc00315 	stw	ra,12(sp)
   9a268:	df000215 	stw	fp,8(sp)
   9a26c:	df000204 	addi	fp,sp,8
   9a270:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   9a274:	e0bfff17 	ldw	r2,-4(fp)
   9a278:	10800017 	ldw	r2,0(r2)
   9a27c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   9a280:	e0bffe17 	ldw	r2,-8(fp)
   9a284:	10c00a04 	addi	r3,r2,40
   9a288:	e0bfff17 	ldw	r2,-4(fp)
   9a28c:	10800217 	ldw	r2,8(r2)
   9a290:	100b883a 	mov	r5,r2
   9a294:	1809883a 	mov	r4,r3
   9a298:	009a6680 	call	9a668 <altera_avalon_jtag_uart_close>
}
   9a29c:	e037883a 	mov	sp,fp
   9a2a0:	dfc00117 	ldw	ra,4(sp)
   9a2a4:	df000017 	ldw	fp,0(sp)
   9a2a8:	dec00204 	addi	sp,sp,8
   9a2ac:	f800283a 	ret

0009a2b0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   9a2b0:	defffa04 	addi	sp,sp,-24
   9a2b4:	dfc00515 	stw	ra,20(sp)
   9a2b8:	df000415 	stw	fp,16(sp)
   9a2bc:	df000404 	addi	fp,sp,16
   9a2c0:	e13ffd15 	stw	r4,-12(fp)
   9a2c4:	e17ffe15 	stw	r5,-8(fp)
   9a2c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   9a2cc:	e0bffd17 	ldw	r2,-12(fp)
   9a2d0:	10800017 	ldw	r2,0(r2)
   9a2d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   9a2d8:	e0bffc17 	ldw	r2,-16(fp)
   9a2dc:	10800a04 	addi	r2,r2,40
   9a2e0:	e1bfff17 	ldw	r6,-4(fp)
   9a2e4:	e17ffe17 	ldw	r5,-8(fp)
   9a2e8:	1009883a 	mov	r4,r2
   9a2ec:	009a6d00 	call	9a6d0 <altera_avalon_jtag_uart_ioctl>
}
   9a2f0:	e037883a 	mov	sp,fp
   9a2f4:	dfc00117 	ldw	ra,4(sp)
   9a2f8:	df000017 	ldw	fp,0(sp)
   9a2fc:	dec00204 	addi	sp,sp,8
   9a300:	f800283a 	ret

0009a304 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   9a304:	defffb04 	addi	sp,sp,-20
   9a308:	dfc00415 	stw	ra,16(sp)
   9a30c:	df000315 	stw	fp,12(sp)
   9a310:	df000304 	addi	fp,sp,12
   9a314:	e13ffd15 	stw	r4,-12(fp)
   9a318:	e17ffe15 	stw	r5,-8(fp)
   9a31c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   9a320:	e0bffd17 	ldw	r2,-12(fp)
   9a324:	00c00044 	movi	r3,1
   9a328:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   9a32c:	e0bffd17 	ldw	r2,-12(fp)
   9a330:	10800017 	ldw	r2,0(r2)
   9a334:	10800104 	addi	r2,r2,4
   9a338:	1007883a 	mov	r3,r2
   9a33c:	e0bffd17 	ldw	r2,-12(fp)
   9a340:	10800817 	ldw	r2,32(r2)
   9a344:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   9a348:	e0bfff17 	ldw	r2,-4(fp)
   9a34c:	018002b4 	movhi	r6,10
   9a350:	31a8ee04 	addi	r6,r6,-23624
   9a354:	e17ffd17 	ldw	r5,-12(fp)
   9a358:	1009883a 	mov	r4,r2
   9a35c:	009cb800 	call	9cb80 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   9a360:	e0bffd17 	ldw	r2,-12(fp)
   9a364:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   9a368:	e0bffd17 	ldw	r2,-12(fp)
   9a36c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   9a370:	d0e76017 	ldw	r3,-25216(gp)
   9a374:	e1fffd17 	ldw	r7,-12(fp)
   9a378:	018002b4 	movhi	r6,10
   9a37c:	31a97204 	addi	r6,r6,-23096
   9a380:	180b883a 	mov	r5,r3
   9a384:	1009883a 	mov	r4,r2
   9a388:	009c5040 	call	9c504 <alt_alarm_start>
   9a38c:	1000040e 	bge	r2,zero,9a3a0 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   9a390:	e0fffd17 	ldw	r3,-12(fp)
   9a394:	00a00034 	movhi	r2,32768
   9a398:	10bfffc4 	addi	r2,r2,-1
   9a39c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   9a3a0:	0001883a 	nop
   9a3a4:	e037883a 	mov	sp,fp
   9a3a8:	dfc00117 	ldw	ra,4(sp)
   9a3ac:	df000017 	ldw	fp,0(sp)
   9a3b0:	dec00204 	addi	sp,sp,8
   9a3b4:	f800283a 	ret

0009a3b8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   9a3b8:	defff704 	addi	sp,sp,-36
   9a3bc:	df000815 	stw	fp,32(sp)
   9a3c0:	df000804 	addi	fp,sp,32
   9a3c4:	e13ffe15 	stw	r4,-8(fp)
   9a3c8:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   9a3cc:	e0bffe17 	ldw	r2,-8(fp)
   9a3d0:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
   9a3d4:	e0bffa17 	ldw	r2,-24(fp)
   9a3d8:	10800017 	ldw	r2,0(r2)
   9a3dc:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   9a3e0:	e0bffb17 	ldw	r2,-20(fp)
   9a3e4:	10800104 	addi	r2,r2,4
   9a3e8:	10800037 	ldwio	r2,0(r2)
   9a3ec:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   9a3f0:	e0bffc17 	ldw	r2,-16(fp)
   9a3f4:	1080c00c 	andi	r2,r2,768
   9a3f8:	10006d26 	beq	r2,zero,9a5b0 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   9a3fc:	e0bffc17 	ldw	r2,-16(fp)
   9a400:	1080400c 	andi	r2,r2,256
   9a404:	10003526 	beq	r2,zero,9a4dc <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   9a408:	00800074 	movhi	r2,1
   9a40c:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   9a410:	e0bffa17 	ldw	r2,-24(fp)
   9a414:	10800a17 	ldw	r2,40(r2)
   9a418:	10800044 	addi	r2,r2,1
   9a41c:	1081ffcc 	andi	r2,r2,2047
   9a420:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
   9a424:	e0bffa17 	ldw	r2,-24(fp)
   9a428:	10c00b17 	ldw	r3,44(r2)
   9a42c:	e0bffd17 	ldw	r2,-12(fp)
   9a430:	18801526 	beq	r3,r2,9a488 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   9a434:	e0bffb17 	ldw	r2,-20(fp)
   9a438:	10800037 	ldwio	r2,0(r2)
   9a43c:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   9a440:	e0bff817 	ldw	r2,-32(fp)
   9a444:	10a0000c 	andi	r2,r2,32768
   9a448:	10001126 	beq	r2,zero,9a490 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   9a44c:	e0bffa17 	ldw	r2,-24(fp)
   9a450:	10800a17 	ldw	r2,40(r2)
   9a454:	e0fff817 	ldw	r3,-32(fp)
   9a458:	1809883a 	mov	r4,r3
   9a45c:	e0fffa17 	ldw	r3,-24(fp)
   9a460:	1885883a 	add	r2,r3,r2
   9a464:	10800e04 	addi	r2,r2,56
   9a468:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   9a46c:	e0bffa17 	ldw	r2,-24(fp)
   9a470:	10800a17 	ldw	r2,40(r2)
   9a474:	10800044 	addi	r2,r2,1
   9a478:	10c1ffcc 	andi	r3,r2,2047
   9a47c:	e0bffa17 	ldw	r2,-24(fp)
   9a480:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   9a484:	003fe206 	br	9a410 <__ram_exceptions_end+0xfff7a1dc>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   9a488:	0001883a 	nop
   9a48c:	00000106 	br	9a494 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   9a490:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   9a494:	e0bff817 	ldw	r2,-32(fp)
   9a498:	10bfffec 	andhi	r2,r2,65535
   9a49c:	10000f26 	beq	r2,zero,9a4dc <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   9a4a0:	e0bffa17 	ldw	r2,-24(fp)
   9a4a4:	10c00817 	ldw	r3,32(r2)
   9a4a8:	00bfff84 	movi	r2,-2
   9a4ac:	1886703a 	and	r3,r3,r2
   9a4b0:	e0bffa17 	ldw	r2,-24(fp)
   9a4b4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   9a4b8:	e0bffb17 	ldw	r2,-20(fp)
   9a4bc:	10800104 	addi	r2,r2,4
   9a4c0:	1007883a 	mov	r3,r2
   9a4c4:	e0bffa17 	ldw	r2,-24(fp)
   9a4c8:	10800817 	ldw	r2,32(r2)
   9a4cc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   9a4d0:	e0bffb17 	ldw	r2,-20(fp)
   9a4d4:	10800104 	addi	r2,r2,4
   9a4d8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   9a4dc:	e0bffc17 	ldw	r2,-16(fp)
   9a4e0:	1080800c 	andi	r2,r2,512
   9a4e4:	103fbe26 	beq	r2,zero,9a3e0 <__ram_exceptions_end+0xfff7a1ac>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   9a4e8:	e0bffc17 	ldw	r2,-16(fp)
   9a4ec:	1004d43a 	srli	r2,r2,16
   9a4f0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   9a4f4:	00001406 	br	9a548 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   9a4f8:	e0bffb17 	ldw	r2,-20(fp)
   9a4fc:	e0fffa17 	ldw	r3,-24(fp)
   9a500:	18c00d17 	ldw	r3,52(r3)
   9a504:	e13ffa17 	ldw	r4,-24(fp)
   9a508:	20c7883a 	add	r3,r4,r3
   9a50c:	18c20e04 	addi	r3,r3,2104
   9a510:	18c00003 	ldbu	r3,0(r3)
   9a514:	18c03fcc 	andi	r3,r3,255
   9a518:	18c0201c 	xori	r3,r3,128
   9a51c:	18ffe004 	addi	r3,r3,-128
   9a520:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   9a524:	e0bffa17 	ldw	r2,-24(fp)
   9a528:	10800d17 	ldw	r2,52(r2)
   9a52c:	10800044 	addi	r2,r2,1
   9a530:	10c1ffcc 	andi	r3,r2,2047
   9a534:	e0bffa17 	ldw	r2,-24(fp)
   9a538:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   9a53c:	e0bff917 	ldw	r2,-28(fp)
   9a540:	10bfffc4 	addi	r2,r2,-1
   9a544:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   9a548:	e0bff917 	ldw	r2,-28(fp)
   9a54c:	10000526 	beq	r2,zero,9a564 <altera_avalon_jtag_uart_irq+0x1ac>
   9a550:	e0bffa17 	ldw	r2,-24(fp)
   9a554:	10c00d17 	ldw	r3,52(r2)
   9a558:	e0bffa17 	ldw	r2,-24(fp)
   9a55c:	10800c17 	ldw	r2,48(r2)
   9a560:	18bfe51e 	bne	r3,r2,9a4f8 <__ram_exceptions_end+0xfff7a2c4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   9a564:	e0bff917 	ldw	r2,-28(fp)
   9a568:	103f9d26 	beq	r2,zero,9a3e0 <__ram_exceptions_end+0xfff7a1ac>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   9a56c:	e0bffa17 	ldw	r2,-24(fp)
   9a570:	10c00817 	ldw	r3,32(r2)
   9a574:	00bfff44 	movi	r2,-3
   9a578:	1886703a 	and	r3,r3,r2
   9a57c:	e0bffa17 	ldw	r2,-24(fp)
   9a580:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   9a584:	e0bffa17 	ldw	r2,-24(fp)
   9a588:	10800017 	ldw	r2,0(r2)
   9a58c:	10800104 	addi	r2,r2,4
   9a590:	1007883a 	mov	r3,r2
   9a594:	e0bffa17 	ldw	r2,-24(fp)
   9a598:	10800817 	ldw	r2,32(r2)
   9a59c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   9a5a0:	e0bffb17 	ldw	r2,-20(fp)
   9a5a4:	10800104 	addi	r2,r2,4
   9a5a8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   9a5ac:	003f8c06 	br	9a3e0 <__ram_exceptions_end+0xfff7a1ac>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   9a5b0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   9a5b4:	0001883a 	nop
   9a5b8:	e037883a 	mov	sp,fp
   9a5bc:	df000017 	ldw	fp,0(sp)
   9a5c0:	dec00104 	addi	sp,sp,4
   9a5c4:	f800283a 	ret

0009a5c8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   9a5c8:	defff804 	addi	sp,sp,-32
   9a5cc:	df000715 	stw	fp,28(sp)
   9a5d0:	df000704 	addi	fp,sp,28
   9a5d4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   9a5d8:	e0bffb17 	ldw	r2,-20(fp)
   9a5dc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   9a5e0:	e0bff917 	ldw	r2,-28(fp)
   9a5e4:	10800017 	ldw	r2,0(r2)
   9a5e8:	10800104 	addi	r2,r2,4
   9a5ec:	10800037 	ldwio	r2,0(r2)
   9a5f0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   9a5f4:	e0bffa17 	ldw	r2,-24(fp)
   9a5f8:	1081000c 	andi	r2,r2,1024
   9a5fc:	10000b26 	beq	r2,zero,9a62c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   9a600:	e0bff917 	ldw	r2,-28(fp)
   9a604:	10800017 	ldw	r2,0(r2)
   9a608:	10800104 	addi	r2,r2,4
   9a60c:	1007883a 	mov	r3,r2
   9a610:	e0bff917 	ldw	r2,-28(fp)
   9a614:	10800817 	ldw	r2,32(r2)
   9a618:	10810014 	ori	r2,r2,1024
   9a61c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   9a620:	e0bff917 	ldw	r2,-28(fp)
   9a624:	10000915 	stw	zero,36(r2)
   9a628:	00000a06 	br	9a654 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   9a62c:	e0bff917 	ldw	r2,-28(fp)
   9a630:	10c00917 	ldw	r3,36(r2)
   9a634:	00a00034 	movhi	r2,32768
   9a638:	10bfff04 	addi	r2,r2,-4
   9a63c:	10c00536 	bltu	r2,r3,9a654 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   9a640:	e0bff917 	ldw	r2,-28(fp)
   9a644:	10800917 	ldw	r2,36(r2)
   9a648:	10c00044 	addi	r3,r2,1
   9a64c:	e0bff917 	ldw	r2,-28(fp)
   9a650:	10c00915 	stw	r3,36(r2)
   9a654:	d0a76017 	ldw	r2,-25216(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   9a658:	e037883a 	mov	sp,fp
   9a65c:	df000017 	ldw	fp,0(sp)
   9a660:	dec00104 	addi	sp,sp,4
   9a664:	f800283a 	ret

0009a668 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   9a668:	defffd04 	addi	sp,sp,-12
   9a66c:	df000215 	stw	fp,8(sp)
   9a670:	df000204 	addi	fp,sp,8
   9a674:	e13ffe15 	stw	r4,-8(fp)
   9a678:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   9a67c:	00000506 	br	9a694 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   9a680:	e0bfff17 	ldw	r2,-4(fp)
   9a684:	1090000c 	andi	r2,r2,16384
   9a688:	10000226 	beq	r2,zero,9a694 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   9a68c:	00bffd44 	movi	r2,-11
   9a690:	00000b06 	br	9a6c0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   9a694:	e0bffe17 	ldw	r2,-8(fp)
   9a698:	10c00d17 	ldw	r3,52(r2)
   9a69c:	e0bffe17 	ldw	r2,-8(fp)
   9a6a0:	10800c17 	ldw	r2,48(r2)
   9a6a4:	18800526 	beq	r3,r2,9a6bc <altera_avalon_jtag_uart_close+0x54>
   9a6a8:	e0bffe17 	ldw	r2,-8(fp)
   9a6ac:	10c00917 	ldw	r3,36(r2)
   9a6b0:	e0bffe17 	ldw	r2,-8(fp)
   9a6b4:	10800117 	ldw	r2,4(r2)
   9a6b8:	18bff136 	bltu	r3,r2,9a680 <__ram_exceptions_end+0xfff7a44c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   9a6bc:	0005883a 	mov	r2,zero
}
   9a6c0:	e037883a 	mov	sp,fp
   9a6c4:	df000017 	ldw	fp,0(sp)
   9a6c8:	dec00104 	addi	sp,sp,4
   9a6cc:	f800283a 	ret

0009a6d0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   9a6d0:	defffa04 	addi	sp,sp,-24
   9a6d4:	df000515 	stw	fp,20(sp)
   9a6d8:	df000504 	addi	fp,sp,20
   9a6dc:	e13ffd15 	stw	r4,-12(fp)
   9a6e0:	e17ffe15 	stw	r5,-8(fp)
   9a6e4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   9a6e8:	00bff9c4 	movi	r2,-25
   9a6ec:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   9a6f0:	e0bffe17 	ldw	r2,-8(fp)
   9a6f4:	10da8060 	cmpeqi	r3,r2,27137
   9a6f8:	1800031e 	bne	r3,zero,9a708 <altera_avalon_jtag_uart_ioctl+0x38>
   9a6fc:	109a80a0 	cmpeqi	r2,r2,27138
   9a700:	1000181e 	bne	r2,zero,9a764 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   9a704:	00002906 	br	9a7ac <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   9a708:	e0bffd17 	ldw	r2,-12(fp)
   9a70c:	10c00117 	ldw	r3,4(r2)
   9a710:	00a00034 	movhi	r2,32768
   9a714:	10bfffc4 	addi	r2,r2,-1
   9a718:	18802126 	beq	r3,r2,9a7a0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   9a71c:	e0bfff17 	ldw	r2,-4(fp)
   9a720:	10800017 	ldw	r2,0(r2)
   9a724:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   9a728:	e0bffc17 	ldw	r2,-16(fp)
   9a72c:	10800090 	cmplti	r2,r2,2
   9a730:	1000061e 	bne	r2,zero,9a74c <altera_avalon_jtag_uart_ioctl+0x7c>
   9a734:	e0fffc17 	ldw	r3,-16(fp)
   9a738:	00a00034 	movhi	r2,32768
   9a73c:	10bfffc4 	addi	r2,r2,-1
   9a740:	18800226 	beq	r3,r2,9a74c <altera_avalon_jtag_uart_ioctl+0x7c>
   9a744:	e0bffc17 	ldw	r2,-16(fp)
   9a748:	00000206 	br	9a754 <altera_avalon_jtag_uart_ioctl+0x84>
   9a74c:	00a00034 	movhi	r2,32768
   9a750:	10bfff84 	addi	r2,r2,-2
   9a754:	e0fffd17 	ldw	r3,-12(fp)
   9a758:	18800115 	stw	r2,4(r3)
      rc = 0;
   9a75c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   9a760:	00000f06 	br	9a7a0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   9a764:	e0bffd17 	ldw	r2,-12(fp)
   9a768:	10c00117 	ldw	r3,4(r2)
   9a76c:	00a00034 	movhi	r2,32768
   9a770:	10bfffc4 	addi	r2,r2,-1
   9a774:	18800c26 	beq	r3,r2,9a7a8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   9a778:	e0bffd17 	ldw	r2,-12(fp)
   9a77c:	10c00917 	ldw	r3,36(r2)
   9a780:	e0bffd17 	ldw	r2,-12(fp)
   9a784:	10800117 	ldw	r2,4(r2)
   9a788:	1885803a 	cmpltu	r2,r3,r2
   9a78c:	10c03fcc 	andi	r3,r2,255
   9a790:	e0bfff17 	ldw	r2,-4(fp)
   9a794:	10c00015 	stw	r3,0(r2)
      rc = 0;
   9a798:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   9a79c:	00000206 	br	9a7a8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   9a7a0:	0001883a 	nop
   9a7a4:	00000106 	br	9a7ac <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   9a7a8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   9a7ac:	e0bffb17 	ldw	r2,-20(fp)
}
   9a7b0:	e037883a 	mov	sp,fp
   9a7b4:	df000017 	ldw	fp,0(sp)
   9a7b8:	dec00104 	addi	sp,sp,4
   9a7bc:	f800283a 	ret

0009a7c0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   9a7c0:	defff304 	addi	sp,sp,-52
   9a7c4:	dfc00c15 	stw	ra,48(sp)
   9a7c8:	df000b15 	stw	fp,44(sp)
   9a7cc:	df000b04 	addi	fp,sp,44
   9a7d0:	e13ffc15 	stw	r4,-16(fp)
   9a7d4:	e17ffd15 	stw	r5,-12(fp)
   9a7d8:	e1bffe15 	stw	r6,-8(fp)
   9a7dc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   9a7e0:	e0bffd17 	ldw	r2,-12(fp)
   9a7e4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   9a7e8:	00004706 	br	9a908 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   9a7ec:	e0bffc17 	ldw	r2,-16(fp)
   9a7f0:	10800a17 	ldw	r2,40(r2)
   9a7f4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   9a7f8:	e0bffc17 	ldw	r2,-16(fp)
   9a7fc:	10800b17 	ldw	r2,44(r2)
   9a800:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   9a804:	e0fff717 	ldw	r3,-36(fp)
   9a808:	e0bff817 	ldw	r2,-32(fp)
   9a80c:	18800536 	bltu	r3,r2,9a824 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   9a810:	e0fff717 	ldw	r3,-36(fp)
   9a814:	e0bff817 	ldw	r2,-32(fp)
   9a818:	1885c83a 	sub	r2,r3,r2
   9a81c:	e0bff615 	stw	r2,-40(fp)
   9a820:	00000406 	br	9a834 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   9a824:	00c20004 	movi	r3,2048
   9a828:	e0bff817 	ldw	r2,-32(fp)
   9a82c:	1885c83a 	sub	r2,r3,r2
   9a830:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   9a834:	e0bff617 	ldw	r2,-40(fp)
   9a838:	10001e26 	beq	r2,zero,9a8b4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   9a83c:	e0fffe17 	ldw	r3,-8(fp)
   9a840:	e0bff617 	ldw	r2,-40(fp)
   9a844:	1880022e 	bgeu	r3,r2,9a850 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   9a848:	e0bffe17 	ldw	r2,-8(fp)
   9a84c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   9a850:	e0bffc17 	ldw	r2,-16(fp)
   9a854:	10c00e04 	addi	r3,r2,56
   9a858:	e0bff817 	ldw	r2,-32(fp)
   9a85c:	1885883a 	add	r2,r3,r2
   9a860:	e1bff617 	ldw	r6,-40(fp)
   9a864:	100b883a 	mov	r5,r2
   9a868:	e13ff517 	ldw	r4,-44(fp)
   9a86c:	0082be40 	call	82be4 <memcpy>
      ptr   += n;
   9a870:	e0fff517 	ldw	r3,-44(fp)
   9a874:	e0bff617 	ldw	r2,-40(fp)
   9a878:	1885883a 	add	r2,r3,r2
   9a87c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   9a880:	e0fffe17 	ldw	r3,-8(fp)
   9a884:	e0bff617 	ldw	r2,-40(fp)
   9a888:	1885c83a 	sub	r2,r3,r2
   9a88c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   9a890:	e0fff817 	ldw	r3,-32(fp)
   9a894:	e0bff617 	ldw	r2,-40(fp)
   9a898:	1885883a 	add	r2,r3,r2
   9a89c:	10c1ffcc 	andi	r3,r2,2047
   9a8a0:	e0bffc17 	ldw	r2,-16(fp)
   9a8a4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   9a8a8:	e0bffe17 	ldw	r2,-8(fp)
   9a8ac:	00bfcf16 	blt	zero,r2,9a7ec <__ram_exceptions_end+0xfff7a5b8>
   9a8b0:	00000106 	br	9a8b8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   9a8b4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   9a8b8:	e0fff517 	ldw	r3,-44(fp)
   9a8bc:	e0bffd17 	ldw	r2,-12(fp)
   9a8c0:	1880141e 	bne	r3,r2,9a914 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   9a8c4:	e0bfff17 	ldw	r2,-4(fp)
   9a8c8:	1090000c 	andi	r2,r2,16384
   9a8cc:	1000131e 	bne	r2,zero,9a91c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   9a8d0:	0001883a 	nop
   9a8d4:	e0bffc17 	ldw	r2,-16(fp)
   9a8d8:	10c00a17 	ldw	r3,40(r2)
   9a8dc:	e0bff717 	ldw	r2,-36(fp)
   9a8e0:	1880051e 	bne	r3,r2,9a8f8 <altera_avalon_jtag_uart_read+0x138>
   9a8e4:	e0bffc17 	ldw	r2,-16(fp)
   9a8e8:	10c00917 	ldw	r3,36(r2)
   9a8ec:	e0bffc17 	ldw	r2,-16(fp)
   9a8f0:	10800117 	ldw	r2,4(r2)
   9a8f4:	18bff736 	bltu	r3,r2,9a8d4 <__ram_exceptions_end+0xfff7a6a0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   9a8f8:	e0bffc17 	ldw	r2,-16(fp)
   9a8fc:	10c00a17 	ldw	r3,40(r2)
   9a900:	e0bff717 	ldw	r2,-36(fp)
   9a904:	18800726 	beq	r3,r2,9a924 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   9a908:	e0bffe17 	ldw	r2,-8(fp)
   9a90c:	00bfb716 	blt	zero,r2,9a7ec <__ram_exceptions_end+0xfff7a5b8>
   9a910:	00000506 	br	9a928 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   9a914:	0001883a 	nop
   9a918:	00000306 	br	9a928 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   9a91c:	0001883a 	nop
   9a920:	00000106 	br	9a928 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   9a924:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   9a928:	e0fff517 	ldw	r3,-44(fp)
   9a92c:	e0bffd17 	ldw	r2,-12(fp)
   9a930:	18801826 	beq	r3,r2,9a994 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9a934:	0005303a 	rdctl	r2,status
   9a938:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9a93c:	e0fffb17 	ldw	r3,-20(fp)
   9a940:	00bfff84 	movi	r2,-2
   9a944:	1884703a 	and	r2,r3,r2
   9a948:	1001703a 	wrctl	status,r2
  
  return context;
   9a94c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   9a950:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   9a954:	e0bffc17 	ldw	r2,-16(fp)
   9a958:	10800817 	ldw	r2,32(r2)
   9a95c:	10c00054 	ori	r3,r2,1
   9a960:	e0bffc17 	ldw	r2,-16(fp)
   9a964:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   9a968:	e0bffc17 	ldw	r2,-16(fp)
   9a96c:	10800017 	ldw	r2,0(r2)
   9a970:	10800104 	addi	r2,r2,4
   9a974:	1007883a 	mov	r3,r2
   9a978:	e0bffc17 	ldw	r2,-16(fp)
   9a97c:	10800817 	ldw	r2,32(r2)
   9a980:	18800035 	stwio	r2,0(r3)
   9a984:	e0bffa17 	ldw	r2,-24(fp)
   9a988:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9a98c:	e0bff917 	ldw	r2,-28(fp)
   9a990:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   9a994:	e0fff517 	ldw	r3,-44(fp)
   9a998:	e0bffd17 	ldw	r2,-12(fp)
   9a99c:	18800426 	beq	r3,r2,9a9b0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   9a9a0:	e0fff517 	ldw	r3,-44(fp)
   9a9a4:	e0bffd17 	ldw	r2,-12(fp)
   9a9a8:	1885c83a 	sub	r2,r3,r2
   9a9ac:	00000606 	br	9a9c8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   9a9b0:	e0bfff17 	ldw	r2,-4(fp)
   9a9b4:	1090000c 	andi	r2,r2,16384
   9a9b8:	10000226 	beq	r2,zero,9a9c4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   9a9bc:	00bffd44 	movi	r2,-11
   9a9c0:	00000106 	br	9a9c8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   9a9c4:	00bffec4 	movi	r2,-5
}
   9a9c8:	e037883a 	mov	sp,fp
   9a9cc:	dfc00117 	ldw	ra,4(sp)
   9a9d0:	df000017 	ldw	fp,0(sp)
   9a9d4:	dec00204 	addi	sp,sp,8
   9a9d8:	f800283a 	ret

0009a9dc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   9a9dc:	defff304 	addi	sp,sp,-52
   9a9e0:	dfc00c15 	stw	ra,48(sp)
   9a9e4:	df000b15 	stw	fp,44(sp)
   9a9e8:	df000b04 	addi	fp,sp,44
   9a9ec:	e13ffc15 	stw	r4,-16(fp)
   9a9f0:	e17ffd15 	stw	r5,-12(fp)
   9a9f4:	e1bffe15 	stw	r6,-8(fp)
   9a9f8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   9a9fc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   9aa00:	e0bffd17 	ldw	r2,-12(fp)
   9aa04:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   9aa08:	00003706 	br	9aae8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   9aa0c:	e0bffc17 	ldw	r2,-16(fp)
   9aa10:	10800c17 	ldw	r2,48(r2)
   9aa14:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   9aa18:	e0bffc17 	ldw	r2,-16(fp)
   9aa1c:	10800d17 	ldw	r2,52(r2)
   9aa20:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   9aa24:	e0fff917 	ldw	r3,-28(fp)
   9aa28:	e0bff517 	ldw	r2,-44(fp)
   9aa2c:	1880062e 	bgeu	r3,r2,9aa48 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   9aa30:	e0fff517 	ldw	r3,-44(fp)
   9aa34:	e0bff917 	ldw	r2,-28(fp)
   9aa38:	1885c83a 	sub	r2,r3,r2
   9aa3c:	10bfffc4 	addi	r2,r2,-1
   9aa40:	e0bff615 	stw	r2,-40(fp)
   9aa44:	00000b06 	br	9aa74 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   9aa48:	e0bff517 	ldw	r2,-44(fp)
   9aa4c:	10000526 	beq	r2,zero,9aa64 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   9aa50:	00c20004 	movi	r3,2048
   9aa54:	e0bff917 	ldw	r2,-28(fp)
   9aa58:	1885c83a 	sub	r2,r3,r2
   9aa5c:	e0bff615 	stw	r2,-40(fp)
   9aa60:	00000406 	br	9aa74 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   9aa64:	00c1ffc4 	movi	r3,2047
   9aa68:	e0bff917 	ldw	r2,-28(fp)
   9aa6c:	1885c83a 	sub	r2,r3,r2
   9aa70:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   9aa74:	e0bff617 	ldw	r2,-40(fp)
   9aa78:	10001e26 	beq	r2,zero,9aaf4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   9aa7c:	e0fffe17 	ldw	r3,-8(fp)
   9aa80:	e0bff617 	ldw	r2,-40(fp)
   9aa84:	1880022e 	bgeu	r3,r2,9aa90 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   9aa88:	e0bffe17 	ldw	r2,-8(fp)
   9aa8c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   9aa90:	e0bffc17 	ldw	r2,-16(fp)
   9aa94:	10c20e04 	addi	r3,r2,2104
   9aa98:	e0bff917 	ldw	r2,-28(fp)
   9aa9c:	1885883a 	add	r2,r3,r2
   9aaa0:	e1bff617 	ldw	r6,-40(fp)
   9aaa4:	e17ffd17 	ldw	r5,-12(fp)
   9aaa8:	1009883a 	mov	r4,r2
   9aaac:	0082be40 	call	82be4 <memcpy>
      ptr   += n;
   9aab0:	e0fffd17 	ldw	r3,-12(fp)
   9aab4:	e0bff617 	ldw	r2,-40(fp)
   9aab8:	1885883a 	add	r2,r3,r2
   9aabc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   9aac0:	e0fffe17 	ldw	r3,-8(fp)
   9aac4:	e0bff617 	ldw	r2,-40(fp)
   9aac8:	1885c83a 	sub	r2,r3,r2
   9aacc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   9aad0:	e0fff917 	ldw	r3,-28(fp)
   9aad4:	e0bff617 	ldw	r2,-40(fp)
   9aad8:	1885883a 	add	r2,r3,r2
   9aadc:	10c1ffcc 	andi	r3,r2,2047
   9aae0:	e0bffc17 	ldw	r2,-16(fp)
   9aae4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   9aae8:	e0bffe17 	ldw	r2,-8(fp)
   9aaec:	00bfc716 	blt	zero,r2,9aa0c <__ram_exceptions_end+0xfff7a7d8>
   9aaf0:	00000106 	br	9aaf8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   9aaf4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9aaf8:	0005303a 	rdctl	r2,status
   9aafc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9ab00:	e0fffb17 	ldw	r3,-20(fp)
   9ab04:	00bfff84 	movi	r2,-2
   9ab08:	1884703a 	and	r2,r3,r2
   9ab0c:	1001703a 	wrctl	status,r2
  
  return context;
   9ab10:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   9ab14:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   9ab18:	e0bffc17 	ldw	r2,-16(fp)
   9ab1c:	10800817 	ldw	r2,32(r2)
   9ab20:	10c00094 	ori	r3,r2,2
   9ab24:	e0bffc17 	ldw	r2,-16(fp)
   9ab28:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   9ab2c:	e0bffc17 	ldw	r2,-16(fp)
   9ab30:	10800017 	ldw	r2,0(r2)
   9ab34:	10800104 	addi	r2,r2,4
   9ab38:	1007883a 	mov	r3,r2
   9ab3c:	e0bffc17 	ldw	r2,-16(fp)
   9ab40:	10800817 	ldw	r2,32(r2)
   9ab44:	18800035 	stwio	r2,0(r3)
   9ab48:	e0bffa17 	ldw	r2,-24(fp)
   9ab4c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9ab50:	e0bff817 	ldw	r2,-32(fp)
   9ab54:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   9ab58:	e0bffe17 	ldw	r2,-8(fp)
   9ab5c:	0080100e 	bge	zero,r2,9aba0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   9ab60:	e0bfff17 	ldw	r2,-4(fp)
   9ab64:	1090000c 	andi	r2,r2,16384
   9ab68:	1000101e 	bne	r2,zero,9abac <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   9ab6c:	0001883a 	nop
   9ab70:	e0bffc17 	ldw	r2,-16(fp)
   9ab74:	10c00d17 	ldw	r3,52(r2)
   9ab78:	e0bff517 	ldw	r2,-44(fp)
   9ab7c:	1880051e 	bne	r3,r2,9ab94 <altera_avalon_jtag_uart_write+0x1b8>
   9ab80:	e0bffc17 	ldw	r2,-16(fp)
   9ab84:	10c00917 	ldw	r3,36(r2)
   9ab88:	e0bffc17 	ldw	r2,-16(fp)
   9ab8c:	10800117 	ldw	r2,4(r2)
   9ab90:	18bff736 	bltu	r3,r2,9ab70 <__ram_exceptions_end+0xfff7a93c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   9ab94:	e0bffc17 	ldw	r2,-16(fp)
   9ab98:	10800917 	ldw	r2,36(r2)
   9ab9c:	1000051e 	bne	r2,zero,9abb4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   9aba0:	e0bffe17 	ldw	r2,-8(fp)
   9aba4:	00bfd016 	blt	zero,r2,9aae8 <__ram_exceptions_end+0xfff7a8b4>
   9aba8:	00000306 	br	9abb8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   9abac:	0001883a 	nop
   9abb0:	00000106 	br	9abb8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   9abb4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   9abb8:	e0fffd17 	ldw	r3,-12(fp)
   9abbc:	e0bff717 	ldw	r2,-36(fp)
   9abc0:	18800426 	beq	r3,r2,9abd4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   9abc4:	e0fffd17 	ldw	r3,-12(fp)
   9abc8:	e0bff717 	ldw	r2,-36(fp)
   9abcc:	1885c83a 	sub	r2,r3,r2
   9abd0:	00000606 	br	9abec <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   9abd4:	e0bfff17 	ldw	r2,-4(fp)
   9abd8:	1090000c 	andi	r2,r2,16384
   9abdc:	10000226 	beq	r2,zero,9abe8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   9abe0:	00bffd44 	movi	r2,-11
   9abe4:	00000106 	br	9abec <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   9abe8:	00bffec4 	movi	r2,-5
}
   9abec:	e037883a 	mov	sp,fp
   9abf0:	dfc00117 	ldw	ra,4(sp)
   9abf4:	df000017 	ldw	fp,0(sp)
   9abf8:	dec00204 	addi	sp,sp,8
   9abfc:	f800283a 	ret

0009ac00 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   9ac00:	defff904 	addi	sp,sp,-28
   9ac04:	dfc00615 	stw	ra,24(sp)
   9ac08:	df000515 	stw	fp,20(sp)
   9ac0c:	df000504 	addi	fp,sp,20
   9ac10:	e13ffe15 	stw	r4,-8(fp)
   9ac14:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   9ac18:	0007883a 	mov	r3,zero
   9ac1c:	e0bffe17 	ldw	r2,-8(fp)
   9ac20:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   9ac24:	e0bffe17 	ldw	r2,-8(fp)
   9ac28:	10800104 	addi	r2,r2,4
   9ac2c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9ac30:	0005303a 	rdctl	r2,status
   9ac34:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9ac38:	e0fffc17 	ldw	r3,-16(fp)
   9ac3c:	00bfff84 	movi	r2,-2
   9ac40:	1884703a 	and	r2,r3,r2
   9ac44:	1001703a 	wrctl	status,r2
  
  return context;
   9ac48:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   9ac4c:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   9ac50:	009d0200 	call	9d020 <alt_tick>
   9ac54:	e0bffb17 	ldw	r2,-20(fp)
   9ac58:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9ac5c:	e0bffd17 	ldw	r2,-12(fp)
   9ac60:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   9ac64:	0001883a 	nop
   9ac68:	e037883a 	mov	sp,fp
   9ac6c:	dfc00117 	ldw	ra,4(sp)
   9ac70:	df000017 	ldw	fp,0(sp)
   9ac74:	dec00204 	addi	sp,sp,8
   9ac78:	f800283a 	ret

0009ac7c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   9ac7c:	defff904 	addi	sp,sp,-28
   9ac80:	dfc00615 	stw	ra,24(sp)
   9ac84:	df000515 	stw	fp,20(sp)
   9ac88:	df000504 	addi	fp,sp,20
   9ac8c:	e13ffc15 	stw	r4,-16(fp)
   9ac90:	e17ffd15 	stw	r5,-12(fp)
   9ac94:	e1bffe15 	stw	r6,-8(fp)
   9ac98:	e1ffff15 	stw	r7,-4(fp)
   9ac9c:	e0bfff17 	ldw	r2,-4(fp)
   9aca0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   9aca4:	d0a76017 	ldw	r2,-25216(gp)
   9aca8:	1000021e 	bne	r2,zero,9acb4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   9acac:	e0bffb17 	ldw	r2,-20(fp)
   9acb0:	d0a76015 	stw	r2,-25216(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   9acb4:	e0bffc17 	ldw	r2,-16(fp)
   9acb8:	10800104 	addi	r2,r2,4
   9acbc:	00c001c4 	movi	r3,7
   9acc0:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   9acc4:	018002b4 	movhi	r6,10
   9acc8:	31ab0004 	addi	r6,r6,-21504
   9accc:	e17ffc17 	ldw	r5,-16(fp)
   9acd0:	e13ffe17 	ldw	r4,-8(fp)
   9acd4:	009cb800 	call	9cb80 <alt_irq_register>
#endif  
}
   9acd8:	0001883a 	nop
   9acdc:	e037883a 	mov	sp,fp
   9ace0:	dfc00117 	ldw	ra,4(sp)
   9ace4:	df000017 	ldw	fp,0(sp)
   9ace8:	dec00204 	addi	sp,sp,8
   9acec:	f800283a 	ret

0009acf0 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   9acf0:	defffa04 	addi	sp,sp,-24
   9acf4:	dfc00515 	stw	ra,20(sp)
   9acf8:	df000415 	stw	fp,16(sp)
   9acfc:	df000404 	addi	fp,sp,16
   9ad00:	e13ffd15 	stw	r4,-12(fp)
   9ad04:	e17ffe15 	stw	r5,-8(fp)
   9ad08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   9ad0c:	e0bffd17 	ldw	r2,-12(fp)
   9ad10:	10800017 	ldw	r2,0(r2)
   9ad14:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   9ad18:	e0bffc17 	ldw	r2,-16(fp)
   9ad1c:	10c00a04 	addi	r3,r2,40
   9ad20:	e0bffd17 	ldw	r2,-12(fp)
   9ad24:	10800217 	ldw	r2,8(r2)
   9ad28:	100f883a 	mov	r7,r2
   9ad2c:	e1bfff17 	ldw	r6,-4(fp)
   9ad30:	e17ffe17 	ldw	r5,-8(fp)
   9ad34:	1809883a 	mov	r4,r3
   9ad38:	009b2000 	call	9b200 <altera_avalon_uart_read>
      fd->fd_flags);
}
   9ad3c:	e037883a 	mov	sp,fp
   9ad40:	dfc00117 	ldw	ra,4(sp)
   9ad44:	df000017 	ldw	fp,0(sp)
   9ad48:	dec00204 	addi	sp,sp,8
   9ad4c:	f800283a 	ret

0009ad50 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   9ad50:	defffa04 	addi	sp,sp,-24
   9ad54:	dfc00515 	stw	ra,20(sp)
   9ad58:	df000415 	stw	fp,16(sp)
   9ad5c:	df000404 	addi	fp,sp,16
   9ad60:	e13ffd15 	stw	r4,-12(fp)
   9ad64:	e17ffe15 	stw	r5,-8(fp)
   9ad68:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   9ad6c:	e0bffd17 	ldw	r2,-12(fp)
   9ad70:	10800017 	ldw	r2,0(r2)
   9ad74:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   9ad78:	e0bffc17 	ldw	r2,-16(fp)
   9ad7c:	10c00a04 	addi	r3,r2,40
   9ad80:	e0bffd17 	ldw	r2,-12(fp)
   9ad84:	10800217 	ldw	r2,8(r2)
   9ad88:	100f883a 	mov	r7,r2
   9ad8c:	e1bfff17 	ldw	r6,-4(fp)
   9ad90:	e17ffe17 	ldw	r5,-8(fp)
   9ad94:	1809883a 	mov	r4,r3
   9ad98:	009b4180 	call	9b418 <altera_avalon_uart_write>
      fd->fd_flags);
}
   9ad9c:	e037883a 	mov	sp,fp
   9ada0:	dfc00117 	ldw	ra,4(sp)
   9ada4:	df000017 	ldw	fp,0(sp)
   9ada8:	dec00204 	addi	sp,sp,8
   9adac:	f800283a 	ret

0009adb0 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   9adb0:	defffc04 	addi	sp,sp,-16
   9adb4:	dfc00315 	stw	ra,12(sp)
   9adb8:	df000215 	stw	fp,8(sp)
   9adbc:	df000204 	addi	fp,sp,8
   9adc0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   9adc4:	e0bfff17 	ldw	r2,-4(fp)
   9adc8:	10800017 	ldw	r2,0(r2)
   9adcc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   9add0:	e0bffe17 	ldw	r2,-8(fp)
   9add4:	10c00a04 	addi	r3,r2,40
   9add8:	e0bfff17 	ldw	r2,-4(fp)
   9addc:	10800217 	ldw	r2,8(r2)
   9ade0:	100b883a 	mov	r5,r2
   9ade4:	1809883a 	mov	r4,r3
   9ade8:	009b1700 	call	9b170 <altera_avalon_uart_close>
}
   9adec:	e037883a 	mov	sp,fp
   9adf0:	dfc00117 	ldw	ra,4(sp)
   9adf4:	df000017 	ldw	fp,0(sp)
   9adf8:	dec00204 	addi	sp,sp,8
   9adfc:	f800283a 	ret

0009ae00 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   9ae00:	defff904 	addi	sp,sp,-28
   9ae04:	dfc00615 	stw	ra,24(sp)
   9ae08:	df000515 	stw	fp,20(sp)
   9ae0c:	df000504 	addi	fp,sp,20
   9ae10:	e13ffd15 	stw	r4,-12(fp)
   9ae14:	e17ffe15 	stw	r5,-8(fp)
   9ae18:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   9ae1c:	e0bffd17 	ldw	r2,-12(fp)
   9ae20:	10800017 	ldw	r2,0(r2)
   9ae24:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   9ae28:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   9ae2c:	1000041e 	bne	r2,zero,9ae40 <altera_avalon_uart_init+0x40>
   9ae30:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   9ae34:	1000021e 	bne	r2,zero,9ae40 <altera_avalon_uart_init+0x40>
   9ae38:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   9ae3c:	10000226 	beq	r2,zero,9ae48 <altera_avalon_uart_init+0x48>
   9ae40:	00800044 	movi	r2,1
   9ae44:	00000106 	br	9ae4c <altera_avalon_uart_init+0x4c>
   9ae48:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   9ae4c:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   9ae50:	e0bffc17 	ldw	r2,-16(fp)
   9ae54:	10000d1e 	bne	r2,zero,9ae8c <altera_avalon_uart_init+0x8c>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   9ae58:	e0bffd17 	ldw	r2,-12(fp)
   9ae5c:	00c32004 	movi	r3,3200
   9ae60:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   9ae64:	e0bffb17 	ldw	r2,-20(fp)
   9ae68:	10800304 	addi	r2,r2,12
   9ae6c:	e0fffd17 	ldw	r3,-12(fp)
   9ae70:	18c00117 	ldw	r3,4(r3)
   9ae74:	10c00035 	stwio	r3,0(r2)
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
   9ae78:	018002b4 	movhi	r6,10
   9ae7c:	31aba904 	addi	r6,r6,-20828
   9ae80:	e17ffd17 	ldw	r5,-12(fp)
   9ae84:	e13fff17 	ldw	r4,-4(fp)
   9ae88:	009cb800 	call	9cb80 <alt_irq_register>
#endif  
  }
}
   9ae8c:	0001883a 	nop
   9ae90:	e037883a 	mov	sp,fp
   9ae94:	dfc00117 	ldw	ra,4(sp)
   9ae98:	df000017 	ldw	fp,0(sp)
   9ae9c:	dec00204 	addi	sp,sp,8
   9aea0:	f800283a 	ret

0009aea4 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   9aea4:	defff904 	addi	sp,sp,-28
   9aea8:	dfc00615 	stw	ra,24(sp)
   9aeac:	df000515 	stw	fp,20(sp)
   9aeb0:	df000504 	addi	fp,sp,20
   9aeb4:	e13ffe15 	stw	r4,-8(fp)
   9aeb8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   9aebc:	e0bffe17 	ldw	r2,-8(fp)
   9aec0:	e0bffb15 	stw	r2,-20(fp)
  void* base               = sp->base;
   9aec4:	e0bffb17 	ldw	r2,-20(fp)
   9aec8:	10800017 	ldw	r2,0(r2)
   9aecc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   9aed0:	e0bffc17 	ldw	r2,-16(fp)
   9aed4:	10800204 	addi	r2,r2,8
   9aed8:	10800037 	ldwio	r2,0(r2)
   9aedc:	e0bffd15 	stw	r2,-12(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   9aee0:	e0bffc17 	ldw	r2,-16(fp)
   9aee4:	10800204 	addi	r2,r2,8
   9aee8:	0007883a 	mov	r3,zero
   9aeec:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   9aef0:	e0bffc17 	ldw	r2,-16(fp)
   9aef4:	10800204 	addi	r2,r2,8
   9aef8:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   9aefc:	e0bffd17 	ldw	r2,-12(fp)
   9af00:	1080200c 	andi	r2,r2,128
   9af04:	10000326 	beq	r2,zero,9af14 <altera_avalon_uart_irq+0x70>
  {
    altera_avalon_uart_rxirq(sp, status);
   9af08:	e17ffd17 	ldw	r5,-12(fp)
   9af0c:	e13ffb17 	ldw	r4,-20(fp)
   9af10:	009af440 	call	9af44 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   9af14:	e0bffd17 	ldw	r2,-12(fp)
   9af18:	1081100c 	andi	r2,r2,1088
   9af1c:	10000326 	beq	r2,zero,9af2c <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   9af20:	e17ffd17 	ldw	r5,-12(fp)
   9af24:	e13ffb17 	ldw	r4,-20(fp)
   9af28:	009b0280 	call	9b028 <altera_avalon_uart_txirq>
  }
  

}
   9af2c:	0001883a 	nop
   9af30:	e037883a 	mov	sp,fp
   9af34:	dfc00117 	ldw	ra,4(sp)
   9af38:	df000017 	ldw	fp,0(sp)
   9af3c:	dec00204 	addi	sp,sp,8
   9af40:	f800283a 	ret

0009af44 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   9af44:	defffc04 	addi	sp,sp,-16
   9af48:	df000315 	stw	fp,12(sp)
   9af4c:	df000304 	addi	fp,sp,12
   9af50:	e13ffe15 	stw	r4,-8(fp)
   9af54:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   9af58:	e0bfff17 	ldw	r2,-4(fp)
   9af5c:	108000cc 	andi	r2,r2,3
   9af60:	10002c1e 	bne	r2,zero,9b014 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   9af64:	e0bffe17 	ldw	r2,-8(fp)
   9af68:	10800317 	ldw	r2,12(r2)
   9af6c:	e0bffe17 	ldw	r2,-8(fp)
   9af70:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   9af74:	e0bffe17 	ldw	r2,-8(fp)
   9af78:	10800317 	ldw	r2,12(r2)
   9af7c:	10800044 	addi	r2,r2,1
   9af80:	10800fcc 	andi	r2,r2,63
   9af84:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   9af88:	e0bffe17 	ldw	r2,-8(fp)
   9af8c:	10800317 	ldw	r2,12(r2)
   9af90:	e0fffe17 	ldw	r3,-8(fp)
   9af94:	18c00017 	ldw	r3,0(r3)
   9af98:	18c00037 	ldwio	r3,0(r3)
   9af9c:	1809883a 	mov	r4,r3
   9afa0:	e0fffe17 	ldw	r3,-8(fp)
   9afa4:	1885883a 	add	r2,r3,r2
   9afa8:	10800704 	addi	r2,r2,28
   9afac:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   9afb0:	e0bffe17 	ldw	r2,-8(fp)
   9afb4:	e0fffd17 	ldw	r3,-12(fp)
   9afb8:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   9afbc:	e0bffe17 	ldw	r2,-8(fp)
   9afc0:	10800317 	ldw	r2,12(r2)
   9afc4:	10800044 	addi	r2,r2,1
   9afc8:	10800fcc 	andi	r2,r2,63
   9afcc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   9afd0:	e0bffe17 	ldw	r2,-8(fp)
   9afd4:	10c00217 	ldw	r3,8(r2)
   9afd8:	e0bffd17 	ldw	r2,-12(fp)
   9afdc:	18800e1e 	bne	r3,r2,9b018 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   9afe0:	e0bffe17 	ldw	r2,-8(fp)
   9afe4:	10c00117 	ldw	r3,4(r2)
   9afe8:	00bfdfc4 	movi	r2,-129
   9afec:	1886703a 	and	r3,r3,r2
   9aff0:	e0bffe17 	ldw	r2,-8(fp)
   9aff4:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   9aff8:	e0bffe17 	ldw	r2,-8(fp)
   9affc:	10800017 	ldw	r2,0(r2)
   9b000:	10800304 	addi	r2,r2,12
   9b004:	e0fffe17 	ldw	r3,-8(fp)
   9b008:	18c00117 	ldw	r3,4(r3)
   9b00c:	10c00035 	stwio	r3,0(r2)
   9b010:	00000106 	br	9b018 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   9b014:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
   9b018:	e037883a 	mov	sp,fp
   9b01c:	df000017 	ldw	fp,0(sp)
   9b020:	dec00104 	addi	sp,sp,4
   9b024:	f800283a 	ret

0009b028 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   9b028:	defffb04 	addi	sp,sp,-20
   9b02c:	df000415 	stw	fp,16(sp)
   9b030:	df000404 	addi	fp,sp,16
   9b034:	e13ffc15 	stw	r4,-16(fp)
   9b038:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   9b03c:	e0bffc17 	ldw	r2,-16(fp)
   9b040:	10c00417 	ldw	r3,16(r2)
   9b044:	e0bffc17 	ldw	r2,-16(fp)
   9b048:	10800517 	ldw	r2,20(r2)
   9b04c:	18803226 	beq	r3,r2,9b118 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   9b050:	e0bffc17 	ldw	r2,-16(fp)
   9b054:	10800617 	ldw	r2,24(r2)
   9b058:	1080008c 	andi	r2,r2,2
   9b05c:	10000326 	beq	r2,zero,9b06c <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   9b060:	e0bffd17 	ldw	r2,-12(fp)
   9b064:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   9b068:	10001d26 	beq	r2,zero,9b0e0 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   9b06c:	e0bffc17 	ldw	r2,-16(fp)
   9b070:	10800417 	ldw	r2,16(r2)
   9b074:	e0bffc17 	ldw	r2,-16(fp)
   9b078:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   9b07c:	e0bffc17 	ldw	r2,-16(fp)
   9b080:	10800017 	ldw	r2,0(r2)
   9b084:	10800104 	addi	r2,r2,4
   9b088:	e0fffc17 	ldw	r3,-16(fp)
   9b08c:	18c00417 	ldw	r3,16(r3)
   9b090:	e13ffc17 	ldw	r4,-16(fp)
   9b094:	20c7883a 	add	r3,r4,r3
   9b098:	18c01704 	addi	r3,r3,92
   9b09c:	18c00003 	ldbu	r3,0(r3)
   9b0a0:	18c03fcc 	andi	r3,r3,255
   9b0a4:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   9b0a8:	e0bffc17 	ldw	r2,-16(fp)
   9b0ac:	10800417 	ldw	r2,16(r2)
   9b0b0:	10800044 	addi	r2,r2,1
   9b0b4:	e0fffc17 	ldw	r3,-16(fp)
   9b0b8:	18800415 	stw	r2,16(r3)
   9b0bc:	10c00fcc 	andi	r3,r2,63
   9b0c0:	e0bffc17 	ldw	r2,-16(fp)
   9b0c4:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   9b0c8:	e0bffc17 	ldw	r2,-16(fp)
   9b0cc:	10800117 	ldw	r2,4(r2)
   9b0d0:	10c01014 	ori	r3,r2,64
   9b0d4:	e0bffc17 	ldw	r2,-16(fp)
   9b0d8:	10c00115 	stw	r3,4(r2)
   9b0dc:	00000e06 	br	9b118 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   9b0e0:	e0bffc17 	ldw	r2,-16(fp)
   9b0e4:	10800017 	ldw	r2,0(r2)
   9b0e8:	10800204 	addi	r2,r2,8
   9b0ec:	10800037 	ldwio	r2,0(r2)
   9b0f0:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   9b0f4:	e0bffd17 	ldw	r2,-12(fp)
   9b0f8:	1082000c 	andi	r2,r2,2048
   9b0fc:	1000061e 	bne	r2,zero,9b118 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   9b100:	e0bffc17 	ldw	r2,-16(fp)
   9b104:	10c00117 	ldw	r3,4(r2)
   9b108:	00bfefc4 	movi	r2,-65
   9b10c:	1886703a 	and	r3,r3,r2
   9b110:	e0bffc17 	ldw	r2,-16(fp)
   9b114:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   9b118:	e0bffc17 	ldw	r2,-16(fp)
   9b11c:	10c00417 	ldw	r3,16(r2)
   9b120:	e0bffc17 	ldw	r2,-16(fp)
   9b124:	10800517 	ldw	r2,20(r2)
   9b128:	1880061e 	bne	r3,r2,9b144 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   9b12c:	e0bffc17 	ldw	r2,-16(fp)
   9b130:	10c00117 	ldw	r3,4(r2)
   9b134:	00beefc4 	movi	r2,-1089
   9b138:	1886703a 	and	r3,r3,r2
   9b13c:	e0bffc17 	ldw	r2,-16(fp)
   9b140:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   9b144:	e0bffc17 	ldw	r2,-16(fp)
   9b148:	10800017 	ldw	r2,0(r2)
   9b14c:	10800304 	addi	r2,r2,12
   9b150:	e0fffc17 	ldw	r3,-16(fp)
   9b154:	18c00117 	ldw	r3,4(r3)
   9b158:	10c00035 	stwio	r3,0(r2)
}
   9b15c:	0001883a 	nop
   9b160:	e037883a 	mov	sp,fp
   9b164:	df000017 	ldw	fp,0(sp)
   9b168:	dec00104 	addi	sp,sp,4
   9b16c:	f800283a 	ret

0009b170 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   9b170:	defffd04 	addi	sp,sp,-12
   9b174:	df000215 	stw	fp,8(sp)
   9b178:	df000204 	addi	fp,sp,8
   9b17c:	e13ffe15 	stw	r4,-8(fp)
   9b180:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   9b184:	00000506 	br	9b19c <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   9b188:	e0bfff17 	ldw	r2,-4(fp)
   9b18c:	1090000c 	andi	r2,r2,16384
   9b190:	10000226 	beq	r2,zero,9b19c <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   9b194:	00bffd44 	movi	r2,-11
   9b198:	00000606 	br	9b1b4 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   9b19c:	e0bffe17 	ldw	r2,-8(fp)
   9b1a0:	10c00417 	ldw	r3,16(r2)
   9b1a4:	e0bffe17 	ldw	r2,-8(fp)
   9b1a8:	10800517 	ldw	r2,20(r2)
   9b1ac:	18bff61e 	bne	r3,r2,9b188 <__ram_exceptions_end+0xfff7af54>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   9b1b0:	0005883a 	mov	r2,zero
}
   9b1b4:	e037883a 	mov	sp,fp
   9b1b8:	df000017 	ldw	fp,0(sp)
   9b1bc:	dec00104 	addi	sp,sp,4
   9b1c0:	f800283a 	ret

0009b1c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   9b1c4:	defffe04 	addi	sp,sp,-8
   9b1c8:	dfc00115 	stw	ra,4(sp)
   9b1cc:	df000015 	stw	fp,0(sp)
   9b1d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   9b1d4:	d0a00d17 	ldw	r2,-32716(gp)
   9b1d8:	10000326 	beq	r2,zero,9b1e8 <alt_get_errno+0x24>
   9b1dc:	d0a00d17 	ldw	r2,-32716(gp)
   9b1e0:	103ee83a 	callr	r2
   9b1e4:	00000106 	br	9b1ec <alt_get_errno+0x28>
   9b1e8:	d0a75804 	addi	r2,gp,-25248
}
   9b1ec:	e037883a 	mov	sp,fp
   9b1f0:	dfc00117 	ldw	ra,4(sp)
   9b1f4:	df000017 	ldw	fp,0(sp)
   9b1f8:	dec00204 	addi	sp,sp,8
   9b1fc:	f800283a 	ret

0009b200 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   9b200:	defff204 	addi	sp,sp,-56
   9b204:	dfc00d15 	stw	ra,52(sp)
   9b208:	df000c15 	stw	fp,48(sp)
   9b20c:	df000c04 	addi	fp,sp,48
   9b210:	e13ffc15 	stw	r4,-16(fp)
   9b214:	e17ffd15 	stw	r5,-12(fp)
   9b218:	e1bffe15 	stw	r6,-8(fp)
   9b21c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   9b220:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   9b224:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   9b228:	e0bfff17 	ldw	r2,-4(fp)
   9b22c:	1090000c 	andi	r2,r2,16384
   9b230:	1005003a 	cmpeq	r2,r2,zero
   9b234:	10803fcc 	andi	r2,r2,255
   9b238:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   9b23c:	00001306 	br	9b28c <altera_avalon_uart_read+0x8c>
    {
      count++;
   9b240:	e0bff517 	ldw	r2,-44(fp)
   9b244:	10800044 	addi	r2,r2,1
   9b248:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   9b24c:	e0bffd17 	ldw	r2,-12(fp)
   9b250:	10c00044 	addi	r3,r2,1
   9b254:	e0fffd15 	stw	r3,-12(fp)
   9b258:	e0fffc17 	ldw	r3,-16(fp)
   9b25c:	18c00217 	ldw	r3,8(r3)
   9b260:	e13ffc17 	ldw	r4,-16(fp)
   9b264:	20c7883a 	add	r3,r4,r3
   9b268:	18c00704 	addi	r3,r3,28
   9b26c:	18c00003 	ldbu	r3,0(r3)
   9b270:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   9b274:	e0bffc17 	ldw	r2,-16(fp)
   9b278:	10800217 	ldw	r2,8(r2)
   9b27c:	10800044 	addi	r2,r2,1
   9b280:	10c00fcc 	andi	r3,r2,63
   9b284:	e0bffc17 	ldw	r2,-16(fp)
   9b288:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   9b28c:	e0fff517 	ldw	r3,-44(fp)
   9b290:	e0bffe17 	ldw	r2,-8(fp)
   9b294:	1880050e 	bge	r3,r2,9b2ac <altera_avalon_uart_read+0xac>
   9b298:	e0bffc17 	ldw	r2,-16(fp)
   9b29c:	10c00217 	ldw	r3,8(r2)
   9b2a0:	e0bffc17 	ldw	r2,-16(fp)
   9b2a4:	10800317 	ldw	r2,12(r2)
   9b2a8:	18bfe51e 	bne	r3,r2,9b240 <__ram_exceptions_end+0xfff7b00c>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   9b2ac:	e0bff517 	ldw	r2,-44(fp)
   9b2b0:	1000251e 	bne	r2,zero,9b348 <altera_avalon_uart_read+0x148>
   9b2b4:	e0bffc17 	ldw	r2,-16(fp)
   9b2b8:	10c00217 	ldw	r3,8(r2)
   9b2bc:	e0bffc17 	ldw	r2,-16(fp)
   9b2c0:	10800317 	ldw	r2,12(r2)
   9b2c4:	1880201e 	bne	r3,r2,9b348 <altera_avalon_uart_read+0x148>
    {
      if (!block)
   9b2c8:	e0bff617 	ldw	r2,-40(fp)
   9b2cc:	1000071e 	bne	r2,zero,9b2ec <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   9b2d0:	009b1c40 	call	9b1c4 <alt_get_errno>
   9b2d4:	1007883a 	mov	r3,r2
   9b2d8:	008002c4 	movi	r2,11
   9b2dc:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   9b2e0:	00800044 	movi	r2,1
   9b2e4:	e0bff405 	stb	r2,-48(fp)
        break;
   9b2e8:	00001b06 	br	9b358 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9b2ec:	0005303a 	rdctl	r2,status
   9b2f0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9b2f4:	e0fff917 	ldw	r3,-28(fp)
   9b2f8:	00bfff84 	movi	r2,-2
   9b2fc:	1884703a 	and	r2,r3,r2
   9b300:	1001703a 	wrctl	status,r2
  
  return context;
   9b304:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   9b308:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   9b30c:	e0bffc17 	ldw	r2,-16(fp)
   9b310:	10800117 	ldw	r2,4(r2)
   9b314:	10c02014 	ori	r3,r2,128
   9b318:	e0bffc17 	ldw	r2,-16(fp)
   9b31c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   9b320:	e0bffc17 	ldw	r2,-16(fp)
   9b324:	10800017 	ldw	r2,0(r2)
   9b328:	10800304 	addi	r2,r2,12
   9b32c:	e0fffc17 	ldw	r3,-16(fp)
   9b330:	18c00117 	ldw	r3,4(r3)
   9b334:	10c00035 	stwio	r3,0(r2)
   9b338:	e0bff817 	ldw	r2,-32(fp)
   9b33c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9b340:	e0bffa17 	ldw	r2,-24(fp)
   9b344:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   9b348:	e0bff517 	ldw	r2,-44(fp)
   9b34c:	1000021e 	bne	r2,zero,9b358 <altera_avalon_uart_read+0x158>
   9b350:	e0bffe17 	ldw	r2,-8(fp)
   9b354:	103fcd1e 	bne	r2,zero,9b28c <__ram_exceptions_end+0xfff7b058>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9b358:	0005303a 	rdctl	r2,status
   9b35c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9b360:	e0fffb17 	ldw	r3,-20(fp)
   9b364:	00bfff84 	movi	r2,-2
   9b368:	1884703a 	and	r2,r3,r2
   9b36c:	1001703a 	wrctl	status,r2
  
  return context;
   9b370:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   9b374:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   9b378:	e0bffc17 	ldw	r2,-16(fp)
   9b37c:	10800117 	ldw	r2,4(r2)
   9b380:	10c02014 	ori	r3,r2,128
   9b384:	e0bffc17 	ldw	r2,-16(fp)
   9b388:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   9b38c:	e0bffc17 	ldw	r2,-16(fp)
   9b390:	10800017 	ldw	r2,0(r2)
   9b394:	10800304 	addi	r2,r2,12
   9b398:	e0fffc17 	ldw	r3,-16(fp)
   9b39c:	18c00117 	ldw	r3,4(r3)
   9b3a0:	10c00035 	stwio	r3,0(r2)
   9b3a4:	e0bff817 	ldw	r2,-32(fp)
   9b3a8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9b3ac:	e0bff717 	ldw	r2,-36(fp)
   9b3b0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   9b3b4:	e0bff403 	ldbu	r2,-48(fp)
   9b3b8:	10000226 	beq	r2,zero,9b3c4 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   9b3bc:	00bffd44 	movi	r2,-11
   9b3c0:	00000106 	br	9b3c8 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   9b3c4:	e0bff517 	ldw	r2,-44(fp)
  }
}
   9b3c8:	e037883a 	mov	sp,fp
   9b3cc:	dfc00117 	ldw	ra,4(sp)
   9b3d0:	df000017 	ldw	fp,0(sp)
   9b3d4:	dec00204 	addi	sp,sp,8
   9b3d8:	f800283a 	ret

0009b3dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   9b3dc:	defffe04 	addi	sp,sp,-8
   9b3e0:	dfc00115 	stw	ra,4(sp)
   9b3e4:	df000015 	stw	fp,0(sp)
   9b3e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   9b3ec:	d0a00d17 	ldw	r2,-32716(gp)
   9b3f0:	10000326 	beq	r2,zero,9b400 <alt_get_errno+0x24>
   9b3f4:	d0a00d17 	ldw	r2,-32716(gp)
   9b3f8:	103ee83a 	callr	r2
   9b3fc:	00000106 	br	9b404 <alt_get_errno+0x28>
   9b400:	d0a75804 	addi	r2,gp,-25248
}
   9b404:	e037883a 	mov	sp,fp
   9b408:	dfc00117 	ldw	ra,4(sp)
   9b40c:	df000017 	ldw	fp,0(sp)
   9b410:	dec00204 	addi	sp,sp,8
   9b414:	f800283a 	ret

0009b418 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   9b418:	defff204 	addi	sp,sp,-56
   9b41c:	dfc00d15 	stw	ra,52(sp)
   9b420:	df000c15 	stw	fp,48(sp)
   9b424:	df000c04 	addi	fp,sp,48
   9b428:	e13ffc15 	stw	r4,-16(fp)
   9b42c:	e17ffd15 	stw	r5,-12(fp)
   9b430:	e1bffe15 	stw	r6,-8(fp)
   9b434:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   9b438:	e0bffe17 	ldw	r2,-8(fp)
   9b43c:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   9b440:	e0bfff17 	ldw	r2,-4(fp)
   9b444:	1090000c 	andi	r2,r2,16384
   9b448:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   9b44c:	00003c06 	br	9b540 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   9b450:	e0bffc17 	ldw	r2,-16(fp)
   9b454:	10800517 	ldw	r2,20(r2)
   9b458:	10800044 	addi	r2,r2,1
   9b45c:	10800fcc 	andi	r2,r2,63
   9b460:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   9b464:	e0bffc17 	ldw	r2,-16(fp)
   9b468:	10c00417 	ldw	r3,16(r2)
   9b46c:	e0bff717 	ldw	r2,-36(fp)
   9b470:	1880221e 	bne	r3,r2,9b4fc <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   9b474:	e0bff517 	ldw	r2,-44(fp)
   9b478:	10000526 	beq	r2,zero,9b490 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   9b47c:	009b3dc0 	call	9b3dc <alt_get_errno>
   9b480:	1007883a 	mov	r3,r2
   9b484:	008002c4 	movi	r2,11
   9b488:	18800015 	stw	r2,0(r3)
        break;
   9b48c:	00002e06 	br	9b548 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9b490:	0005303a 	rdctl	r2,status
   9b494:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9b498:	e0fff917 	ldw	r3,-28(fp)
   9b49c:	00bfff84 	movi	r2,-2
   9b4a0:	1884703a 	and	r2,r3,r2
   9b4a4:	1001703a 	wrctl	status,r2
  
  return context;
   9b4a8:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   9b4ac:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   9b4b0:	e0bffc17 	ldw	r2,-16(fp)
   9b4b4:	10800117 	ldw	r2,4(r2)
   9b4b8:	10c11014 	ori	r3,r2,1088
   9b4bc:	e0bffc17 	ldw	r2,-16(fp)
   9b4c0:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   9b4c4:	e0bffc17 	ldw	r2,-16(fp)
   9b4c8:	10800017 	ldw	r2,0(r2)
   9b4cc:	10800304 	addi	r2,r2,12
   9b4d0:	e0fffc17 	ldw	r3,-16(fp)
   9b4d4:	18c00117 	ldw	r3,4(r3)
   9b4d8:	10c00035 	stwio	r3,0(r2)
   9b4dc:	e0bff817 	ldw	r2,-32(fp)
   9b4e0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9b4e4:	e0bff617 	ldw	r2,-40(fp)
   9b4e8:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   9b4ec:	e0bffc17 	ldw	r2,-16(fp)
   9b4f0:	10c00417 	ldw	r3,16(r2)
   9b4f4:	e0bff717 	ldw	r2,-36(fp)
   9b4f8:	18bffc26 	beq	r3,r2,9b4ec <__ram_exceptions_end+0xfff7b2b8>
      }
    }

    count--;
   9b4fc:	e0bff417 	ldw	r2,-48(fp)
   9b500:	10bfffc4 	addi	r2,r2,-1
   9b504:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   9b508:	e0bffc17 	ldw	r2,-16(fp)
   9b50c:	10c00517 	ldw	r3,20(r2)
   9b510:	e0bffd17 	ldw	r2,-12(fp)
   9b514:	11000044 	addi	r4,r2,1
   9b518:	e13ffd15 	stw	r4,-12(fp)
   9b51c:	10800003 	ldbu	r2,0(r2)
   9b520:	1009883a 	mov	r4,r2
   9b524:	e0bffc17 	ldw	r2,-16(fp)
   9b528:	10c5883a 	add	r2,r2,r3
   9b52c:	10801704 	addi	r2,r2,92
   9b530:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   9b534:	e0bffc17 	ldw	r2,-16(fp)
   9b538:	e0fff717 	ldw	r3,-36(fp)
   9b53c:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   9b540:	e0bff417 	ldw	r2,-48(fp)
   9b544:	103fc21e 	bne	r2,zero,9b450 <__ram_exceptions_end+0xfff7b21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9b548:	0005303a 	rdctl	r2,status
   9b54c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9b550:	e0fffb17 	ldw	r3,-20(fp)
   9b554:	00bfff84 	movi	r2,-2
   9b558:	1884703a 	and	r2,r3,r2
   9b55c:	1001703a 	wrctl	status,r2
  
  return context;
   9b560:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   9b564:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   9b568:	e0bffc17 	ldw	r2,-16(fp)
   9b56c:	10800117 	ldw	r2,4(r2)
   9b570:	10c11014 	ori	r3,r2,1088
   9b574:	e0bffc17 	ldw	r2,-16(fp)
   9b578:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   9b57c:	e0bffc17 	ldw	r2,-16(fp)
   9b580:	10800017 	ldw	r2,0(r2)
   9b584:	10800304 	addi	r2,r2,12
   9b588:	e0fffc17 	ldw	r3,-16(fp)
   9b58c:	18c00117 	ldw	r3,4(r3)
   9b590:	10c00035 	stwio	r3,0(r2)
   9b594:	e0bff817 	ldw	r2,-32(fp)
   9b598:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9b59c:	e0bffa17 	ldw	r2,-24(fp)
   9b5a0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   9b5a4:	e0fffe17 	ldw	r3,-8(fp)
   9b5a8:	e0bff417 	ldw	r2,-48(fp)
   9b5ac:	1885c83a 	sub	r2,r3,r2
}
   9b5b0:	e037883a 	mov	sp,fp
   9b5b4:	dfc00117 	ldw	ra,4(sp)
   9b5b8:	df000017 	ldw	fp,0(sp)
   9b5bc:	dec00204 	addi	sp,sp,8
   9b5c0:	f800283a 	ret

0009b5c4 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
   9b5c4:	defffd04 	addi	sp,sp,-12
   9b5c8:	dfc00215 	stw	ra,8(sp)
   9b5cc:	df000115 	stw	fp,4(sp)
   9b5d0:	df000104 	addi	fp,sp,4
   9b5d4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
   9b5d8:	d1600e04 	addi	r5,gp,-32712
   9b5dc:	e13fff17 	ldw	r4,-4(fp)
   9b5e0:	009c80c0 	call	9c80c <alt_dev_llist_insert>
}
   9b5e4:	e037883a 	mov	sp,fp
   9b5e8:	dfc00117 	ldw	ra,4(sp)
   9b5ec:	df000017 	ldw	fp,0(sp)
   9b5f0:	dec00204 	addi	sp,sp,8
   9b5f4:	f800283a 	ret

0009b5f8 <alt_onchip_flash_read>:
    alt_flash_dev *flash_info,
    int           offset,
    void          *dest_addr,
    int           length
)
{
   9b5f8:	defff704 	addi	sp,sp,-36
   9b5fc:	dfc00815 	stw	ra,32(sp)
   9b600:	df000715 	stw	fp,28(sp)
   9b604:	df000704 	addi	fp,sp,28
   9b608:	e13ffc15 	stw	r4,-16(fp)
   9b60c:	e17ffd15 	stw	r5,-12(fp)
   9b610:	e1bffe15 	stw	r6,-8(fp)
   9b614:	e1ffff15 	stw	r7,-4(fp)
    int ret_code = 0;
   9b618:	e03ff915 	stw	zero,-28(fp)
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;
   9b61c:	e0bffc17 	ldw	r2,-16(fp)
   9b620:	e0bffa15 	stw	r2,-24(fp)

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
   9b624:	e0bffa17 	ldw	r2,-24(fp)
   9b628:	10800b17 	ldw	r2,44(r2)
   9b62c:	e0fffd17 	ldw	r3,-12(fp)
   9b630:	1880060e 	bge	r3,r2,9b64c <alt_onchip_flash_read+0x54>
   9b634:	e0fffd17 	ldw	r3,-12(fp)
   9b638:	e0bfff17 	ldw	r2,-4(fp)
   9b63c:	1885883a 	add	r2,r3,r2
   9b640:	e0fffa17 	ldw	r3,-24(fp)
   9b644:	18c00b17 	ldw	r3,44(r3)
   9b648:	1880020e 	bge	r3,r2,9b654 <alt_onchip_flash_read+0x5c>
        return -EFAULT;
   9b64c:	00bffc84 	movi	r2,-14
   9b650:	00001706 	br	9b6b0 <alt_onchip_flash_read+0xb8>
    }
    
    memcpy(dest_addr, (alt_u8*)flash->dev.base_addr+offset, length);
   9b654:	e0bffa17 	ldw	r2,-24(fp)
   9b658:	10c00a17 	ldw	r3,40(r2)
   9b65c:	e0bffd17 	ldw	r2,-12(fp)
   9b660:	1885883a 	add	r2,r3,r2
   9b664:	e0ffff17 	ldw	r3,-4(fp)
   9b668:	180d883a 	mov	r6,r3
   9b66c:	100b883a 	mov	r5,r2
   9b670:	e13ffe17 	ldw	r4,-8(fp)
   9b674:	0082be40 	call	82be4 <memcpy>

    if (NULL != flash->csr_base) {
   9b678:	e0bffa17 	ldw	r2,-24(fp)
   9b67c:	10802f17 	ldw	r2,188(r2)
   9b680:	10000a26 	beq	r2,zero,9b6ac <alt_onchip_flash_read+0xb4>
        int read_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_READ_MSK;
   9b684:	e0bffa17 	ldw	r2,-24(fp)
   9b688:	10802f17 	ldw	r2,188(r2)
   9b68c:	10800037 	ldwio	r2,0(r2)
   9b690:	1080010c 	andi	r2,r2,4
   9b694:	e0bffb15 	stw	r2,-20(fp)
        if (read_status != ALTERA_ONCHIP_FLASH_STATUS_READ_PASSED) {
   9b698:	e0bffb17 	ldw	r2,-20(fp)
   9b69c:	10800120 	cmpeqi	r2,r2,4
   9b6a0:	1000021e 	bne	r2,zero,9b6ac <alt_onchip_flash_read+0xb4>
            /* Read failed.  Return error.*/
            ret_code = -EIO;
   9b6a4:	00bffec4 	movi	r2,-5
   9b6a8:	e0bff915 	stw	r2,-28(fp)
        }
    }
    return ret_code;
   9b6ac:	e0bff917 	ldw	r2,-28(fp)
}
   9b6b0:	e037883a 	mov	sp,fp
   9b6b4:	dfc00117 	ldw	ra,4(sp)
   9b6b8:	df000017 	ldw	fp,0(sp)
   9b6bc:	dec00204 	addi	sp,sp,8
   9b6c0:	f800283a 	ret

0009b6c4 <alt_onchip_flash_get_info>:
(
    alt_flash_fd *fd,
    flash_region **info,
    int          *number_of_regions
)
{
   9b6c4:	defffa04 	addi	sp,sp,-24
   9b6c8:	df000515 	stw	fp,20(sp)
   9b6cc:	df000504 	addi	fp,sp,20
   9b6d0:	e13ffd15 	stw	r4,-12(fp)
   9b6d4:	e17ffe15 	stw	r5,-8(fp)
   9b6d8:	e1bfff15 	stw	r6,-4(fp)
    int ret_code = 0;
   9b6dc:	e03ffb15 	stw	zero,-20(fp)

    alt_flash_dev* flash = (alt_flash_dev*)fd;
   9b6e0:	e0bffd17 	ldw	r2,-12(fp)
   9b6e4:	e0bffc15 	stw	r2,-16(fp)

    if (NULL != number_of_regions)
   9b6e8:	e0bfff17 	ldw	r2,-4(fp)
   9b6ec:	10000426 	beq	r2,zero,9b700 <alt_onchip_flash_get_info+0x3c>
    {
        /* Pass the number of region to user */
        *number_of_regions = flash->number_of_regions;
   9b6f0:	e0bffc17 	ldw	r2,-16(fp)
   9b6f4:	10c00c17 	ldw	r3,48(r2)
   9b6f8:	e0bfff17 	ldw	r2,-4(fp)
   9b6fc:	10c00015 	stw	r3,0(r2)
    }

    if (!flash->number_of_regions)
   9b700:	e0bffc17 	ldw	r2,-16(fp)
   9b704:	10800c17 	ldw	r2,48(r2)
   9b708:	1000031e 	bne	r2,zero,9b718 <alt_onchip_flash_get_info+0x54>
    {
        ret_code = -ENOMEM;
   9b70c:	00bffd04 	movi	r2,-12
   9b710:	e0bffb15 	stw	r2,-20(fp)
   9b714:	00000d06 	br	9b74c <alt_onchip_flash_get_info+0x88>
    }
    else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
   9b718:	e0bffc17 	ldw	r2,-16(fp)
   9b71c:	10800c17 	ldw	r2,48(r2)
   9b720:	10800250 	cmplti	r2,r2,9
   9b724:	1000031e 	bne	r2,zero,9b734 <alt_onchip_flash_get_info+0x70>
    {
        ret_code = -EFAULT;
   9b728:	00bffc84 	movi	r2,-14
   9b72c:	e0bffb15 	stw	r2,-20(fp)
   9b730:	00000606 	br	9b74c <alt_onchip_flash_get_info+0x88>
    }
    else
    {
        if (NULL != info)
   9b734:	e0bffe17 	ldw	r2,-8(fp)
   9b738:	10000426 	beq	r2,zero,9b74c <alt_onchip_flash_get_info+0x88>
        {
            /* Pass the table of erase blocks to user */
            *info = &flash->region_info[0];
   9b73c:	e0bffc17 	ldw	r2,-16(fp)
   9b740:	10c00d04 	addi	r3,r2,52
   9b744:	e0bffe17 	ldw	r2,-8(fp)
   9b748:	10c00015 	stw	r3,0(r2)
        }
    }

    return ret_code;
   9b74c:	e0bffb17 	ldw	r2,-20(fp)
}
   9b750:	e037883a 	mov	sp,fp
   9b754:	df000017 	ldw	fp,0(sp)
   9b758:	dec00104 	addi	sp,sp,4
   9b75c:	f800283a 	ret

0009b760 <alt_onchip_flash_erase_block>:
int alt_onchip_flash_erase_block
(
    alt_flash_dev *flash_info,
    int           block_offset
)
{
   9b760:	defff904 	addi	sp,sp,-28
   9b764:	dfc00615 	stw	ra,24(sp)
   9b768:	df000515 	stw	fp,20(sp)
   9b76c:	df000504 	addi	fp,sp,20
   9b770:	e13ffe15 	stw	r4,-8(fp)
   9b774:	e17fff15 	stw	r5,-4(fp)
    int ret_code = 0;
   9b778:	e03ffb15 	stw	zero,-20(fp)
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
   9b77c:	e0bffe17 	ldw	r2,-8(fp)
   9b780:	e0bffc15 	stw	r2,-16(fp)
    int page_address;

    /* Make sure the input parameters is not outside of this device's range. */
    if (block_offset >= flash->dev.length) {
   9b784:	e0bffc17 	ldw	r2,-16(fp)
   9b788:	10800b17 	ldw	r2,44(r2)
   9b78c:	e0ffff17 	ldw	r3,-4(fp)
   9b790:	18800216 	blt	r3,r2,9b79c <alt_onchip_flash_erase_block+0x3c>
        return -EFAULT;
   9b794:	00bffc84 	movi	r2,-14
   9b798:	00004606 	br	9b8b4 <alt_onchip_flash_erase_block+0x154>
    }

    /* Make sure IP support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only)) {
   9b79c:	e0bffc17 	ldw	r2,-16(fp)
   9b7a0:	10802f17 	ldw	r2,188(r2)
   9b7a4:	10000326 	beq	r2,zero,9b7b4 <alt_onchip_flash_erase_block+0x54>
   9b7a8:	e0bffc17 	ldw	r2,-16(fp)
   9b7ac:	10802e17 	ldw	r2,184(r2)
   9b7b0:	10000226 	beq	r2,zero,9b7bc <alt_onchip_flash_erase_block+0x5c>
        return -ENODEV;
   9b7b4:	00bffb44 	movi	r2,-19
   9b7b8:	00003e06 	br	9b8b4 <alt_onchip_flash_erase_block+0x154>
    }

    /* The block_offset must be page size aligned */
    if ((block_offset & (flash->page_size - 1)) != 0)
   9b7bc:	e0bffc17 	ldw	r2,-16(fp)
   9b7c0:	10803f17 	ldw	r2,252(r2)
   9b7c4:	10ffffc4 	addi	r3,r2,-1
   9b7c8:	e0bfff17 	ldw	r2,-4(fp)
   9b7cc:	1884703a 	and	r2,r3,r2
   9b7d0:	10000226 	beq	r2,zero,9b7dc <alt_onchip_flash_erase_block+0x7c>
    {
        /* The address is not aligned */
        return -EINVAL;
   9b7d4:	00bffa84 	movi	r2,-22
   9b7d8:	00003606 	br	9b8b4 <alt_onchip_flash_erase_block+0x154>
    }

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
   9b7dc:	e13ffc17 	ldw	r4,-16(fp)
   9b7e0:	009c3540 	call	9c354 <alt_onchip_flash_poll_for_status_to_go_idle>
   9b7e4:	e0bffb15 	stw	r2,-20(fp)
    if (ret_code != 0)
   9b7e8:	e0bffb17 	ldw	r2,-20(fp)
   9b7ec:	10000226 	beq	r2,zero,9b7f8 <alt_onchip_flash_erase_block+0x98>
    {
        return ret_code;
   9b7f0:	e0bffb17 	ldw	r2,-20(fp)
   9b7f4:	00002f06 	br	9b8b4 <alt_onchip_flash_erase_block+0x154>
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
   9b7f8:	e0bffc17 	ldw	r2,-16(fp)
   9b7fc:	10802f17 	ldw	r2,188(r2)
   9b800:	10c00104 	addi	r3,r2,4
   9b804:	e0bffc17 	ldw	r2,-16(fp)
   9b808:	10802f17 	ldw	r2,188(r2)
   9b80c:	10800104 	addi	r2,r2,4
   9b810:	10800037 	ldwio	r2,0(r2)
   9b814:	113c002c 	andhi	r4,r2,61440
   9b818:	00802034 	movhi	r2,128
   9b81c:	10bfffc4 	addi	r2,r2,-1
   9b820:	2084b03a 	or	r2,r4,r2
   9b824:	18800035 	stwio	r2,0(r3)

    /* Calculate Page erase address, it is 32bit word addressing*/
    page_address = block_offset / 4;
   9b828:	e0bfff17 	ldw	r2,-4(fp)
   9b82c:	1000010e 	bge	r2,zero,9b834 <alt_onchip_flash_erase_block+0xd4>
   9b830:	108000c4 	addi	r2,r2,3
   9b834:	1005d0ba 	srai	r2,r2,2
   9b838:	e0bffd15 	stw	r2,-12(fp)

    /* Perform Page erase operation */
    ALTERA_ONCHIP_FLASH_PAGE_ERASE(flash->csr_base, page_address);
   9b83c:	e0bffc17 	ldw	r2,-16(fp)
   9b840:	10802f17 	ldw	r2,188(r2)
   9b844:	10800104 	addi	r2,r2,4
   9b848:	e0fffc17 	ldw	r3,-16(fp)
   9b84c:	18c02f17 	ldw	r3,188(r3)
   9b850:	18c00104 	addi	r3,r3,4
   9b854:	18c00037 	ldwio	r3,0(r3)
   9b858:	193c002c 	andhi	r4,r3,61440
   9b85c:	e0fffd17 	ldw	r3,-12(fp)
   9b860:	18c01c34 	orhi	r3,r3,112
   9b864:	20c6b03a 	or	r3,r4,r3
   9b868:	10c00035 	stwio	r3,0(r2)

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
   9b86c:	e13ffc17 	ldw	r4,-16(fp)
   9b870:	009c3540 	call	9c354 <alt_onchip_flash_poll_for_status_to_go_idle>
   9b874:	e0bffb15 	stw	r2,-20(fp)

    /* Wait until flash controller indicate erase passed */
    ret_code = alt_onchip_flash_poll_for_status_erase_passed(flash);
   9b878:	e13ffc17 	ldw	r4,-16(fp)
   9b87c:	009c3e40 	call	9c3e4 <alt_onchip_flash_poll_for_status_erase_passed>
   9b880:	e0bffb15 	stw	r2,-20(fp)

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
   9b884:	e0bffc17 	ldw	r2,-16(fp)
   9b888:	10802f17 	ldw	r2,188(r2)
   9b88c:	10c00104 	addi	r3,r2,4
   9b890:	e0bffc17 	ldw	r2,-16(fp)
   9b894:	10802f17 	ldw	r2,188(r2)
   9b898:	10800104 	addi	r2,r2,4
   9b89c:	11000037 	ldwio	r4,0(r2)
   9b8a0:	00840034 	movhi	r2,4096
   9b8a4:	10bfffc4 	addi	r2,r2,-1
   9b8a8:	2084b03a 	or	r2,r4,r2
   9b8ac:	18800035 	stwio	r2,0(r3)

    return ret_code;
   9b8b0:	e0bffb17 	ldw	r2,-20(fp)
}
   9b8b4:	e037883a 	mov	sp,fp
   9b8b8:	dfc00117 	ldw	ra,4(sp)
   9b8bc:	df000017 	ldw	fp,0(sp)
   9b8c0:	dec00204 	addi	sp,sp,8
   9b8c4:	f800283a 	ret

0009b8c8 <alt_onchip_flash_write_block>:
    int           block_offset,
    int           data_offset,
    const void    *data,
    int           length
)
{
   9b8c8:	defff204 	addi	sp,sp,-56
   9b8cc:	dfc00d15 	stw	ra,52(sp)
   9b8d0:	df000c15 	stw	fp,48(sp)
   9b8d4:	df000c04 	addi	fp,sp,48
   9b8d8:	e13ffc15 	stw	r4,-16(fp)
   9b8dc:	e17ffd15 	stw	r5,-12(fp)
   9b8e0:	e1bffe15 	stw	r6,-8(fp)
   9b8e4:	e1ffff15 	stw	r7,-4(fp)
    int ret_code = 0;
   9b8e8:	e03ff415 	stw	zero,-48(fp)
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
   9b8ec:	e0bffc17 	ldw	r2,-16(fp)
   9b8f0:	e0bff815 	stw	r2,-32(fp)
    int buffer_offset = 0;
   9b8f4:	e03ff515 	stw	zero,-44(fp)
    int length_of_current_write;
    int current_data_offset = data_offset;
   9b8f8:	e0bffe17 	ldw	r2,-8(fp)
   9b8fc:	e0bff615 	stw	r2,-40(fp)
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
   9b900:	e0bff817 	ldw	r2,-32(fp)
   9b904:	10800b17 	ldw	r2,44(r2)
    int current_data_offset = data_offset;
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
   9b908:	e0fffd17 	ldw	r3,-12(fp)
   9b90c:	18800a0e 	bge	r3,r2,9b938 <alt_onchip_flash_write_block+0x70>
        (block_offset >= flash->dev.length) ||
        (data_offset >= flash->dev.length) ||
   9b910:	e0bff817 	ldw	r2,-32(fp)
   9b914:	10800b17 	ldw	r2,44(r2)
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
   9b918:	e0fffe17 	ldw	r3,-8(fp)
   9b91c:	1880060e 	bge	r3,r2,9b938 <alt_onchip_flash_write_block+0x70>
        (data_offset >= flash->dev.length) ||
        (length > (flash->dev.length - data_offset))
   9b920:	e0bff817 	ldw	r2,-32(fp)
   9b924:	10c00b17 	ldw	r3,44(r2)
   9b928:	e0bffe17 	ldw	r2,-8(fp)
   9b92c:	1887c83a 	sub	r3,r3,r2
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
        (data_offset >= flash->dev.length) ||
   9b930:	e0800217 	ldw	r2,8(fp)
   9b934:	1880020e 	bge	r3,r2,9b940 <alt_onchip_flash_write_block+0x78>
        (length > (flash->dev.length - data_offset))
    ) {
        return -EFAULT;
   9b938:	00bffc84 	movi	r2,-14
   9b93c:	00009306 	br	9bb8c <alt_onchip_flash_write_block+0x2c4>
    }

    /* Make sure IP support support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only != 0)) {
   9b940:	e0bff817 	ldw	r2,-32(fp)
   9b944:	10802f17 	ldw	r2,188(r2)
   9b948:	10000326 	beq	r2,zero,9b958 <alt_onchip_flash_write_block+0x90>
   9b94c:	e0bff817 	ldw	r2,-32(fp)
   9b950:	10802e17 	ldw	r2,184(r2)
   9b954:	10000226 	beq	r2,zero,9b960 <alt_onchip_flash_write_block+0x98>
        return -ENODEV;
   9b958:	00bffb44 	movi	r2,-19
   9b95c:	00008b06 	br	9bb8c <alt_onchip_flash_write_block+0x2c4>
    }

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
   9b960:	e13ff817 	ldw	r4,-32(fp)
   9b964:	009c3540 	call	9c354 <alt_onchip_flash_poll_for_status_to_go_idle>
   9b968:	e0bff415 	stw	r2,-48(fp)
    if (ret_code != 0)
   9b96c:	e0bff417 	ldw	r2,-48(fp)
   9b970:	10000226 	beq	r2,zero,9b97c <alt_onchip_flash_write_block+0xb4>
    {
        return ret_code;
   9b974:	e0bff417 	ldw	r2,-48(fp)
   9b978:	00008406 	br	9bb8c <alt_onchip_flash_write_block+0x2c4>
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
   9b97c:	e0bff817 	ldw	r2,-32(fp)
   9b980:	10802f17 	ldw	r2,188(r2)
   9b984:	10c00104 	addi	r3,r2,4
   9b988:	e0bff817 	ldw	r2,-32(fp)
   9b98c:	10802f17 	ldw	r2,188(r2)
   9b990:	10800104 	addi	r2,r2,4
   9b994:	10800037 	ldwio	r2,0(r2)
   9b998:	113c002c 	andhi	r4,r2,61440
   9b99c:	00802034 	movhi	r2,128
   9b9a0:	10bfffc4 	addi	r2,r2,-1
   9b9a4:	2084b03a 	or	r2,r4,r2
   9b9a8:	18800035 	stwio	r2,0(r3)

    /* Check data length */
    while (length)
   9b9ac:	00006506 	br	9bb44 <alt_onchip_flash_write_block+0x27c>
    {
        /* Minimum write size to onchip flash is 32 bits of data */
        chunk_of_data = 0xFFFFFFFF;
   9b9b0:	00bfffc4 	movi	r2,-1
   9b9b4:	e0bffb15 	stw	r2,-20(fp)

        /* The start of data_offset must be 4 bytes (32 bits) aligned */
        if ((current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1)) == 0)
   9b9b8:	e0bff617 	ldw	r2,-40(fp)
   9b9bc:	108000cc 	andi	r2,r2,3
   9b9c0:	10001e1e 	bne	r2,zero,9ba3c <alt_onchip_flash_write_block+0x174>
        {
            /* The address is 4-byte aligned here */
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
   9b9c4:	e0bff617 	ldw	r2,-40(fp)
   9b9c8:	10c00104 	addi	r3,r2,4
   9b9cc:	00bfff04 	movi	r2,-4
   9b9d0:	1884703a 	and	r2,r3,r2
   9b9d4:	e0bff715 	stw	r2,-36(fp)
            length_of_current_write = MIN(length, next_data_offset - current_data_offset);
   9b9d8:	e0fff717 	ldw	r3,-36(fp)
   9b9dc:	e0bff617 	ldw	r2,-40(fp)
   9b9e0:	1885c83a 	sub	r2,r3,r2
   9b9e4:	e0c00217 	ldw	r3,8(fp)
   9b9e8:	1880010e 	bge	r3,r2,9b9f0 <alt_onchip_flash_write_block+0x128>
   9b9ec:	1805883a 	mov	r2,r3
   9b9f0:	e0bff915 	stw	r2,-28(fp)
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy(&chunk_of_data, &((alt_u8*)data)[buffer_offset], length_of_current_write);
   9b9f4:	e0bff517 	ldw	r2,-44(fp)
   9b9f8:	e0ffff17 	ldw	r3,-4(fp)
   9b9fc:	1887883a 	add	r3,r3,r2
   9ba00:	e13ff917 	ldw	r4,-28(fp)
   9ba04:	e0bffb04 	addi	r2,fp,-20
   9ba08:	200d883a 	mov	r6,r4
   9ba0c:	180b883a 	mov	r5,r3
   9ba10:	1009883a 	mov	r4,r2
   9ba14:	0082be40 	call	82be4 <memcpy>
            buffer_offset += length_of_current_write;
   9ba18:	e0fff517 	ldw	r3,-44(fp)
   9ba1c:	e0bff917 	ldw	r2,-28(fp)
   9ba20:	1885883a 	add	r2,r3,r2
   9ba24:	e0bff515 	stw	r2,-44(fp)
            length -= length_of_current_write;
   9ba28:	e0c00217 	ldw	r3,8(fp)
   9ba2c:	e0bff917 	ldw	r2,-28(fp)
   9ba30:	1885c83a 	sub	r2,r3,r2
   9ba34:	e0800215 	stw	r2,8(fp)
   9ba38:	00003006 	br	9bafc <alt_onchip_flash_write_block+0x234>
        } else {
            /* Calculate how many padding bytes need to be added before the start of a data offset */
            int padding = current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
   9ba3c:	e0bff617 	ldw	r2,-40(fp)
   9ba40:	108000cc 	andi	r2,r2,3
   9ba44:	e0bffa15 	stw	r2,-24(fp)

            /* Calculate new 4-byte aligned data offset */
            current_data_offset = current_data_offset - padding;
   9ba48:	e0fff617 	ldw	r3,-40(fp)
   9ba4c:	e0bffa17 	ldw	r2,-24(fp)
   9ba50:	1885c83a 	sub	r2,r3,r2
   9ba54:	e0bff615 	stw	r2,-40(fp)
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
   9ba58:	e0bff617 	ldw	r2,-40(fp)
   9ba5c:	10c00104 	addi	r3,r2,4
   9ba60:	00bfff04 	movi	r2,-4
   9ba64:	1884703a 	and	r2,r3,r2
   9ba68:	e0bff715 	stw	r2,-36(fp)
            length_of_current_write = MIN(length + padding, next_data_offset - current_data_offset);
   9ba6c:	e0fff717 	ldw	r3,-36(fp)
   9ba70:	e0bff617 	ldw	r2,-40(fp)
   9ba74:	1889c83a 	sub	r4,r3,r2
   9ba78:	e0c00217 	ldw	r3,8(fp)
   9ba7c:	e0bffa17 	ldw	r2,-24(fp)
   9ba80:	1887883a 	add	r3,r3,r2
   9ba84:	2005883a 	mov	r2,r4
   9ba88:	1880010e 	bge	r3,r2,9ba90 <alt_onchip_flash_write_block+0x1c8>
   9ba8c:	1805883a 	mov	r2,r3
   9ba90:	e0bff915 	stw	r2,-28(fp)
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy((void *)(((int)&chunk_of_data) + (int)padding), &((alt_u8*)data)[buffer_offset], length_of_current_write - padding);
   9ba94:	e0fffb04 	addi	r3,fp,-20
   9ba98:	e0bffa17 	ldw	r2,-24(fp)
   9ba9c:	1885883a 	add	r2,r3,r2
   9baa0:	100f883a 	mov	r7,r2
   9baa4:	e0bff517 	ldw	r2,-44(fp)
   9baa8:	e0ffff17 	ldw	r3,-4(fp)
   9baac:	1889883a 	add	r4,r3,r2
   9bab0:	e0fff917 	ldw	r3,-28(fp)
   9bab4:	e0bffa17 	ldw	r2,-24(fp)
   9bab8:	1885c83a 	sub	r2,r3,r2
   9babc:	100d883a 	mov	r6,r2
   9bac0:	200b883a 	mov	r5,r4
   9bac4:	3809883a 	mov	r4,r7
   9bac8:	0082be40 	call	82be4 <memcpy>
            buffer_offset += length_of_current_write - padding;
   9bacc:	e0fff917 	ldw	r3,-28(fp)
   9bad0:	e0bffa17 	ldw	r2,-24(fp)
   9bad4:	1885c83a 	sub	r2,r3,r2
   9bad8:	e0fff517 	ldw	r3,-44(fp)
   9badc:	1885883a 	add	r2,r3,r2
   9bae0:	e0bff515 	stw	r2,-44(fp)
            length -= length_of_current_write - padding;
   9bae4:	e0fff917 	ldw	r3,-28(fp)
   9bae8:	e0bffa17 	ldw	r2,-24(fp)
   9baec:	1885c83a 	sub	r2,r3,r2
   9baf0:	e0c00217 	ldw	r3,8(fp)
   9baf4:	1885c83a 	sub	r2,r3,r2
   9baf8:	e0800215 	stw	r2,8(fp)
        }

        /* Writing to flash via IO 32 bits at a time */
        IOWR_32DIRECT(flash->dev.base_addr, current_data_offset, chunk_of_data);
   9bafc:	e0bff817 	ldw	r2,-32(fp)
   9bb00:	10c00a17 	ldw	r3,40(r2)
   9bb04:	e0bff617 	ldw	r2,-40(fp)
   9bb08:	1885883a 	add	r2,r3,r2
   9bb0c:	e0fffb17 	ldw	r3,-20(fp)
   9bb10:	10c00035 	stwio	r3,0(r2)

        /* Wait until flash controller idle */
        ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
   9bb14:	e13ff817 	ldw	r4,-32(fp)
   9bb18:	009c3540 	call	9c354 <alt_onchip_flash_poll_for_status_to_go_idle>
   9bb1c:	e0bff415 	stw	r2,-48(fp)
        if (ret_code != 0)
   9bb20:	e0bff417 	ldw	r2,-48(fp)
   9bb24:	10000a1e 	bne	r2,zero,9bb50 <alt_onchip_flash_write_block+0x288>
        {
            break;
        }

        /* Wait until flash controller indicate write passed */
        ret_code = alt_onchip_flash_poll_for_status_write_passed(flash);
   9bb28:	e13ff817 	ldw	r4,-32(fp)
   9bb2c:	009c4740 	call	9c474 <alt_onchip_flash_poll_for_status_write_passed>
   9bb30:	e0bff415 	stw	r2,-48(fp)
        if (ret_code != 0)
   9bb34:	e0bff417 	ldw	r2,-48(fp)
   9bb38:	1000071e 	bne	r2,zero,9bb58 <alt_onchip_flash_write_block+0x290>
        {
            break;
        }

        /* Prepare to write next 4 bytes */
        current_data_offset = next_data_offset;
   9bb3c:	e0bff717 	ldw	r2,-36(fp)
   9bb40:	e0bff615 	stw	r2,-40(fp)

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);

    /* Check data length */
    while (length)
   9bb44:	e0800217 	ldw	r2,8(fp)
   9bb48:	103f991e 	bne	r2,zero,9b9b0 <__ram_exceptions_end+0xfff7b77c>
   9bb4c:	00000306 	br	9bb5c <alt_onchip_flash_write_block+0x294>

        /* Wait until flash controller idle */
        ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
        if (ret_code != 0)
        {
            break;
   9bb50:	0001883a 	nop
   9bb54:	00000106 	br	9bb5c <alt_onchip_flash_write_block+0x294>

        /* Wait until flash controller indicate write passed */
        ret_code = alt_onchip_flash_poll_for_status_write_passed(flash);
        if (ret_code != 0)
        {
            break;
   9bb58:	0001883a 	nop
        /* Prepare to write next 4 bytes */
        current_data_offset = next_data_offset;
    }

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
   9bb5c:	e0bff817 	ldw	r2,-32(fp)
   9bb60:	10802f17 	ldw	r2,188(r2)
   9bb64:	10c00104 	addi	r3,r2,4
   9bb68:	e0bff817 	ldw	r2,-32(fp)
   9bb6c:	10802f17 	ldw	r2,188(r2)
   9bb70:	10800104 	addi	r2,r2,4
   9bb74:	11000037 	ldwio	r4,0(r2)
   9bb78:	00840034 	movhi	r2,4096
   9bb7c:	10bfffc4 	addi	r2,r2,-1
   9bb80:	2084b03a 	or	r2,r4,r2
   9bb84:	18800035 	stwio	r2,0(r3)

    return ret_code;
   9bb88:	e0bff417 	ldw	r2,-48(fp)
}
   9bb8c:	e037883a 	mov	sp,fp
   9bb90:	dfc00117 	ldw	ra,4(sp)
   9bb94:	df000017 	ldw	fp,0(sp)
   9bb98:	dec00204 	addi	sp,sp,8
   9bb9c:	f800283a 	ret

0009bba0 <alt_onchip_flash_write>:
    alt_flash_dev *flash_info,
    int           offset,
    const void    *src_addr,
    int           length
)
{
   9bba0:	defff104 	addi	sp,sp,-60
   9bba4:	dfc00e15 	stw	ra,56(sp)
   9bba8:	df000d15 	stw	fp,52(sp)
   9bbac:	df000d04 	addi	fp,sp,52
   9bbb0:	e13ffc15 	stw	r4,-16(fp)
   9bbb4:	e17ffd15 	stw	r5,-12(fp)
   9bbb8:	e1bffe15 	stw	r6,-8(fp)
   9bbbc:	e1ffff15 	stw	r7,-4(fp)
    int         ret_code = 0;
   9bbc0:	e03ff415 	stw	zero,-48(fp)
    int         i,j;
    int         data_to_write;
    int         current_offset;
    int         full_length = length;
   9bbc4:	e0bfff17 	ldw	r2,-4(fp)
   9bbc8:	e0bff815 	stw	r2,-32(fp)
    int         start_offset = offset;
   9bbcc:	e0bffd17 	ldw	r2,-12(fp)
   9bbd0:	e0bff915 	stw	r2,-28(fp)
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;
   9bbd4:	e0bffc17 	ldw	r2,-16(fp)
   9bbd8:	e0bffa15 	stw	r2,-24(fp)

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || (length > (flash->dev.length - offset)))
   9bbdc:	e0bffa17 	ldw	r2,-24(fp)
   9bbe0:	10800b17 	ldw	r2,44(r2)
   9bbe4:	e0fffd17 	ldw	r3,-12(fp)
   9bbe8:	1880060e 	bge	r3,r2,9bc04 <alt_onchip_flash_write+0x64>
   9bbec:	e0bffa17 	ldw	r2,-24(fp)
   9bbf0:	10c00b17 	ldw	r3,44(r2)
   9bbf4:	e0bffd17 	ldw	r2,-12(fp)
   9bbf8:	1887c83a 	sub	r3,r3,r2
   9bbfc:	e0bfff17 	ldw	r2,-4(fp)
   9bc00:	1880020e 	bge	r3,r2,9bc0c <alt_onchip_flash_write+0x6c>
    {
        return -EFAULT;
   9bc04:	00bffc84 	movi	r2,-14
   9bc08:	00009606 	br	9be64 <alt_onchip_flash_write+0x2c4>
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
   9bc0c:	e03ff515 	stw	zero,-44(fp)
   9bc10:	00008706 	br	9be30 <alt_onchip_flash_write+0x290>
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
   9bc14:	e0fffa17 	ldw	r3,-24(fp)
   9bc18:	e0bff517 	ldw	r2,-44(fp)
   9bc1c:	1004913a 	slli	r2,r2,4
   9bc20:	1885883a 	add	r2,r3,r2
   9bc24:	10800d04 	addi	r2,r2,52
   9bc28:	10800017 	ldw	r2,0(r2)
   9bc2c:	e0fffd17 	ldw	r3,-12(fp)
   9bc30:	18807c16 	blt	r3,r2,9be24 <alt_onchip_flash_write+0x284>
            (offset < (flash->dev.region_info[i].offset +
   9bc34:	e0fffa17 	ldw	r3,-24(fp)
   9bc38:	e0bff517 	ldw	r2,-44(fp)
   9bc3c:	1004913a 	slli	r2,r2,4
   9bc40:	1885883a 	add	r2,r3,r2
   9bc44:	10800d04 	addi	r2,r2,52
   9bc48:	10c00017 	ldw	r3,0(r2)
            flash->dev.region_info[i].region_size)))
   9bc4c:	e13ffa17 	ldw	r4,-24(fp)
   9bc50:	e0bff517 	ldw	r2,-44(fp)
   9bc54:	1004913a 	slli	r2,r2,4
   9bc58:	2085883a 	add	r2,r4,r2
   9bc5c:	10800e04 	addi	r2,r2,56
   9bc60:	10800017 	ldw	r2,0(r2)
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
            (offset < (flash->dev.region_info[i].offset +
   9bc64:	1885883a 	add	r2,r3,r2
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
   9bc68:	e0fffd17 	ldw	r3,-12(fp)
   9bc6c:	18806d0e 	bge	r3,r2,9be24 <alt_onchip_flash_write+0x284>
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;
   9bc70:	e0fffa17 	ldw	r3,-24(fp)
   9bc74:	e0bff517 	ldw	r2,-44(fp)
   9bc78:	1004913a 	slli	r2,r2,4
   9bc7c:	1885883a 	add	r2,r3,r2
   9bc80:	10800d04 	addi	r2,r2,52
   9bc84:	10800017 	ldw	r2,0(r2)
   9bc88:	e0bff715 	stw	r2,-36(fp)

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
   9bc8c:	e03ff615 	stw	zero,-40(fp)
   9bc90:	00005c06 	br	9be04 <alt_onchip_flash_write+0x264>
            {
                if ((offset >= current_offset ) &&
   9bc94:	e0fffd17 	ldw	r3,-12(fp)
   9bc98:	e0bff717 	ldw	r2,-36(fp)
   9bc9c:	18804d16 	blt	r3,r2,9bdd4 <alt_onchip_flash_write+0x234>
                    (offset < (current_offset +
                    flash->dev.region_info[i].block_size)))
   9bca0:	e0fffa17 	ldw	r3,-24(fp)
   9bca4:	e0bff517 	ldw	r2,-44(fp)
   9bca8:	10800104 	addi	r2,r2,4
   9bcac:	1004913a 	slli	r2,r2,4
   9bcb0:	1885883a 	add	r2,r3,r2
   9bcb4:	10c00017 	ldw	r3,0(r2)
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
            {
                if ((offset >= current_offset ) &&
                    (offset < (current_offset +
   9bcb8:	e0bff717 	ldw	r2,-36(fp)
   9bcbc:	1885883a 	add	r2,r3,r2
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
            {
                if ((offset >= current_offset ) &&
   9bcc0:	e0fffd17 	ldw	r3,-12(fp)
   9bcc4:	1880430e 	bge	r3,r2,9bdd4 <alt_onchip_flash_write+0x234>
                {
                    /*
                    * Check if the contents of the block are different
                    * from the data we wish to put there
                    */
                    data_to_write = (current_offset + flash->dev.region_info[i].block_size - offset);
   9bcc8:	e0fffa17 	ldw	r3,-24(fp)
   9bccc:	e0bff517 	ldw	r2,-44(fp)
   9bcd0:	10800104 	addi	r2,r2,4
   9bcd4:	1004913a 	slli	r2,r2,4
   9bcd8:	1885883a 	add	r2,r3,r2
   9bcdc:	10c00017 	ldw	r3,0(r2)
   9bce0:	e0bff717 	ldw	r2,-36(fp)
   9bce4:	1887883a 	add	r3,r3,r2
   9bce8:	e0bffd17 	ldw	r2,-12(fp)
   9bcec:	1885c83a 	sub	r2,r3,r2
   9bcf0:	e0bffb15 	stw	r2,-20(fp)
                    data_to_write = MIN(data_to_write, length);
   9bcf4:	e0fffb17 	ldw	r3,-20(fp)
   9bcf8:	e0bfff17 	ldw	r2,-4(fp)
   9bcfc:	1880010e 	bge	r3,r2,9bd04 <alt_onchip_flash_write+0x164>
   9bd00:	1805883a 	mov	r2,r3
   9bd04:	e0bffb15 	stw	r2,-20(fp)
                    if(memcmp(src_addr, (alt_u8*)flash->dev.base_addr+offset, data_to_write))
   9bd08:	e0bffa17 	ldw	r2,-24(fp)
   9bd0c:	10c00a17 	ldw	r3,40(r2)
   9bd10:	e0bffd17 	ldw	r2,-12(fp)
   9bd14:	1885883a 	add	r2,r3,r2
   9bd18:	e0fffb17 	ldw	r3,-20(fp)
   9bd1c:	180d883a 	mov	r6,r3
   9bd20:	100b883a 	mov	r5,r2
   9bd24:	e13ffe17 	ldw	r4,-8(fp)
   9bd28:	0082b680 	call	82b68 <memcmp>
   9bd2c:	10001326 	beq	r2,zero,9bd7c <alt_onchip_flash_write+0x1dc>
                    {
                        ret_code = (*flash->dev.erase_block)(&flash->dev, current_offset);
   9bd30:	e0bffa17 	ldw	r2,-24(fp)
   9bd34:	10800817 	ldw	r2,32(r2)
   9bd38:	e0fffa17 	ldw	r3,-24(fp)
   9bd3c:	e17ff717 	ldw	r5,-36(fp)
   9bd40:	1809883a 	mov	r4,r3
   9bd44:	103ee83a 	callr	r2
   9bd48:	e0bff415 	stw	r2,-48(fp)

                        if (!ret_code)
   9bd4c:	e0bff417 	ldw	r2,-48(fp)
   9bd50:	10000a1e 	bne	r2,zero,9bd7c <alt_onchip_flash_write+0x1dc>
                        {
                            ret_code = (*flash->dev.write_block)(
   9bd54:	e0bffa17 	ldw	r2,-24(fp)
   9bd58:	10800917 	ldw	r2,36(r2)
   9bd5c:	e13ffa17 	ldw	r4,-24(fp)
   9bd60:	e0fffb17 	ldw	r3,-20(fp)
   9bd64:	d8c00015 	stw	r3,0(sp)
   9bd68:	e1fffe17 	ldw	r7,-8(fp)
   9bd6c:	e1bffd17 	ldw	r6,-12(fp)
   9bd70:	e17ff717 	ldw	r5,-36(fp)
   9bd74:	103ee83a 	callr	r2
   9bd78:	e0bff415 	stw	r2,-48(fp)
                                                                data_to_write);
                        }
                    }

                    /* Was this the last block? */
                    if ((length == data_to_write) || ret_code)
   9bd7c:	e0ffff17 	ldw	r3,-4(fp)
   9bd80:	e0bffb17 	ldw	r2,-20(fp)
   9bd84:	18802e26 	beq	r3,r2,9be40 <alt_onchip_flash_write+0x2a0>
   9bd88:	e0bff417 	ldw	r2,-48(fp)
   9bd8c:	10002c1e 	bne	r2,zero,9be40 <alt_onchip_flash_write+0x2a0>
                    {
                        goto finished;
                    }

                    length -= data_to_write;
   9bd90:	e0ffff17 	ldw	r3,-4(fp)
   9bd94:	e0bffb17 	ldw	r2,-20(fp)
   9bd98:	1885c83a 	sub	r2,r3,r2
   9bd9c:	e0bfff15 	stw	r2,-4(fp)
                    offset = current_offset + flash->dev.region_info[i].block_size;
   9bda0:	e0fffa17 	ldw	r3,-24(fp)
   9bda4:	e0bff517 	ldw	r2,-44(fp)
   9bda8:	10800104 	addi	r2,r2,4
   9bdac:	1004913a 	slli	r2,r2,4
   9bdb0:	1885883a 	add	r2,r3,r2
   9bdb4:	10c00017 	ldw	r3,0(r2)
   9bdb8:	e0bff717 	ldw	r2,-36(fp)
   9bdbc:	1885883a 	add	r2,r3,r2
   9bdc0:	e0bffd15 	stw	r2,-12(fp)
                    src_addr = (alt_u8*)src_addr + data_to_write;
   9bdc4:	e0bffb17 	ldw	r2,-20(fp)
   9bdc8:	e0fffe17 	ldw	r3,-8(fp)
   9bdcc:	1885883a 	add	r2,r3,r2
   9bdd0:	e0bffe15 	stw	r2,-8(fp)
                }
                current_offset += flash->dev.region_info[i].block_size;
   9bdd4:	e0fffa17 	ldw	r3,-24(fp)
   9bdd8:	e0bff517 	ldw	r2,-44(fp)
   9bddc:	10800104 	addi	r2,r2,4
   9bde0:	1004913a 	slli	r2,r2,4
   9bde4:	1885883a 	add	r2,r3,r2
   9bde8:	10800017 	ldw	r2,0(r2)
   9bdec:	e0fff717 	ldw	r3,-36(fp)
   9bdf0:	1885883a 	add	r2,r3,r2
   9bdf4:	e0bff715 	stw	r2,-36(fp)
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
   9bdf8:	e0bff617 	ldw	r2,-40(fp)
   9bdfc:	10800044 	addi	r2,r2,1
   9be00:	e0bff615 	stw	r2,-40(fp)
   9be04:	e0fffa17 	ldw	r3,-24(fp)
   9be08:	e0bff517 	ldw	r2,-44(fp)
   9be0c:	1004913a 	slli	r2,r2,4
   9be10:	1885883a 	add	r2,r3,r2
   9be14:	10800f04 	addi	r2,r2,60
   9be18:	10800017 	ldw	r2,0(r2)
   9be1c:	e0fff617 	ldw	r3,-40(fp)
   9be20:	18bf9c16 	blt	r3,r2,9bc94 <__ram_exceptions_end+0xfff7ba60>
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
   9be24:	e0bff517 	ldw	r2,-44(fp)
   9be28:	10800044 	addi	r2,r2,1
   9be2c:	e0bff515 	stw	r2,-44(fp)
   9be30:	e0bffa17 	ldw	r2,-24(fp)
   9be34:	10800c17 	ldw	r2,48(r2)
   9be38:	e0fff517 	ldw	r3,-44(fp)
   9be3c:	18bf7516 	blt	r3,r2,9bc14 <__ram_exceptions_end+0xfff7b9e0>
            }
        }
    }

finished:
    alt_dcache_flush((alt_u8*)flash->dev.base_addr+start_offset, full_length);
   9be40:	e0bffa17 	ldw	r2,-24(fp)
   9be44:	10c00a17 	ldw	r3,40(r2)
   9be48:	e0bff917 	ldw	r2,-28(fp)
   9be4c:	1885883a 	add	r2,r3,r2
   9be50:	e0fff817 	ldw	r3,-32(fp)
   9be54:	180b883a 	mov	r5,r3
   9be58:	1009883a 	mov	r4,r2
   9be5c:	009c7880 	call	9c788 <alt_dcache_flush>
    return ret_code;
   9be60:	e0bff417 	ldw	r2,-48(fp)
}
   9be64:	e037883a 	mov	sp,fp
   9be68:	dfc00117 	ldw	ra,4(sp)
   9be6c:	df000017 	ldw	fp,0(sp)
   9be70:	dec00204 	addi	sp,sp,8
   9be74:	f800283a 	ret

0009be78 <altera_onchip_flash_init>:
**/
void altera_onchip_flash_init
(
    alt_onchip_flash_dev *flash
)
{
   9be78:	defff504 	addi	sp,sp,-44
   9be7c:	dfc00a15 	stw	ra,40(sp)
   9be80:	df000915 	stw	fp,36(sp)
   9be84:	dc000815 	stw	r16,32(sp)
   9be88:	df000904 	addi	fp,sp,36
   9be8c:	e13ffe15 	stw	r4,-8(fp)
    /* A region is a sector of the onchip flash */
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
   9be90:	e03ff815 	stw	zero,-32(fp)
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
   9be94:	e03ff915 	stw	zero,-28(fp)
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
   9be98:	e03ffa15 	stw	zero,-24(fp)
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
   9be9c:	e03ffb15 	stw	zero,-20(fp)
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;
   9bea0:	e03ffc15 	stw	zero,-16(fp)

    /* Set up flash_region data structures. */
    number_of_regions = 0;
   9bea4:	e03ff715 	stw	zero,-36(fp)
    region_info = &flash->dev.region_info[0];
   9bea8:	e0bffe17 	ldw	r2,-8(fp)
   9beac:	10800d04 	addi	r2,r2,52
   9beb0:	e0bffd15 	stw	r2,-12(fp)

    if (flash->csr_base != NULL) {
   9beb4:	e0bffe17 	ldw	r2,-8(fp)
   9beb8:	10802f17 	ldw	r2,188(r2)
   9bebc:	10001926 	beq	r2,zero,9bf24 <altera_onchip_flash_init+0xac>
        sector1_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_MSK;
   9bec0:	e0bffe17 	ldw	r2,-8(fp)
   9bec4:	10802f17 	ldw	r2,188(r2)
   9bec8:	10800037 	ldwio	r2,0(r2)
   9becc:	1080080c 	andi	r2,r2,32
   9bed0:	e0bff815 	stw	r2,-32(fp)
        sector2_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_MSK;
   9bed4:	e0bffe17 	ldw	r2,-8(fp)
   9bed8:	10802f17 	ldw	r2,188(r2)
   9bedc:	10800037 	ldwio	r2,0(r2)
   9bee0:	1080100c 	andi	r2,r2,64
   9bee4:	e0bff915 	stw	r2,-28(fp)
        sector3_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_MSK;
   9bee8:	e0bffe17 	ldw	r2,-8(fp)
   9beec:	10802f17 	ldw	r2,188(r2)
   9bef0:	10800037 	ldwio	r2,0(r2)
   9bef4:	1080200c 	andi	r2,r2,128
   9bef8:	e0bffa15 	stw	r2,-24(fp)
        sector4_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_MSK;
   9befc:	e0bffe17 	ldw	r2,-8(fp)
   9bf00:	10802f17 	ldw	r2,188(r2)
   9bf04:	10800037 	ldwio	r2,0(r2)
   9bf08:	1080400c 	andi	r2,r2,256
   9bf0c:	e0bffb15 	stw	r2,-20(fp)
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
   9bf10:	e0bffe17 	ldw	r2,-8(fp)
   9bf14:	10802f17 	ldw	r2,188(r2)
   9bf18:	10800037 	ldwio	r2,0(r2)
   9bf1c:	1080800c 	andi	r2,r2,512
   9bf20:	e0bffc15 	stw	r2,-16(fp)
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {
   9bf24:	e0bffe17 	ldw	r2,-8(fp)
   9bf28:	10803017 	ldw	r2,192(r2)
   9bf2c:	10800058 	cmpnei	r2,r2,1
   9bf30:	10002f1e 	bne	r2,zero,9bff0 <altera_onchip_flash_init+0x178>
   9bf34:	e0bff817 	ldw	r2,-32(fp)
   9bf38:	10800820 	cmpeqi	r2,r2,32
   9bf3c:	10002c1e 	bne	r2,zero,9bff0 <altera_onchip_flash_init+0x178>

        region_info[number_of_regions].offset = flash->sector1_start_addr;
   9bf40:	e0bff717 	ldw	r2,-36(fp)
   9bf44:	1004913a 	slli	r2,r2,4
   9bf48:	e0fffd17 	ldw	r3,-12(fp)
   9bf4c:	1885883a 	add	r2,r3,r2
   9bf50:	e0fffe17 	ldw	r3,-8(fp)
   9bf54:	18c03117 	ldw	r3,196(r3)
   9bf58:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector1_end_addr - flash->sector1_start_addr + 1;
   9bf5c:	e0bff717 	ldw	r2,-36(fp)
   9bf60:	1004913a 	slli	r2,r2,4
   9bf64:	e0fffd17 	ldw	r3,-12(fp)
   9bf68:	1885883a 	add	r2,r3,r2
   9bf6c:	e0fffe17 	ldw	r3,-8(fp)
   9bf70:	19003217 	ldw	r4,200(r3)
   9bf74:	e0fffe17 	ldw	r3,-8(fp)
   9bf78:	18c03117 	ldw	r3,196(r3)
   9bf7c:	20c7c83a 	sub	r3,r4,r3
   9bf80:	18c00044 	addi	r3,r3,1
   9bf84:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
   9bf88:	e0bff717 	ldw	r2,-36(fp)
   9bf8c:	1004913a 	slli	r2,r2,4
   9bf90:	e0fffd17 	ldw	r3,-12(fp)
   9bf94:	18a1883a 	add	r16,r3,r2
   9bf98:	e0fffe17 	ldw	r3,-8(fp)
   9bf9c:	e0bff717 	ldw	r2,-36(fp)
   9bfa0:	1004913a 	slli	r2,r2,4
   9bfa4:	1885883a 	add	r2,r3,r2
   9bfa8:	10800e04 	addi	r2,r2,56
   9bfac:	10c00017 	ldw	r3,0(r2)
   9bfb0:	e0bffe17 	ldw	r2,-8(fp)
   9bfb4:	10803f17 	ldw	r2,252(r2)
   9bfb8:	100b883a 	mov	r5,r2
   9bfbc:	1809883a 	mov	r4,r3
   9bfc0:	00820600 	call	82060 <__divsi3>
   9bfc4:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
   9bfc8:	e0bff717 	ldw	r2,-36(fp)
   9bfcc:	1004913a 	slli	r2,r2,4
   9bfd0:	e0fffd17 	ldw	r3,-12(fp)
   9bfd4:	1885883a 	add	r2,r3,r2
   9bfd8:	e0fffe17 	ldw	r3,-8(fp)
   9bfdc:	18c03f17 	ldw	r3,252(r3)
   9bfe0:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
   9bfe4:	e0bff717 	ldw	r2,-36(fp)
   9bfe8:	10800044 	addi	r2,r2,1
   9bfec:	e0bff715 	stw	r2,-36(fp)
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {
   9bff0:	e0bffe17 	ldw	r2,-8(fp)
   9bff4:	10803317 	ldw	r2,204(r2)
   9bff8:	10800058 	cmpnei	r2,r2,1
   9bffc:	10002f1e 	bne	r2,zero,9c0bc <altera_onchip_flash_init+0x244>
   9c000:	e0bff917 	ldw	r2,-28(fp)
   9c004:	10801020 	cmpeqi	r2,r2,64
   9c008:	10002c1e 	bne	r2,zero,9c0bc <altera_onchip_flash_init+0x244>

        region_info[number_of_regions].offset = flash->sector2_start_addr;
   9c00c:	e0bff717 	ldw	r2,-36(fp)
   9c010:	1004913a 	slli	r2,r2,4
   9c014:	e0fffd17 	ldw	r3,-12(fp)
   9c018:	1885883a 	add	r2,r3,r2
   9c01c:	e0fffe17 	ldw	r3,-8(fp)
   9c020:	18c03417 	ldw	r3,208(r3)
   9c024:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
   9c028:	e0bff717 	ldw	r2,-36(fp)
   9c02c:	1004913a 	slli	r2,r2,4
   9c030:	e0fffd17 	ldw	r3,-12(fp)
   9c034:	1885883a 	add	r2,r3,r2
   9c038:	e0fffe17 	ldw	r3,-8(fp)
   9c03c:	19003517 	ldw	r4,212(r3)
   9c040:	e0fffe17 	ldw	r3,-8(fp)
   9c044:	18c03417 	ldw	r3,208(r3)
   9c048:	20c7c83a 	sub	r3,r4,r3
   9c04c:	18c00044 	addi	r3,r3,1
   9c050:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
   9c054:	e0bff717 	ldw	r2,-36(fp)
   9c058:	1004913a 	slli	r2,r2,4
   9c05c:	e0fffd17 	ldw	r3,-12(fp)
   9c060:	18a1883a 	add	r16,r3,r2
   9c064:	e0fffe17 	ldw	r3,-8(fp)
   9c068:	e0bff717 	ldw	r2,-36(fp)
   9c06c:	1004913a 	slli	r2,r2,4
   9c070:	1885883a 	add	r2,r3,r2
   9c074:	10800e04 	addi	r2,r2,56
   9c078:	10c00017 	ldw	r3,0(r2)
   9c07c:	e0bffe17 	ldw	r2,-8(fp)
   9c080:	10803f17 	ldw	r2,252(r2)
   9c084:	100b883a 	mov	r5,r2
   9c088:	1809883a 	mov	r4,r3
   9c08c:	00820600 	call	82060 <__divsi3>
   9c090:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
   9c094:	e0bff717 	ldw	r2,-36(fp)
   9c098:	1004913a 	slli	r2,r2,4
   9c09c:	e0fffd17 	ldw	r3,-12(fp)
   9c0a0:	1885883a 	add	r2,r3,r2
   9c0a4:	e0fffe17 	ldw	r3,-8(fp)
   9c0a8:	18c03f17 	ldw	r3,252(r3)
   9c0ac:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
   9c0b0:	e0bff717 	ldw	r2,-36(fp)
   9c0b4:	10800044 	addi	r2,r2,1
   9c0b8:	e0bff715 	stw	r2,-36(fp)
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {
   9c0bc:	e0bffe17 	ldw	r2,-8(fp)
   9c0c0:	10803617 	ldw	r2,216(r2)
   9c0c4:	10800058 	cmpnei	r2,r2,1
   9c0c8:	10002f1e 	bne	r2,zero,9c188 <altera_onchip_flash_init+0x310>
   9c0cc:	e0bffa17 	ldw	r2,-24(fp)
   9c0d0:	10802020 	cmpeqi	r2,r2,128
   9c0d4:	10002c1e 	bne	r2,zero,9c188 <altera_onchip_flash_init+0x310>

        region_info[number_of_regions].offset = flash->sector3_start_addr;
   9c0d8:	e0bff717 	ldw	r2,-36(fp)
   9c0dc:	1004913a 	slli	r2,r2,4
   9c0e0:	e0fffd17 	ldw	r3,-12(fp)
   9c0e4:	1885883a 	add	r2,r3,r2
   9c0e8:	e0fffe17 	ldw	r3,-8(fp)
   9c0ec:	18c03717 	ldw	r3,220(r3)
   9c0f0:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
   9c0f4:	e0bff717 	ldw	r2,-36(fp)
   9c0f8:	1004913a 	slli	r2,r2,4
   9c0fc:	e0fffd17 	ldw	r3,-12(fp)
   9c100:	1885883a 	add	r2,r3,r2
   9c104:	e0fffe17 	ldw	r3,-8(fp)
   9c108:	19003817 	ldw	r4,224(r3)
   9c10c:	e0fffe17 	ldw	r3,-8(fp)
   9c110:	18c03717 	ldw	r3,220(r3)
   9c114:	20c7c83a 	sub	r3,r4,r3
   9c118:	18c00044 	addi	r3,r3,1
   9c11c:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
   9c120:	e0bff717 	ldw	r2,-36(fp)
   9c124:	1004913a 	slli	r2,r2,4
   9c128:	e0fffd17 	ldw	r3,-12(fp)
   9c12c:	18a1883a 	add	r16,r3,r2
   9c130:	e0fffe17 	ldw	r3,-8(fp)
   9c134:	e0bff717 	ldw	r2,-36(fp)
   9c138:	1004913a 	slli	r2,r2,4
   9c13c:	1885883a 	add	r2,r3,r2
   9c140:	10800e04 	addi	r2,r2,56
   9c144:	10c00017 	ldw	r3,0(r2)
   9c148:	e0bffe17 	ldw	r2,-8(fp)
   9c14c:	10803f17 	ldw	r2,252(r2)
   9c150:	100b883a 	mov	r5,r2
   9c154:	1809883a 	mov	r4,r3
   9c158:	00820600 	call	82060 <__divsi3>
   9c15c:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
   9c160:	e0bff717 	ldw	r2,-36(fp)
   9c164:	1004913a 	slli	r2,r2,4
   9c168:	e0fffd17 	ldw	r3,-12(fp)
   9c16c:	1885883a 	add	r2,r3,r2
   9c170:	e0fffe17 	ldw	r3,-8(fp)
   9c174:	18c03f17 	ldw	r3,252(r3)
   9c178:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
   9c17c:	e0bff717 	ldw	r2,-36(fp)
   9c180:	10800044 	addi	r2,r2,1
   9c184:	e0bff715 	stw	r2,-36(fp)
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {
   9c188:	e0bffe17 	ldw	r2,-8(fp)
   9c18c:	10803917 	ldw	r2,228(r2)
   9c190:	10800058 	cmpnei	r2,r2,1
   9c194:	10002f1e 	bne	r2,zero,9c254 <altera_onchip_flash_init+0x3dc>
   9c198:	e0bffb17 	ldw	r2,-20(fp)
   9c19c:	10804020 	cmpeqi	r2,r2,256
   9c1a0:	10002c1e 	bne	r2,zero,9c254 <altera_onchip_flash_init+0x3dc>

        region_info[number_of_regions].offset = flash->sector4_start_addr;
   9c1a4:	e0bff717 	ldw	r2,-36(fp)
   9c1a8:	1004913a 	slli	r2,r2,4
   9c1ac:	e0fffd17 	ldw	r3,-12(fp)
   9c1b0:	1885883a 	add	r2,r3,r2
   9c1b4:	e0fffe17 	ldw	r3,-8(fp)
   9c1b8:	18c03a17 	ldw	r3,232(r3)
   9c1bc:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
   9c1c0:	e0bff717 	ldw	r2,-36(fp)
   9c1c4:	1004913a 	slli	r2,r2,4
   9c1c8:	e0fffd17 	ldw	r3,-12(fp)
   9c1cc:	1885883a 	add	r2,r3,r2
   9c1d0:	e0fffe17 	ldw	r3,-8(fp)
   9c1d4:	19003b17 	ldw	r4,236(r3)
   9c1d8:	e0fffe17 	ldw	r3,-8(fp)
   9c1dc:	18c03a17 	ldw	r3,232(r3)
   9c1e0:	20c7c83a 	sub	r3,r4,r3
   9c1e4:	18c00044 	addi	r3,r3,1
   9c1e8:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
   9c1ec:	e0bff717 	ldw	r2,-36(fp)
   9c1f0:	1004913a 	slli	r2,r2,4
   9c1f4:	e0fffd17 	ldw	r3,-12(fp)
   9c1f8:	18a1883a 	add	r16,r3,r2
   9c1fc:	e0fffe17 	ldw	r3,-8(fp)
   9c200:	e0bff717 	ldw	r2,-36(fp)
   9c204:	1004913a 	slli	r2,r2,4
   9c208:	1885883a 	add	r2,r3,r2
   9c20c:	10800e04 	addi	r2,r2,56
   9c210:	10c00017 	ldw	r3,0(r2)
   9c214:	e0bffe17 	ldw	r2,-8(fp)
   9c218:	10803f17 	ldw	r2,252(r2)
   9c21c:	100b883a 	mov	r5,r2
   9c220:	1809883a 	mov	r4,r3
   9c224:	00820600 	call	82060 <__divsi3>
   9c228:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
   9c22c:	e0bff717 	ldw	r2,-36(fp)
   9c230:	1004913a 	slli	r2,r2,4
   9c234:	e0fffd17 	ldw	r3,-12(fp)
   9c238:	1885883a 	add	r2,r3,r2
   9c23c:	e0fffe17 	ldw	r3,-8(fp)
   9c240:	18c03f17 	ldw	r3,252(r3)
   9c244:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
   9c248:	e0bff717 	ldw	r2,-36(fp)
   9c24c:	10800044 	addi	r2,r2,1
   9c250:	e0bff715 	stw	r2,-36(fp)
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {
   9c254:	e0bffe17 	ldw	r2,-8(fp)
   9c258:	10803c17 	ldw	r2,240(r2)
   9c25c:	10800058 	cmpnei	r2,r2,1
   9c260:	10002f1e 	bne	r2,zero,9c320 <altera_onchip_flash_init+0x4a8>
   9c264:	e0bffc17 	ldw	r2,-16(fp)
   9c268:	10808020 	cmpeqi	r2,r2,512
   9c26c:	10002c1e 	bne	r2,zero,9c320 <altera_onchip_flash_init+0x4a8>

        region_info[number_of_regions].offset = flash->sector5_start_addr;
   9c270:	e0bff717 	ldw	r2,-36(fp)
   9c274:	1004913a 	slli	r2,r2,4
   9c278:	e0fffd17 	ldw	r3,-12(fp)
   9c27c:	1885883a 	add	r2,r3,r2
   9c280:	e0fffe17 	ldw	r3,-8(fp)
   9c284:	18c03d17 	ldw	r3,244(r3)
   9c288:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
   9c28c:	e0bff717 	ldw	r2,-36(fp)
   9c290:	1004913a 	slli	r2,r2,4
   9c294:	e0fffd17 	ldw	r3,-12(fp)
   9c298:	1885883a 	add	r2,r3,r2
   9c29c:	e0fffe17 	ldw	r3,-8(fp)
   9c2a0:	19003e17 	ldw	r4,248(r3)
   9c2a4:	e0fffe17 	ldw	r3,-8(fp)
   9c2a8:	18c03d17 	ldw	r3,244(r3)
   9c2ac:	20c7c83a 	sub	r3,r4,r3
   9c2b0:	18c00044 	addi	r3,r3,1
   9c2b4:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
   9c2b8:	e0bff717 	ldw	r2,-36(fp)
   9c2bc:	1004913a 	slli	r2,r2,4
   9c2c0:	e0fffd17 	ldw	r3,-12(fp)
   9c2c4:	18a1883a 	add	r16,r3,r2
   9c2c8:	e0fffe17 	ldw	r3,-8(fp)
   9c2cc:	e0bff717 	ldw	r2,-36(fp)
   9c2d0:	1004913a 	slli	r2,r2,4
   9c2d4:	1885883a 	add	r2,r3,r2
   9c2d8:	10800e04 	addi	r2,r2,56
   9c2dc:	10c00017 	ldw	r3,0(r2)
   9c2e0:	e0bffe17 	ldw	r2,-8(fp)
   9c2e4:	10803f17 	ldw	r2,252(r2)
   9c2e8:	100b883a 	mov	r5,r2
   9c2ec:	1809883a 	mov	r4,r3
   9c2f0:	00820600 	call	82060 <__divsi3>
   9c2f4:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
   9c2f8:	e0bff717 	ldw	r2,-36(fp)
   9c2fc:	1004913a 	slli	r2,r2,4
   9c300:	e0fffd17 	ldw	r3,-12(fp)
   9c304:	1885883a 	add	r2,r3,r2
   9c308:	e0fffe17 	ldw	r3,-8(fp)
   9c30c:	18c03f17 	ldw	r3,252(r3)
   9c310:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
   9c314:	e0bff717 	ldw	r2,-36(fp)
   9c318:	10800044 	addi	r2,r2,1
   9c31c:	e0bff715 	stw	r2,-36(fp)
    }

    /* Update number of regions. */
    flash->dev.number_of_regions = number_of_regions;
   9c320:	e0bffe17 	ldw	r2,-8(fp)
   9c324:	e0fff717 	ldw	r3,-36(fp)
   9c328:	10c00c15 	stw	r3,48(r2)

    /*
    *  Register this device as a valid flash device type
    */
    alt_flash_device_register(&(flash->dev));
   9c32c:	e0bffe17 	ldw	r2,-8(fp)
   9c330:	1009883a 	mov	r4,r2
   9c334:	009b5c40 	call	9b5c4 <alt_flash_device_register>
}
   9c338:	0001883a 	nop
   9c33c:	e6ffff04 	addi	sp,fp,-4
   9c340:	dfc00217 	ldw	ra,8(sp)
   9c344:	df000117 	ldw	fp,4(sp)
   9c348:	dc000017 	ldw	r16,0(sp)
   9c34c:	dec00304 	addi	sp,sp,12
   9c350:	f800283a 	ret

0009c354 <alt_onchip_flash_poll_for_status_to_go_idle>:
**/
int alt_onchip_flash_poll_for_status_to_go_idle
(
    alt_onchip_flash_dev *flash
)
{
   9c354:	defffa04 	addi	sp,sp,-24
   9c358:	dfc00515 	stw	ra,20(sp)
   9c35c:	df000415 	stw	fp,16(sp)
   9c360:	df000404 	addi	fp,sp,16
   9c364:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
   9c368:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
   9c36c:	008002f4 	movhi	r2,11
   9c370:	10ab9804 	addi	r2,r2,-20896
   9c374:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
   9c378:	008002f4 	movhi	r2,11
   9c37c:	10ab9804 	addi	r2,r2,-20896
   9c380:	e0bffd15 	stw	r2,-12(fp)

    while (
   9c384:	00000c06 	br	9c3b8 <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
   9c388:	01000044 	movi	r4,1
   9c38c:	009c6300 	call	9c630 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
   9c390:	e0bffe17 	ldw	r2,-8(fp)
   9c394:	10000826 	beq	r2,zero,9c3b8 <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
            count_down--;
   9c398:	e0bffd17 	ldw	r2,-12(fp)
   9c39c:	10bfffc4 	addi	r2,r2,-1
   9c3a0:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
   9c3a4:	e0bffd17 	ldw	r2,-12(fp)
   9c3a8:	1000031e 	bne	r2,zero,9c3b8 <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
   9c3ac:	00bfe304 	movi	r2,-116
   9c3b0:	e0bffc15 	stw	r2,-16(fp)
                break;
   9c3b4:	00000506 	br	9c3cc <alt_onchip_flash_poll_for_status_to_go_idle+0x78>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
   9c3b8:	e0bfff17 	ldw	r2,-4(fp)
   9c3bc:	10802f17 	ldw	r2,188(r2)
   9c3c0:	10800037 	ldwio	r2,0(r2)
   9c3c4:	108000cc 	andi	r2,r2,3
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
   9c3c8:	103fef1e 	bne	r2,zero,9c388 <__ram_exceptions_end+0xfff7c154>
                break;
            }
        }
    }

    return ret_code;
   9c3cc:	e0bffc17 	ldw	r2,-16(fp)
}
   9c3d0:	e037883a 	mov	sp,fp
   9c3d4:	dfc00117 	ldw	ra,4(sp)
   9c3d8:	df000017 	ldw	fp,0(sp)
   9c3dc:	dec00204 	addi	sp,sp,8
   9c3e0:	f800283a 	ret

0009c3e4 <alt_onchip_flash_poll_for_status_erase_passed>:
**/
int alt_onchip_flash_poll_for_status_erase_passed
(
    alt_onchip_flash_dev *flash
)
{
   9c3e4:	defffa04 	addi	sp,sp,-24
   9c3e8:	dfc00515 	stw	ra,20(sp)
   9c3ec:	df000415 	stw	fp,16(sp)
   9c3f0:	df000404 	addi	fp,sp,16
   9c3f4:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
   9c3f8:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
   9c3fc:	008002f4 	movhi	r2,11
   9c400:	10ab9804 	addi	r2,r2,-20896
   9c404:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
   9c408:	008002f4 	movhi	r2,11
   9c40c:	10ab9804 	addi	r2,r2,-20896
   9c410:	e0bffd15 	stw	r2,-12(fp)

    while (
   9c414:	00000c06 	br	9c448 <alt_onchip_flash_poll_for_status_erase_passed+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_ERASE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_ERASE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
   9c418:	01000044 	movi	r4,1
   9c41c:	009c6300 	call	9c630 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
   9c420:	e0bffe17 	ldw	r2,-8(fp)
   9c424:	10000826 	beq	r2,zero,9c448 <alt_onchip_flash_poll_for_status_erase_passed+0x64>
            count_down--;
   9c428:	e0bffd17 	ldw	r2,-12(fp)
   9c42c:	10bfffc4 	addi	r2,r2,-1
   9c430:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
   9c434:	e0bffd17 	ldw	r2,-12(fp)
   9c438:	1000031e 	bne	r2,zero,9c448 <alt_onchip_flash_poll_for_status_erase_passed+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
   9c43c:	00bfe304 	movi	r2,-116
   9c440:	e0bffc15 	stw	r2,-16(fp)
                break;
   9c444:	00000506 	br	9c45c <alt_onchip_flash_poll_for_status_erase_passed+0x78>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
   9c448:	e0bfff17 	ldw	r2,-4(fp)
   9c44c:	10802f17 	ldw	r2,188(r2)
   9c450:	10800037 	ldwio	r2,0(r2)
   9c454:	1080040c 	andi	r2,r2,16
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
   9c458:	103fef26 	beq	r2,zero,9c418 <__ram_exceptions_end+0xfff7c1e4>
                break;
            }
        }
    }

    return ret_code;
   9c45c:	e0bffc17 	ldw	r2,-16(fp)
}
   9c460:	e037883a 	mov	sp,fp
   9c464:	dfc00117 	ldw	ra,4(sp)
   9c468:	df000017 	ldw	fp,0(sp)
   9c46c:	dec00204 	addi	sp,sp,8
   9c470:	f800283a 	ret

0009c474 <alt_onchip_flash_poll_for_status_write_passed>:
**/
int alt_onchip_flash_poll_for_status_write_passed
(
    alt_onchip_flash_dev *flash
)
{
   9c474:	defffa04 	addi	sp,sp,-24
   9c478:	dfc00515 	stw	ra,20(sp)
   9c47c:	df000415 	stw	fp,16(sp)
   9c480:	df000404 	addi	fp,sp,16
   9c484:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
   9c488:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
   9c48c:	008002f4 	movhi	r2,11
   9c490:	10ab9804 	addi	r2,r2,-20896
   9c494:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
   9c498:	008002f4 	movhi	r2,11
   9c49c:	10ab9804 	addi	r2,r2,-20896
   9c4a0:	e0bffd15 	stw	r2,-12(fp)

    while (
   9c4a4:	00000c06 	br	9c4d8 <alt_onchip_flash_poll_for_status_write_passed+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_WRITE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_WRITE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
   9c4a8:	01000044 	movi	r4,1
   9c4ac:	009c6300 	call	9c630 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
   9c4b0:	e0bffe17 	ldw	r2,-8(fp)
   9c4b4:	10000826 	beq	r2,zero,9c4d8 <alt_onchip_flash_poll_for_status_write_passed+0x64>
            count_down--;
   9c4b8:	e0bffd17 	ldw	r2,-12(fp)
   9c4bc:	10bfffc4 	addi	r2,r2,-1
   9c4c0:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
   9c4c4:	e0bffd17 	ldw	r2,-12(fp)
   9c4c8:	1000031e 	bne	r2,zero,9c4d8 <alt_onchip_flash_poll_for_status_write_passed+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
   9c4cc:	00bfe304 	movi	r2,-116
   9c4d0:	e0bffc15 	stw	r2,-16(fp)
                break;
   9c4d4:	00000506 	br	9c4ec <alt_onchip_flash_poll_for_status_write_passed+0x78>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
   9c4d8:	e0bfff17 	ldw	r2,-4(fp)
   9c4dc:	10802f17 	ldw	r2,188(r2)
   9c4e0:	10800037 	ldwio	r2,0(r2)
   9c4e4:	1080020c 	andi	r2,r2,8
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
   9c4e8:	103fef26 	beq	r2,zero,9c4a8 <__ram_exceptions_end+0xfff7c274>
                break;
            }
        }
    }

    return ret_code;
   9c4ec:	e0bffc17 	ldw	r2,-16(fp)
}
   9c4f0:	e037883a 	mov	sp,fp
   9c4f4:	dfc00117 	ldw	ra,4(sp)
   9c4f8:	df000017 	ldw	fp,0(sp)
   9c4fc:	dec00204 	addi	sp,sp,8
   9c500:	f800283a 	ret

0009c504 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   9c504:	defff504 	addi	sp,sp,-44
   9c508:	df000a15 	stw	fp,40(sp)
   9c50c:	df000a04 	addi	fp,sp,40
   9c510:	e13ffc15 	stw	r4,-16(fp)
   9c514:	e17ffd15 	stw	r5,-12(fp)
   9c518:	e1bffe15 	stw	r6,-8(fp)
   9c51c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   9c520:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   9c524:	d0a76017 	ldw	r2,-25216(gp)
  
  if (alt_ticks_per_second ())
   9c528:	10003c26 	beq	r2,zero,9c61c <alt_alarm_start+0x118>
  {
    if (alarm)
   9c52c:	e0bffc17 	ldw	r2,-16(fp)
   9c530:	10003826 	beq	r2,zero,9c614 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   9c534:	e0bffc17 	ldw	r2,-16(fp)
   9c538:	e0fffe17 	ldw	r3,-8(fp)
   9c53c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   9c540:	e0bffc17 	ldw	r2,-16(fp)
   9c544:	e0ffff17 	ldw	r3,-4(fp)
   9c548:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9c54c:	0005303a 	rdctl	r2,status
   9c550:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9c554:	e0fff917 	ldw	r3,-28(fp)
   9c558:	00bfff84 	movi	r2,-2
   9c55c:	1884703a 	and	r2,r3,r2
   9c560:	1001703a 	wrctl	status,r2
  
  return context;
   9c564:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   9c568:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   9c56c:	d0a76117 	ldw	r2,-25212(gp)
      
      current_nticks = alt_nticks();
   9c570:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   9c574:	e0fffd17 	ldw	r3,-12(fp)
   9c578:	e0bff617 	ldw	r2,-40(fp)
   9c57c:	1885883a 	add	r2,r3,r2
   9c580:	10c00044 	addi	r3,r2,1
   9c584:	e0bffc17 	ldw	r2,-16(fp)
   9c588:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   9c58c:	e0bffc17 	ldw	r2,-16(fp)
   9c590:	10c00217 	ldw	r3,8(r2)
   9c594:	e0bff617 	ldw	r2,-40(fp)
   9c598:	1880042e 	bgeu	r3,r2,9c5ac <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   9c59c:	e0bffc17 	ldw	r2,-16(fp)
   9c5a0:	00c00044 	movi	r3,1
   9c5a4:	10c00405 	stb	r3,16(r2)
   9c5a8:	00000206 	br	9c5b4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   9c5ac:	e0bffc17 	ldw	r2,-16(fp)
   9c5b0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   9c5b4:	e0bffc17 	ldw	r2,-16(fp)
   9c5b8:	d0e01404 	addi	r3,gp,-32688
   9c5bc:	e0fffa15 	stw	r3,-24(fp)
   9c5c0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   9c5c4:	e0bffb17 	ldw	r2,-20(fp)
   9c5c8:	e0fffa17 	ldw	r3,-24(fp)
   9c5cc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   9c5d0:	e0bffa17 	ldw	r2,-24(fp)
   9c5d4:	10c00017 	ldw	r3,0(r2)
   9c5d8:	e0bffb17 	ldw	r2,-20(fp)
   9c5dc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   9c5e0:	e0bffa17 	ldw	r2,-24(fp)
   9c5e4:	10800017 	ldw	r2,0(r2)
   9c5e8:	e0fffb17 	ldw	r3,-20(fp)
   9c5ec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   9c5f0:	e0bffa17 	ldw	r2,-24(fp)
   9c5f4:	e0fffb17 	ldw	r3,-20(fp)
   9c5f8:	10c00015 	stw	r3,0(r2)
   9c5fc:	e0bff817 	ldw	r2,-32(fp)
   9c600:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9c604:	e0bff717 	ldw	r2,-36(fp)
   9c608:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   9c60c:	0005883a 	mov	r2,zero
   9c610:	00000306 	br	9c620 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   9c614:	00bffa84 	movi	r2,-22
   9c618:	00000106 	br	9c620 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   9c61c:	00bfde84 	movi	r2,-134
  }
}
   9c620:	e037883a 	mov	sp,fp
   9c624:	df000017 	ldw	fp,0(sp)
   9c628:	dec00104 	addi	sp,sp,4
   9c62c:	f800283a 	ret

0009c630 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   9c630:	defffa04 	addi	sp,sp,-24
   9c634:	dfc00515 	stw	ra,20(sp)
   9c638:	df000415 	stw	fp,16(sp)
   9c63c:	df000404 	addi	fp,sp,16
   9c640:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   9c644:	00800244 	movi	r2,9
   9c648:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   9c64c:	014003f4 	movhi	r5,15
   9c650:	29509004 	addi	r5,r5,16960
   9c654:	e13ffd17 	ldw	r4,-12(fp)
   9c658:	00822140 	call	82214 <__mulsi3>
   9c65c:	100b883a 	mov	r5,r2
   9c660:	0100bef4 	movhi	r4,763
   9c664:	213c2004 	addi	r4,r4,-3968
   9c668:	00821580 	call	82158 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   9c66c:	100b883a 	mov	r5,r2
   9c670:	01200034 	movhi	r4,32768
   9c674:	213fffc4 	addi	r4,r4,-1
   9c678:	00821580 	call	82158 <__udivsi3>
   9c67c:	100b883a 	mov	r5,r2
   9c680:	e13fff17 	ldw	r4,-4(fp)
   9c684:	00821580 	call	82158 <__udivsi3>
   9c688:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   9c68c:	e0bffe17 	ldw	r2,-8(fp)
   9c690:	10002a26 	beq	r2,zero,9c73c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   9c694:	e03ffc15 	stw	zero,-16(fp)
   9c698:	00001706 	br	9c6f8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   9c69c:	00a00034 	movhi	r2,32768
   9c6a0:	10bfffc4 	addi	r2,r2,-1
   9c6a4:	10bfffc4 	addi	r2,r2,-1
   9c6a8:	103ffe1e 	bne	r2,zero,9c6a4 <__ram_exceptions_end+0xfff7c470>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   9c6ac:	014003f4 	movhi	r5,15
   9c6b0:	29509004 	addi	r5,r5,16960
   9c6b4:	e13ffd17 	ldw	r4,-12(fp)
   9c6b8:	00822140 	call	82214 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   9c6bc:	100b883a 	mov	r5,r2
   9c6c0:	0100bef4 	movhi	r4,763
   9c6c4:	213c2004 	addi	r4,r4,-3968
   9c6c8:	00821580 	call	82158 <__udivsi3>
   9c6cc:	100b883a 	mov	r5,r2
   9c6d0:	01200034 	movhi	r4,32768
   9c6d4:	213fffc4 	addi	r4,r4,-1
   9c6d8:	00821580 	call	82158 <__udivsi3>
   9c6dc:	1007883a 	mov	r3,r2
   9c6e0:	e0bfff17 	ldw	r2,-4(fp)
   9c6e4:	10c5c83a 	sub	r2,r2,r3
   9c6e8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   9c6ec:	e0bffc17 	ldw	r2,-16(fp)
   9c6f0:	10800044 	addi	r2,r2,1
   9c6f4:	e0bffc15 	stw	r2,-16(fp)
   9c6f8:	e0fffc17 	ldw	r3,-16(fp)
   9c6fc:	e0bffe17 	ldw	r2,-8(fp)
   9c700:	18bfe616 	blt	r3,r2,9c69c <__ram_exceptions_end+0xfff7c468>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   9c704:	014003f4 	movhi	r5,15
   9c708:	29509004 	addi	r5,r5,16960
   9c70c:	e13ffd17 	ldw	r4,-12(fp)
   9c710:	00822140 	call	82214 <__mulsi3>
   9c714:	100b883a 	mov	r5,r2
   9c718:	0100bef4 	movhi	r4,763
   9c71c:	213c2004 	addi	r4,r4,-3968
   9c720:	00821580 	call	82158 <__udivsi3>
   9c724:	e17fff17 	ldw	r5,-4(fp)
   9c728:	1009883a 	mov	r4,r2
   9c72c:	00822140 	call	82214 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   9c730:	10bfffc4 	addi	r2,r2,-1
   9c734:	103ffe1e 	bne	r2,zero,9c730 <__ram_exceptions_end+0xfff7c4fc>
   9c738:	00000d06 	br	9c770 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   9c73c:	014003f4 	movhi	r5,15
   9c740:	29509004 	addi	r5,r5,16960
   9c744:	e13ffd17 	ldw	r4,-12(fp)
   9c748:	00822140 	call	82214 <__mulsi3>
   9c74c:	100b883a 	mov	r5,r2
   9c750:	0100bef4 	movhi	r4,763
   9c754:	213c2004 	addi	r4,r4,-3968
   9c758:	00821580 	call	82158 <__udivsi3>
   9c75c:	e17fff17 	ldw	r5,-4(fp)
   9c760:	1009883a 	mov	r4,r2
   9c764:	00822140 	call	82214 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   9c768:	10bfffc4 	addi	r2,r2,-1
   9c76c:	00bffe16 	blt	zero,r2,9c768 <__ram_exceptions_end+0xfff7c534>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   9c770:	0005883a 	mov	r2,zero
}
   9c774:	e037883a 	mov	sp,fp
   9c778:	dfc00117 	ldw	ra,4(sp)
   9c77c:	df000017 	ldw	fp,0(sp)
   9c780:	dec00204 	addi	sp,sp,8
   9c784:	f800283a 	ret

0009c788 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
   9c788:	defffd04 	addi	sp,sp,-12
   9c78c:	df000215 	stw	fp,8(sp)
   9c790:	df000204 	addi	fp,sp,8
   9c794:	e13ffe15 	stw	r4,-8(fp)
   9c798:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   9c79c:	0001883a 	nop
   9c7a0:	e037883a 	mov	sp,fp
   9c7a4:	df000017 	ldw	fp,0(sp)
   9c7a8:	dec00104 	addi	sp,sp,4
   9c7ac:	f800283a 	ret

0009c7b0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   9c7b0:	deffff04 	addi	sp,sp,-4
   9c7b4:	df000015 	stw	fp,0(sp)
   9c7b8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   9c7bc:	0001883a 	nop
   9c7c0:	e037883a 	mov	sp,fp
   9c7c4:	df000017 	ldw	fp,0(sp)
   9c7c8:	dec00104 	addi	sp,sp,4
   9c7cc:	f800283a 	ret

0009c7d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   9c7d0:	defffe04 	addi	sp,sp,-8
   9c7d4:	dfc00115 	stw	ra,4(sp)
   9c7d8:	df000015 	stw	fp,0(sp)
   9c7dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   9c7e0:	d0a00d17 	ldw	r2,-32716(gp)
   9c7e4:	10000326 	beq	r2,zero,9c7f4 <alt_get_errno+0x24>
   9c7e8:	d0a00d17 	ldw	r2,-32716(gp)
   9c7ec:	103ee83a 	callr	r2
   9c7f0:	00000106 	br	9c7f8 <alt_get_errno+0x28>
   9c7f4:	d0a75804 	addi	r2,gp,-25248
}
   9c7f8:	e037883a 	mov	sp,fp
   9c7fc:	dfc00117 	ldw	ra,4(sp)
   9c800:	df000017 	ldw	fp,0(sp)
   9c804:	dec00204 	addi	sp,sp,8
   9c808:	f800283a 	ret

0009c80c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   9c80c:	defffa04 	addi	sp,sp,-24
   9c810:	dfc00515 	stw	ra,20(sp)
   9c814:	df000415 	stw	fp,16(sp)
   9c818:	df000404 	addi	fp,sp,16
   9c81c:	e13ffe15 	stw	r4,-8(fp)
   9c820:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   9c824:	e0bffe17 	ldw	r2,-8(fp)
   9c828:	10000326 	beq	r2,zero,9c838 <alt_dev_llist_insert+0x2c>
   9c82c:	e0bffe17 	ldw	r2,-8(fp)
   9c830:	10800217 	ldw	r2,8(r2)
   9c834:	1000061e 	bne	r2,zero,9c850 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   9c838:	009c7d00 	call	9c7d0 <alt_get_errno>
   9c83c:	1007883a 	mov	r3,r2
   9c840:	00800584 	movi	r2,22
   9c844:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   9c848:	00bffa84 	movi	r2,-22
   9c84c:	00001306 	br	9c89c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   9c850:	e0bffe17 	ldw	r2,-8(fp)
   9c854:	e0ffff17 	ldw	r3,-4(fp)
   9c858:	e0fffc15 	stw	r3,-16(fp)
   9c85c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   9c860:	e0bffd17 	ldw	r2,-12(fp)
   9c864:	e0fffc17 	ldw	r3,-16(fp)
   9c868:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   9c86c:	e0bffc17 	ldw	r2,-16(fp)
   9c870:	10c00017 	ldw	r3,0(r2)
   9c874:	e0bffd17 	ldw	r2,-12(fp)
   9c878:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   9c87c:	e0bffc17 	ldw	r2,-16(fp)
   9c880:	10800017 	ldw	r2,0(r2)
   9c884:	e0fffd17 	ldw	r3,-12(fp)
   9c888:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   9c88c:	e0bffc17 	ldw	r2,-16(fp)
   9c890:	e0fffd17 	ldw	r3,-12(fp)
   9c894:	10c00015 	stw	r3,0(r2)

  return 0;  
   9c898:	0005883a 	mov	r2,zero
}
   9c89c:	e037883a 	mov	sp,fp
   9c8a0:	dfc00117 	ldw	ra,4(sp)
   9c8a4:	df000017 	ldw	fp,0(sp)
   9c8a8:	dec00204 	addi	sp,sp,8
   9c8ac:	f800283a 	ret

0009c8b0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   9c8b0:	defffd04 	addi	sp,sp,-12
   9c8b4:	dfc00215 	stw	ra,8(sp)
   9c8b8:	df000115 	stw	fp,4(sp)
   9c8bc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   9c8c0:	008002b4 	movhi	r2,10
   9c8c4:	10b5b204 	addi	r2,r2,-10552
   9c8c8:	e0bfff15 	stw	r2,-4(fp)
   9c8cc:	00000606 	br	9c8e8 <_do_ctors+0x38>
        (*ctor) (); 
   9c8d0:	e0bfff17 	ldw	r2,-4(fp)
   9c8d4:	10800017 	ldw	r2,0(r2)
   9c8d8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   9c8dc:	e0bfff17 	ldw	r2,-4(fp)
   9c8e0:	10bfff04 	addi	r2,r2,-4
   9c8e4:	e0bfff15 	stw	r2,-4(fp)
   9c8e8:	e0ffff17 	ldw	r3,-4(fp)
   9c8ec:	008002b4 	movhi	r2,10
   9c8f0:	10b5b304 	addi	r2,r2,-10548
   9c8f4:	18bff62e 	bgeu	r3,r2,9c8d0 <__ram_exceptions_end+0xfff7c69c>
        (*ctor) (); 
}
   9c8f8:	0001883a 	nop
   9c8fc:	e037883a 	mov	sp,fp
   9c900:	dfc00117 	ldw	ra,4(sp)
   9c904:	df000017 	ldw	fp,0(sp)
   9c908:	dec00204 	addi	sp,sp,8
   9c90c:	f800283a 	ret

0009c910 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   9c910:	defffd04 	addi	sp,sp,-12
   9c914:	dfc00215 	stw	ra,8(sp)
   9c918:	df000115 	stw	fp,4(sp)
   9c91c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   9c920:	008002b4 	movhi	r2,10
   9c924:	10b5b204 	addi	r2,r2,-10552
   9c928:	e0bfff15 	stw	r2,-4(fp)
   9c92c:	00000606 	br	9c948 <_do_dtors+0x38>
        (*dtor) (); 
   9c930:	e0bfff17 	ldw	r2,-4(fp)
   9c934:	10800017 	ldw	r2,0(r2)
   9c938:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   9c93c:	e0bfff17 	ldw	r2,-4(fp)
   9c940:	10bfff04 	addi	r2,r2,-4
   9c944:	e0bfff15 	stw	r2,-4(fp)
   9c948:	e0ffff17 	ldw	r3,-4(fp)
   9c94c:	008002b4 	movhi	r2,10
   9c950:	10b5b304 	addi	r2,r2,-10548
   9c954:	18bff62e 	bgeu	r3,r2,9c930 <__ram_exceptions_end+0xfff7c6fc>
        (*dtor) (); 
}
   9c958:	0001883a 	nop
   9c95c:	e037883a 	mov	sp,fp
   9c960:	dfc00117 	ldw	ra,4(sp)
   9c964:	df000017 	ldw	fp,0(sp)
   9c968:	dec00204 	addi	sp,sp,8
   9c96c:	f800283a 	ret

0009c970 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   9c970:	defffa04 	addi	sp,sp,-24
   9c974:	dfc00515 	stw	ra,20(sp)
   9c978:	df000415 	stw	fp,16(sp)
   9c97c:	df000404 	addi	fp,sp,16
   9c980:	e13ffe15 	stw	r4,-8(fp)
   9c984:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   9c988:	e0bfff17 	ldw	r2,-4(fp)
   9c98c:	10800017 	ldw	r2,0(r2)
   9c990:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   9c994:	e13ffe17 	ldw	r4,-8(fp)
   9c998:	00831980 	call	83198 <strlen>
   9c99c:	10800044 	addi	r2,r2,1
   9c9a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   9c9a4:	00000d06 	br	9c9dc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   9c9a8:	e0bffc17 	ldw	r2,-16(fp)
   9c9ac:	10800217 	ldw	r2,8(r2)
   9c9b0:	e0fffd17 	ldw	r3,-12(fp)
   9c9b4:	180d883a 	mov	r6,r3
   9c9b8:	e17ffe17 	ldw	r5,-8(fp)
   9c9bc:	1009883a 	mov	r4,r2
   9c9c0:	0082b680 	call	82b68 <memcmp>
   9c9c4:	1000021e 	bne	r2,zero,9c9d0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   9c9c8:	e0bffc17 	ldw	r2,-16(fp)
   9c9cc:	00000706 	br	9c9ec <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   9c9d0:	e0bffc17 	ldw	r2,-16(fp)
   9c9d4:	10800017 	ldw	r2,0(r2)
   9c9d8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   9c9dc:	e0fffc17 	ldw	r3,-16(fp)
   9c9e0:	e0bfff17 	ldw	r2,-4(fp)
   9c9e4:	18bff01e 	bne	r3,r2,9c9a8 <__ram_exceptions_end+0xfff7c774>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   9c9e8:	0005883a 	mov	r2,zero
}
   9c9ec:	e037883a 	mov	sp,fp
   9c9f0:	dfc00117 	ldw	ra,4(sp)
   9c9f4:	df000017 	ldw	fp,0(sp)
   9c9f8:	dec00204 	addi	sp,sp,8
   9c9fc:	f800283a 	ret

0009ca00 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   9ca00:	deffff04 	addi	sp,sp,-4
   9ca04:	df000015 	stw	fp,0(sp)
   9ca08:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   9ca0c:	0001883a 	nop
   9ca10:	e037883a 	mov	sp,fp
   9ca14:	df000017 	ldw	fp,0(sp)
   9ca18:	dec00104 	addi	sp,sp,4
   9ca1c:	f800283a 	ret

0009ca20 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   9ca20:	defff804 	addi	sp,sp,-32
   9ca24:	dfc00715 	stw	ra,28(sp)
   9ca28:	df000615 	stw	fp,24(sp)
   9ca2c:	dc000515 	stw	r16,20(sp)
   9ca30:	df000604 	addi	fp,sp,24
   9ca34:	e13ffb15 	stw	r4,-20(fp)
   9ca38:	e17ffc15 	stw	r5,-16(fp)
   9ca3c:	e1bffd15 	stw	r6,-12(fp)
   9ca40:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   9ca44:	e1bffe17 	ldw	r6,-8(fp)
   9ca48:	e17ffd17 	ldw	r5,-12(fp)
   9ca4c:	e13ffc17 	ldw	r4,-16(fp)
   9ca50:	009ce280 	call	9ce28 <open>
   9ca54:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   9ca58:	e0bffa17 	ldw	r2,-24(fp)
   9ca5c:	10002216 	blt	r2,zero,9cae8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   9ca60:	040002b4 	movhi	r16,10
   9ca64:	843c8504 	addi	r16,r16,-3564
   9ca68:	e0bffa17 	ldw	r2,-24(fp)
   9ca6c:	01400304 	movi	r5,12
   9ca70:	1009883a 	mov	r4,r2
   9ca74:	00822140 	call	82214 <__mulsi3>
   9ca78:	8085883a 	add	r2,r16,r2
   9ca7c:	10c00017 	ldw	r3,0(r2)
   9ca80:	e0bffb17 	ldw	r2,-20(fp)
   9ca84:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   9ca88:	040002b4 	movhi	r16,10
   9ca8c:	843c8504 	addi	r16,r16,-3564
   9ca90:	e0bffa17 	ldw	r2,-24(fp)
   9ca94:	01400304 	movi	r5,12
   9ca98:	1009883a 	mov	r4,r2
   9ca9c:	00822140 	call	82214 <__mulsi3>
   9caa0:	8085883a 	add	r2,r16,r2
   9caa4:	10800104 	addi	r2,r2,4
   9caa8:	10c00017 	ldw	r3,0(r2)
   9caac:	e0bffb17 	ldw	r2,-20(fp)
   9cab0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   9cab4:	040002b4 	movhi	r16,10
   9cab8:	843c8504 	addi	r16,r16,-3564
   9cabc:	e0bffa17 	ldw	r2,-24(fp)
   9cac0:	01400304 	movi	r5,12
   9cac4:	1009883a 	mov	r4,r2
   9cac8:	00822140 	call	82214 <__mulsi3>
   9cacc:	8085883a 	add	r2,r16,r2
   9cad0:	10800204 	addi	r2,r2,8
   9cad4:	10c00017 	ldw	r3,0(r2)
   9cad8:	e0bffb17 	ldw	r2,-20(fp)
   9cadc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   9cae0:	e13ffa17 	ldw	r4,-24(fp)
   9cae4:	0099e280 	call	99e28 <alt_release_fd>
  }
} 
   9cae8:	0001883a 	nop
   9caec:	e6ffff04 	addi	sp,fp,-4
   9caf0:	dfc00217 	ldw	ra,8(sp)
   9caf4:	df000117 	ldw	fp,4(sp)
   9caf8:	dc000017 	ldw	r16,0(sp)
   9cafc:	dec00304 	addi	sp,sp,12
   9cb00:	f800283a 	ret

0009cb04 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   9cb04:	defffb04 	addi	sp,sp,-20
   9cb08:	dfc00415 	stw	ra,16(sp)
   9cb0c:	df000315 	stw	fp,12(sp)
   9cb10:	df000304 	addi	fp,sp,12
   9cb14:	e13ffd15 	stw	r4,-12(fp)
   9cb18:	e17ffe15 	stw	r5,-8(fp)
   9cb1c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   9cb20:	01c07fc4 	movi	r7,511
   9cb24:	01800044 	movi	r6,1
   9cb28:	e17ffd17 	ldw	r5,-12(fp)
   9cb2c:	010002b4 	movhi	r4,10
   9cb30:	213c8804 	addi	r4,r4,-3552
   9cb34:	009ca200 	call	9ca20 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   9cb38:	01c07fc4 	movi	r7,511
   9cb3c:	000d883a 	mov	r6,zero
   9cb40:	e17ffe17 	ldw	r5,-8(fp)
   9cb44:	010002b4 	movhi	r4,10
   9cb48:	213c8504 	addi	r4,r4,-3564
   9cb4c:	009ca200 	call	9ca20 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   9cb50:	01c07fc4 	movi	r7,511
   9cb54:	01800044 	movi	r6,1
   9cb58:	e17fff17 	ldw	r5,-4(fp)
   9cb5c:	010002b4 	movhi	r4,10
   9cb60:	213c8b04 	addi	r4,r4,-3540
   9cb64:	009ca200 	call	9ca20 <alt_open_fd>
}  
   9cb68:	0001883a 	nop
   9cb6c:	e037883a 	mov	sp,fp
   9cb70:	dfc00117 	ldw	ra,4(sp)
   9cb74:	df000017 	ldw	fp,0(sp)
   9cb78:	dec00204 	addi	sp,sp,8
   9cb7c:	f800283a 	ret

0009cb80 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   9cb80:	defff004 	addi	sp,sp,-64
   9cb84:	df000f15 	stw	fp,60(sp)
   9cb88:	df000f04 	addi	fp,sp,60
   9cb8c:	e13ffd15 	stw	r4,-12(fp)
   9cb90:	e17ffe15 	stw	r5,-8(fp)
   9cb94:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   9cb98:	00bffa84 	movi	r2,-22
   9cb9c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   9cba0:	e0bffd17 	ldw	r2,-12(fp)
   9cba4:	10800828 	cmpgeui	r2,r2,32
   9cba8:	1000501e 	bne	r2,zero,9ccec <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9cbac:	0005303a 	rdctl	r2,status
   9cbb0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9cbb4:	e0fff617 	ldw	r3,-40(fp)
   9cbb8:	00bfff84 	movi	r2,-2
   9cbbc:	1884703a 	and	r2,r3,r2
   9cbc0:	1001703a 	wrctl	status,r2
  
  return context;
   9cbc4:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   9cbc8:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   9cbcc:	008002b4 	movhi	r2,10
   9cbd0:	1088e604 	addi	r2,r2,9112
   9cbd4:	e0fffd17 	ldw	r3,-12(fp)
   9cbd8:	180690fa 	slli	r3,r3,3
   9cbdc:	10c5883a 	add	r2,r2,r3
   9cbe0:	e0ffff17 	ldw	r3,-4(fp)
   9cbe4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   9cbe8:	008002b4 	movhi	r2,10
   9cbec:	1088e604 	addi	r2,r2,9112
   9cbf0:	e0fffd17 	ldw	r3,-12(fp)
   9cbf4:	180690fa 	slli	r3,r3,3
   9cbf8:	10c5883a 	add	r2,r2,r3
   9cbfc:	10800104 	addi	r2,r2,4
   9cc00:	e0fffe17 	ldw	r3,-8(fp)
   9cc04:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   9cc08:	e0bfff17 	ldw	r2,-4(fp)
   9cc0c:	10001926 	beq	r2,zero,9cc74 <alt_irq_register+0xf4>
   9cc10:	e0bffd17 	ldw	r2,-12(fp)
   9cc14:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9cc18:	0005303a 	rdctl	r2,status
   9cc1c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9cc20:	e0fff717 	ldw	r3,-36(fp)
   9cc24:	00bfff84 	movi	r2,-2
   9cc28:	1884703a 	and	r2,r3,r2
   9cc2c:	1001703a 	wrctl	status,r2
  
  return context;
   9cc30:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   9cc34:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   9cc38:	00c00044 	movi	r3,1
   9cc3c:	e0bff217 	ldw	r2,-56(fp)
   9cc40:	1884983a 	sll	r2,r3,r2
   9cc44:	1007883a 	mov	r3,r2
   9cc48:	d0a75f17 	ldw	r2,-25220(gp)
   9cc4c:	1884b03a 	or	r2,r3,r2
   9cc50:	d0a75f15 	stw	r2,-25220(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   9cc54:	d0a75f17 	ldw	r2,-25220(gp)
   9cc58:	100170fa 	wrctl	ienable,r2
   9cc5c:	e0bff817 	ldw	r2,-32(fp)
   9cc60:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9cc64:	e0bff917 	ldw	r2,-28(fp)
   9cc68:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   9cc6c:	0005883a 	mov	r2,zero
   9cc70:	00001906 	br	9ccd8 <alt_irq_register+0x158>
   9cc74:	e0bffd17 	ldw	r2,-12(fp)
   9cc78:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9cc7c:	0005303a 	rdctl	r2,status
   9cc80:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9cc84:	e0fffa17 	ldw	r3,-24(fp)
   9cc88:	00bfff84 	movi	r2,-2
   9cc8c:	1884703a 	and	r2,r3,r2
   9cc90:	1001703a 	wrctl	status,r2
  
  return context;
   9cc94:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   9cc98:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   9cc9c:	00c00044 	movi	r3,1
   9cca0:	e0bff417 	ldw	r2,-48(fp)
   9cca4:	1884983a 	sll	r2,r3,r2
   9cca8:	0084303a 	nor	r2,zero,r2
   9ccac:	1007883a 	mov	r3,r2
   9ccb0:	d0a75f17 	ldw	r2,-25220(gp)
   9ccb4:	1884703a 	and	r2,r3,r2
   9ccb8:	d0a75f15 	stw	r2,-25220(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   9ccbc:	d0a75f17 	ldw	r2,-25220(gp)
   9ccc0:	100170fa 	wrctl	ienable,r2
   9ccc4:	e0bffb17 	ldw	r2,-20(fp)
   9ccc8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9cccc:	e0bffc17 	ldw	r2,-16(fp)
   9ccd0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   9ccd4:	0005883a 	mov	r2,zero
   9ccd8:	e0bff115 	stw	r2,-60(fp)
   9ccdc:	e0bff317 	ldw	r2,-52(fp)
   9cce0:	e0bff515 	stw	r2,-44(fp)
   9cce4:	e0bff517 	ldw	r2,-44(fp)
   9cce8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   9ccec:	e0bff117 	ldw	r2,-60(fp)
}
   9ccf0:	e037883a 	mov	sp,fp
   9ccf4:	df000017 	ldw	fp,0(sp)
   9ccf8:	dec00104 	addi	sp,sp,4
   9ccfc:	f800283a 	ret

0009cd00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   9cd00:	defffe04 	addi	sp,sp,-8
   9cd04:	dfc00115 	stw	ra,4(sp)
   9cd08:	df000015 	stw	fp,0(sp)
   9cd0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   9cd10:	d0a00d17 	ldw	r2,-32716(gp)
   9cd14:	10000326 	beq	r2,zero,9cd24 <alt_get_errno+0x24>
   9cd18:	d0a00d17 	ldw	r2,-32716(gp)
   9cd1c:	103ee83a 	callr	r2
   9cd20:	00000106 	br	9cd28 <alt_get_errno+0x28>
   9cd24:	d0a75804 	addi	r2,gp,-25248
}
   9cd28:	e037883a 	mov	sp,fp
   9cd2c:	dfc00117 	ldw	ra,4(sp)
   9cd30:	df000017 	ldw	fp,0(sp)
   9cd34:	dec00204 	addi	sp,sp,8
   9cd38:	f800283a 	ret

0009cd3c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   9cd3c:	defffb04 	addi	sp,sp,-20
   9cd40:	dfc00415 	stw	ra,16(sp)
   9cd44:	df000315 	stw	fp,12(sp)
   9cd48:	dc000215 	stw	r16,8(sp)
   9cd4c:	df000304 	addi	fp,sp,12
   9cd50:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   9cd54:	e0bffe17 	ldw	r2,-8(fp)
   9cd58:	10800217 	ldw	r2,8(r2)
   9cd5c:	10d00034 	orhi	r3,r2,16384
   9cd60:	e0bffe17 	ldw	r2,-8(fp)
   9cd64:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   9cd68:	e03ffd15 	stw	zero,-12(fp)
   9cd6c:	00002306 	br	9cdfc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   9cd70:	040002b4 	movhi	r16,10
   9cd74:	843c8504 	addi	r16,r16,-3564
   9cd78:	e0bffd17 	ldw	r2,-12(fp)
   9cd7c:	01400304 	movi	r5,12
   9cd80:	1009883a 	mov	r4,r2
   9cd84:	00822140 	call	82214 <__mulsi3>
   9cd88:	8085883a 	add	r2,r16,r2
   9cd8c:	10c00017 	ldw	r3,0(r2)
   9cd90:	e0bffe17 	ldw	r2,-8(fp)
   9cd94:	10800017 	ldw	r2,0(r2)
   9cd98:	1880151e 	bne	r3,r2,9cdf0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   9cd9c:	040002b4 	movhi	r16,10
   9cda0:	843c8504 	addi	r16,r16,-3564
   9cda4:	e0bffd17 	ldw	r2,-12(fp)
   9cda8:	01400304 	movi	r5,12
   9cdac:	1009883a 	mov	r4,r2
   9cdb0:	00822140 	call	82214 <__mulsi3>
   9cdb4:	8085883a 	add	r2,r16,r2
   9cdb8:	10800204 	addi	r2,r2,8
   9cdbc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   9cdc0:	10000b0e 	bge	r2,zero,9cdf0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   9cdc4:	01400304 	movi	r5,12
   9cdc8:	e13ffd17 	ldw	r4,-12(fp)
   9cdcc:	00822140 	call	82214 <__mulsi3>
   9cdd0:	1007883a 	mov	r3,r2
   9cdd4:	008002b4 	movhi	r2,10
   9cdd8:	10bc8504 	addi	r2,r2,-3564
   9cddc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   9cde0:	e0bffe17 	ldw	r2,-8(fp)
   9cde4:	18800226 	beq	r3,r2,9cdf0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   9cde8:	00bffcc4 	movi	r2,-13
   9cdec:	00000806 	br	9ce10 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   9cdf0:	e0bffd17 	ldw	r2,-12(fp)
   9cdf4:	10800044 	addi	r2,r2,1
   9cdf8:	e0bffd15 	stw	r2,-12(fp)
   9cdfc:	d0a00c17 	ldw	r2,-32720(gp)
   9ce00:	1007883a 	mov	r3,r2
   9ce04:	e0bffd17 	ldw	r2,-12(fp)
   9ce08:	18bfd92e 	bgeu	r3,r2,9cd70 <__ram_exceptions_end+0xfff7cb3c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   9ce0c:	0005883a 	mov	r2,zero
}
   9ce10:	e6ffff04 	addi	sp,fp,-4
   9ce14:	dfc00217 	ldw	ra,8(sp)
   9ce18:	df000117 	ldw	fp,4(sp)
   9ce1c:	dc000017 	ldw	r16,0(sp)
   9ce20:	dec00304 	addi	sp,sp,12
   9ce24:	f800283a 	ret

0009ce28 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   9ce28:	defff604 	addi	sp,sp,-40
   9ce2c:	dfc00915 	stw	ra,36(sp)
   9ce30:	df000815 	stw	fp,32(sp)
   9ce34:	df000804 	addi	fp,sp,32
   9ce38:	e13ffd15 	stw	r4,-12(fp)
   9ce3c:	e17ffe15 	stw	r5,-8(fp)
   9ce40:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   9ce44:	00bfffc4 	movi	r2,-1
   9ce48:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   9ce4c:	00bffb44 	movi	r2,-19
   9ce50:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   9ce54:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   9ce58:	d1600a04 	addi	r5,gp,-32728
   9ce5c:	e13ffd17 	ldw	r4,-12(fp)
   9ce60:	009c9700 	call	9c970 <alt_find_dev>
   9ce64:	e0bff815 	stw	r2,-32(fp)
   9ce68:	e0bff817 	ldw	r2,-32(fp)
   9ce6c:	1000051e 	bne	r2,zero,9ce84 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   9ce70:	e13ffd17 	ldw	r4,-12(fp)
   9ce74:	009d14c0 	call	9d14c <alt_find_file>
   9ce78:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   9ce7c:	00800044 	movi	r2,1
   9ce80:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   9ce84:	e0bff817 	ldw	r2,-32(fp)
   9ce88:	10002b26 	beq	r2,zero,9cf38 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   9ce8c:	e13ff817 	ldw	r4,-32(fp)
   9ce90:	009d2540 	call	9d254 <alt_get_fd>
   9ce94:	e0bff915 	stw	r2,-28(fp)
   9ce98:	e0bff917 	ldw	r2,-28(fp)
   9ce9c:	1000030e 	bge	r2,zero,9ceac <open+0x84>
    {
      status = index;
   9cea0:	e0bff917 	ldw	r2,-28(fp)
   9cea4:	e0bffa15 	stw	r2,-24(fp)
   9cea8:	00002506 	br	9cf40 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   9ceac:	01400304 	movi	r5,12
   9ceb0:	e13ff917 	ldw	r4,-28(fp)
   9ceb4:	00822140 	call	82214 <__mulsi3>
   9ceb8:	1007883a 	mov	r3,r2
   9cebc:	008002b4 	movhi	r2,10
   9cec0:	10bc8504 	addi	r2,r2,-3564
   9cec4:	1885883a 	add	r2,r3,r2
   9cec8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   9cecc:	e0fffe17 	ldw	r3,-8(fp)
   9ced0:	00900034 	movhi	r2,16384
   9ced4:	10bfffc4 	addi	r2,r2,-1
   9ced8:	1886703a 	and	r3,r3,r2
   9cedc:	e0bffc17 	ldw	r2,-16(fp)
   9cee0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   9cee4:	e0bffb17 	ldw	r2,-20(fp)
   9cee8:	1000051e 	bne	r2,zero,9cf00 <open+0xd8>
   9ceec:	e13ffc17 	ldw	r4,-16(fp)
   9cef0:	009cd3c0 	call	9cd3c <alt_file_locked>
   9cef4:	e0bffa15 	stw	r2,-24(fp)
   9cef8:	e0bffa17 	ldw	r2,-24(fp)
   9cefc:	10001016 	blt	r2,zero,9cf40 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   9cf00:	e0bff817 	ldw	r2,-32(fp)
   9cf04:	10800317 	ldw	r2,12(r2)
   9cf08:	10000826 	beq	r2,zero,9cf2c <open+0x104>
   9cf0c:	e0bff817 	ldw	r2,-32(fp)
   9cf10:	10800317 	ldw	r2,12(r2)
   9cf14:	e1ffff17 	ldw	r7,-4(fp)
   9cf18:	e1bffe17 	ldw	r6,-8(fp)
   9cf1c:	e17ffd17 	ldw	r5,-12(fp)
   9cf20:	e13ffc17 	ldw	r4,-16(fp)
   9cf24:	103ee83a 	callr	r2
   9cf28:	00000106 	br	9cf30 <open+0x108>
   9cf2c:	0005883a 	mov	r2,zero
   9cf30:	e0bffa15 	stw	r2,-24(fp)
   9cf34:	00000206 	br	9cf40 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   9cf38:	00bffb44 	movi	r2,-19
   9cf3c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   9cf40:	e0bffa17 	ldw	r2,-24(fp)
   9cf44:	1000090e 	bge	r2,zero,9cf6c <open+0x144>
  {
    alt_release_fd (index);  
   9cf48:	e13ff917 	ldw	r4,-28(fp)
   9cf4c:	0099e280 	call	99e28 <alt_release_fd>
    ALT_ERRNO = -status;
   9cf50:	009cd000 	call	9cd00 <alt_get_errno>
   9cf54:	1007883a 	mov	r3,r2
   9cf58:	e0bffa17 	ldw	r2,-24(fp)
   9cf5c:	0085c83a 	sub	r2,zero,r2
   9cf60:	18800015 	stw	r2,0(r3)
    return -1;
   9cf64:	00bfffc4 	movi	r2,-1
   9cf68:	00000106 	br	9cf70 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   9cf6c:	e0bff917 	ldw	r2,-28(fp)
}
   9cf70:	e037883a 	mov	sp,fp
   9cf74:	dfc00117 	ldw	ra,4(sp)
   9cf78:	df000017 	ldw	fp,0(sp)
   9cf7c:	dec00204 	addi	sp,sp,8
   9cf80:	f800283a 	ret

0009cf84 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   9cf84:	defffa04 	addi	sp,sp,-24
   9cf88:	df000515 	stw	fp,20(sp)
   9cf8c:	df000504 	addi	fp,sp,20
   9cf90:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9cf94:	0005303a 	rdctl	r2,status
   9cf98:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9cf9c:	e0fffc17 	ldw	r3,-16(fp)
   9cfa0:	00bfff84 	movi	r2,-2
   9cfa4:	1884703a 	and	r2,r3,r2
   9cfa8:	1001703a 	wrctl	status,r2
  
  return context;
   9cfac:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   9cfb0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   9cfb4:	e0bfff17 	ldw	r2,-4(fp)
   9cfb8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   9cfbc:	e0bffd17 	ldw	r2,-12(fp)
   9cfc0:	10800017 	ldw	r2,0(r2)
   9cfc4:	e0fffd17 	ldw	r3,-12(fp)
   9cfc8:	18c00117 	ldw	r3,4(r3)
   9cfcc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   9cfd0:	e0bffd17 	ldw	r2,-12(fp)
   9cfd4:	10800117 	ldw	r2,4(r2)
   9cfd8:	e0fffd17 	ldw	r3,-12(fp)
   9cfdc:	18c00017 	ldw	r3,0(r3)
   9cfe0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   9cfe4:	e0bffd17 	ldw	r2,-12(fp)
   9cfe8:	e0fffd17 	ldw	r3,-12(fp)
   9cfec:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   9cff0:	e0bffd17 	ldw	r2,-12(fp)
   9cff4:	e0fffd17 	ldw	r3,-12(fp)
   9cff8:	10c00015 	stw	r3,0(r2)
   9cffc:	e0bffb17 	ldw	r2,-20(fp)
   9d000:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9d004:	e0bffe17 	ldw	r2,-8(fp)
   9d008:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   9d00c:	0001883a 	nop
   9d010:	e037883a 	mov	sp,fp
   9d014:	df000017 	ldw	fp,0(sp)
   9d018:	dec00104 	addi	sp,sp,4
   9d01c:	f800283a 	ret

0009d020 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   9d020:	defffb04 	addi	sp,sp,-20
   9d024:	dfc00415 	stw	ra,16(sp)
   9d028:	df000315 	stw	fp,12(sp)
   9d02c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   9d030:	d0a01417 	ldw	r2,-32688(gp)
   9d034:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   9d038:	d0a76117 	ldw	r2,-25212(gp)
   9d03c:	10800044 	addi	r2,r2,1
   9d040:	d0a76115 	stw	r2,-25212(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   9d044:	00002e06 	br	9d100 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   9d048:	e0bffd17 	ldw	r2,-12(fp)
   9d04c:	10800017 	ldw	r2,0(r2)
   9d050:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   9d054:	e0bffd17 	ldw	r2,-12(fp)
   9d058:	10800403 	ldbu	r2,16(r2)
   9d05c:	10803fcc 	andi	r2,r2,255
   9d060:	10000426 	beq	r2,zero,9d074 <alt_tick+0x54>
   9d064:	d0a76117 	ldw	r2,-25212(gp)
   9d068:	1000021e 	bne	r2,zero,9d074 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   9d06c:	e0bffd17 	ldw	r2,-12(fp)
   9d070:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   9d074:	e0bffd17 	ldw	r2,-12(fp)
   9d078:	10800217 	ldw	r2,8(r2)
   9d07c:	d0e76117 	ldw	r3,-25212(gp)
   9d080:	18801d36 	bltu	r3,r2,9d0f8 <alt_tick+0xd8>
   9d084:	e0bffd17 	ldw	r2,-12(fp)
   9d088:	10800403 	ldbu	r2,16(r2)
   9d08c:	10803fcc 	andi	r2,r2,255
   9d090:	1000191e 	bne	r2,zero,9d0f8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   9d094:	e0bffd17 	ldw	r2,-12(fp)
   9d098:	10800317 	ldw	r2,12(r2)
   9d09c:	e0fffd17 	ldw	r3,-12(fp)
   9d0a0:	18c00517 	ldw	r3,20(r3)
   9d0a4:	1809883a 	mov	r4,r3
   9d0a8:	103ee83a 	callr	r2
   9d0ac:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   9d0b0:	e0bfff17 	ldw	r2,-4(fp)
   9d0b4:	1000031e 	bne	r2,zero,9d0c4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   9d0b8:	e13ffd17 	ldw	r4,-12(fp)
   9d0bc:	009cf840 	call	9cf84 <alt_alarm_stop>
   9d0c0:	00000d06 	br	9d0f8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   9d0c4:	e0bffd17 	ldw	r2,-12(fp)
   9d0c8:	10c00217 	ldw	r3,8(r2)
   9d0cc:	e0bfff17 	ldw	r2,-4(fp)
   9d0d0:	1887883a 	add	r3,r3,r2
   9d0d4:	e0bffd17 	ldw	r2,-12(fp)
   9d0d8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   9d0dc:	e0bffd17 	ldw	r2,-12(fp)
   9d0e0:	10c00217 	ldw	r3,8(r2)
   9d0e4:	d0a76117 	ldw	r2,-25212(gp)
   9d0e8:	1880032e 	bgeu	r3,r2,9d0f8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   9d0ec:	e0bffd17 	ldw	r2,-12(fp)
   9d0f0:	00c00044 	movi	r3,1
   9d0f4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   9d0f8:	e0bffe17 	ldw	r2,-8(fp)
   9d0fc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   9d100:	e0fffd17 	ldw	r3,-12(fp)
   9d104:	d0a01404 	addi	r2,gp,-32688
   9d108:	18bfcf1e 	bne	r3,r2,9d048 <__ram_exceptions_end+0xfff7ce14>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   9d10c:	0001883a 	nop
}
   9d110:	0001883a 	nop
   9d114:	e037883a 	mov	sp,fp
   9d118:	dfc00117 	ldw	ra,4(sp)
   9d11c:	df000017 	ldw	fp,0(sp)
   9d120:	dec00204 	addi	sp,sp,8
   9d124:	f800283a 	ret

0009d128 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   9d128:	deffff04 	addi	sp,sp,-4
   9d12c:	df000015 	stw	fp,0(sp)
   9d130:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   9d134:	000170fa 	wrctl	ienable,zero
}
   9d138:	0001883a 	nop
   9d13c:	e037883a 	mov	sp,fp
   9d140:	df000017 	ldw	fp,0(sp)
   9d144:	dec00104 	addi	sp,sp,4
   9d148:	f800283a 	ret

0009d14c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   9d14c:	defffb04 	addi	sp,sp,-20
   9d150:	dfc00415 	stw	ra,16(sp)
   9d154:	df000315 	stw	fp,12(sp)
   9d158:	df000304 	addi	fp,sp,12
   9d15c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   9d160:	d0a00817 	ldw	r2,-32736(gp)
   9d164:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   9d168:	00003106 	br	9d230 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   9d16c:	e0bffd17 	ldw	r2,-12(fp)
   9d170:	10800217 	ldw	r2,8(r2)
   9d174:	1009883a 	mov	r4,r2
   9d178:	00831980 	call	83198 <strlen>
   9d17c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   9d180:	e0bffd17 	ldw	r2,-12(fp)
   9d184:	10c00217 	ldw	r3,8(r2)
   9d188:	e0bffe17 	ldw	r2,-8(fp)
   9d18c:	10bfffc4 	addi	r2,r2,-1
   9d190:	1885883a 	add	r2,r3,r2
   9d194:	10800003 	ldbu	r2,0(r2)
   9d198:	10803fcc 	andi	r2,r2,255
   9d19c:	1080201c 	xori	r2,r2,128
   9d1a0:	10bfe004 	addi	r2,r2,-128
   9d1a4:	10800bd8 	cmpnei	r2,r2,47
   9d1a8:	1000031e 	bne	r2,zero,9d1b8 <alt_find_file+0x6c>
    {
      len -= 1;
   9d1ac:	e0bffe17 	ldw	r2,-8(fp)
   9d1b0:	10bfffc4 	addi	r2,r2,-1
   9d1b4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   9d1b8:	e0bffe17 	ldw	r2,-8(fp)
   9d1bc:	e0ffff17 	ldw	r3,-4(fp)
   9d1c0:	1885883a 	add	r2,r3,r2
   9d1c4:	10800003 	ldbu	r2,0(r2)
   9d1c8:	10803fcc 	andi	r2,r2,255
   9d1cc:	1080201c 	xori	r2,r2,128
   9d1d0:	10bfe004 	addi	r2,r2,-128
   9d1d4:	10800be0 	cmpeqi	r2,r2,47
   9d1d8:	1000081e 	bne	r2,zero,9d1fc <alt_find_file+0xb0>
   9d1dc:	e0bffe17 	ldw	r2,-8(fp)
   9d1e0:	e0ffff17 	ldw	r3,-4(fp)
   9d1e4:	1885883a 	add	r2,r3,r2
   9d1e8:	10800003 	ldbu	r2,0(r2)
   9d1ec:	10803fcc 	andi	r2,r2,255
   9d1f0:	1080201c 	xori	r2,r2,128
   9d1f4:	10bfe004 	addi	r2,r2,-128
   9d1f8:	10000a1e 	bne	r2,zero,9d224 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   9d1fc:	e0bffd17 	ldw	r2,-12(fp)
   9d200:	10800217 	ldw	r2,8(r2)
   9d204:	e0fffe17 	ldw	r3,-8(fp)
   9d208:	180d883a 	mov	r6,r3
   9d20c:	e17fff17 	ldw	r5,-4(fp)
   9d210:	1009883a 	mov	r4,r2
   9d214:	0082b680 	call	82b68 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   9d218:	1000021e 	bne	r2,zero,9d224 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   9d21c:	e0bffd17 	ldw	r2,-12(fp)
   9d220:	00000706 	br	9d240 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   9d224:	e0bffd17 	ldw	r2,-12(fp)
   9d228:	10800017 	ldw	r2,0(r2)
   9d22c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   9d230:	e0fffd17 	ldw	r3,-12(fp)
   9d234:	d0a00804 	addi	r2,gp,-32736
   9d238:	18bfcc1e 	bne	r3,r2,9d16c <__ram_exceptions_end+0xfff7cf38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   9d23c:	0005883a 	mov	r2,zero
}
   9d240:	e037883a 	mov	sp,fp
   9d244:	dfc00117 	ldw	ra,4(sp)
   9d248:	df000017 	ldw	fp,0(sp)
   9d24c:	dec00204 	addi	sp,sp,8
   9d250:	f800283a 	ret

0009d254 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   9d254:	defffa04 	addi	sp,sp,-24
   9d258:	dfc00515 	stw	ra,20(sp)
   9d25c:	df000415 	stw	fp,16(sp)
   9d260:	dc000315 	stw	r16,12(sp)
   9d264:	df000404 	addi	fp,sp,16
   9d268:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   9d26c:	00bffa04 	movi	r2,-24
   9d270:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   9d274:	e03ffc15 	stw	zero,-16(fp)
   9d278:	00001d06 	br	9d2f0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   9d27c:	040002b4 	movhi	r16,10
   9d280:	843c8504 	addi	r16,r16,-3564
   9d284:	e0bffc17 	ldw	r2,-16(fp)
   9d288:	01400304 	movi	r5,12
   9d28c:	1009883a 	mov	r4,r2
   9d290:	00822140 	call	82214 <__mulsi3>
   9d294:	8085883a 	add	r2,r16,r2
   9d298:	10800017 	ldw	r2,0(r2)
   9d29c:	1000111e 	bne	r2,zero,9d2e4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   9d2a0:	040002b4 	movhi	r16,10
   9d2a4:	843c8504 	addi	r16,r16,-3564
   9d2a8:	e0bffc17 	ldw	r2,-16(fp)
   9d2ac:	01400304 	movi	r5,12
   9d2b0:	1009883a 	mov	r4,r2
   9d2b4:	00822140 	call	82214 <__mulsi3>
   9d2b8:	8085883a 	add	r2,r16,r2
   9d2bc:	e0fffe17 	ldw	r3,-8(fp)
   9d2c0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   9d2c4:	d0e00c17 	ldw	r3,-32720(gp)
   9d2c8:	e0bffc17 	ldw	r2,-16(fp)
   9d2cc:	1880020e 	bge	r3,r2,9d2d8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   9d2d0:	e0bffc17 	ldw	r2,-16(fp)
   9d2d4:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
   9d2d8:	e0bffc17 	ldw	r2,-16(fp)
   9d2dc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   9d2e0:	00000606 	br	9d2fc <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   9d2e4:	e0bffc17 	ldw	r2,-16(fp)
   9d2e8:	10800044 	addi	r2,r2,1
   9d2ec:	e0bffc15 	stw	r2,-16(fp)
   9d2f0:	e0bffc17 	ldw	r2,-16(fp)
   9d2f4:	10800810 	cmplti	r2,r2,32
   9d2f8:	103fe01e 	bne	r2,zero,9d27c <__ram_exceptions_end+0xfff7d048>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   9d2fc:	e0bffd17 	ldw	r2,-12(fp)
}
   9d300:	e6ffff04 	addi	sp,fp,-4
   9d304:	dfc00217 	ldw	ra,8(sp)
   9d308:	df000117 	ldw	fp,4(sp)
   9d30c:	dc000017 	ldw	r16,0(sp)
   9d310:	dec00304 	addi	sp,sp,12
   9d314:	f800283a 	ret

0009d318 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   9d318:	defffe04 	addi	sp,sp,-8
   9d31c:	df000115 	stw	fp,4(sp)
   9d320:	df000104 	addi	fp,sp,4
   9d324:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   9d328:	e0bfff17 	ldw	r2,-4(fp)
   9d32c:	10bffe84 	addi	r2,r2,-6
   9d330:	10c00428 	cmpgeui	r3,r2,16
   9d334:	18001a1e 	bne	r3,zero,9d3a0 <alt_exception_cause_generated_bad_addr+0x88>
   9d338:	100690ba 	slli	r3,r2,2
   9d33c:	008002b4 	movhi	r2,10
   9d340:	10b4d404 	addi	r2,r2,-11440
   9d344:	1885883a 	add	r2,r3,r2
   9d348:	10800017 	ldw	r2,0(r2)
   9d34c:	1000683a 	jmp	r2
   9d350:	0009d390 	cmplti	zero,zero,10062
   9d354:	0009d390 	cmplti	zero,zero,10062
   9d358:	0009d3a0 	cmpeqi	zero,zero,10062
   9d35c:	0009d3a0 	cmpeqi	zero,zero,10062
   9d360:	0009d3a0 	cmpeqi	zero,zero,10062
   9d364:	0009d390 	cmplti	zero,zero,10062
   9d368:	0009d398 	cmpnei	zero,zero,10062
   9d36c:	0009d3a0 	cmpeqi	zero,zero,10062
   9d370:	0009d390 	cmplti	zero,zero,10062
   9d374:	0009d390 	cmplti	zero,zero,10062
   9d378:	0009d3a0 	cmpeqi	zero,zero,10062
   9d37c:	0009d390 	cmplti	zero,zero,10062
   9d380:	0009d398 	cmpnei	zero,zero,10062
   9d384:	0009d3a0 	cmpeqi	zero,zero,10062
   9d388:	0009d3a0 	cmpeqi	zero,zero,10062
   9d38c:	0009d390 	cmplti	zero,zero,10062
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   9d390:	00800044 	movi	r2,1
   9d394:	00000306 	br	9d3a4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   9d398:	0005883a 	mov	r2,zero
   9d39c:	00000106 	br	9d3a4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   9d3a0:	0005883a 	mov	r2,zero
  }
}
   9d3a4:	e037883a 	mov	sp,fp
   9d3a8:	df000017 	ldw	fp,0(sp)
   9d3ac:	dec00104 	addi	sp,sp,4
   9d3b0:	f800283a 	ret

0009d3b4 <atexit>:
   9d3b4:	200b883a 	mov	r5,r4
   9d3b8:	000f883a 	mov	r7,zero
   9d3bc:	000d883a 	mov	r6,zero
   9d3c0:	0009883a 	mov	r4,zero
   9d3c4:	009d4001 	jmpi	9d400 <__register_exitproc>

0009d3c8 <exit>:
   9d3c8:	defffe04 	addi	sp,sp,-8
   9d3cc:	000b883a 	mov	r5,zero
   9d3d0:	dc000015 	stw	r16,0(sp)
   9d3d4:	dfc00115 	stw	ra,4(sp)
   9d3d8:	2021883a 	mov	r16,r4
   9d3dc:	009d5180 	call	9d518 <__call_exitprocs>
   9d3e0:	008002b4 	movhi	r2,10
   9d3e4:	10817904 	addi	r2,r2,1508
   9d3e8:	11000017 	ldw	r4,0(r2)
   9d3ec:	20800f17 	ldw	r2,60(r4)
   9d3f0:	10000126 	beq	r2,zero,9d3f8 <exit+0x30>
   9d3f4:	103ee83a 	callr	r2
   9d3f8:	8009883a 	mov	r4,r16
   9d3fc:	009d6980 	call	9d698 <_exit>

0009d400 <__register_exitproc>:
   9d400:	defffa04 	addi	sp,sp,-24
   9d404:	dc000315 	stw	r16,12(sp)
   9d408:	040002b4 	movhi	r16,10
   9d40c:	84017904 	addi	r16,r16,1508
   9d410:	80c00017 	ldw	r3,0(r16)
   9d414:	dc400415 	stw	r17,16(sp)
   9d418:	dfc00515 	stw	ra,20(sp)
   9d41c:	18805217 	ldw	r2,328(r3)
   9d420:	2023883a 	mov	r17,r4
   9d424:	10003726 	beq	r2,zero,9d504 <__register_exitproc+0x104>
   9d428:	10c00117 	ldw	r3,4(r2)
   9d42c:	010007c4 	movi	r4,31
   9d430:	20c00e16 	blt	r4,r3,9d46c <__register_exitproc+0x6c>
   9d434:	1a000044 	addi	r8,r3,1
   9d438:	8800221e 	bne	r17,zero,9d4c4 <__register_exitproc+0xc4>
   9d43c:	18c00084 	addi	r3,r3,2
   9d440:	18c7883a 	add	r3,r3,r3
   9d444:	18c7883a 	add	r3,r3,r3
   9d448:	12000115 	stw	r8,4(r2)
   9d44c:	10c7883a 	add	r3,r2,r3
   9d450:	19400015 	stw	r5,0(r3)
   9d454:	0005883a 	mov	r2,zero
   9d458:	dfc00517 	ldw	ra,20(sp)
   9d45c:	dc400417 	ldw	r17,16(sp)
   9d460:	dc000317 	ldw	r16,12(sp)
   9d464:	dec00604 	addi	sp,sp,24
   9d468:	f800283a 	ret
   9d46c:	00800234 	movhi	r2,8
   9d470:	1088cd04 	addi	r2,r2,9012
   9d474:	10002626 	beq	r2,zero,9d510 <__register_exitproc+0x110>
   9d478:	01006404 	movi	r4,400
   9d47c:	d9400015 	stw	r5,0(sp)
   9d480:	d9800115 	stw	r6,4(sp)
   9d484:	d9c00215 	stw	r7,8(sp)
   9d488:	00823340 	call	82334 <malloc>
   9d48c:	d9400017 	ldw	r5,0(sp)
   9d490:	d9800117 	ldw	r6,4(sp)
   9d494:	d9c00217 	ldw	r7,8(sp)
   9d498:	10001d26 	beq	r2,zero,9d510 <__register_exitproc+0x110>
   9d49c:	81000017 	ldw	r4,0(r16)
   9d4a0:	10000115 	stw	zero,4(r2)
   9d4a4:	02000044 	movi	r8,1
   9d4a8:	22405217 	ldw	r9,328(r4)
   9d4ac:	0007883a 	mov	r3,zero
   9d4b0:	12400015 	stw	r9,0(r2)
   9d4b4:	20805215 	stw	r2,328(r4)
   9d4b8:	10006215 	stw	zero,392(r2)
   9d4bc:	10006315 	stw	zero,396(r2)
   9d4c0:	883fde26 	beq	r17,zero,9d43c <__ram_exceptions_end+0xfff7d208>
   9d4c4:	18c9883a 	add	r4,r3,r3
   9d4c8:	2109883a 	add	r4,r4,r4
   9d4cc:	1109883a 	add	r4,r2,r4
   9d4d0:	21802215 	stw	r6,136(r4)
   9d4d4:	01800044 	movi	r6,1
   9d4d8:	12406217 	ldw	r9,392(r2)
   9d4dc:	30cc983a 	sll	r6,r6,r3
   9d4e0:	4992b03a 	or	r9,r9,r6
   9d4e4:	12406215 	stw	r9,392(r2)
   9d4e8:	21c04215 	stw	r7,264(r4)
   9d4ec:	01000084 	movi	r4,2
   9d4f0:	893fd21e 	bne	r17,r4,9d43c <__ram_exceptions_end+0xfff7d208>
   9d4f4:	11006317 	ldw	r4,396(r2)
   9d4f8:	218cb03a 	or	r6,r4,r6
   9d4fc:	11806315 	stw	r6,396(r2)
   9d500:	003fce06 	br	9d43c <__ram_exceptions_end+0xfff7d208>
   9d504:	18805304 	addi	r2,r3,332
   9d508:	18805215 	stw	r2,328(r3)
   9d50c:	003fc606 	br	9d428 <__ram_exceptions_end+0xfff7d1f4>
   9d510:	00bfffc4 	movi	r2,-1
   9d514:	003fd006 	br	9d458 <__ram_exceptions_end+0xfff7d224>

0009d518 <__call_exitprocs>:
   9d518:	defff504 	addi	sp,sp,-44
   9d51c:	df000915 	stw	fp,36(sp)
   9d520:	dd400615 	stw	r21,24(sp)
   9d524:	dc800315 	stw	r18,12(sp)
   9d528:	dfc00a15 	stw	ra,40(sp)
   9d52c:	ddc00815 	stw	r23,32(sp)
   9d530:	dd800715 	stw	r22,28(sp)
   9d534:	dd000515 	stw	r20,20(sp)
   9d538:	dcc00415 	stw	r19,16(sp)
   9d53c:	dc400215 	stw	r17,8(sp)
   9d540:	dc000115 	stw	r16,4(sp)
   9d544:	d9000015 	stw	r4,0(sp)
   9d548:	2839883a 	mov	fp,r5
   9d54c:	04800044 	movi	r18,1
   9d550:	057fffc4 	movi	r21,-1
   9d554:	008002b4 	movhi	r2,10
   9d558:	10817904 	addi	r2,r2,1508
   9d55c:	12000017 	ldw	r8,0(r2)
   9d560:	45005217 	ldw	r20,328(r8)
   9d564:	44c05204 	addi	r19,r8,328
   9d568:	a0001c26 	beq	r20,zero,9d5dc <__call_exitprocs+0xc4>
   9d56c:	a0800117 	ldw	r2,4(r20)
   9d570:	15ffffc4 	addi	r23,r2,-1
   9d574:	b8000d16 	blt	r23,zero,9d5ac <__call_exitprocs+0x94>
   9d578:	14000044 	addi	r16,r2,1
   9d57c:	8421883a 	add	r16,r16,r16
   9d580:	8421883a 	add	r16,r16,r16
   9d584:	84402004 	addi	r17,r16,128
   9d588:	a463883a 	add	r17,r20,r17
   9d58c:	a421883a 	add	r16,r20,r16
   9d590:	e0001e26 	beq	fp,zero,9d60c <__call_exitprocs+0xf4>
   9d594:	80804017 	ldw	r2,256(r16)
   9d598:	e0801c26 	beq	fp,r2,9d60c <__call_exitprocs+0xf4>
   9d59c:	bdffffc4 	addi	r23,r23,-1
   9d5a0:	843fff04 	addi	r16,r16,-4
   9d5a4:	8c7fff04 	addi	r17,r17,-4
   9d5a8:	bd7ff91e 	bne	r23,r21,9d590 <__ram_exceptions_end+0xfff7d35c>
   9d5ac:	00800234 	movhi	r2,8
   9d5b0:	1088d204 	addi	r2,r2,9032
   9d5b4:	10000926 	beq	r2,zero,9d5dc <__call_exitprocs+0xc4>
   9d5b8:	a0800117 	ldw	r2,4(r20)
   9d5bc:	1000301e 	bne	r2,zero,9d680 <__call_exitprocs+0x168>
   9d5c0:	a0800017 	ldw	r2,0(r20)
   9d5c4:	10003226 	beq	r2,zero,9d690 <__call_exitprocs+0x178>
   9d5c8:	a009883a 	mov	r4,r20
   9d5cc:	98800015 	stw	r2,0(r19)
   9d5d0:	00823480 	call	82348 <free>
   9d5d4:	9d000017 	ldw	r20,0(r19)
   9d5d8:	a03fe41e 	bne	r20,zero,9d56c <__ram_exceptions_end+0xfff7d338>
   9d5dc:	dfc00a17 	ldw	ra,40(sp)
   9d5e0:	df000917 	ldw	fp,36(sp)
   9d5e4:	ddc00817 	ldw	r23,32(sp)
   9d5e8:	dd800717 	ldw	r22,28(sp)
   9d5ec:	dd400617 	ldw	r21,24(sp)
   9d5f0:	dd000517 	ldw	r20,20(sp)
   9d5f4:	dcc00417 	ldw	r19,16(sp)
   9d5f8:	dc800317 	ldw	r18,12(sp)
   9d5fc:	dc400217 	ldw	r17,8(sp)
   9d600:	dc000117 	ldw	r16,4(sp)
   9d604:	dec00b04 	addi	sp,sp,44
   9d608:	f800283a 	ret
   9d60c:	a0800117 	ldw	r2,4(r20)
   9d610:	80c00017 	ldw	r3,0(r16)
   9d614:	10bfffc4 	addi	r2,r2,-1
   9d618:	15c01426 	beq	r2,r23,9d66c <__call_exitprocs+0x154>
   9d61c:	80000015 	stw	zero,0(r16)
   9d620:	183fde26 	beq	r3,zero,9d59c <__ram_exceptions_end+0xfff7d368>
   9d624:	95c8983a 	sll	r4,r18,r23
   9d628:	a0806217 	ldw	r2,392(r20)
   9d62c:	a5800117 	ldw	r22,4(r20)
   9d630:	2084703a 	and	r2,r4,r2
   9d634:	10000b26 	beq	r2,zero,9d664 <__call_exitprocs+0x14c>
   9d638:	a0806317 	ldw	r2,396(r20)
   9d63c:	2088703a 	and	r4,r4,r2
   9d640:	20000c1e 	bne	r4,zero,9d674 <__call_exitprocs+0x15c>
   9d644:	89400017 	ldw	r5,0(r17)
   9d648:	d9000017 	ldw	r4,0(sp)
   9d64c:	183ee83a 	callr	r3
   9d650:	a0800117 	ldw	r2,4(r20)
   9d654:	15bfbf1e 	bne	r2,r22,9d554 <__ram_exceptions_end+0xfff7d320>
   9d658:	98800017 	ldw	r2,0(r19)
   9d65c:	153fcf26 	beq	r2,r20,9d59c <__ram_exceptions_end+0xfff7d368>
   9d660:	003fbc06 	br	9d554 <__ram_exceptions_end+0xfff7d320>
   9d664:	183ee83a 	callr	r3
   9d668:	003ff906 	br	9d650 <__ram_exceptions_end+0xfff7d41c>
   9d66c:	a5c00115 	stw	r23,4(r20)
   9d670:	003feb06 	br	9d620 <__ram_exceptions_end+0xfff7d3ec>
   9d674:	89000017 	ldw	r4,0(r17)
   9d678:	183ee83a 	callr	r3
   9d67c:	003ff406 	br	9d650 <__ram_exceptions_end+0xfff7d41c>
   9d680:	a0800017 	ldw	r2,0(r20)
   9d684:	a027883a 	mov	r19,r20
   9d688:	1029883a 	mov	r20,r2
   9d68c:	003fb606 	br	9d568 <__ram_exceptions_end+0xfff7d334>
   9d690:	0005883a 	mov	r2,zero
   9d694:	003ffb06 	br	9d684 <__ram_exceptions_end+0xfff7d450>

0009d698 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   9d698:	defffd04 	addi	sp,sp,-12
   9d69c:	df000215 	stw	fp,8(sp)
   9d6a0:	df000204 	addi	fp,sp,8
   9d6a4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   9d6a8:	0001883a 	nop
   9d6ac:	e0bfff17 	ldw	r2,-4(fp)
   9d6b0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   9d6b4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   9d6b8:	10000226 	beq	r2,zero,9d6c4 <_exit+0x2c>
    ALT_SIM_FAIL();
   9d6bc:	002af070 	cmpltui	zero,zero,43969
   9d6c0:	00000106 	br	9d6c8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   9d6c4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   9d6c8:	003fff06 	br	9d6c8 <__ram_exceptions_end+0xfff7d494>
