
hlelokheoe.elf:     file format elf32-littlenios2
hlelokheoe.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00120234

Program Header:
    LOAD off    0x00001000 vaddr 0x00120000 paddr 0x00120000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00120020 paddr 0x00120020 align 2**12
         filesz 0x00007214 memsz 0x00007214 flags r-x
    LOAD off    0x00008234 vaddr 0x00127234 paddr 0x00128ea0 align 2**12
         filesz 0x00001c6c memsz 0x00001c6c flags rw-
    LOAD off    0x0000ab0c vaddr 0x0012ab0c paddr 0x0012ab0c align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00120000  00120000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000214  00120020  00120020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006f7c  00120234  00120234  00001234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000084  001271b0  001271b0  000081b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c6c  00127234  00128ea0  00008234  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  0012ab0c  0012ab0c  0000ab0c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_flash_data 00000000  00080000  00080000  00009ea0  2**0
                  CONTENTS
  7 .onchip_memory 00000000  0012ac60  0012ac60  00009ea0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00009ea0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000b30  00000000  00000000  00009ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00018e6b  00000000  00000000  0000a9f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006aa9  00000000  00000000  00023863  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007706  00000000  00000000  0002a30c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000019a4  00000000  00000000  00031a14  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003001  00000000  00000000  000333b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004ae9  00000000  00000000  000363b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0003aea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000690  00000000  00000000  0003aee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003e105  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0003e108  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003e10b  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003e10c  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0003e10d  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0003e111  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0003e115  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0003e119  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0003e122  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0003e12b  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000c  00000000  00000000  0003e134  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000059  00000000  00000000  0003e140  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008ca77  00000000  00000000  0003e199  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00120000 l    d  .entry	00000000 .entry
00120020 l    d  .exceptions	00000000 .exceptions
00120234 l    d  .text	00000000 .text
001271b0 l    d  .rodata	00000000 .rodata
00127234 l    d  .rwdata	00000000 .rwdata
0012ab0c l    d  .bss	00000000 .bss
00080000 l    d  .onchip_flash_data	00000000 .onchip_flash_data
0012ac60 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/clark/Documents/eie-y2/info-processing-labs/PROJECT_NIOS/software/uart_accel_flash_bsp//obj/HAL/src/crt0.o
0012026c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00120288 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0012042c l     F .text	00000034 alt_dev_reg
00127234 l     O .rwdata	00001060 jtag_uart
00128294 l     O .rwdata	000000c4 uart
00128358 l     O .rwdata	00000100 onchip_flash
00128458 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0012074c l     F .text	00000210 altera_avalon_jtag_uart_irq
0012095c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00120f94 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00121238 l     F .text	000000a0 altera_avalon_uart_irq
001212d8 l     F .text	000000e4 altera_avalon_uart_rxirq
001213bc l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00121558 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00121770 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_onchip_flash.c
00121958 l     F .text	00000034 alt_flash_device_register
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00122b1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00122c78 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00122ca4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00122f20 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00123200 l     F .text	0000003c alt_get_errno
0012323c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
0012862c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00125884 l     F .text	00000008 __fp_unlock
00125898 l     F .text	0000019c __sinit.part.1
00125a34 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00126b48 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00126c3c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00126d24 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00126e84 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
00128e9c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00127074 l     F .text	0000003c alt_get_errno
0012ab24 g     O .bss	00000004 alt_instruction_exception_handler
00080000 g       *ABS*	00000000 __alt_mem_onchip_flash_data
00126824 g     F .text	00000054 _isatty_r
00120374 g     F .text	0000007c alt_main
0012ab60 g     O .bss	00000100 alt_irq
00126878 g     F .text	00000060 _lseek_r
00128ea0 g       *ABS*	00000000 __flash_rwdata_start
0012ac60 g       *ABS*	00000000 __alt_heap_start
001265ac g     F .text	0000005c __sseek
00125be4 g     F .text	00000010 __sinit
00125a3c g     F .text	00000078 __sfmoreglue
00126e60 g     F .text	00000024 __malloc_unlock
00124a44 g     F .text	0000015c memmove
00125bcc g     F .text	00000018 _cleanup
001203f0 g     F .text	0000003c alt_putstr
001236ac g     F .text	00000024 altera_nios2_gen2_irq_init
00120000 g     F .entry	0000000c __reset
00120020 g       *ABS*	00000000 __flash_exceptions_start
001267c8 g     F .text	0000005c _fstat_r
0012ab28 g     O .bss	00000004 errno
00126528 g     F .text	00000008 __seofread
0012ab10 g     O .bss	00000004 alt_argv
00130e58 g       *ABS*	00000000 _gp
00122808 g     F .text	00000090 alt_onchip_flash_poll_for_status_write_passed
001284ac g     O .rwdata	00000180 alt_fd_list
001236d0 g     F .text	00000090 alt_find_dev
001248fc g     F .text	00000148 memcpy
0012588c g     F .text	0000000c _cleanup_r
00123004 g     F .text	0000007c alt_io_redirect
001271b0 g       *ABS*	00000000 __DTOR_END__
0012392c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00120b54 g     F .text	0000021c altera_avalon_jtag_uart_read
00126a30 g     F .text	00000064 .hidden __udivsi3
00126c78 g     F .text	000000ac isatty
00122778 g     F .text	00000090 alt_onchip_flash_poll_for_status_erase_passed
0012ab34 g     O .bss	00000004 __malloc_top_pad
00128e58 g     O .rwdata	00000008 altera_onchip_flash_list
00123ac8 g     F .text	000004c8 __sfvwrite_r
00125104 g     F .text	00000054 _sbrk_r
001268d8 g     F .text	00000060 _read_r
00122c30 g     F .text	00000028 alt_dcache_flush
00121af4 g     F .text	00000168 alt_onchip_flash_erase_block
00128e70 g     O .rwdata	00000004 alt_max_fd
001266c4 g     F .text	000000f0 _fclose_r
00125854 g     F .text	00000030 fflush
0012ab30 g     O .bss	00000004 __malloc_max_sbrked_mem
00123080 g     F .text	00000180 alt_irq_register
00126d60 g     F .text	000000dc lseek
00128e8c g     O .rwdata	00000004 _global_impure_ptr
00124ba0 g     F .text	00000564 _realloc_r
0012ac60 g       *ABS*	00000000 __bss_end
001235a4 g     F .text	00000108 alt_tick
00121194 g     F .text	000000a4 altera_avalon_uart_init
00125c04 g     F .text	00000018 __fp_lock_all
00123508 g     F .text	0000009c alt_alarm_stop
0012ab18 g     O .bss	00000004 alt_irq_active
001200fc g     F .exceptions	000000d8 alt_irq_handler
00128484 g     O .rwdata	00000028 alt_dev_null
00122c58 g     F .text	00000020 alt_dcache_flush_all
00128ea0 g       *ABS*	00000000 __ram_rwdata_end
00120000 g       *ABS*	00000000 __alt_mem_onchip_memory
00128e68 g     O .rwdata	00000008 alt_dev_list
001270b0 g     F .text	00000100 write
00127234 g       *ABS*	00000000 __ram_rodata_end
00126b84 g     F .text	000000b8 fstat
00126a94 g     F .text	00000058 .hidden __umodsi3
0012ac60 g       *ABS*	00000000 end
001217ac g     F .text	000001ac altera_avalon_uart_write
00120698 g     F .text	000000b4 altera_avalon_jtag_uart_init
001201d4 g     F .exceptions	00000060 alt_instruction_exception_entry
001271b0 g       *ABS*	00000000 __CTOR_LIST__
0013f720 g       *ABS*	00000000 __alt_stack_pointer
00121010 g     F .text	00000074 alt_avalon_timer_sc_init
001210e4 g     F .text	00000060 altera_avalon_uart_write_fd
00121144 g     F .text	00000050 altera_avalon_uart_close_fd
00120d70 g     F .text	00000224 altera_avalon_jtag_uart_write
00125bf4 g     F .text	00000004 __sfp_lock_acquire
0012479c g     F .text	000000e4 memchr
00121a58 g     F .text	0000009c alt_onchip_flash_get_info
00125d58 g     F .text	00000310 _free_r
0012545c g     F .text	00000180 __call_exitprocs
00128e94 g     O .rwdata	00000004 __malloc_sbrk_base
00120234 g     F .text	0000003c _start
0012ab1c g     O .bss	00000004 _alt_tick_rate
0012ab20 g     O .bss	00000004 _alt_nticks
00126ec0 g     F .text	00000104 read
00120498 g     F .text	0000009c alt_sys_init
00125344 g     F .text	00000118 __register_exitproc
001209fc g     F .text	00000068 altera_avalon_jtag_uart_close
00126aec g     F .text	00000028 .hidden __mulsi3
00127234 g       *ABS*	00000000 __ram_rwdata_start
001271b0 g       *ABS*	00000000 __ram_rodata_start
0012ab38 g     O .bss	00000028 __malloc_current_mallinfo
00120534 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00123868 g     F .text	000000c4 alt_get_fd
001229c4 g     F .text	00000158 alt_busy_sleep
00126670 g     F .text	00000054 _close_r
00124880 g     F .text	0000007c memcmp
001205f4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0012ac60 g       *ABS*	00000000 __alt_stack_base
00120644 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
001251f0 g     F .text	00000154 __swsetup_r
0012198c g     F .text	000000cc alt_onchip_flash_read
00125ab4 g     F .text	00000118 __sfp
00128a50 g     O .rwdata	00000408 __malloc_av_
00125c00 g     F .text	00000004 __sinit_lock_release
001264d4 g     F .text	00000054 __sread
00123760 g     F .text	00000108 alt_find_file
00122ce0 g     F .text	000000a4 alt_dev_llist_insert
00126e3c g     F .text	00000024 __malloc_lock
00126fc4 g     F .text	000000b0 sbrk
001257f8 g     F .text	0000005c _fflush_r
00128e78 g     O .rwdata	00000008 alt_flash_dev_list
0012ab0c g       *ABS*	00000000 __bss_start
001263ac g     F .text	00000128 memset
00120270 g     F .text	00000018 main
0012ab14 g     O .bss	00000004 alt_envp
0012ab2c g     O .bss	00000004 __malloc_max_total_mem
00120594 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00126608 g     F .text	00000008 __sclose
0013f720 g       *ABS*	00000000 __alt_heap_limit
001267b4 g     F .text	00000014 fclose
00123f90 g     F .text	0000080c _malloc_r
00128e74 g     O .rwdata	00000004 alt_errno
001226e8 g     F .text	00000090 alt_onchip_flash_poll_for_status_to_go_idle
00126068 g     F .text	000000c4 _fwalk
00126938 g     F .text	00000084 .hidden __divsi3
00125c34 g     F .text	00000124 _malloc_trim_r
001271b0 g       *ABS*	00000000 __CTOR_END__
0012220c g     F .text	000004dc altera_onchip_flash_init
001271b0 g       *ABS*	00000000 __flash_rodata_start
001271b0 g       *ABS*	00000000 __DTOR_LIST__
00120460 g     F .text	00000038 alt_irq_init
00123484 g     F .text	00000084 alt_release_fd
001239c8 g     F .text	00000014 atexit
00126610 g     F .text	00000060 _write_r
00128e90 g     O .rwdata	00000004 _impure_ptr
0012ab0c g     O .bss	00000004 alt_argc
001255dc g     F .text	0000021c __sflush_r
00122de4 g     F .text	00000060 _do_dtors
00120020 g       .exceptions	00000000 alt_irq_entry
00125c1c g     F .text	00000018 __fp_unlock_all
00128e60 g     O .rwdata	00000008 alt_fs_list
00121c5c g     F .text	000002d8 alt_onchip_flash_write_block
00120020 g       *ABS*	00000000 __ram_exceptions_start
00128ea0 g       *ABS*	00000000 _edata
00121084 g     F .text	00000060 altera_avalon_uart_read_fd
00121f34 g     F .text	000002d8 alt_onchip_flash_write
0012ac60 g       *ABS*	00000000 _end
00122e44 g     F .text	00000068 alt_flash_open_dev
00120234 g       *ABS*	00000000 __ram_exceptions_end
00120a64 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00123a14 g     F .text	0000009c _fputs_r
00126530 g     F .text	0000007c __swrite
00128e98 g     O .rwdata	00000004 __malloc_trim_threshold
001239dc g     F .text	00000038 exit
0012612c g     F .text	000000c4 _fwalk_reent
00122eac g     F .text	00000054 alt_flash_close_dev
001269bc g     F .text	00000074 .hidden __modsi3
0013f720 g       *ABS*	00000000 __alt_data_end
00120020 g     F .exceptions	00000000 alt_exception
00125bf8 g     F .text	00000004 __sfp_lock_release
00121504 g     F .text	00000054 altera_avalon_uart_close
00126b14 g     F .text	00000034 _exit
00122898 g     F .text	0000012c alt_alarm_start
001261f0 g     F .text	000001bc __smakebuf_r
00125158 g     F .text	00000098 strlen
00123328 g     F .text	0000015c open
00122f00 g     F .text	00000020 alt_icache_flush_all
00123ab0 g     F .text	00000018 fputs
00128e80 g     O .rwdata	00000004 alt_priority_mask
00121594 g     F .text	000001dc altera_avalon_uart_read
00128e84 g     O .rwdata	00000008 alt_alarm_list
00122d84 g     F .text	00000060 _do_ctors
00122b58 g     F .text	000000d8 close
001202f0 g     F .text	00000084 alt_load
00125bfc g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00120000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  120000:	004004b4 	movhi	at,18
    ori r1, r1, %lo(_start)
  120004:	08408d14 	ori	at,at,564
    jmp r1
  120008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00120020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  120020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  120024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  120028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  12002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  120030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  120034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  120038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  12003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  120040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  120044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  120048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  12004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  120050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  120054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  120058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  12005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  120060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  120064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  120068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  12006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  120070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  120074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  120078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  12007c:	10000326 	beq	r2,zero,12008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  120080:	20000226 	beq	r4,zero,12008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  120084:	01200fc0 	call	1200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  120088:	00000706 	br	1200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  12008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  120090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  120094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  120098:	01201d40 	call	1201d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  12009c:	1000021e 	bne	r2,zero,1200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  1200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  1200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  1200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  1200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  1200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  1200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  1200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  1200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  1200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  1200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  1200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  1200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  1200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  1200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  1200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  1200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  1200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  1200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  1200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  1200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  1200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  1200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  1200f8:	ef80083a 	eret

001200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  1200fc:	defff904 	addi	sp,sp,-28
  120100:	dfc00615 	stw	ra,24(sp)
  120104:	df000515 	stw	fp,20(sp)
  120108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  12010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  120110:	0005313a 	rdctl	r2,ipending
  120114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  120118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  12011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  120120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  120124:	00800044 	movi	r2,1
  120128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  12012c:	e0fffb17 	ldw	r3,-20(fp)
  120130:	e0bffc17 	ldw	r2,-16(fp)
  120134:	1884703a 	and	r2,r3,r2
  120138:	10001526 	beq	r2,zero,120190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  12013c:	008004f4 	movhi	r2,19
  120140:	10aad804 	addi	r2,r2,-21664
  120144:	e0fffd17 	ldw	r3,-12(fp)
  120148:	180690fa 	slli	r3,r3,3
  12014c:	10c5883a 	add	r2,r2,r3
  120150:	10c00017 	ldw	r3,0(r2)
  120154:	008004f4 	movhi	r2,19
  120158:	10aad804 	addi	r2,r2,-21664
  12015c:	e13ffd17 	ldw	r4,-12(fp)
  120160:	200890fa 	slli	r4,r4,3
  120164:	1105883a 	add	r2,r2,r4
  120168:	10800104 	addi	r2,r2,4
  12016c:	10800017 	ldw	r2,0(r2)
  120170:	e17ffd17 	ldw	r5,-12(fp)
  120174:	1009883a 	mov	r4,r2
  120178:	183ee83a 	callr	r3
#endif
        break;
  12017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  120180:	0005313a 	rdctl	r2,ipending
  120184:	e0bfff15 	stw	r2,-4(fp)

  return active;
  120188:	e0bfff17 	ldw	r2,-4(fp)
  12018c:	00000706 	br	1201ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
  120190:	e0bffc17 	ldw	r2,-16(fp)
  120194:	1085883a 	add	r2,r2,r2
  120198:	e0bffc15 	stw	r2,-16(fp)
      i++;
  12019c:	e0bffd17 	ldw	r2,-12(fp)
  1201a0:	10800044 	addi	r2,r2,1
  1201a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  1201a8:	003fe006 	br	12012c <__alt_data_end+0xfffe0a0c>

    active = alt_irq_pending ();
  1201ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  1201b0:	e0bffb17 	ldw	r2,-20(fp)
  1201b4:	103fda1e 	bne	r2,zero,120120 <__alt_data_end+0xfffe0a00>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  1201b8:	0001883a 	nop
}
  1201bc:	0001883a 	nop
  1201c0:	e037883a 	mov	sp,fp
  1201c4:	dfc00117 	ldw	ra,4(sp)
  1201c8:	df000017 	ldw	fp,0(sp)
  1201cc:	dec00204 	addi	sp,sp,8
  1201d0:	f800283a 	ret

001201d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  1201d4:	defffb04 	addi	sp,sp,-20
  1201d8:	dfc00415 	stw	ra,16(sp)
  1201dc:	df000315 	stw	fp,12(sp)
  1201e0:	df000304 	addi	fp,sp,12
  1201e4:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  1201e8:	00bfffc4 	movi	r2,-1
  1201ec:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
  1201f0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  1201f4:	d0a73317 	ldw	r2,-25396(gp)
  1201f8:	10000726 	beq	r2,zero,120218 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  1201fc:	d0a73317 	ldw	r2,-25396(gp)
  120200:	e0fffd17 	ldw	r3,-12(fp)
  120204:	e1bffe17 	ldw	r6,-8(fp)
  120208:	e17fff17 	ldw	r5,-4(fp)
  12020c:	1809883a 	mov	r4,r3
  120210:	103ee83a 	callr	r2
  120214:	00000206 	br	120220 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  120218:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  12021c:	0005883a 	mov	r2,zero
}
  120220:	e037883a 	mov	sp,fp
  120224:	dfc00117 	ldw	ra,4(sp)
  120228:	df000017 	ldw	fp,0(sp)
  12022c:	dec00204 	addi	sp,sp,8
  120230:	f800283a 	ret

Disassembly of section .text:

00120234 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  120234:	06c004f4 	movhi	sp,19
    ori sp, sp, %lo(__alt_stack_pointer)
  120238:	defdc814 	ori	sp,sp,63264
    movhi gp, %hi(_gp)
  12023c:	068004f4 	movhi	gp,19
    ori gp, gp, %lo(_gp)
  120240:	d6839614 	ori	gp,gp,3672
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  120244:	008004b4 	movhi	r2,18
    ori r2, r2, %lo(__bss_start)
  120248:	10aac314 	ori	r2,r2,43788

    movhi r3, %hi(__bss_end)
  12024c:	00c004b4 	movhi	r3,18
    ori r3, r3, %lo(__bss_end)
  120250:	18eb1814 	ori	r3,r3,44128

    beq r2, r3, 1f
  120254:	10c00326 	beq	r2,r3,120264 <_start+0x30>

0:
    stw zero, (r2)
  120258:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  12025c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  120260:	10fffd36 	bltu	r2,r3,120258 <__alt_data_end+0xfffe0b38>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  120264:	01202f00 	call	1202f0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  120268:	01203740 	call	120374 <alt_main>

0012026c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  12026c:	003fff06 	br	12026c <__alt_data_end+0xfffe0b4c>

00120270 <main>:

#include "sys/alt_stdio.h"

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
  120270:	010004b4 	movhi	r4,18
 */

#include "sys/alt_stdio.h"

int main()
{ 
  120274:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
  120278:	211c6c04 	addi	r4,r4,29104
 */

#include "sys/alt_stdio.h"

int main()
{ 
  12027c:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
  120280:	01203f00 	call	1203f0 <alt_putstr>
  120284:	003fff06 	br	120284 <__alt_data_end+0xfffe0b64>

00120288 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  120288:	defffc04 	addi	sp,sp,-16
  12028c:	df000315 	stw	fp,12(sp)
  120290:	df000304 	addi	fp,sp,12
  120294:	e13ffd15 	stw	r4,-12(fp)
  120298:	e17ffe15 	stw	r5,-8(fp)
  12029c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  1202a0:	e0fffe17 	ldw	r3,-8(fp)
  1202a4:	e0bffd17 	ldw	r2,-12(fp)
  1202a8:	18800c26 	beq	r3,r2,1202dc <alt_load_section+0x54>
  {
    while( to != end )
  1202ac:	00000806 	br	1202d0 <alt_load_section+0x48>
    {
      *to++ = *from++;
  1202b0:	e0bffe17 	ldw	r2,-8(fp)
  1202b4:	10c00104 	addi	r3,r2,4
  1202b8:	e0fffe15 	stw	r3,-8(fp)
  1202bc:	e0fffd17 	ldw	r3,-12(fp)
  1202c0:	19000104 	addi	r4,r3,4
  1202c4:	e13ffd15 	stw	r4,-12(fp)
  1202c8:	18c00017 	ldw	r3,0(r3)
  1202cc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  1202d0:	e0fffe17 	ldw	r3,-8(fp)
  1202d4:	e0bfff17 	ldw	r2,-4(fp)
  1202d8:	18bff51e 	bne	r3,r2,1202b0 <__alt_data_end+0xfffe0b90>
    {
      *to++ = *from++;
    }
  }
}
  1202dc:	0001883a 	nop
  1202e0:	e037883a 	mov	sp,fp
  1202e4:	df000017 	ldw	fp,0(sp)
  1202e8:	dec00104 	addi	sp,sp,4
  1202ec:	f800283a 	ret

001202f0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  1202f0:	defffe04 	addi	sp,sp,-8
  1202f4:	dfc00115 	stw	ra,4(sp)
  1202f8:	df000015 	stw	fp,0(sp)
  1202fc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  120300:	018004f4 	movhi	r6,19
  120304:	31a3a804 	addi	r6,r6,-29024
  120308:	014004b4 	movhi	r5,18
  12030c:	295c8d04 	addi	r5,r5,29236
  120310:	010004f4 	movhi	r4,19
  120314:	2123a804 	addi	r4,r4,-29024
  120318:	01202880 	call	120288 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  12031c:	018004b4 	movhi	r6,18
  120320:	31808d04 	addi	r6,r6,564
  120324:	014004b4 	movhi	r5,18
  120328:	29400804 	addi	r5,r5,32
  12032c:	010004b4 	movhi	r4,18
  120330:	21000804 	addi	r4,r4,32
  120334:	01202880 	call	120288 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  120338:	018004b4 	movhi	r6,18
  12033c:	319c8d04 	addi	r6,r6,29236
  120340:	014004b4 	movhi	r5,18
  120344:	295c6c04 	addi	r5,r5,29104
  120348:	010004b4 	movhi	r4,18
  12034c:	211c6c04 	addi	r4,r4,29104
  120350:	01202880 	call	120288 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  120354:	0122c580 	call	122c58 <alt_dcache_flush_all>
  alt_icache_flush_all();
  120358:	0122f000 	call	122f00 <alt_icache_flush_all>
}
  12035c:	0001883a 	nop
  120360:	e037883a 	mov	sp,fp
  120364:	dfc00117 	ldw	ra,4(sp)
  120368:	df000017 	ldw	fp,0(sp)
  12036c:	dec00204 	addi	sp,sp,8
  120370:	f800283a 	ret

00120374 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  120374:	defffd04 	addi	sp,sp,-12
  120378:	dfc00215 	stw	ra,8(sp)
  12037c:	df000115 	stw	fp,4(sp)
  120380:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  120384:	0009883a 	mov	r4,zero
  120388:	01204600 	call	120460 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  12038c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  120390:	01204980 	call	120498 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  120394:	018004b4 	movhi	r6,18
  120398:	319c7204 	addi	r6,r6,29128
  12039c:	014004b4 	movhi	r5,18
  1203a0:	295c7204 	addi	r5,r5,29128
  1203a4:	010004b4 	movhi	r4,18
  1203a8:	211c7204 	addi	r4,r4,29128
  1203ac:	01230040 	call	123004 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  1203b0:	0122d840 	call	122d84 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  1203b4:	010004b4 	movhi	r4,18
  1203b8:	210b7904 	addi	r4,r4,11748
  1203bc:	01239c80 	call	1239c8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  1203c0:	d0a72d17 	ldw	r2,-25420(gp)
  1203c4:	d0e72e17 	ldw	r3,-25416(gp)
  1203c8:	d1272f17 	ldw	r4,-25412(gp)
  1203cc:	200d883a 	mov	r6,r4
  1203d0:	180b883a 	mov	r5,r3
  1203d4:	1009883a 	mov	r4,r2
  1203d8:	01202700 	call	120270 <main>
  1203dc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  1203e0:	01000044 	movi	r4,1
  1203e4:	0122b580 	call	122b58 <close>
  exit (result);
  1203e8:	e13fff17 	ldw	r4,-4(fp)
  1203ec:	01239dc0 	call	1239dc <exit>

001203f0 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
  1203f0:	defffd04 	addi	sp,sp,-12
  1203f4:	dfc00215 	stw	ra,8(sp)
  1203f8:	df000115 	stw	fp,4(sp)
  1203fc:	df000104 	addi	fp,sp,4
  120400:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
  120404:	d0a00e17 	ldw	r2,-32712(gp)
  120408:	10800217 	ldw	r2,8(r2)
  12040c:	100b883a 	mov	r5,r2
  120410:	e13fff17 	ldw	r4,-4(fp)
  120414:	0123ab00 	call	123ab0 <fputs>
#endif
#endif
}
  120418:	e037883a 	mov	sp,fp
  12041c:	dfc00117 	ldw	ra,4(sp)
  120420:	df000017 	ldw	fp,0(sp)
  120424:	dec00204 	addi	sp,sp,8
  120428:	f800283a 	ret

0012042c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  12042c:	defffd04 	addi	sp,sp,-12
  120430:	dfc00215 	stw	ra,8(sp)
  120434:	df000115 	stw	fp,4(sp)
  120438:	df000104 	addi	fp,sp,4
  12043c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  120440:	d1600404 	addi	r5,gp,-32752
  120444:	e13fff17 	ldw	r4,-4(fp)
  120448:	0122ce00 	call	122ce0 <alt_dev_llist_insert>
}
  12044c:	e037883a 	mov	sp,fp
  120450:	dfc00117 	ldw	ra,4(sp)
  120454:	df000017 	ldw	fp,0(sp)
  120458:	dec00204 	addi	sp,sp,8
  12045c:	f800283a 	ret

00120460 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  120460:	defffd04 	addi	sp,sp,-12
  120464:	dfc00215 	stw	ra,8(sp)
  120468:	df000115 	stw	fp,4(sp)
  12046c:	df000104 	addi	fp,sp,4
  120470:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  120474:	01236ac0 	call	1236ac <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  120478:	00800044 	movi	r2,1
  12047c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  120480:	0001883a 	nop
  120484:	e037883a 	mov	sp,fp
  120488:	dfc00117 	ldw	ra,4(sp)
  12048c:	df000017 	ldw	fp,0(sp)
  120490:	dec00204 	addi	sp,sp,8
  120494:	f800283a 	ret

00120498 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  120498:	defffe04 	addi	sp,sp,-8
  12049c:	dfc00115 	stw	ra,4(sp)
  1204a0:	df000015 	stw	fp,0(sp)
  1204a4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_MAIN, timer_main);
  1204a8:	01c0fa04 	movi	r7,1000
  1204ac:	01800184 	movi	r6,6
  1204b0:	000b883a 	mov	r5,zero
  1204b4:	01000534 	movhi	r4,20
  1204b8:	21040804 	addi	r4,r4,4128
  1204bc:	01210100 	call	121010 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_POLL, timer_poll);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  1204c0:	000d883a 	mov	r6,zero
  1204c4:	000b883a 	mov	r5,zero
  1204c8:	010004b4 	movhi	r4,18
  1204cc:	211c9704 	addi	r4,r4,29276
  1204d0:	01206980 	call	120698 <altera_avalon_jtag_uart_init>
  1204d4:	010004b4 	movhi	r4,18
  1204d8:	211c8d04 	addi	r4,r4,29236
  1204dc:	012042c0 	call	12042c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  1204e0:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  1204e4:	01800144 	movi	r6,5
  1204e8:	000b883a 	mov	r5,zero
  1204ec:	010004f4 	movhi	r4,19
  1204f0:	2120af04 	addi	r4,r4,-32068
  1204f4:	01211940 	call	121194 <altera_avalon_uart_init>
  1204f8:	010004f4 	movhi	r4,19
  1204fc:	2120a504 	addi	r4,r4,-32108
  120500:	012042c0 	call	12042c <alt_dev_reg>
    ALTERA_ONCHIP_FLASH_INIT ( ONCHIP_FLASH, onchip_flash);
  120504:	010004f4 	movhi	r4,19
  120508:	2120d604 	addi	r4,r4,-31912
  12050c:	012220c0 	call	12220c <altera_onchip_flash_init>
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER_SPI, accelerometer_spi);
  120510:	010004f4 	movhi	r4,19
  120514:	21211604 	addi	r4,r4,-31656
  120518:	012042c0 	call	12042c <alt_dev_reg>
}
  12051c:	0001883a 	nop
  120520:	e037883a 	mov	sp,fp
  120524:	dfc00117 	ldw	ra,4(sp)
  120528:	df000017 	ldw	fp,0(sp)
  12052c:	dec00204 	addi	sp,sp,8
  120530:	f800283a 	ret

00120534 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  120534:	defffa04 	addi	sp,sp,-24
  120538:	dfc00515 	stw	ra,20(sp)
  12053c:	df000415 	stw	fp,16(sp)
  120540:	df000404 	addi	fp,sp,16
  120544:	e13ffd15 	stw	r4,-12(fp)
  120548:	e17ffe15 	stw	r5,-8(fp)
  12054c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  120550:	e0bffd17 	ldw	r2,-12(fp)
  120554:	10800017 	ldw	r2,0(r2)
  120558:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  12055c:	e0bffc17 	ldw	r2,-16(fp)
  120560:	10c00a04 	addi	r3,r2,40
  120564:	e0bffd17 	ldw	r2,-12(fp)
  120568:	10800217 	ldw	r2,8(r2)
  12056c:	100f883a 	mov	r7,r2
  120570:	e1bfff17 	ldw	r6,-4(fp)
  120574:	e17ffe17 	ldw	r5,-8(fp)
  120578:	1809883a 	mov	r4,r3
  12057c:	0120b540 	call	120b54 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  120580:	e037883a 	mov	sp,fp
  120584:	dfc00117 	ldw	ra,4(sp)
  120588:	df000017 	ldw	fp,0(sp)
  12058c:	dec00204 	addi	sp,sp,8
  120590:	f800283a 	ret

00120594 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  120594:	defffa04 	addi	sp,sp,-24
  120598:	dfc00515 	stw	ra,20(sp)
  12059c:	df000415 	stw	fp,16(sp)
  1205a0:	df000404 	addi	fp,sp,16
  1205a4:	e13ffd15 	stw	r4,-12(fp)
  1205a8:	e17ffe15 	stw	r5,-8(fp)
  1205ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  1205b0:	e0bffd17 	ldw	r2,-12(fp)
  1205b4:	10800017 	ldw	r2,0(r2)
  1205b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  1205bc:	e0bffc17 	ldw	r2,-16(fp)
  1205c0:	10c00a04 	addi	r3,r2,40
  1205c4:	e0bffd17 	ldw	r2,-12(fp)
  1205c8:	10800217 	ldw	r2,8(r2)
  1205cc:	100f883a 	mov	r7,r2
  1205d0:	e1bfff17 	ldw	r6,-4(fp)
  1205d4:	e17ffe17 	ldw	r5,-8(fp)
  1205d8:	1809883a 	mov	r4,r3
  1205dc:	0120d700 	call	120d70 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  1205e0:	e037883a 	mov	sp,fp
  1205e4:	dfc00117 	ldw	ra,4(sp)
  1205e8:	df000017 	ldw	fp,0(sp)
  1205ec:	dec00204 	addi	sp,sp,8
  1205f0:	f800283a 	ret

001205f4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  1205f4:	defffc04 	addi	sp,sp,-16
  1205f8:	dfc00315 	stw	ra,12(sp)
  1205fc:	df000215 	stw	fp,8(sp)
  120600:	df000204 	addi	fp,sp,8
  120604:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  120608:	e0bfff17 	ldw	r2,-4(fp)
  12060c:	10800017 	ldw	r2,0(r2)
  120610:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  120614:	e0bffe17 	ldw	r2,-8(fp)
  120618:	10c00a04 	addi	r3,r2,40
  12061c:	e0bfff17 	ldw	r2,-4(fp)
  120620:	10800217 	ldw	r2,8(r2)
  120624:	100b883a 	mov	r5,r2
  120628:	1809883a 	mov	r4,r3
  12062c:	01209fc0 	call	1209fc <altera_avalon_jtag_uart_close>
}
  120630:	e037883a 	mov	sp,fp
  120634:	dfc00117 	ldw	ra,4(sp)
  120638:	df000017 	ldw	fp,0(sp)
  12063c:	dec00204 	addi	sp,sp,8
  120640:	f800283a 	ret

00120644 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  120644:	defffa04 	addi	sp,sp,-24
  120648:	dfc00515 	stw	ra,20(sp)
  12064c:	df000415 	stw	fp,16(sp)
  120650:	df000404 	addi	fp,sp,16
  120654:	e13ffd15 	stw	r4,-12(fp)
  120658:	e17ffe15 	stw	r5,-8(fp)
  12065c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  120660:	e0bffd17 	ldw	r2,-12(fp)
  120664:	10800017 	ldw	r2,0(r2)
  120668:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  12066c:	e0bffc17 	ldw	r2,-16(fp)
  120670:	10800a04 	addi	r2,r2,40
  120674:	e1bfff17 	ldw	r6,-4(fp)
  120678:	e17ffe17 	ldw	r5,-8(fp)
  12067c:	1009883a 	mov	r4,r2
  120680:	0120a640 	call	120a64 <altera_avalon_jtag_uart_ioctl>
}
  120684:	e037883a 	mov	sp,fp
  120688:	dfc00117 	ldw	ra,4(sp)
  12068c:	df000017 	ldw	fp,0(sp)
  120690:	dec00204 	addi	sp,sp,8
  120694:	f800283a 	ret

00120698 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  120698:	defffb04 	addi	sp,sp,-20
  12069c:	dfc00415 	stw	ra,16(sp)
  1206a0:	df000315 	stw	fp,12(sp)
  1206a4:	df000304 	addi	fp,sp,12
  1206a8:	e13ffd15 	stw	r4,-12(fp)
  1206ac:	e17ffe15 	stw	r5,-8(fp)
  1206b0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  1206b4:	e0bffd17 	ldw	r2,-12(fp)
  1206b8:	00c00044 	movi	r3,1
  1206bc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  1206c0:	e0bffd17 	ldw	r2,-12(fp)
  1206c4:	10800017 	ldw	r2,0(r2)
  1206c8:	10800104 	addi	r2,r2,4
  1206cc:	1007883a 	mov	r3,r2
  1206d0:	e0bffd17 	ldw	r2,-12(fp)
  1206d4:	10800817 	ldw	r2,32(r2)
  1206d8:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  1206dc:	e0bfff17 	ldw	r2,-4(fp)
  1206e0:	018004b4 	movhi	r6,18
  1206e4:	3181d304 	addi	r6,r6,1868
  1206e8:	e17ffd17 	ldw	r5,-12(fp)
  1206ec:	1009883a 	mov	r4,r2
  1206f0:	01230800 	call	123080 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  1206f4:	e0bffd17 	ldw	r2,-12(fp)
  1206f8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  1206fc:	e0bffd17 	ldw	r2,-12(fp)
  120700:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  120704:	d0e73117 	ldw	r3,-25404(gp)
  120708:	e1fffd17 	ldw	r7,-12(fp)
  12070c:	018004b4 	movhi	r6,18
  120710:	31825704 	addi	r6,r6,2396
  120714:	180b883a 	mov	r5,r3
  120718:	1009883a 	mov	r4,r2
  12071c:	01228980 	call	122898 <alt_alarm_start>
  120720:	1000040e 	bge	r2,zero,120734 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  120724:	e0fffd17 	ldw	r3,-12(fp)
  120728:	00a00034 	movhi	r2,32768
  12072c:	10bfffc4 	addi	r2,r2,-1
  120730:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  120734:	0001883a 	nop
  120738:	e037883a 	mov	sp,fp
  12073c:	dfc00117 	ldw	ra,4(sp)
  120740:	df000017 	ldw	fp,0(sp)
  120744:	dec00204 	addi	sp,sp,8
  120748:	f800283a 	ret

0012074c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  12074c:	defff704 	addi	sp,sp,-36
  120750:	df000815 	stw	fp,32(sp)
  120754:	df000804 	addi	fp,sp,32
  120758:	e13ffe15 	stw	r4,-8(fp)
  12075c:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  120760:	e0bffe17 	ldw	r2,-8(fp)
  120764:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
  120768:	e0bffa17 	ldw	r2,-24(fp)
  12076c:	10800017 	ldw	r2,0(r2)
  120770:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  120774:	e0bffb17 	ldw	r2,-20(fp)
  120778:	10800104 	addi	r2,r2,4
  12077c:	10800037 	ldwio	r2,0(r2)
  120780:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  120784:	e0bffc17 	ldw	r2,-16(fp)
  120788:	1080c00c 	andi	r2,r2,768
  12078c:	10006d26 	beq	r2,zero,120944 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  120790:	e0bffc17 	ldw	r2,-16(fp)
  120794:	1080400c 	andi	r2,r2,256
  120798:	10003526 	beq	r2,zero,120870 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  12079c:	00800074 	movhi	r2,1
  1207a0:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  1207a4:	e0bffa17 	ldw	r2,-24(fp)
  1207a8:	10800a17 	ldw	r2,40(r2)
  1207ac:	10800044 	addi	r2,r2,1
  1207b0:	1081ffcc 	andi	r2,r2,2047
  1207b4:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
  1207b8:	e0bffa17 	ldw	r2,-24(fp)
  1207bc:	10c00b17 	ldw	r3,44(r2)
  1207c0:	e0bffd17 	ldw	r2,-12(fp)
  1207c4:	18801526 	beq	r3,r2,12081c <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  1207c8:	e0bffb17 	ldw	r2,-20(fp)
  1207cc:	10800037 	ldwio	r2,0(r2)
  1207d0:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  1207d4:	e0bff817 	ldw	r2,-32(fp)
  1207d8:	10a0000c 	andi	r2,r2,32768
  1207dc:	10001126 	beq	r2,zero,120824 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  1207e0:	e0bffa17 	ldw	r2,-24(fp)
  1207e4:	10800a17 	ldw	r2,40(r2)
  1207e8:	e0fff817 	ldw	r3,-32(fp)
  1207ec:	1809883a 	mov	r4,r3
  1207f0:	e0fffa17 	ldw	r3,-24(fp)
  1207f4:	1885883a 	add	r2,r3,r2
  1207f8:	10800e04 	addi	r2,r2,56
  1207fc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  120800:	e0bffa17 	ldw	r2,-24(fp)
  120804:	10800a17 	ldw	r2,40(r2)
  120808:	10800044 	addi	r2,r2,1
  12080c:	10c1ffcc 	andi	r3,r2,2047
  120810:	e0bffa17 	ldw	r2,-24(fp)
  120814:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  120818:	003fe206 	br	1207a4 <__alt_data_end+0xfffe1084>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  12081c:	0001883a 	nop
  120820:	00000106 	br	120828 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  120824:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  120828:	e0bff817 	ldw	r2,-32(fp)
  12082c:	10bfffec 	andhi	r2,r2,65535
  120830:	10000f26 	beq	r2,zero,120870 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  120834:	e0bffa17 	ldw	r2,-24(fp)
  120838:	10c00817 	ldw	r3,32(r2)
  12083c:	00bfff84 	movi	r2,-2
  120840:	1886703a 	and	r3,r3,r2
  120844:	e0bffa17 	ldw	r2,-24(fp)
  120848:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  12084c:	e0bffb17 	ldw	r2,-20(fp)
  120850:	10800104 	addi	r2,r2,4
  120854:	1007883a 	mov	r3,r2
  120858:	e0bffa17 	ldw	r2,-24(fp)
  12085c:	10800817 	ldw	r2,32(r2)
  120860:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  120864:	e0bffb17 	ldw	r2,-20(fp)
  120868:	10800104 	addi	r2,r2,4
  12086c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  120870:	e0bffc17 	ldw	r2,-16(fp)
  120874:	1080800c 	andi	r2,r2,512
  120878:	103fbe26 	beq	r2,zero,120774 <__alt_data_end+0xfffe1054>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  12087c:	e0bffc17 	ldw	r2,-16(fp)
  120880:	1004d43a 	srli	r2,r2,16
  120884:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  120888:	00001406 	br	1208dc <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  12088c:	e0bffb17 	ldw	r2,-20(fp)
  120890:	e0fffa17 	ldw	r3,-24(fp)
  120894:	18c00d17 	ldw	r3,52(r3)
  120898:	e13ffa17 	ldw	r4,-24(fp)
  12089c:	20c7883a 	add	r3,r4,r3
  1208a0:	18c20e04 	addi	r3,r3,2104
  1208a4:	18c00003 	ldbu	r3,0(r3)
  1208a8:	18c03fcc 	andi	r3,r3,255
  1208ac:	18c0201c 	xori	r3,r3,128
  1208b0:	18ffe004 	addi	r3,r3,-128
  1208b4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  1208b8:	e0bffa17 	ldw	r2,-24(fp)
  1208bc:	10800d17 	ldw	r2,52(r2)
  1208c0:	10800044 	addi	r2,r2,1
  1208c4:	10c1ffcc 	andi	r3,r2,2047
  1208c8:	e0bffa17 	ldw	r2,-24(fp)
  1208cc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  1208d0:	e0bff917 	ldw	r2,-28(fp)
  1208d4:	10bfffc4 	addi	r2,r2,-1
  1208d8:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  1208dc:	e0bff917 	ldw	r2,-28(fp)
  1208e0:	10000526 	beq	r2,zero,1208f8 <altera_avalon_jtag_uart_irq+0x1ac>
  1208e4:	e0bffa17 	ldw	r2,-24(fp)
  1208e8:	10c00d17 	ldw	r3,52(r2)
  1208ec:	e0bffa17 	ldw	r2,-24(fp)
  1208f0:	10800c17 	ldw	r2,48(r2)
  1208f4:	18bfe51e 	bne	r3,r2,12088c <__alt_data_end+0xfffe116c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  1208f8:	e0bff917 	ldw	r2,-28(fp)
  1208fc:	103f9d26 	beq	r2,zero,120774 <__alt_data_end+0xfffe1054>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  120900:	e0bffa17 	ldw	r2,-24(fp)
  120904:	10c00817 	ldw	r3,32(r2)
  120908:	00bfff44 	movi	r2,-3
  12090c:	1886703a 	and	r3,r3,r2
  120910:	e0bffa17 	ldw	r2,-24(fp)
  120914:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  120918:	e0bffa17 	ldw	r2,-24(fp)
  12091c:	10800017 	ldw	r2,0(r2)
  120920:	10800104 	addi	r2,r2,4
  120924:	1007883a 	mov	r3,r2
  120928:	e0bffa17 	ldw	r2,-24(fp)
  12092c:	10800817 	ldw	r2,32(r2)
  120930:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  120934:	e0bffb17 	ldw	r2,-20(fp)
  120938:	10800104 	addi	r2,r2,4
  12093c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  120940:	003f8c06 	br	120774 <__alt_data_end+0xfffe1054>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  120944:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  120948:	0001883a 	nop
  12094c:	e037883a 	mov	sp,fp
  120950:	df000017 	ldw	fp,0(sp)
  120954:	dec00104 	addi	sp,sp,4
  120958:	f800283a 	ret

0012095c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  12095c:	defff804 	addi	sp,sp,-32
  120960:	df000715 	stw	fp,28(sp)
  120964:	df000704 	addi	fp,sp,28
  120968:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  12096c:	e0bffb17 	ldw	r2,-20(fp)
  120970:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  120974:	e0bff917 	ldw	r2,-28(fp)
  120978:	10800017 	ldw	r2,0(r2)
  12097c:	10800104 	addi	r2,r2,4
  120980:	10800037 	ldwio	r2,0(r2)
  120984:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  120988:	e0bffa17 	ldw	r2,-24(fp)
  12098c:	1081000c 	andi	r2,r2,1024
  120990:	10000b26 	beq	r2,zero,1209c0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  120994:	e0bff917 	ldw	r2,-28(fp)
  120998:	10800017 	ldw	r2,0(r2)
  12099c:	10800104 	addi	r2,r2,4
  1209a0:	1007883a 	mov	r3,r2
  1209a4:	e0bff917 	ldw	r2,-28(fp)
  1209a8:	10800817 	ldw	r2,32(r2)
  1209ac:	10810014 	ori	r2,r2,1024
  1209b0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  1209b4:	e0bff917 	ldw	r2,-28(fp)
  1209b8:	10000915 	stw	zero,36(r2)
  1209bc:	00000a06 	br	1209e8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  1209c0:	e0bff917 	ldw	r2,-28(fp)
  1209c4:	10c00917 	ldw	r3,36(r2)
  1209c8:	00a00034 	movhi	r2,32768
  1209cc:	10bfff04 	addi	r2,r2,-4
  1209d0:	10c00536 	bltu	r2,r3,1209e8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  1209d4:	e0bff917 	ldw	r2,-28(fp)
  1209d8:	10800917 	ldw	r2,36(r2)
  1209dc:	10c00044 	addi	r3,r2,1
  1209e0:	e0bff917 	ldw	r2,-28(fp)
  1209e4:	10c00915 	stw	r3,36(r2)
  1209e8:	d0a73117 	ldw	r2,-25404(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  1209ec:	e037883a 	mov	sp,fp
  1209f0:	df000017 	ldw	fp,0(sp)
  1209f4:	dec00104 	addi	sp,sp,4
  1209f8:	f800283a 	ret

001209fc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  1209fc:	defffd04 	addi	sp,sp,-12
  120a00:	df000215 	stw	fp,8(sp)
  120a04:	df000204 	addi	fp,sp,8
  120a08:	e13ffe15 	stw	r4,-8(fp)
  120a0c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  120a10:	00000506 	br	120a28 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  120a14:	e0bfff17 	ldw	r2,-4(fp)
  120a18:	1090000c 	andi	r2,r2,16384
  120a1c:	10000226 	beq	r2,zero,120a28 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  120a20:	00bffd44 	movi	r2,-11
  120a24:	00000b06 	br	120a54 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  120a28:	e0bffe17 	ldw	r2,-8(fp)
  120a2c:	10c00d17 	ldw	r3,52(r2)
  120a30:	e0bffe17 	ldw	r2,-8(fp)
  120a34:	10800c17 	ldw	r2,48(r2)
  120a38:	18800526 	beq	r3,r2,120a50 <altera_avalon_jtag_uart_close+0x54>
  120a3c:	e0bffe17 	ldw	r2,-8(fp)
  120a40:	10c00917 	ldw	r3,36(r2)
  120a44:	e0bffe17 	ldw	r2,-8(fp)
  120a48:	10800117 	ldw	r2,4(r2)
  120a4c:	18bff136 	bltu	r3,r2,120a14 <__alt_data_end+0xfffe12f4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  120a50:	0005883a 	mov	r2,zero
}
  120a54:	e037883a 	mov	sp,fp
  120a58:	df000017 	ldw	fp,0(sp)
  120a5c:	dec00104 	addi	sp,sp,4
  120a60:	f800283a 	ret

00120a64 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  120a64:	defffa04 	addi	sp,sp,-24
  120a68:	df000515 	stw	fp,20(sp)
  120a6c:	df000504 	addi	fp,sp,20
  120a70:	e13ffd15 	stw	r4,-12(fp)
  120a74:	e17ffe15 	stw	r5,-8(fp)
  120a78:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  120a7c:	00bff9c4 	movi	r2,-25
  120a80:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  120a84:	e0bffe17 	ldw	r2,-8(fp)
  120a88:	10da8060 	cmpeqi	r3,r2,27137
  120a8c:	1800031e 	bne	r3,zero,120a9c <altera_avalon_jtag_uart_ioctl+0x38>
  120a90:	109a80a0 	cmpeqi	r2,r2,27138
  120a94:	1000181e 	bne	r2,zero,120af8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  120a98:	00002906 	br	120b40 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  120a9c:	e0bffd17 	ldw	r2,-12(fp)
  120aa0:	10c00117 	ldw	r3,4(r2)
  120aa4:	00a00034 	movhi	r2,32768
  120aa8:	10bfffc4 	addi	r2,r2,-1
  120aac:	18802126 	beq	r3,r2,120b34 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  120ab0:	e0bfff17 	ldw	r2,-4(fp)
  120ab4:	10800017 	ldw	r2,0(r2)
  120ab8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  120abc:	e0bffc17 	ldw	r2,-16(fp)
  120ac0:	10800090 	cmplti	r2,r2,2
  120ac4:	1000061e 	bne	r2,zero,120ae0 <altera_avalon_jtag_uart_ioctl+0x7c>
  120ac8:	e0fffc17 	ldw	r3,-16(fp)
  120acc:	00a00034 	movhi	r2,32768
  120ad0:	10bfffc4 	addi	r2,r2,-1
  120ad4:	18800226 	beq	r3,r2,120ae0 <altera_avalon_jtag_uart_ioctl+0x7c>
  120ad8:	e0bffc17 	ldw	r2,-16(fp)
  120adc:	00000206 	br	120ae8 <altera_avalon_jtag_uart_ioctl+0x84>
  120ae0:	00a00034 	movhi	r2,32768
  120ae4:	10bfff84 	addi	r2,r2,-2
  120ae8:	e0fffd17 	ldw	r3,-12(fp)
  120aec:	18800115 	stw	r2,4(r3)
      rc = 0;
  120af0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  120af4:	00000f06 	br	120b34 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  120af8:	e0bffd17 	ldw	r2,-12(fp)
  120afc:	10c00117 	ldw	r3,4(r2)
  120b00:	00a00034 	movhi	r2,32768
  120b04:	10bfffc4 	addi	r2,r2,-1
  120b08:	18800c26 	beq	r3,r2,120b3c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  120b0c:	e0bffd17 	ldw	r2,-12(fp)
  120b10:	10c00917 	ldw	r3,36(r2)
  120b14:	e0bffd17 	ldw	r2,-12(fp)
  120b18:	10800117 	ldw	r2,4(r2)
  120b1c:	1885803a 	cmpltu	r2,r3,r2
  120b20:	10c03fcc 	andi	r3,r2,255
  120b24:	e0bfff17 	ldw	r2,-4(fp)
  120b28:	10c00015 	stw	r3,0(r2)
      rc = 0;
  120b2c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  120b30:	00000206 	br	120b3c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  120b34:	0001883a 	nop
  120b38:	00000106 	br	120b40 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  120b3c:	0001883a 	nop

  default:
    break;
  }

  return rc;
  120b40:	e0bffb17 	ldw	r2,-20(fp)
}
  120b44:	e037883a 	mov	sp,fp
  120b48:	df000017 	ldw	fp,0(sp)
  120b4c:	dec00104 	addi	sp,sp,4
  120b50:	f800283a 	ret

00120b54 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  120b54:	defff304 	addi	sp,sp,-52
  120b58:	dfc00c15 	stw	ra,48(sp)
  120b5c:	df000b15 	stw	fp,44(sp)
  120b60:	df000b04 	addi	fp,sp,44
  120b64:	e13ffc15 	stw	r4,-16(fp)
  120b68:	e17ffd15 	stw	r5,-12(fp)
  120b6c:	e1bffe15 	stw	r6,-8(fp)
  120b70:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  120b74:	e0bffd17 	ldw	r2,-12(fp)
  120b78:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  120b7c:	00004706 	br	120c9c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  120b80:	e0bffc17 	ldw	r2,-16(fp)
  120b84:	10800a17 	ldw	r2,40(r2)
  120b88:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  120b8c:	e0bffc17 	ldw	r2,-16(fp)
  120b90:	10800b17 	ldw	r2,44(r2)
  120b94:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  120b98:	e0fff717 	ldw	r3,-36(fp)
  120b9c:	e0bff817 	ldw	r2,-32(fp)
  120ba0:	18800536 	bltu	r3,r2,120bb8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  120ba4:	e0fff717 	ldw	r3,-36(fp)
  120ba8:	e0bff817 	ldw	r2,-32(fp)
  120bac:	1885c83a 	sub	r2,r3,r2
  120bb0:	e0bff615 	stw	r2,-40(fp)
  120bb4:	00000406 	br	120bc8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  120bb8:	00c20004 	movi	r3,2048
  120bbc:	e0bff817 	ldw	r2,-32(fp)
  120bc0:	1885c83a 	sub	r2,r3,r2
  120bc4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  120bc8:	e0bff617 	ldw	r2,-40(fp)
  120bcc:	10001e26 	beq	r2,zero,120c48 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  120bd0:	e0fffe17 	ldw	r3,-8(fp)
  120bd4:	e0bff617 	ldw	r2,-40(fp)
  120bd8:	1880022e 	bgeu	r3,r2,120be4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  120bdc:	e0bffe17 	ldw	r2,-8(fp)
  120be0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  120be4:	e0bffc17 	ldw	r2,-16(fp)
  120be8:	10c00e04 	addi	r3,r2,56
  120bec:	e0bff817 	ldw	r2,-32(fp)
  120bf0:	1885883a 	add	r2,r3,r2
  120bf4:	e1bff617 	ldw	r6,-40(fp)
  120bf8:	100b883a 	mov	r5,r2
  120bfc:	e13ff517 	ldw	r4,-44(fp)
  120c00:	01248fc0 	call	1248fc <memcpy>
      ptr   += n;
  120c04:	e0fff517 	ldw	r3,-44(fp)
  120c08:	e0bff617 	ldw	r2,-40(fp)
  120c0c:	1885883a 	add	r2,r3,r2
  120c10:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  120c14:	e0fffe17 	ldw	r3,-8(fp)
  120c18:	e0bff617 	ldw	r2,-40(fp)
  120c1c:	1885c83a 	sub	r2,r3,r2
  120c20:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  120c24:	e0fff817 	ldw	r3,-32(fp)
  120c28:	e0bff617 	ldw	r2,-40(fp)
  120c2c:	1885883a 	add	r2,r3,r2
  120c30:	10c1ffcc 	andi	r3,r2,2047
  120c34:	e0bffc17 	ldw	r2,-16(fp)
  120c38:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  120c3c:	e0bffe17 	ldw	r2,-8(fp)
  120c40:	00bfcf16 	blt	zero,r2,120b80 <__alt_data_end+0xfffe1460>
  120c44:	00000106 	br	120c4c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  120c48:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  120c4c:	e0fff517 	ldw	r3,-44(fp)
  120c50:	e0bffd17 	ldw	r2,-12(fp)
  120c54:	1880141e 	bne	r3,r2,120ca8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  120c58:	e0bfff17 	ldw	r2,-4(fp)
  120c5c:	1090000c 	andi	r2,r2,16384
  120c60:	1000131e 	bne	r2,zero,120cb0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  120c64:	0001883a 	nop
  120c68:	e0bffc17 	ldw	r2,-16(fp)
  120c6c:	10c00a17 	ldw	r3,40(r2)
  120c70:	e0bff717 	ldw	r2,-36(fp)
  120c74:	1880051e 	bne	r3,r2,120c8c <altera_avalon_jtag_uart_read+0x138>
  120c78:	e0bffc17 	ldw	r2,-16(fp)
  120c7c:	10c00917 	ldw	r3,36(r2)
  120c80:	e0bffc17 	ldw	r2,-16(fp)
  120c84:	10800117 	ldw	r2,4(r2)
  120c88:	18bff736 	bltu	r3,r2,120c68 <__alt_data_end+0xfffe1548>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  120c8c:	e0bffc17 	ldw	r2,-16(fp)
  120c90:	10c00a17 	ldw	r3,40(r2)
  120c94:	e0bff717 	ldw	r2,-36(fp)
  120c98:	18800726 	beq	r3,r2,120cb8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  120c9c:	e0bffe17 	ldw	r2,-8(fp)
  120ca0:	00bfb716 	blt	zero,r2,120b80 <__alt_data_end+0xfffe1460>
  120ca4:	00000506 	br	120cbc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  120ca8:	0001883a 	nop
  120cac:	00000306 	br	120cbc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  120cb0:	0001883a 	nop
  120cb4:	00000106 	br	120cbc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  120cb8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  120cbc:	e0fff517 	ldw	r3,-44(fp)
  120cc0:	e0bffd17 	ldw	r2,-12(fp)
  120cc4:	18801826 	beq	r3,r2,120d28 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  120cc8:	0005303a 	rdctl	r2,status
  120ccc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  120cd0:	e0fffb17 	ldw	r3,-20(fp)
  120cd4:	00bfff84 	movi	r2,-2
  120cd8:	1884703a 	and	r2,r3,r2
  120cdc:	1001703a 	wrctl	status,r2
  
  return context;
  120ce0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  120ce4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  120ce8:	e0bffc17 	ldw	r2,-16(fp)
  120cec:	10800817 	ldw	r2,32(r2)
  120cf0:	10c00054 	ori	r3,r2,1
  120cf4:	e0bffc17 	ldw	r2,-16(fp)
  120cf8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  120cfc:	e0bffc17 	ldw	r2,-16(fp)
  120d00:	10800017 	ldw	r2,0(r2)
  120d04:	10800104 	addi	r2,r2,4
  120d08:	1007883a 	mov	r3,r2
  120d0c:	e0bffc17 	ldw	r2,-16(fp)
  120d10:	10800817 	ldw	r2,32(r2)
  120d14:	18800035 	stwio	r2,0(r3)
  120d18:	e0bffa17 	ldw	r2,-24(fp)
  120d1c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  120d20:	e0bff917 	ldw	r2,-28(fp)
  120d24:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  120d28:	e0fff517 	ldw	r3,-44(fp)
  120d2c:	e0bffd17 	ldw	r2,-12(fp)
  120d30:	18800426 	beq	r3,r2,120d44 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  120d34:	e0fff517 	ldw	r3,-44(fp)
  120d38:	e0bffd17 	ldw	r2,-12(fp)
  120d3c:	1885c83a 	sub	r2,r3,r2
  120d40:	00000606 	br	120d5c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  120d44:	e0bfff17 	ldw	r2,-4(fp)
  120d48:	1090000c 	andi	r2,r2,16384
  120d4c:	10000226 	beq	r2,zero,120d58 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  120d50:	00bffd44 	movi	r2,-11
  120d54:	00000106 	br	120d5c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  120d58:	00bffec4 	movi	r2,-5
}
  120d5c:	e037883a 	mov	sp,fp
  120d60:	dfc00117 	ldw	ra,4(sp)
  120d64:	df000017 	ldw	fp,0(sp)
  120d68:	dec00204 	addi	sp,sp,8
  120d6c:	f800283a 	ret

00120d70 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  120d70:	defff304 	addi	sp,sp,-52
  120d74:	dfc00c15 	stw	ra,48(sp)
  120d78:	df000b15 	stw	fp,44(sp)
  120d7c:	df000b04 	addi	fp,sp,44
  120d80:	e13ffc15 	stw	r4,-16(fp)
  120d84:	e17ffd15 	stw	r5,-12(fp)
  120d88:	e1bffe15 	stw	r6,-8(fp)
  120d8c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  120d90:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  120d94:	e0bffd17 	ldw	r2,-12(fp)
  120d98:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  120d9c:	00003706 	br	120e7c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  120da0:	e0bffc17 	ldw	r2,-16(fp)
  120da4:	10800c17 	ldw	r2,48(r2)
  120da8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  120dac:	e0bffc17 	ldw	r2,-16(fp)
  120db0:	10800d17 	ldw	r2,52(r2)
  120db4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  120db8:	e0fff917 	ldw	r3,-28(fp)
  120dbc:	e0bff517 	ldw	r2,-44(fp)
  120dc0:	1880062e 	bgeu	r3,r2,120ddc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  120dc4:	e0fff517 	ldw	r3,-44(fp)
  120dc8:	e0bff917 	ldw	r2,-28(fp)
  120dcc:	1885c83a 	sub	r2,r3,r2
  120dd0:	10bfffc4 	addi	r2,r2,-1
  120dd4:	e0bff615 	stw	r2,-40(fp)
  120dd8:	00000b06 	br	120e08 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  120ddc:	e0bff517 	ldw	r2,-44(fp)
  120de0:	10000526 	beq	r2,zero,120df8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  120de4:	00c20004 	movi	r3,2048
  120de8:	e0bff917 	ldw	r2,-28(fp)
  120dec:	1885c83a 	sub	r2,r3,r2
  120df0:	e0bff615 	stw	r2,-40(fp)
  120df4:	00000406 	br	120e08 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  120df8:	00c1ffc4 	movi	r3,2047
  120dfc:	e0bff917 	ldw	r2,-28(fp)
  120e00:	1885c83a 	sub	r2,r3,r2
  120e04:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  120e08:	e0bff617 	ldw	r2,-40(fp)
  120e0c:	10001e26 	beq	r2,zero,120e88 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  120e10:	e0fffe17 	ldw	r3,-8(fp)
  120e14:	e0bff617 	ldw	r2,-40(fp)
  120e18:	1880022e 	bgeu	r3,r2,120e24 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  120e1c:	e0bffe17 	ldw	r2,-8(fp)
  120e20:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  120e24:	e0bffc17 	ldw	r2,-16(fp)
  120e28:	10c20e04 	addi	r3,r2,2104
  120e2c:	e0bff917 	ldw	r2,-28(fp)
  120e30:	1885883a 	add	r2,r3,r2
  120e34:	e1bff617 	ldw	r6,-40(fp)
  120e38:	e17ffd17 	ldw	r5,-12(fp)
  120e3c:	1009883a 	mov	r4,r2
  120e40:	01248fc0 	call	1248fc <memcpy>
      ptr   += n;
  120e44:	e0fffd17 	ldw	r3,-12(fp)
  120e48:	e0bff617 	ldw	r2,-40(fp)
  120e4c:	1885883a 	add	r2,r3,r2
  120e50:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  120e54:	e0fffe17 	ldw	r3,-8(fp)
  120e58:	e0bff617 	ldw	r2,-40(fp)
  120e5c:	1885c83a 	sub	r2,r3,r2
  120e60:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  120e64:	e0fff917 	ldw	r3,-28(fp)
  120e68:	e0bff617 	ldw	r2,-40(fp)
  120e6c:	1885883a 	add	r2,r3,r2
  120e70:	10c1ffcc 	andi	r3,r2,2047
  120e74:	e0bffc17 	ldw	r2,-16(fp)
  120e78:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  120e7c:	e0bffe17 	ldw	r2,-8(fp)
  120e80:	00bfc716 	blt	zero,r2,120da0 <__alt_data_end+0xfffe1680>
  120e84:	00000106 	br	120e8c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  120e88:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  120e8c:	0005303a 	rdctl	r2,status
  120e90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  120e94:	e0fffb17 	ldw	r3,-20(fp)
  120e98:	00bfff84 	movi	r2,-2
  120e9c:	1884703a 	and	r2,r3,r2
  120ea0:	1001703a 	wrctl	status,r2
  
  return context;
  120ea4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  120ea8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  120eac:	e0bffc17 	ldw	r2,-16(fp)
  120eb0:	10800817 	ldw	r2,32(r2)
  120eb4:	10c00094 	ori	r3,r2,2
  120eb8:	e0bffc17 	ldw	r2,-16(fp)
  120ebc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  120ec0:	e0bffc17 	ldw	r2,-16(fp)
  120ec4:	10800017 	ldw	r2,0(r2)
  120ec8:	10800104 	addi	r2,r2,4
  120ecc:	1007883a 	mov	r3,r2
  120ed0:	e0bffc17 	ldw	r2,-16(fp)
  120ed4:	10800817 	ldw	r2,32(r2)
  120ed8:	18800035 	stwio	r2,0(r3)
  120edc:	e0bffa17 	ldw	r2,-24(fp)
  120ee0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  120ee4:	e0bff817 	ldw	r2,-32(fp)
  120ee8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  120eec:	e0bffe17 	ldw	r2,-8(fp)
  120ef0:	0080100e 	bge	zero,r2,120f34 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  120ef4:	e0bfff17 	ldw	r2,-4(fp)
  120ef8:	1090000c 	andi	r2,r2,16384
  120efc:	1000101e 	bne	r2,zero,120f40 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  120f00:	0001883a 	nop
  120f04:	e0bffc17 	ldw	r2,-16(fp)
  120f08:	10c00d17 	ldw	r3,52(r2)
  120f0c:	e0bff517 	ldw	r2,-44(fp)
  120f10:	1880051e 	bne	r3,r2,120f28 <altera_avalon_jtag_uart_write+0x1b8>
  120f14:	e0bffc17 	ldw	r2,-16(fp)
  120f18:	10c00917 	ldw	r3,36(r2)
  120f1c:	e0bffc17 	ldw	r2,-16(fp)
  120f20:	10800117 	ldw	r2,4(r2)
  120f24:	18bff736 	bltu	r3,r2,120f04 <__alt_data_end+0xfffe17e4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  120f28:	e0bffc17 	ldw	r2,-16(fp)
  120f2c:	10800917 	ldw	r2,36(r2)
  120f30:	1000051e 	bne	r2,zero,120f48 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  120f34:	e0bffe17 	ldw	r2,-8(fp)
  120f38:	00bfd016 	blt	zero,r2,120e7c <__alt_data_end+0xfffe175c>
  120f3c:	00000306 	br	120f4c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  120f40:	0001883a 	nop
  120f44:	00000106 	br	120f4c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  120f48:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  120f4c:	e0fffd17 	ldw	r3,-12(fp)
  120f50:	e0bff717 	ldw	r2,-36(fp)
  120f54:	18800426 	beq	r3,r2,120f68 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  120f58:	e0fffd17 	ldw	r3,-12(fp)
  120f5c:	e0bff717 	ldw	r2,-36(fp)
  120f60:	1885c83a 	sub	r2,r3,r2
  120f64:	00000606 	br	120f80 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  120f68:	e0bfff17 	ldw	r2,-4(fp)
  120f6c:	1090000c 	andi	r2,r2,16384
  120f70:	10000226 	beq	r2,zero,120f7c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  120f74:	00bffd44 	movi	r2,-11
  120f78:	00000106 	br	120f80 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  120f7c:	00bffec4 	movi	r2,-5
}
  120f80:	e037883a 	mov	sp,fp
  120f84:	dfc00117 	ldw	ra,4(sp)
  120f88:	df000017 	ldw	fp,0(sp)
  120f8c:	dec00204 	addi	sp,sp,8
  120f90:	f800283a 	ret

00120f94 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  120f94:	defff904 	addi	sp,sp,-28
  120f98:	dfc00615 	stw	ra,24(sp)
  120f9c:	df000515 	stw	fp,20(sp)
  120fa0:	df000504 	addi	fp,sp,20
  120fa4:	e13ffe15 	stw	r4,-8(fp)
  120fa8:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  120fac:	0007883a 	mov	r3,zero
  120fb0:	e0bffe17 	ldw	r2,-8(fp)
  120fb4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  120fb8:	e0bffe17 	ldw	r2,-8(fp)
  120fbc:	10800104 	addi	r2,r2,4
  120fc0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  120fc4:	0005303a 	rdctl	r2,status
  120fc8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  120fcc:	e0fffc17 	ldw	r3,-16(fp)
  120fd0:	00bfff84 	movi	r2,-2
  120fd4:	1884703a 	and	r2,r3,r2
  120fd8:	1001703a 	wrctl	status,r2
  
  return context;
  120fdc:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  120fe0:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
  120fe4:	01235a40 	call	1235a4 <alt_tick>
  120fe8:	e0bffb17 	ldw	r2,-20(fp)
  120fec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  120ff0:	e0bffd17 	ldw	r2,-12(fp)
  120ff4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  120ff8:	0001883a 	nop
  120ffc:	e037883a 	mov	sp,fp
  121000:	dfc00117 	ldw	ra,4(sp)
  121004:	df000017 	ldw	fp,0(sp)
  121008:	dec00204 	addi	sp,sp,8
  12100c:	f800283a 	ret

00121010 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  121010:	defff904 	addi	sp,sp,-28
  121014:	dfc00615 	stw	ra,24(sp)
  121018:	df000515 	stw	fp,20(sp)
  12101c:	df000504 	addi	fp,sp,20
  121020:	e13ffc15 	stw	r4,-16(fp)
  121024:	e17ffd15 	stw	r5,-12(fp)
  121028:	e1bffe15 	stw	r6,-8(fp)
  12102c:	e1ffff15 	stw	r7,-4(fp)
  121030:	e0bfff17 	ldw	r2,-4(fp)
  121034:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  121038:	d0a73117 	ldw	r2,-25404(gp)
  12103c:	1000021e 	bne	r2,zero,121048 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  121040:	e0bffb17 	ldw	r2,-20(fp)
  121044:	d0a73115 	stw	r2,-25404(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  121048:	e0bffc17 	ldw	r2,-16(fp)
  12104c:	10800104 	addi	r2,r2,4
  121050:	00c001c4 	movi	r3,7
  121054:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  121058:	018004b4 	movhi	r6,18
  12105c:	3183e504 	addi	r6,r6,3988
  121060:	e17ffc17 	ldw	r5,-16(fp)
  121064:	e13ffe17 	ldw	r4,-8(fp)
  121068:	01230800 	call	123080 <alt_irq_register>
#endif  
}
  12106c:	0001883a 	nop
  121070:	e037883a 	mov	sp,fp
  121074:	dfc00117 	ldw	ra,4(sp)
  121078:	df000017 	ldw	fp,0(sp)
  12107c:	dec00204 	addi	sp,sp,8
  121080:	f800283a 	ret

00121084 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  121084:	defffa04 	addi	sp,sp,-24
  121088:	dfc00515 	stw	ra,20(sp)
  12108c:	df000415 	stw	fp,16(sp)
  121090:	df000404 	addi	fp,sp,16
  121094:	e13ffd15 	stw	r4,-12(fp)
  121098:	e17ffe15 	stw	r5,-8(fp)
  12109c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  1210a0:	e0bffd17 	ldw	r2,-12(fp)
  1210a4:	10800017 	ldw	r2,0(r2)
  1210a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  1210ac:	e0bffc17 	ldw	r2,-16(fp)
  1210b0:	10c00a04 	addi	r3,r2,40
  1210b4:	e0bffd17 	ldw	r2,-12(fp)
  1210b8:	10800217 	ldw	r2,8(r2)
  1210bc:	100f883a 	mov	r7,r2
  1210c0:	e1bfff17 	ldw	r6,-4(fp)
  1210c4:	e17ffe17 	ldw	r5,-8(fp)
  1210c8:	1809883a 	mov	r4,r3
  1210cc:	01215940 	call	121594 <altera_avalon_uart_read>
      fd->fd_flags);
}
  1210d0:	e037883a 	mov	sp,fp
  1210d4:	dfc00117 	ldw	ra,4(sp)
  1210d8:	df000017 	ldw	fp,0(sp)
  1210dc:	dec00204 	addi	sp,sp,8
  1210e0:	f800283a 	ret

001210e4 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  1210e4:	defffa04 	addi	sp,sp,-24
  1210e8:	dfc00515 	stw	ra,20(sp)
  1210ec:	df000415 	stw	fp,16(sp)
  1210f0:	df000404 	addi	fp,sp,16
  1210f4:	e13ffd15 	stw	r4,-12(fp)
  1210f8:	e17ffe15 	stw	r5,-8(fp)
  1210fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  121100:	e0bffd17 	ldw	r2,-12(fp)
  121104:	10800017 	ldw	r2,0(r2)
  121108:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  12110c:	e0bffc17 	ldw	r2,-16(fp)
  121110:	10c00a04 	addi	r3,r2,40
  121114:	e0bffd17 	ldw	r2,-12(fp)
  121118:	10800217 	ldw	r2,8(r2)
  12111c:	100f883a 	mov	r7,r2
  121120:	e1bfff17 	ldw	r6,-4(fp)
  121124:	e17ffe17 	ldw	r5,-8(fp)
  121128:	1809883a 	mov	r4,r3
  12112c:	01217ac0 	call	1217ac <altera_avalon_uart_write>
      fd->fd_flags);
}
  121130:	e037883a 	mov	sp,fp
  121134:	dfc00117 	ldw	ra,4(sp)
  121138:	df000017 	ldw	fp,0(sp)
  12113c:	dec00204 	addi	sp,sp,8
  121140:	f800283a 	ret

00121144 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  121144:	defffc04 	addi	sp,sp,-16
  121148:	dfc00315 	stw	ra,12(sp)
  12114c:	df000215 	stw	fp,8(sp)
  121150:	df000204 	addi	fp,sp,8
  121154:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  121158:	e0bfff17 	ldw	r2,-4(fp)
  12115c:	10800017 	ldw	r2,0(r2)
  121160:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  121164:	e0bffe17 	ldw	r2,-8(fp)
  121168:	10c00a04 	addi	r3,r2,40
  12116c:	e0bfff17 	ldw	r2,-4(fp)
  121170:	10800217 	ldw	r2,8(r2)
  121174:	100b883a 	mov	r5,r2
  121178:	1809883a 	mov	r4,r3
  12117c:	01215040 	call	121504 <altera_avalon_uart_close>
}
  121180:	e037883a 	mov	sp,fp
  121184:	dfc00117 	ldw	ra,4(sp)
  121188:	df000017 	ldw	fp,0(sp)
  12118c:	dec00204 	addi	sp,sp,8
  121190:	f800283a 	ret

00121194 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  121194:	defff904 	addi	sp,sp,-28
  121198:	dfc00615 	stw	ra,24(sp)
  12119c:	df000515 	stw	fp,20(sp)
  1211a0:	df000504 	addi	fp,sp,20
  1211a4:	e13ffd15 	stw	r4,-12(fp)
  1211a8:	e17ffe15 	stw	r5,-8(fp)
  1211ac:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  1211b0:	e0bffd17 	ldw	r2,-12(fp)
  1211b4:	10800017 	ldw	r2,0(r2)
  1211b8:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  1211bc:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  1211c0:	1000041e 	bne	r2,zero,1211d4 <altera_avalon_uart_init+0x40>
  1211c4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  1211c8:	1000021e 	bne	r2,zero,1211d4 <altera_avalon_uart_init+0x40>
  1211cc:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  1211d0:	10000226 	beq	r2,zero,1211dc <altera_avalon_uart_init+0x48>
  1211d4:	00800044 	movi	r2,1
  1211d8:	00000106 	br	1211e0 <altera_avalon_uart_init+0x4c>
  1211dc:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  1211e0:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  1211e4:	e0bffc17 	ldw	r2,-16(fp)
  1211e8:	10000d1e 	bne	r2,zero,121220 <altera_avalon_uart_init+0x8c>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  1211ec:	e0bffd17 	ldw	r2,-12(fp)
  1211f0:	00c32004 	movi	r3,3200
  1211f4:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  1211f8:	e0bffb17 	ldw	r2,-20(fp)
  1211fc:	10800304 	addi	r2,r2,12
  121200:	e0fffd17 	ldw	r3,-12(fp)
  121204:	18c00117 	ldw	r3,4(r3)
  121208:	10c00035 	stwio	r3,0(r2)
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
  12120c:	018004b4 	movhi	r6,18
  121210:	31848e04 	addi	r6,r6,4664
  121214:	e17ffd17 	ldw	r5,-12(fp)
  121218:	e13fff17 	ldw	r4,-4(fp)
  12121c:	01230800 	call	123080 <alt_irq_register>
#endif  
  }
}
  121220:	0001883a 	nop
  121224:	e037883a 	mov	sp,fp
  121228:	dfc00117 	ldw	ra,4(sp)
  12122c:	df000017 	ldw	fp,0(sp)
  121230:	dec00204 	addi	sp,sp,8
  121234:	f800283a 	ret

00121238 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  121238:	defff904 	addi	sp,sp,-28
  12123c:	dfc00615 	stw	ra,24(sp)
  121240:	df000515 	stw	fp,20(sp)
  121244:	df000504 	addi	fp,sp,20
  121248:	e13ffe15 	stw	r4,-8(fp)
  12124c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  121250:	e0bffe17 	ldw	r2,-8(fp)
  121254:	e0bffb15 	stw	r2,-20(fp)
  void* base               = sp->base;
  121258:	e0bffb17 	ldw	r2,-20(fp)
  12125c:	10800017 	ldw	r2,0(r2)
  121260:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  121264:	e0bffc17 	ldw	r2,-16(fp)
  121268:	10800204 	addi	r2,r2,8
  12126c:	10800037 	ldwio	r2,0(r2)
  121270:	e0bffd15 	stw	r2,-12(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  121274:	e0bffc17 	ldw	r2,-16(fp)
  121278:	10800204 	addi	r2,r2,8
  12127c:	0007883a 	mov	r3,zero
  121280:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  121284:	e0bffc17 	ldw	r2,-16(fp)
  121288:	10800204 	addi	r2,r2,8
  12128c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  121290:	e0bffd17 	ldw	r2,-12(fp)
  121294:	1080200c 	andi	r2,r2,128
  121298:	10000326 	beq	r2,zero,1212a8 <altera_avalon_uart_irq+0x70>
  {
    altera_avalon_uart_rxirq(sp, status);
  12129c:	e17ffd17 	ldw	r5,-12(fp)
  1212a0:	e13ffb17 	ldw	r4,-20(fp)
  1212a4:	01212d80 	call	1212d8 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  1212a8:	e0bffd17 	ldw	r2,-12(fp)
  1212ac:	1081100c 	andi	r2,r2,1088
  1212b0:	10000326 	beq	r2,zero,1212c0 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  1212b4:	e17ffd17 	ldw	r5,-12(fp)
  1212b8:	e13ffb17 	ldw	r4,-20(fp)
  1212bc:	01213bc0 	call	1213bc <altera_avalon_uart_txirq>
  }
  

}
  1212c0:	0001883a 	nop
  1212c4:	e037883a 	mov	sp,fp
  1212c8:	dfc00117 	ldw	ra,4(sp)
  1212cc:	df000017 	ldw	fp,0(sp)
  1212d0:	dec00204 	addi	sp,sp,8
  1212d4:	f800283a 	ret

001212d8 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  1212d8:	defffc04 	addi	sp,sp,-16
  1212dc:	df000315 	stw	fp,12(sp)
  1212e0:	df000304 	addi	fp,sp,12
  1212e4:	e13ffe15 	stw	r4,-8(fp)
  1212e8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  1212ec:	e0bfff17 	ldw	r2,-4(fp)
  1212f0:	108000cc 	andi	r2,r2,3
  1212f4:	10002c1e 	bne	r2,zero,1213a8 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  1212f8:	e0bffe17 	ldw	r2,-8(fp)
  1212fc:	10800317 	ldw	r2,12(r2)
  121300:	e0bffe17 	ldw	r2,-8(fp)
  121304:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  121308:	e0bffe17 	ldw	r2,-8(fp)
  12130c:	10800317 	ldw	r2,12(r2)
  121310:	10800044 	addi	r2,r2,1
  121314:	10800fcc 	andi	r2,r2,63
  121318:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  12131c:	e0bffe17 	ldw	r2,-8(fp)
  121320:	10800317 	ldw	r2,12(r2)
  121324:	e0fffe17 	ldw	r3,-8(fp)
  121328:	18c00017 	ldw	r3,0(r3)
  12132c:	18c00037 	ldwio	r3,0(r3)
  121330:	1809883a 	mov	r4,r3
  121334:	e0fffe17 	ldw	r3,-8(fp)
  121338:	1885883a 	add	r2,r3,r2
  12133c:	10800704 	addi	r2,r2,28
  121340:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  121344:	e0bffe17 	ldw	r2,-8(fp)
  121348:	e0fffd17 	ldw	r3,-12(fp)
  12134c:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  121350:	e0bffe17 	ldw	r2,-8(fp)
  121354:	10800317 	ldw	r2,12(r2)
  121358:	10800044 	addi	r2,r2,1
  12135c:	10800fcc 	andi	r2,r2,63
  121360:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  121364:	e0bffe17 	ldw	r2,-8(fp)
  121368:	10c00217 	ldw	r3,8(r2)
  12136c:	e0bffd17 	ldw	r2,-12(fp)
  121370:	18800e1e 	bne	r3,r2,1213ac <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  121374:	e0bffe17 	ldw	r2,-8(fp)
  121378:	10c00117 	ldw	r3,4(r2)
  12137c:	00bfdfc4 	movi	r2,-129
  121380:	1886703a 	and	r3,r3,r2
  121384:	e0bffe17 	ldw	r2,-8(fp)
  121388:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  12138c:	e0bffe17 	ldw	r2,-8(fp)
  121390:	10800017 	ldw	r2,0(r2)
  121394:	10800304 	addi	r2,r2,12
  121398:	e0fffe17 	ldw	r3,-8(fp)
  12139c:	18c00117 	ldw	r3,4(r3)
  1213a0:	10c00035 	stwio	r3,0(r2)
  1213a4:	00000106 	br	1213ac <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  1213a8:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  1213ac:	e037883a 	mov	sp,fp
  1213b0:	df000017 	ldw	fp,0(sp)
  1213b4:	dec00104 	addi	sp,sp,4
  1213b8:	f800283a 	ret

001213bc <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  1213bc:	defffb04 	addi	sp,sp,-20
  1213c0:	df000415 	stw	fp,16(sp)
  1213c4:	df000404 	addi	fp,sp,16
  1213c8:	e13ffc15 	stw	r4,-16(fp)
  1213cc:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  1213d0:	e0bffc17 	ldw	r2,-16(fp)
  1213d4:	10c00417 	ldw	r3,16(r2)
  1213d8:	e0bffc17 	ldw	r2,-16(fp)
  1213dc:	10800517 	ldw	r2,20(r2)
  1213e0:	18803226 	beq	r3,r2,1214ac <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  1213e4:	e0bffc17 	ldw	r2,-16(fp)
  1213e8:	10800617 	ldw	r2,24(r2)
  1213ec:	1080008c 	andi	r2,r2,2
  1213f0:	10000326 	beq	r2,zero,121400 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  1213f4:	e0bffd17 	ldw	r2,-12(fp)
  1213f8:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  1213fc:	10001d26 	beq	r2,zero,121474 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  121400:	e0bffc17 	ldw	r2,-16(fp)
  121404:	10800417 	ldw	r2,16(r2)
  121408:	e0bffc17 	ldw	r2,-16(fp)
  12140c:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  121410:	e0bffc17 	ldw	r2,-16(fp)
  121414:	10800017 	ldw	r2,0(r2)
  121418:	10800104 	addi	r2,r2,4
  12141c:	e0fffc17 	ldw	r3,-16(fp)
  121420:	18c00417 	ldw	r3,16(r3)
  121424:	e13ffc17 	ldw	r4,-16(fp)
  121428:	20c7883a 	add	r3,r4,r3
  12142c:	18c01704 	addi	r3,r3,92
  121430:	18c00003 	ldbu	r3,0(r3)
  121434:	18c03fcc 	andi	r3,r3,255
  121438:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  12143c:	e0bffc17 	ldw	r2,-16(fp)
  121440:	10800417 	ldw	r2,16(r2)
  121444:	10800044 	addi	r2,r2,1
  121448:	e0fffc17 	ldw	r3,-16(fp)
  12144c:	18800415 	stw	r2,16(r3)
  121450:	10c00fcc 	andi	r3,r2,63
  121454:	e0bffc17 	ldw	r2,-16(fp)
  121458:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  12145c:	e0bffc17 	ldw	r2,-16(fp)
  121460:	10800117 	ldw	r2,4(r2)
  121464:	10c01014 	ori	r3,r2,64
  121468:	e0bffc17 	ldw	r2,-16(fp)
  12146c:	10c00115 	stw	r3,4(r2)
  121470:	00000e06 	br	1214ac <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  121474:	e0bffc17 	ldw	r2,-16(fp)
  121478:	10800017 	ldw	r2,0(r2)
  12147c:	10800204 	addi	r2,r2,8
  121480:	10800037 	ldwio	r2,0(r2)
  121484:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  121488:	e0bffd17 	ldw	r2,-12(fp)
  12148c:	1082000c 	andi	r2,r2,2048
  121490:	1000061e 	bne	r2,zero,1214ac <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  121494:	e0bffc17 	ldw	r2,-16(fp)
  121498:	10c00117 	ldw	r3,4(r2)
  12149c:	00bfefc4 	movi	r2,-65
  1214a0:	1886703a 	and	r3,r3,r2
  1214a4:	e0bffc17 	ldw	r2,-16(fp)
  1214a8:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  1214ac:	e0bffc17 	ldw	r2,-16(fp)
  1214b0:	10c00417 	ldw	r3,16(r2)
  1214b4:	e0bffc17 	ldw	r2,-16(fp)
  1214b8:	10800517 	ldw	r2,20(r2)
  1214bc:	1880061e 	bne	r3,r2,1214d8 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  1214c0:	e0bffc17 	ldw	r2,-16(fp)
  1214c4:	10c00117 	ldw	r3,4(r2)
  1214c8:	00beefc4 	movi	r2,-1089
  1214cc:	1886703a 	and	r3,r3,r2
  1214d0:	e0bffc17 	ldw	r2,-16(fp)
  1214d4:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  1214d8:	e0bffc17 	ldw	r2,-16(fp)
  1214dc:	10800017 	ldw	r2,0(r2)
  1214e0:	10800304 	addi	r2,r2,12
  1214e4:	e0fffc17 	ldw	r3,-16(fp)
  1214e8:	18c00117 	ldw	r3,4(r3)
  1214ec:	10c00035 	stwio	r3,0(r2)
}
  1214f0:	0001883a 	nop
  1214f4:	e037883a 	mov	sp,fp
  1214f8:	df000017 	ldw	fp,0(sp)
  1214fc:	dec00104 	addi	sp,sp,4
  121500:	f800283a 	ret

00121504 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  121504:	defffd04 	addi	sp,sp,-12
  121508:	df000215 	stw	fp,8(sp)
  12150c:	df000204 	addi	fp,sp,8
  121510:	e13ffe15 	stw	r4,-8(fp)
  121514:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  121518:	00000506 	br	121530 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  12151c:	e0bfff17 	ldw	r2,-4(fp)
  121520:	1090000c 	andi	r2,r2,16384
  121524:	10000226 	beq	r2,zero,121530 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  121528:	00bffd44 	movi	r2,-11
  12152c:	00000606 	br	121548 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  121530:	e0bffe17 	ldw	r2,-8(fp)
  121534:	10c00417 	ldw	r3,16(r2)
  121538:	e0bffe17 	ldw	r2,-8(fp)
  12153c:	10800517 	ldw	r2,20(r2)
  121540:	18bff61e 	bne	r3,r2,12151c <__alt_data_end+0xfffe1dfc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  121544:	0005883a 	mov	r2,zero
}
  121548:	e037883a 	mov	sp,fp
  12154c:	df000017 	ldw	fp,0(sp)
  121550:	dec00104 	addi	sp,sp,4
  121554:	f800283a 	ret

00121558 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  121558:	defffe04 	addi	sp,sp,-8
  12155c:	dfc00115 	stw	ra,4(sp)
  121560:	df000015 	stw	fp,0(sp)
  121564:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  121568:	d0a00717 	ldw	r2,-32740(gp)
  12156c:	10000326 	beq	r2,zero,12157c <alt_get_errno+0x24>
  121570:	d0a00717 	ldw	r2,-32740(gp)
  121574:	103ee83a 	callr	r2
  121578:	00000106 	br	121580 <alt_get_errno+0x28>
  12157c:	d0a73404 	addi	r2,gp,-25392
}
  121580:	e037883a 	mov	sp,fp
  121584:	dfc00117 	ldw	ra,4(sp)
  121588:	df000017 	ldw	fp,0(sp)
  12158c:	dec00204 	addi	sp,sp,8
  121590:	f800283a 	ret

00121594 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  121594:	defff204 	addi	sp,sp,-56
  121598:	dfc00d15 	stw	ra,52(sp)
  12159c:	df000c15 	stw	fp,48(sp)
  1215a0:	df000c04 	addi	fp,sp,48
  1215a4:	e13ffc15 	stw	r4,-16(fp)
  1215a8:	e17ffd15 	stw	r5,-12(fp)
  1215ac:	e1bffe15 	stw	r6,-8(fp)
  1215b0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  1215b4:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  1215b8:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  1215bc:	e0bfff17 	ldw	r2,-4(fp)
  1215c0:	1090000c 	andi	r2,r2,16384
  1215c4:	1005003a 	cmpeq	r2,r2,zero
  1215c8:	10803fcc 	andi	r2,r2,255
  1215cc:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  1215d0:	00001306 	br	121620 <altera_avalon_uart_read+0x8c>
    {
      count++;
  1215d4:	e0bff517 	ldw	r2,-44(fp)
  1215d8:	10800044 	addi	r2,r2,1
  1215dc:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  1215e0:	e0bffd17 	ldw	r2,-12(fp)
  1215e4:	10c00044 	addi	r3,r2,1
  1215e8:	e0fffd15 	stw	r3,-12(fp)
  1215ec:	e0fffc17 	ldw	r3,-16(fp)
  1215f0:	18c00217 	ldw	r3,8(r3)
  1215f4:	e13ffc17 	ldw	r4,-16(fp)
  1215f8:	20c7883a 	add	r3,r4,r3
  1215fc:	18c00704 	addi	r3,r3,28
  121600:	18c00003 	ldbu	r3,0(r3)
  121604:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  121608:	e0bffc17 	ldw	r2,-16(fp)
  12160c:	10800217 	ldw	r2,8(r2)
  121610:	10800044 	addi	r2,r2,1
  121614:	10c00fcc 	andi	r3,r2,63
  121618:	e0bffc17 	ldw	r2,-16(fp)
  12161c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  121620:	e0fff517 	ldw	r3,-44(fp)
  121624:	e0bffe17 	ldw	r2,-8(fp)
  121628:	1880050e 	bge	r3,r2,121640 <altera_avalon_uart_read+0xac>
  12162c:	e0bffc17 	ldw	r2,-16(fp)
  121630:	10c00217 	ldw	r3,8(r2)
  121634:	e0bffc17 	ldw	r2,-16(fp)
  121638:	10800317 	ldw	r2,12(r2)
  12163c:	18bfe51e 	bne	r3,r2,1215d4 <__alt_data_end+0xfffe1eb4>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  121640:	e0bff517 	ldw	r2,-44(fp)
  121644:	1000251e 	bne	r2,zero,1216dc <altera_avalon_uart_read+0x148>
  121648:	e0bffc17 	ldw	r2,-16(fp)
  12164c:	10c00217 	ldw	r3,8(r2)
  121650:	e0bffc17 	ldw	r2,-16(fp)
  121654:	10800317 	ldw	r2,12(r2)
  121658:	1880201e 	bne	r3,r2,1216dc <altera_avalon_uart_read+0x148>
    {
      if (!block)
  12165c:	e0bff617 	ldw	r2,-40(fp)
  121660:	1000071e 	bne	r2,zero,121680 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  121664:	01215580 	call	121558 <alt_get_errno>
  121668:	1007883a 	mov	r3,r2
  12166c:	008002c4 	movi	r2,11
  121670:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  121674:	00800044 	movi	r2,1
  121678:	e0bff405 	stb	r2,-48(fp)
        break;
  12167c:	00001b06 	br	1216ec <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  121680:	0005303a 	rdctl	r2,status
  121684:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  121688:	e0fff917 	ldw	r3,-28(fp)
  12168c:	00bfff84 	movi	r2,-2
  121690:	1884703a 	and	r2,r3,r2
  121694:	1001703a 	wrctl	status,r2
  
  return context;
  121698:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  12169c:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  1216a0:	e0bffc17 	ldw	r2,-16(fp)
  1216a4:	10800117 	ldw	r2,4(r2)
  1216a8:	10c02014 	ori	r3,r2,128
  1216ac:	e0bffc17 	ldw	r2,-16(fp)
  1216b0:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  1216b4:	e0bffc17 	ldw	r2,-16(fp)
  1216b8:	10800017 	ldw	r2,0(r2)
  1216bc:	10800304 	addi	r2,r2,12
  1216c0:	e0fffc17 	ldw	r3,-16(fp)
  1216c4:	18c00117 	ldw	r3,4(r3)
  1216c8:	10c00035 	stwio	r3,0(r2)
  1216cc:	e0bff817 	ldw	r2,-32(fp)
  1216d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1216d4:	e0bffa17 	ldw	r2,-24(fp)
  1216d8:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  1216dc:	e0bff517 	ldw	r2,-44(fp)
  1216e0:	1000021e 	bne	r2,zero,1216ec <altera_avalon_uart_read+0x158>
  1216e4:	e0bffe17 	ldw	r2,-8(fp)
  1216e8:	103fcd1e 	bne	r2,zero,121620 <__alt_data_end+0xfffe1f00>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  1216ec:	0005303a 	rdctl	r2,status
  1216f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1216f4:	e0fffb17 	ldw	r3,-20(fp)
  1216f8:	00bfff84 	movi	r2,-2
  1216fc:	1884703a 	and	r2,r3,r2
  121700:	1001703a 	wrctl	status,r2
  
  return context;
  121704:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  121708:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  12170c:	e0bffc17 	ldw	r2,-16(fp)
  121710:	10800117 	ldw	r2,4(r2)
  121714:	10c02014 	ori	r3,r2,128
  121718:	e0bffc17 	ldw	r2,-16(fp)
  12171c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  121720:	e0bffc17 	ldw	r2,-16(fp)
  121724:	10800017 	ldw	r2,0(r2)
  121728:	10800304 	addi	r2,r2,12
  12172c:	e0fffc17 	ldw	r3,-16(fp)
  121730:	18c00117 	ldw	r3,4(r3)
  121734:	10c00035 	stwio	r3,0(r2)
  121738:	e0bff817 	ldw	r2,-32(fp)
  12173c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  121740:	e0bff717 	ldw	r2,-36(fp)
  121744:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  121748:	e0bff403 	ldbu	r2,-48(fp)
  12174c:	10000226 	beq	r2,zero,121758 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  121750:	00bffd44 	movi	r2,-11
  121754:	00000106 	br	12175c <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  121758:	e0bff517 	ldw	r2,-44(fp)
  }
}
  12175c:	e037883a 	mov	sp,fp
  121760:	dfc00117 	ldw	ra,4(sp)
  121764:	df000017 	ldw	fp,0(sp)
  121768:	dec00204 	addi	sp,sp,8
  12176c:	f800283a 	ret

00121770 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  121770:	defffe04 	addi	sp,sp,-8
  121774:	dfc00115 	stw	ra,4(sp)
  121778:	df000015 	stw	fp,0(sp)
  12177c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  121780:	d0a00717 	ldw	r2,-32740(gp)
  121784:	10000326 	beq	r2,zero,121794 <alt_get_errno+0x24>
  121788:	d0a00717 	ldw	r2,-32740(gp)
  12178c:	103ee83a 	callr	r2
  121790:	00000106 	br	121798 <alt_get_errno+0x28>
  121794:	d0a73404 	addi	r2,gp,-25392
}
  121798:	e037883a 	mov	sp,fp
  12179c:	dfc00117 	ldw	ra,4(sp)
  1217a0:	df000017 	ldw	fp,0(sp)
  1217a4:	dec00204 	addi	sp,sp,8
  1217a8:	f800283a 	ret

001217ac <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  1217ac:	defff204 	addi	sp,sp,-56
  1217b0:	dfc00d15 	stw	ra,52(sp)
  1217b4:	df000c15 	stw	fp,48(sp)
  1217b8:	df000c04 	addi	fp,sp,48
  1217bc:	e13ffc15 	stw	r4,-16(fp)
  1217c0:	e17ffd15 	stw	r5,-12(fp)
  1217c4:	e1bffe15 	stw	r6,-8(fp)
  1217c8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  1217cc:	e0bffe17 	ldw	r2,-8(fp)
  1217d0:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  1217d4:	e0bfff17 	ldw	r2,-4(fp)
  1217d8:	1090000c 	andi	r2,r2,16384
  1217dc:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  1217e0:	00003c06 	br	1218d4 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  1217e4:	e0bffc17 	ldw	r2,-16(fp)
  1217e8:	10800517 	ldw	r2,20(r2)
  1217ec:	10800044 	addi	r2,r2,1
  1217f0:	10800fcc 	andi	r2,r2,63
  1217f4:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  1217f8:	e0bffc17 	ldw	r2,-16(fp)
  1217fc:	10c00417 	ldw	r3,16(r2)
  121800:	e0bff717 	ldw	r2,-36(fp)
  121804:	1880221e 	bne	r3,r2,121890 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  121808:	e0bff517 	ldw	r2,-44(fp)
  12180c:	10000526 	beq	r2,zero,121824 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  121810:	01217700 	call	121770 <alt_get_errno>
  121814:	1007883a 	mov	r3,r2
  121818:	008002c4 	movi	r2,11
  12181c:	18800015 	stw	r2,0(r3)
        break;
  121820:	00002e06 	br	1218dc <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  121824:	0005303a 	rdctl	r2,status
  121828:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  12182c:	e0fff917 	ldw	r3,-28(fp)
  121830:	00bfff84 	movi	r2,-2
  121834:	1884703a 	and	r2,r3,r2
  121838:	1001703a 	wrctl	status,r2
  
  return context;
  12183c:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  121840:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  121844:	e0bffc17 	ldw	r2,-16(fp)
  121848:	10800117 	ldw	r2,4(r2)
  12184c:	10c11014 	ori	r3,r2,1088
  121850:	e0bffc17 	ldw	r2,-16(fp)
  121854:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  121858:	e0bffc17 	ldw	r2,-16(fp)
  12185c:	10800017 	ldw	r2,0(r2)
  121860:	10800304 	addi	r2,r2,12
  121864:	e0fffc17 	ldw	r3,-16(fp)
  121868:	18c00117 	ldw	r3,4(r3)
  12186c:	10c00035 	stwio	r3,0(r2)
  121870:	e0bff817 	ldw	r2,-32(fp)
  121874:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  121878:	e0bff617 	ldw	r2,-40(fp)
  12187c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  121880:	e0bffc17 	ldw	r2,-16(fp)
  121884:	10c00417 	ldw	r3,16(r2)
  121888:	e0bff717 	ldw	r2,-36(fp)
  12188c:	18bffc26 	beq	r3,r2,121880 <__alt_data_end+0xfffe2160>
      }
    }

    count--;
  121890:	e0bff417 	ldw	r2,-48(fp)
  121894:	10bfffc4 	addi	r2,r2,-1
  121898:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  12189c:	e0bffc17 	ldw	r2,-16(fp)
  1218a0:	10c00517 	ldw	r3,20(r2)
  1218a4:	e0bffd17 	ldw	r2,-12(fp)
  1218a8:	11000044 	addi	r4,r2,1
  1218ac:	e13ffd15 	stw	r4,-12(fp)
  1218b0:	10800003 	ldbu	r2,0(r2)
  1218b4:	1009883a 	mov	r4,r2
  1218b8:	e0bffc17 	ldw	r2,-16(fp)
  1218bc:	10c5883a 	add	r2,r2,r3
  1218c0:	10801704 	addi	r2,r2,92
  1218c4:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  1218c8:	e0bffc17 	ldw	r2,-16(fp)
  1218cc:	e0fff717 	ldw	r3,-36(fp)
  1218d0:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  1218d4:	e0bff417 	ldw	r2,-48(fp)
  1218d8:	103fc21e 	bne	r2,zero,1217e4 <__alt_data_end+0xfffe20c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  1218dc:	0005303a 	rdctl	r2,status
  1218e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1218e4:	e0fffb17 	ldw	r3,-20(fp)
  1218e8:	00bfff84 	movi	r2,-2
  1218ec:	1884703a 	and	r2,r3,r2
  1218f0:	1001703a 	wrctl	status,r2
  
  return context;
  1218f4:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  1218f8:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  1218fc:	e0bffc17 	ldw	r2,-16(fp)
  121900:	10800117 	ldw	r2,4(r2)
  121904:	10c11014 	ori	r3,r2,1088
  121908:	e0bffc17 	ldw	r2,-16(fp)
  12190c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  121910:	e0bffc17 	ldw	r2,-16(fp)
  121914:	10800017 	ldw	r2,0(r2)
  121918:	10800304 	addi	r2,r2,12
  12191c:	e0fffc17 	ldw	r3,-16(fp)
  121920:	18c00117 	ldw	r3,4(r3)
  121924:	10c00035 	stwio	r3,0(r2)
  121928:	e0bff817 	ldw	r2,-32(fp)
  12192c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  121930:	e0bffa17 	ldw	r2,-24(fp)
  121934:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  121938:	e0fffe17 	ldw	r3,-8(fp)
  12193c:	e0bff417 	ldw	r2,-48(fp)
  121940:	1885c83a 	sub	r2,r3,r2
}
  121944:	e037883a 	mov	sp,fp
  121948:	dfc00117 	ldw	ra,4(sp)
  12194c:	df000017 	ldw	fp,0(sp)
  121950:	dec00204 	addi	sp,sp,8
  121954:	f800283a 	ret

00121958 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
  121958:	defffd04 	addi	sp,sp,-12
  12195c:	dfc00215 	stw	ra,8(sp)
  121960:	df000115 	stw	fp,4(sp)
  121964:	df000104 	addi	fp,sp,4
  121968:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
  12196c:	d1600804 	addi	r5,gp,-32736
  121970:	e13fff17 	ldw	r4,-4(fp)
  121974:	0122ce00 	call	122ce0 <alt_dev_llist_insert>
}
  121978:	e037883a 	mov	sp,fp
  12197c:	dfc00117 	ldw	ra,4(sp)
  121980:	df000017 	ldw	fp,0(sp)
  121984:	dec00204 	addi	sp,sp,8
  121988:	f800283a 	ret

0012198c <alt_onchip_flash_read>:
    alt_flash_dev *flash_info,
    int           offset,
    void          *dest_addr,
    int           length
)
{
  12198c:	defff704 	addi	sp,sp,-36
  121990:	dfc00815 	stw	ra,32(sp)
  121994:	df000715 	stw	fp,28(sp)
  121998:	df000704 	addi	fp,sp,28
  12199c:	e13ffc15 	stw	r4,-16(fp)
  1219a0:	e17ffd15 	stw	r5,-12(fp)
  1219a4:	e1bffe15 	stw	r6,-8(fp)
  1219a8:	e1ffff15 	stw	r7,-4(fp)
    int ret_code = 0;
  1219ac:	e03ff915 	stw	zero,-28(fp)
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;
  1219b0:	e0bffc17 	ldw	r2,-16(fp)
  1219b4:	e0bffa15 	stw	r2,-24(fp)

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
  1219b8:	e0bffa17 	ldw	r2,-24(fp)
  1219bc:	10800b17 	ldw	r2,44(r2)
  1219c0:	e0fffd17 	ldw	r3,-12(fp)
  1219c4:	1880060e 	bge	r3,r2,1219e0 <alt_onchip_flash_read+0x54>
  1219c8:	e0fffd17 	ldw	r3,-12(fp)
  1219cc:	e0bfff17 	ldw	r2,-4(fp)
  1219d0:	1885883a 	add	r2,r3,r2
  1219d4:	e0fffa17 	ldw	r3,-24(fp)
  1219d8:	18c00b17 	ldw	r3,44(r3)
  1219dc:	1880020e 	bge	r3,r2,1219e8 <alt_onchip_flash_read+0x5c>
        return -EFAULT;
  1219e0:	00bffc84 	movi	r2,-14
  1219e4:	00001706 	br	121a44 <alt_onchip_flash_read+0xb8>
    }
    
    memcpy(dest_addr, (alt_u8*)flash->dev.base_addr+offset, length);
  1219e8:	e0bffa17 	ldw	r2,-24(fp)
  1219ec:	10c00a17 	ldw	r3,40(r2)
  1219f0:	e0bffd17 	ldw	r2,-12(fp)
  1219f4:	1885883a 	add	r2,r3,r2
  1219f8:	e0ffff17 	ldw	r3,-4(fp)
  1219fc:	180d883a 	mov	r6,r3
  121a00:	100b883a 	mov	r5,r2
  121a04:	e13ffe17 	ldw	r4,-8(fp)
  121a08:	01248fc0 	call	1248fc <memcpy>

    if (NULL != flash->csr_base) {
  121a0c:	e0bffa17 	ldw	r2,-24(fp)
  121a10:	10802f17 	ldw	r2,188(r2)
  121a14:	10000a26 	beq	r2,zero,121a40 <alt_onchip_flash_read+0xb4>
        int read_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_READ_MSK;
  121a18:	e0bffa17 	ldw	r2,-24(fp)
  121a1c:	10802f17 	ldw	r2,188(r2)
  121a20:	10800037 	ldwio	r2,0(r2)
  121a24:	1080010c 	andi	r2,r2,4
  121a28:	e0bffb15 	stw	r2,-20(fp)
        if (read_status != ALTERA_ONCHIP_FLASH_STATUS_READ_PASSED) {
  121a2c:	e0bffb17 	ldw	r2,-20(fp)
  121a30:	10800120 	cmpeqi	r2,r2,4
  121a34:	1000021e 	bne	r2,zero,121a40 <alt_onchip_flash_read+0xb4>
            /* Read failed.  Return error.*/
            ret_code = -EIO;
  121a38:	00bffec4 	movi	r2,-5
  121a3c:	e0bff915 	stw	r2,-28(fp)
        }
    }
    return ret_code;
  121a40:	e0bff917 	ldw	r2,-28(fp)
}
  121a44:	e037883a 	mov	sp,fp
  121a48:	dfc00117 	ldw	ra,4(sp)
  121a4c:	df000017 	ldw	fp,0(sp)
  121a50:	dec00204 	addi	sp,sp,8
  121a54:	f800283a 	ret

00121a58 <alt_onchip_flash_get_info>:
(
    alt_flash_fd *fd,
    flash_region **info,
    int          *number_of_regions
)
{
  121a58:	defffa04 	addi	sp,sp,-24
  121a5c:	df000515 	stw	fp,20(sp)
  121a60:	df000504 	addi	fp,sp,20
  121a64:	e13ffd15 	stw	r4,-12(fp)
  121a68:	e17ffe15 	stw	r5,-8(fp)
  121a6c:	e1bfff15 	stw	r6,-4(fp)
    int ret_code = 0;
  121a70:	e03ffb15 	stw	zero,-20(fp)

    alt_flash_dev* flash = (alt_flash_dev*)fd;
  121a74:	e0bffd17 	ldw	r2,-12(fp)
  121a78:	e0bffc15 	stw	r2,-16(fp)

    if (NULL != number_of_regions)
  121a7c:	e0bfff17 	ldw	r2,-4(fp)
  121a80:	10000426 	beq	r2,zero,121a94 <alt_onchip_flash_get_info+0x3c>
    {
        /* Pass the number of region to user */
        *number_of_regions = flash->number_of_regions;
  121a84:	e0bffc17 	ldw	r2,-16(fp)
  121a88:	10c00c17 	ldw	r3,48(r2)
  121a8c:	e0bfff17 	ldw	r2,-4(fp)
  121a90:	10c00015 	stw	r3,0(r2)
    }

    if (!flash->number_of_regions)
  121a94:	e0bffc17 	ldw	r2,-16(fp)
  121a98:	10800c17 	ldw	r2,48(r2)
  121a9c:	1000031e 	bne	r2,zero,121aac <alt_onchip_flash_get_info+0x54>
    {
        ret_code = -ENOMEM;
  121aa0:	00bffd04 	movi	r2,-12
  121aa4:	e0bffb15 	stw	r2,-20(fp)
  121aa8:	00000d06 	br	121ae0 <alt_onchip_flash_get_info+0x88>
    }
    else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
  121aac:	e0bffc17 	ldw	r2,-16(fp)
  121ab0:	10800c17 	ldw	r2,48(r2)
  121ab4:	10800250 	cmplti	r2,r2,9
  121ab8:	1000031e 	bne	r2,zero,121ac8 <alt_onchip_flash_get_info+0x70>
    {
        ret_code = -EFAULT;
  121abc:	00bffc84 	movi	r2,-14
  121ac0:	e0bffb15 	stw	r2,-20(fp)
  121ac4:	00000606 	br	121ae0 <alt_onchip_flash_get_info+0x88>
    }
    else
    {
        if (NULL != info)
  121ac8:	e0bffe17 	ldw	r2,-8(fp)
  121acc:	10000426 	beq	r2,zero,121ae0 <alt_onchip_flash_get_info+0x88>
        {
            /* Pass the table of erase blocks to user */
            *info = &flash->region_info[0];
  121ad0:	e0bffc17 	ldw	r2,-16(fp)
  121ad4:	10c00d04 	addi	r3,r2,52
  121ad8:	e0bffe17 	ldw	r2,-8(fp)
  121adc:	10c00015 	stw	r3,0(r2)
        }
    }

    return ret_code;
  121ae0:	e0bffb17 	ldw	r2,-20(fp)
}
  121ae4:	e037883a 	mov	sp,fp
  121ae8:	df000017 	ldw	fp,0(sp)
  121aec:	dec00104 	addi	sp,sp,4
  121af0:	f800283a 	ret

00121af4 <alt_onchip_flash_erase_block>:
int alt_onchip_flash_erase_block
(
    alt_flash_dev *flash_info,
    int           block_offset
)
{
  121af4:	defff904 	addi	sp,sp,-28
  121af8:	dfc00615 	stw	ra,24(sp)
  121afc:	df000515 	stw	fp,20(sp)
  121b00:	df000504 	addi	fp,sp,20
  121b04:	e13ffe15 	stw	r4,-8(fp)
  121b08:	e17fff15 	stw	r5,-4(fp)
    int ret_code = 0;
  121b0c:	e03ffb15 	stw	zero,-20(fp)
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
  121b10:	e0bffe17 	ldw	r2,-8(fp)
  121b14:	e0bffc15 	stw	r2,-16(fp)
    int page_address;

    /* Make sure the input parameters is not outside of this device's range. */
    if (block_offset >= flash->dev.length) {
  121b18:	e0bffc17 	ldw	r2,-16(fp)
  121b1c:	10800b17 	ldw	r2,44(r2)
  121b20:	e0ffff17 	ldw	r3,-4(fp)
  121b24:	18800216 	blt	r3,r2,121b30 <alt_onchip_flash_erase_block+0x3c>
        return -EFAULT;
  121b28:	00bffc84 	movi	r2,-14
  121b2c:	00004606 	br	121c48 <alt_onchip_flash_erase_block+0x154>
    }

    /* Make sure IP support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only)) {
  121b30:	e0bffc17 	ldw	r2,-16(fp)
  121b34:	10802f17 	ldw	r2,188(r2)
  121b38:	10000326 	beq	r2,zero,121b48 <alt_onchip_flash_erase_block+0x54>
  121b3c:	e0bffc17 	ldw	r2,-16(fp)
  121b40:	10802e17 	ldw	r2,184(r2)
  121b44:	10000226 	beq	r2,zero,121b50 <alt_onchip_flash_erase_block+0x5c>
        return -ENODEV;
  121b48:	00bffb44 	movi	r2,-19
  121b4c:	00003e06 	br	121c48 <alt_onchip_flash_erase_block+0x154>
    }

    /* The block_offset must be page size aligned */
    if ((block_offset & (flash->page_size - 1)) != 0)
  121b50:	e0bffc17 	ldw	r2,-16(fp)
  121b54:	10803f17 	ldw	r2,252(r2)
  121b58:	10ffffc4 	addi	r3,r2,-1
  121b5c:	e0bfff17 	ldw	r2,-4(fp)
  121b60:	1884703a 	and	r2,r3,r2
  121b64:	10000226 	beq	r2,zero,121b70 <alt_onchip_flash_erase_block+0x7c>
    {
        /* The address is not aligned */
        return -EINVAL;
  121b68:	00bffa84 	movi	r2,-22
  121b6c:	00003606 	br	121c48 <alt_onchip_flash_erase_block+0x154>
    }

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  121b70:	e13ffc17 	ldw	r4,-16(fp)
  121b74:	01226e80 	call	1226e8 <alt_onchip_flash_poll_for_status_to_go_idle>
  121b78:	e0bffb15 	stw	r2,-20(fp)
    if (ret_code != 0)
  121b7c:	e0bffb17 	ldw	r2,-20(fp)
  121b80:	10000226 	beq	r2,zero,121b8c <alt_onchip_flash_erase_block+0x98>
    {
        return ret_code;
  121b84:	e0bffb17 	ldw	r2,-20(fp)
  121b88:	00002f06 	br	121c48 <alt_onchip_flash_erase_block+0x154>
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  121b8c:	e0bffc17 	ldw	r2,-16(fp)
  121b90:	10802f17 	ldw	r2,188(r2)
  121b94:	10c00104 	addi	r3,r2,4
  121b98:	e0bffc17 	ldw	r2,-16(fp)
  121b9c:	10802f17 	ldw	r2,188(r2)
  121ba0:	10800104 	addi	r2,r2,4
  121ba4:	10800037 	ldwio	r2,0(r2)
  121ba8:	113c002c 	andhi	r4,r2,61440
  121bac:	00802034 	movhi	r2,128
  121bb0:	10bfffc4 	addi	r2,r2,-1
  121bb4:	2084b03a 	or	r2,r4,r2
  121bb8:	18800035 	stwio	r2,0(r3)

    /* Calculate Page erase address, it is 32bit word addressing*/
    page_address = block_offset / 4;
  121bbc:	e0bfff17 	ldw	r2,-4(fp)
  121bc0:	1000010e 	bge	r2,zero,121bc8 <alt_onchip_flash_erase_block+0xd4>
  121bc4:	108000c4 	addi	r2,r2,3
  121bc8:	1005d0ba 	srai	r2,r2,2
  121bcc:	e0bffd15 	stw	r2,-12(fp)

    /* Perform Page erase operation */
    ALTERA_ONCHIP_FLASH_PAGE_ERASE(flash->csr_base, page_address);
  121bd0:	e0bffc17 	ldw	r2,-16(fp)
  121bd4:	10802f17 	ldw	r2,188(r2)
  121bd8:	10800104 	addi	r2,r2,4
  121bdc:	e0fffc17 	ldw	r3,-16(fp)
  121be0:	18c02f17 	ldw	r3,188(r3)
  121be4:	18c00104 	addi	r3,r3,4
  121be8:	18c00037 	ldwio	r3,0(r3)
  121bec:	193c002c 	andhi	r4,r3,61440
  121bf0:	e0fffd17 	ldw	r3,-12(fp)
  121bf4:	18c01c34 	orhi	r3,r3,112
  121bf8:	20c6b03a 	or	r3,r4,r3
  121bfc:	10c00035 	stwio	r3,0(r2)

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  121c00:	e13ffc17 	ldw	r4,-16(fp)
  121c04:	01226e80 	call	1226e8 <alt_onchip_flash_poll_for_status_to_go_idle>
  121c08:	e0bffb15 	stw	r2,-20(fp)

    /* Wait until flash controller indicate erase passed */
    ret_code = alt_onchip_flash_poll_for_status_erase_passed(flash);
  121c0c:	e13ffc17 	ldw	r4,-16(fp)
  121c10:	01227780 	call	122778 <alt_onchip_flash_poll_for_status_erase_passed>
  121c14:	e0bffb15 	stw	r2,-20(fp)

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  121c18:	e0bffc17 	ldw	r2,-16(fp)
  121c1c:	10802f17 	ldw	r2,188(r2)
  121c20:	10c00104 	addi	r3,r2,4
  121c24:	e0bffc17 	ldw	r2,-16(fp)
  121c28:	10802f17 	ldw	r2,188(r2)
  121c2c:	10800104 	addi	r2,r2,4
  121c30:	11000037 	ldwio	r4,0(r2)
  121c34:	00840034 	movhi	r2,4096
  121c38:	10bfffc4 	addi	r2,r2,-1
  121c3c:	2084b03a 	or	r2,r4,r2
  121c40:	18800035 	stwio	r2,0(r3)

    return ret_code;
  121c44:	e0bffb17 	ldw	r2,-20(fp)
}
  121c48:	e037883a 	mov	sp,fp
  121c4c:	dfc00117 	ldw	ra,4(sp)
  121c50:	df000017 	ldw	fp,0(sp)
  121c54:	dec00204 	addi	sp,sp,8
  121c58:	f800283a 	ret

00121c5c <alt_onchip_flash_write_block>:
    int           block_offset,
    int           data_offset,
    const void    *data,
    int           length
)
{
  121c5c:	defff204 	addi	sp,sp,-56
  121c60:	dfc00d15 	stw	ra,52(sp)
  121c64:	df000c15 	stw	fp,48(sp)
  121c68:	df000c04 	addi	fp,sp,48
  121c6c:	e13ffc15 	stw	r4,-16(fp)
  121c70:	e17ffd15 	stw	r5,-12(fp)
  121c74:	e1bffe15 	stw	r6,-8(fp)
  121c78:	e1ffff15 	stw	r7,-4(fp)
    int ret_code = 0;
  121c7c:	e03ff415 	stw	zero,-48(fp)
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
  121c80:	e0bffc17 	ldw	r2,-16(fp)
  121c84:	e0bff815 	stw	r2,-32(fp)
    int buffer_offset = 0;
  121c88:	e03ff515 	stw	zero,-44(fp)
    int length_of_current_write;
    int current_data_offset = data_offset;
  121c8c:	e0bffe17 	ldw	r2,-8(fp)
  121c90:	e0bff615 	stw	r2,-40(fp)
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
  121c94:	e0bff817 	ldw	r2,-32(fp)
  121c98:	10800b17 	ldw	r2,44(r2)
    int current_data_offset = data_offset;
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
  121c9c:	e0fffd17 	ldw	r3,-12(fp)
  121ca0:	18800a0e 	bge	r3,r2,121ccc <alt_onchip_flash_write_block+0x70>
        (block_offset >= flash->dev.length) ||
        (data_offset >= flash->dev.length) ||
  121ca4:	e0bff817 	ldw	r2,-32(fp)
  121ca8:	10800b17 	ldw	r2,44(r2)
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
  121cac:	e0fffe17 	ldw	r3,-8(fp)
  121cb0:	1880060e 	bge	r3,r2,121ccc <alt_onchip_flash_write_block+0x70>
        (data_offset >= flash->dev.length) ||
        (length > (flash->dev.length - data_offset))
  121cb4:	e0bff817 	ldw	r2,-32(fp)
  121cb8:	10c00b17 	ldw	r3,44(r2)
  121cbc:	e0bffe17 	ldw	r2,-8(fp)
  121cc0:	1887c83a 	sub	r3,r3,r2
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
        (data_offset >= flash->dev.length) ||
  121cc4:	e0800217 	ldw	r2,8(fp)
  121cc8:	1880020e 	bge	r3,r2,121cd4 <alt_onchip_flash_write_block+0x78>
        (length > (flash->dev.length - data_offset))
    ) {
        return -EFAULT;
  121ccc:	00bffc84 	movi	r2,-14
  121cd0:	00009306 	br	121f20 <alt_onchip_flash_write_block+0x2c4>
    }

    /* Make sure IP support support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only != 0)) {
  121cd4:	e0bff817 	ldw	r2,-32(fp)
  121cd8:	10802f17 	ldw	r2,188(r2)
  121cdc:	10000326 	beq	r2,zero,121cec <alt_onchip_flash_write_block+0x90>
  121ce0:	e0bff817 	ldw	r2,-32(fp)
  121ce4:	10802e17 	ldw	r2,184(r2)
  121ce8:	10000226 	beq	r2,zero,121cf4 <alt_onchip_flash_write_block+0x98>
        return -ENODEV;
  121cec:	00bffb44 	movi	r2,-19
  121cf0:	00008b06 	br	121f20 <alt_onchip_flash_write_block+0x2c4>
    }

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  121cf4:	e13ff817 	ldw	r4,-32(fp)
  121cf8:	01226e80 	call	1226e8 <alt_onchip_flash_poll_for_status_to_go_idle>
  121cfc:	e0bff415 	stw	r2,-48(fp)
    if (ret_code != 0)
  121d00:	e0bff417 	ldw	r2,-48(fp)
  121d04:	10000226 	beq	r2,zero,121d10 <alt_onchip_flash_write_block+0xb4>
    {
        return ret_code;
  121d08:	e0bff417 	ldw	r2,-48(fp)
  121d0c:	00008406 	br	121f20 <alt_onchip_flash_write_block+0x2c4>
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  121d10:	e0bff817 	ldw	r2,-32(fp)
  121d14:	10802f17 	ldw	r2,188(r2)
  121d18:	10c00104 	addi	r3,r2,4
  121d1c:	e0bff817 	ldw	r2,-32(fp)
  121d20:	10802f17 	ldw	r2,188(r2)
  121d24:	10800104 	addi	r2,r2,4
  121d28:	10800037 	ldwio	r2,0(r2)
  121d2c:	113c002c 	andhi	r4,r2,61440
  121d30:	00802034 	movhi	r2,128
  121d34:	10bfffc4 	addi	r2,r2,-1
  121d38:	2084b03a 	or	r2,r4,r2
  121d3c:	18800035 	stwio	r2,0(r3)

    /* Check data length */
    while (length)
  121d40:	00006506 	br	121ed8 <alt_onchip_flash_write_block+0x27c>
    {
        /* Minimum write size to onchip flash is 32 bits of data */
        chunk_of_data = 0xFFFFFFFF;
  121d44:	00bfffc4 	movi	r2,-1
  121d48:	e0bffb15 	stw	r2,-20(fp)

        /* The start of data_offset must be 4 bytes (32 bits) aligned */
        if ((current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1)) == 0)
  121d4c:	e0bff617 	ldw	r2,-40(fp)
  121d50:	108000cc 	andi	r2,r2,3
  121d54:	10001e1e 	bne	r2,zero,121dd0 <alt_onchip_flash_write_block+0x174>
        {
            /* The address is 4-byte aligned here */
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
  121d58:	e0bff617 	ldw	r2,-40(fp)
  121d5c:	10c00104 	addi	r3,r2,4
  121d60:	00bfff04 	movi	r2,-4
  121d64:	1884703a 	and	r2,r3,r2
  121d68:	e0bff715 	stw	r2,-36(fp)
            length_of_current_write = MIN(length, next_data_offset - current_data_offset);
  121d6c:	e0fff717 	ldw	r3,-36(fp)
  121d70:	e0bff617 	ldw	r2,-40(fp)
  121d74:	1885c83a 	sub	r2,r3,r2
  121d78:	e0c00217 	ldw	r3,8(fp)
  121d7c:	1880010e 	bge	r3,r2,121d84 <alt_onchip_flash_write_block+0x128>
  121d80:	1805883a 	mov	r2,r3
  121d84:	e0bff915 	stw	r2,-28(fp)
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy(&chunk_of_data, &((alt_u8*)data)[buffer_offset], length_of_current_write);
  121d88:	e0bff517 	ldw	r2,-44(fp)
  121d8c:	e0ffff17 	ldw	r3,-4(fp)
  121d90:	1887883a 	add	r3,r3,r2
  121d94:	e13ff917 	ldw	r4,-28(fp)
  121d98:	e0bffb04 	addi	r2,fp,-20
  121d9c:	200d883a 	mov	r6,r4
  121da0:	180b883a 	mov	r5,r3
  121da4:	1009883a 	mov	r4,r2
  121da8:	01248fc0 	call	1248fc <memcpy>
            buffer_offset += length_of_current_write;
  121dac:	e0fff517 	ldw	r3,-44(fp)
  121db0:	e0bff917 	ldw	r2,-28(fp)
  121db4:	1885883a 	add	r2,r3,r2
  121db8:	e0bff515 	stw	r2,-44(fp)
            length -= length_of_current_write;
  121dbc:	e0c00217 	ldw	r3,8(fp)
  121dc0:	e0bff917 	ldw	r2,-28(fp)
  121dc4:	1885c83a 	sub	r2,r3,r2
  121dc8:	e0800215 	stw	r2,8(fp)
  121dcc:	00003006 	br	121e90 <alt_onchip_flash_write_block+0x234>
        } else {
            /* Calculate how many padding bytes need to be added before the start of a data offset */
            int padding = current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
  121dd0:	e0bff617 	ldw	r2,-40(fp)
  121dd4:	108000cc 	andi	r2,r2,3
  121dd8:	e0bffa15 	stw	r2,-24(fp)

            /* Calculate new 4-byte aligned data offset */
            current_data_offset = current_data_offset - padding;
  121ddc:	e0fff617 	ldw	r3,-40(fp)
  121de0:	e0bffa17 	ldw	r2,-24(fp)
  121de4:	1885c83a 	sub	r2,r3,r2
  121de8:	e0bff615 	stw	r2,-40(fp)
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
  121dec:	e0bff617 	ldw	r2,-40(fp)
  121df0:	10c00104 	addi	r3,r2,4
  121df4:	00bfff04 	movi	r2,-4
  121df8:	1884703a 	and	r2,r3,r2
  121dfc:	e0bff715 	stw	r2,-36(fp)
            length_of_current_write = MIN(length + padding, next_data_offset - current_data_offset);
  121e00:	e0fff717 	ldw	r3,-36(fp)
  121e04:	e0bff617 	ldw	r2,-40(fp)
  121e08:	1889c83a 	sub	r4,r3,r2
  121e0c:	e0c00217 	ldw	r3,8(fp)
  121e10:	e0bffa17 	ldw	r2,-24(fp)
  121e14:	1887883a 	add	r3,r3,r2
  121e18:	2005883a 	mov	r2,r4
  121e1c:	1880010e 	bge	r3,r2,121e24 <alt_onchip_flash_write_block+0x1c8>
  121e20:	1805883a 	mov	r2,r3
  121e24:	e0bff915 	stw	r2,-28(fp)
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy((void *)(((int)&chunk_of_data) + (int)padding), &((alt_u8*)data)[buffer_offset], length_of_current_write - padding);
  121e28:	e0fffb04 	addi	r3,fp,-20
  121e2c:	e0bffa17 	ldw	r2,-24(fp)
  121e30:	1885883a 	add	r2,r3,r2
  121e34:	100f883a 	mov	r7,r2
  121e38:	e0bff517 	ldw	r2,-44(fp)
  121e3c:	e0ffff17 	ldw	r3,-4(fp)
  121e40:	1889883a 	add	r4,r3,r2
  121e44:	e0fff917 	ldw	r3,-28(fp)
  121e48:	e0bffa17 	ldw	r2,-24(fp)
  121e4c:	1885c83a 	sub	r2,r3,r2
  121e50:	100d883a 	mov	r6,r2
  121e54:	200b883a 	mov	r5,r4
  121e58:	3809883a 	mov	r4,r7
  121e5c:	01248fc0 	call	1248fc <memcpy>
            buffer_offset += length_of_current_write - padding;
  121e60:	e0fff917 	ldw	r3,-28(fp)
  121e64:	e0bffa17 	ldw	r2,-24(fp)
  121e68:	1885c83a 	sub	r2,r3,r2
  121e6c:	e0fff517 	ldw	r3,-44(fp)
  121e70:	1885883a 	add	r2,r3,r2
  121e74:	e0bff515 	stw	r2,-44(fp)
            length -= length_of_current_write - padding;
  121e78:	e0fff917 	ldw	r3,-28(fp)
  121e7c:	e0bffa17 	ldw	r2,-24(fp)
  121e80:	1885c83a 	sub	r2,r3,r2
  121e84:	e0c00217 	ldw	r3,8(fp)
  121e88:	1885c83a 	sub	r2,r3,r2
  121e8c:	e0800215 	stw	r2,8(fp)
        }

        /* Writing to flash via IO 32 bits at a time */
        IOWR_32DIRECT(flash->dev.base_addr, current_data_offset, chunk_of_data);
  121e90:	e0bff817 	ldw	r2,-32(fp)
  121e94:	10c00a17 	ldw	r3,40(r2)
  121e98:	e0bff617 	ldw	r2,-40(fp)
  121e9c:	1885883a 	add	r2,r3,r2
  121ea0:	e0fffb17 	ldw	r3,-20(fp)
  121ea4:	10c00035 	stwio	r3,0(r2)

        /* Wait until flash controller idle */
        ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  121ea8:	e13ff817 	ldw	r4,-32(fp)
  121eac:	01226e80 	call	1226e8 <alt_onchip_flash_poll_for_status_to_go_idle>
  121eb0:	e0bff415 	stw	r2,-48(fp)
        if (ret_code != 0)
  121eb4:	e0bff417 	ldw	r2,-48(fp)
  121eb8:	10000a1e 	bne	r2,zero,121ee4 <alt_onchip_flash_write_block+0x288>
        {
            break;
        }

        /* Wait until flash controller indicate write passed */
        ret_code = alt_onchip_flash_poll_for_status_write_passed(flash);
  121ebc:	e13ff817 	ldw	r4,-32(fp)
  121ec0:	01228080 	call	122808 <alt_onchip_flash_poll_for_status_write_passed>
  121ec4:	e0bff415 	stw	r2,-48(fp)
        if (ret_code != 0)
  121ec8:	e0bff417 	ldw	r2,-48(fp)
  121ecc:	1000071e 	bne	r2,zero,121eec <alt_onchip_flash_write_block+0x290>
        {
            break;
        }

        /* Prepare to write next 4 bytes */
        current_data_offset = next_data_offset;
  121ed0:	e0bff717 	ldw	r2,-36(fp)
  121ed4:	e0bff615 	stw	r2,-40(fp)

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);

    /* Check data length */
    while (length)
  121ed8:	e0800217 	ldw	r2,8(fp)
  121edc:	103f991e 	bne	r2,zero,121d44 <__alt_data_end+0xfffe2624>
  121ee0:	00000306 	br	121ef0 <alt_onchip_flash_write_block+0x294>

        /* Wait until flash controller idle */
        ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
        if (ret_code != 0)
        {
            break;
  121ee4:	0001883a 	nop
  121ee8:	00000106 	br	121ef0 <alt_onchip_flash_write_block+0x294>

        /* Wait until flash controller indicate write passed */
        ret_code = alt_onchip_flash_poll_for_status_write_passed(flash);
        if (ret_code != 0)
        {
            break;
  121eec:	0001883a 	nop
        /* Prepare to write next 4 bytes */
        current_data_offset = next_data_offset;
    }

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  121ef0:	e0bff817 	ldw	r2,-32(fp)
  121ef4:	10802f17 	ldw	r2,188(r2)
  121ef8:	10c00104 	addi	r3,r2,4
  121efc:	e0bff817 	ldw	r2,-32(fp)
  121f00:	10802f17 	ldw	r2,188(r2)
  121f04:	10800104 	addi	r2,r2,4
  121f08:	11000037 	ldwio	r4,0(r2)
  121f0c:	00840034 	movhi	r2,4096
  121f10:	10bfffc4 	addi	r2,r2,-1
  121f14:	2084b03a 	or	r2,r4,r2
  121f18:	18800035 	stwio	r2,0(r3)

    return ret_code;
  121f1c:	e0bff417 	ldw	r2,-48(fp)
}
  121f20:	e037883a 	mov	sp,fp
  121f24:	dfc00117 	ldw	ra,4(sp)
  121f28:	df000017 	ldw	fp,0(sp)
  121f2c:	dec00204 	addi	sp,sp,8
  121f30:	f800283a 	ret

00121f34 <alt_onchip_flash_write>:
    alt_flash_dev *flash_info,
    int           offset,
    const void    *src_addr,
    int           length
)
{
  121f34:	defff104 	addi	sp,sp,-60
  121f38:	dfc00e15 	stw	ra,56(sp)
  121f3c:	df000d15 	stw	fp,52(sp)
  121f40:	df000d04 	addi	fp,sp,52
  121f44:	e13ffc15 	stw	r4,-16(fp)
  121f48:	e17ffd15 	stw	r5,-12(fp)
  121f4c:	e1bffe15 	stw	r6,-8(fp)
  121f50:	e1ffff15 	stw	r7,-4(fp)
    int         ret_code = 0;
  121f54:	e03ff415 	stw	zero,-48(fp)
    int         i,j;
    int         data_to_write;
    int         current_offset;
    int         full_length = length;
  121f58:	e0bfff17 	ldw	r2,-4(fp)
  121f5c:	e0bff815 	stw	r2,-32(fp)
    int         start_offset = offset;
  121f60:	e0bffd17 	ldw	r2,-12(fp)
  121f64:	e0bff915 	stw	r2,-28(fp)
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;
  121f68:	e0bffc17 	ldw	r2,-16(fp)
  121f6c:	e0bffa15 	stw	r2,-24(fp)

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || (length > (flash->dev.length - offset)))
  121f70:	e0bffa17 	ldw	r2,-24(fp)
  121f74:	10800b17 	ldw	r2,44(r2)
  121f78:	e0fffd17 	ldw	r3,-12(fp)
  121f7c:	1880060e 	bge	r3,r2,121f98 <alt_onchip_flash_write+0x64>
  121f80:	e0bffa17 	ldw	r2,-24(fp)
  121f84:	10c00b17 	ldw	r3,44(r2)
  121f88:	e0bffd17 	ldw	r2,-12(fp)
  121f8c:	1887c83a 	sub	r3,r3,r2
  121f90:	e0bfff17 	ldw	r2,-4(fp)
  121f94:	1880020e 	bge	r3,r2,121fa0 <alt_onchip_flash_write+0x6c>
    {
        return -EFAULT;
  121f98:	00bffc84 	movi	r2,-14
  121f9c:	00009606 	br	1221f8 <alt_onchip_flash_write+0x2c4>
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
  121fa0:	e03ff515 	stw	zero,-44(fp)
  121fa4:	00008706 	br	1221c4 <alt_onchip_flash_write+0x290>
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
  121fa8:	e0fffa17 	ldw	r3,-24(fp)
  121fac:	e0bff517 	ldw	r2,-44(fp)
  121fb0:	1004913a 	slli	r2,r2,4
  121fb4:	1885883a 	add	r2,r3,r2
  121fb8:	10800d04 	addi	r2,r2,52
  121fbc:	10800017 	ldw	r2,0(r2)
  121fc0:	e0fffd17 	ldw	r3,-12(fp)
  121fc4:	18807c16 	blt	r3,r2,1221b8 <alt_onchip_flash_write+0x284>
            (offset < (flash->dev.region_info[i].offset +
  121fc8:	e0fffa17 	ldw	r3,-24(fp)
  121fcc:	e0bff517 	ldw	r2,-44(fp)
  121fd0:	1004913a 	slli	r2,r2,4
  121fd4:	1885883a 	add	r2,r3,r2
  121fd8:	10800d04 	addi	r2,r2,52
  121fdc:	10c00017 	ldw	r3,0(r2)
            flash->dev.region_info[i].region_size)))
  121fe0:	e13ffa17 	ldw	r4,-24(fp)
  121fe4:	e0bff517 	ldw	r2,-44(fp)
  121fe8:	1004913a 	slli	r2,r2,4
  121fec:	2085883a 	add	r2,r4,r2
  121ff0:	10800e04 	addi	r2,r2,56
  121ff4:	10800017 	ldw	r2,0(r2)
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
            (offset < (flash->dev.region_info[i].offset +
  121ff8:	1885883a 	add	r2,r3,r2
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
  121ffc:	e0fffd17 	ldw	r3,-12(fp)
  122000:	18806d0e 	bge	r3,r2,1221b8 <alt_onchip_flash_write+0x284>
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;
  122004:	e0fffa17 	ldw	r3,-24(fp)
  122008:	e0bff517 	ldw	r2,-44(fp)
  12200c:	1004913a 	slli	r2,r2,4
  122010:	1885883a 	add	r2,r3,r2
  122014:	10800d04 	addi	r2,r2,52
  122018:	10800017 	ldw	r2,0(r2)
  12201c:	e0bff715 	stw	r2,-36(fp)

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
  122020:	e03ff615 	stw	zero,-40(fp)
  122024:	00005c06 	br	122198 <alt_onchip_flash_write+0x264>
            {
                if ((offset >= current_offset ) &&
  122028:	e0fffd17 	ldw	r3,-12(fp)
  12202c:	e0bff717 	ldw	r2,-36(fp)
  122030:	18804d16 	blt	r3,r2,122168 <alt_onchip_flash_write+0x234>
                    (offset < (current_offset +
                    flash->dev.region_info[i].block_size)))
  122034:	e0fffa17 	ldw	r3,-24(fp)
  122038:	e0bff517 	ldw	r2,-44(fp)
  12203c:	10800104 	addi	r2,r2,4
  122040:	1004913a 	slli	r2,r2,4
  122044:	1885883a 	add	r2,r3,r2
  122048:	10c00017 	ldw	r3,0(r2)
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
            {
                if ((offset >= current_offset ) &&
                    (offset < (current_offset +
  12204c:	e0bff717 	ldw	r2,-36(fp)
  122050:	1885883a 	add	r2,r3,r2
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
            {
                if ((offset >= current_offset ) &&
  122054:	e0fffd17 	ldw	r3,-12(fp)
  122058:	1880430e 	bge	r3,r2,122168 <alt_onchip_flash_write+0x234>
                {
                    /*
                    * Check if the contents of the block are different
                    * from the data we wish to put there
                    */
                    data_to_write = (current_offset + flash->dev.region_info[i].block_size - offset);
  12205c:	e0fffa17 	ldw	r3,-24(fp)
  122060:	e0bff517 	ldw	r2,-44(fp)
  122064:	10800104 	addi	r2,r2,4
  122068:	1004913a 	slli	r2,r2,4
  12206c:	1885883a 	add	r2,r3,r2
  122070:	10c00017 	ldw	r3,0(r2)
  122074:	e0bff717 	ldw	r2,-36(fp)
  122078:	1887883a 	add	r3,r3,r2
  12207c:	e0bffd17 	ldw	r2,-12(fp)
  122080:	1885c83a 	sub	r2,r3,r2
  122084:	e0bffb15 	stw	r2,-20(fp)
                    data_to_write = MIN(data_to_write, length);
  122088:	e0fffb17 	ldw	r3,-20(fp)
  12208c:	e0bfff17 	ldw	r2,-4(fp)
  122090:	1880010e 	bge	r3,r2,122098 <alt_onchip_flash_write+0x164>
  122094:	1805883a 	mov	r2,r3
  122098:	e0bffb15 	stw	r2,-20(fp)
                    if(memcmp(src_addr, (alt_u8*)flash->dev.base_addr+offset, data_to_write))
  12209c:	e0bffa17 	ldw	r2,-24(fp)
  1220a0:	10c00a17 	ldw	r3,40(r2)
  1220a4:	e0bffd17 	ldw	r2,-12(fp)
  1220a8:	1885883a 	add	r2,r3,r2
  1220ac:	e0fffb17 	ldw	r3,-20(fp)
  1220b0:	180d883a 	mov	r6,r3
  1220b4:	100b883a 	mov	r5,r2
  1220b8:	e13ffe17 	ldw	r4,-8(fp)
  1220bc:	01248800 	call	124880 <memcmp>
  1220c0:	10001326 	beq	r2,zero,122110 <alt_onchip_flash_write+0x1dc>
                    {
                        ret_code = (*flash->dev.erase_block)(&flash->dev, current_offset);
  1220c4:	e0bffa17 	ldw	r2,-24(fp)
  1220c8:	10800817 	ldw	r2,32(r2)
  1220cc:	e0fffa17 	ldw	r3,-24(fp)
  1220d0:	e17ff717 	ldw	r5,-36(fp)
  1220d4:	1809883a 	mov	r4,r3
  1220d8:	103ee83a 	callr	r2
  1220dc:	e0bff415 	stw	r2,-48(fp)

                        if (!ret_code)
  1220e0:	e0bff417 	ldw	r2,-48(fp)
  1220e4:	10000a1e 	bne	r2,zero,122110 <alt_onchip_flash_write+0x1dc>
                        {
                            ret_code = (*flash->dev.write_block)(
  1220e8:	e0bffa17 	ldw	r2,-24(fp)
  1220ec:	10800917 	ldw	r2,36(r2)
  1220f0:	e13ffa17 	ldw	r4,-24(fp)
  1220f4:	e0fffb17 	ldw	r3,-20(fp)
  1220f8:	d8c00015 	stw	r3,0(sp)
  1220fc:	e1fffe17 	ldw	r7,-8(fp)
  122100:	e1bffd17 	ldw	r6,-12(fp)
  122104:	e17ff717 	ldw	r5,-36(fp)
  122108:	103ee83a 	callr	r2
  12210c:	e0bff415 	stw	r2,-48(fp)
                                                                data_to_write);
                        }
                    }

                    /* Was this the last block? */
                    if ((length == data_to_write) || ret_code)
  122110:	e0ffff17 	ldw	r3,-4(fp)
  122114:	e0bffb17 	ldw	r2,-20(fp)
  122118:	18802e26 	beq	r3,r2,1221d4 <alt_onchip_flash_write+0x2a0>
  12211c:	e0bff417 	ldw	r2,-48(fp)
  122120:	10002c1e 	bne	r2,zero,1221d4 <alt_onchip_flash_write+0x2a0>
                    {
                        goto finished;
                    }

                    length -= data_to_write;
  122124:	e0ffff17 	ldw	r3,-4(fp)
  122128:	e0bffb17 	ldw	r2,-20(fp)
  12212c:	1885c83a 	sub	r2,r3,r2
  122130:	e0bfff15 	stw	r2,-4(fp)
                    offset = current_offset + flash->dev.region_info[i].block_size;
  122134:	e0fffa17 	ldw	r3,-24(fp)
  122138:	e0bff517 	ldw	r2,-44(fp)
  12213c:	10800104 	addi	r2,r2,4
  122140:	1004913a 	slli	r2,r2,4
  122144:	1885883a 	add	r2,r3,r2
  122148:	10c00017 	ldw	r3,0(r2)
  12214c:	e0bff717 	ldw	r2,-36(fp)
  122150:	1885883a 	add	r2,r3,r2
  122154:	e0bffd15 	stw	r2,-12(fp)
                    src_addr = (alt_u8*)src_addr + data_to_write;
  122158:	e0bffb17 	ldw	r2,-20(fp)
  12215c:	e0fffe17 	ldw	r3,-8(fp)
  122160:	1885883a 	add	r2,r3,r2
  122164:	e0bffe15 	stw	r2,-8(fp)
                }
                current_offset += flash->dev.region_info[i].block_size;
  122168:	e0fffa17 	ldw	r3,-24(fp)
  12216c:	e0bff517 	ldw	r2,-44(fp)
  122170:	10800104 	addi	r2,r2,4
  122174:	1004913a 	slli	r2,r2,4
  122178:	1885883a 	add	r2,r3,r2
  12217c:	10800017 	ldw	r2,0(r2)
  122180:	e0fff717 	ldw	r3,-36(fp)
  122184:	1885883a 	add	r2,r3,r2
  122188:	e0bff715 	stw	r2,-36(fp)
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
  12218c:	e0bff617 	ldw	r2,-40(fp)
  122190:	10800044 	addi	r2,r2,1
  122194:	e0bff615 	stw	r2,-40(fp)
  122198:	e0fffa17 	ldw	r3,-24(fp)
  12219c:	e0bff517 	ldw	r2,-44(fp)
  1221a0:	1004913a 	slli	r2,r2,4
  1221a4:	1885883a 	add	r2,r3,r2
  1221a8:	10800f04 	addi	r2,r2,60
  1221ac:	10800017 	ldw	r2,0(r2)
  1221b0:	e0fff617 	ldw	r3,-40(fp)
  1221b4:	18bf9c16 	blt	r3,r2,122028 <__alt_data_end+0xfffe2908>
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
  1221b8:	e0bff517 	ldw	r2,-44(fp)
  1221bc:	10800044 	addi	r2,r2,1
  1221c0:	e0bff515 	stw	r2,-44(fp)
  1221c4:	e0bffa17 	ldw	r2,-24(fp)
  1221c8:	10800c17 	ldw	r2,48(r2)
  1221cc:	e0fff517 	ldw	r3,-44(fp)
  1221d0:	18bf7516 	blt	r3,r2,121fa8 <__alt_data_end+0xfffe2888>
            }
        }
    }

finished:
    alt_dcache_flush((alt_u8*)flash->dev.base_addr+start_offset, full_length);
  1221d4:	e0bffa17 	ldw	r2,-24(fp)
  1221d8:	10c00a17 	ldw	r3,40(r2)
  1221dc:	e0bff917 	ldw	r2,-28(fp)
  1221e0:	1885883a 	add	r2,r3,r2
  1221e4:	e0fff817 	ldw	r3,-32(fp)
  1221e8:	180b883a 	mov	r5,r3
  1221ec:	1009883a 	mov	r4,r2
  1221f0:	0122c300 	call	122c30 <alt_dcache_flush>
    return ret_code;
  1221f4:	e0bff417 	ldw	r2,-48(fp)
}
  1221f8:	e037883a 	mov	sp,fp
  1221fc:	dfc00117 	ldw	ra,4(sp)
  122200:	df000017 	ldw	fp,0(sp)
  122204:	dec00204 	addi	sp,sp,8
  122208:	f800283a 	ret

0012220c <altera_onchip_flash_init>:
**/
void altera_onchip_flash_init
(
    alt_onchip_flash_dev *flash
)
{
  12220c:	defff504 	addi	sp,sp,-44
  122210:	dfc00a15 	stw	ra,40(sp)
  122214:	df000915 	stw	fp,36(sp)
  122218:	dc000815 	stw	r16,32(sp)
  12221c:	df000904 	addi	fp,sp,36
  122220:	e13ffe15 	stw	r4,-8(fp)
    /* A region is a sector of the onchip flash */
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
  122224:	e03ff815 	stw	zero,-32(fp)
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
  122228:	e03ff915 	stw	zero,-28(fp)
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
  12222c:	e03ffa15 	stw	zero,-24(fp)
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
  122230:	e03ffb15 	stw	zero,-20(fp)
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;
  122234:	e03ffc15 	stw	zero,-16(fp)

    /* Set up flash_region data structures. */
    number_of_regions = 0;
  122238:	e03ff715 	stw	zero,-36(fp)
    region_info = &flash->dev.region_info[0];
  12223c:	e0bffe17 	ldw	r2,-8(fp)
  122240:	10800d04 	addi	r2,r2,52
  122244:	e0bffd15 	stw	r2,-12(fp)

    if (flash->csr_base != NULL) {
  122248:	e0bffe17 	ldw	r2,-8(fp)
  12224c:	10802f17 	ldw	r2,188(r2)
  122250:	10001926 	beq	r2,zero,1222b8 <altera_onchip_flash_init+0xac>
        sector1_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_MSK;
  122254:	e0bffe17 	ldw	r2,-8(fp)
  122258:	10802f17 	ldw	r2,188(r2)
  12225c:	10800037 	ldwio	r2,0(r2)
  122260:	1080080c 	andi	r2,r2,32
  122264:	e0bff815 	stw	r2,-32(fp)
        sector2_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_MSK;
  122268:	e0bffe17 	ldw	r2,-8(fp)
  12226c:	10802f17 	ldw	r2,188(r2)
  122270:	10800037 	ldwio	r2,0(r2)
  122274:	1080100c 	andi	r2,r2,64
  122278:	e0bff915 	stw	r2,-28(fp)
        sector3_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_MSK;
  12227c:	e0bffe17 	ldw	r2,-8(fp)
  122280:	10802f17 	ldw	r2,188(r2)
  122284:	10800037 	ldwio	r2,0(r2)
  122288:	1080200c 	andi	r2,r2,128
  12228c:	e0bffa15 	stw	r2,-24(fp)
        sector4_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_MSK;
  122290:	e0bffe17 	ldw	r2,-8(fp)
  122294:	10802f17 	ldw	r2,188(r2)
  122298:	10800037 	ldwio	r2,0(r2)
  12229c:	1080400c 	andi	r2,r2,256
  1222a0:	e0bffb15 	stw	r2,-20(fp)
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
  1222a4:	e0bffe17 	ldw	r2,-8(fp)
  1222a8:	10802f17 	ldw	r2,188(r2)
  1222ac:	10800037 	ldwio	r2,0(r2)
  1222b0:	1080800c 	andi	r2,r2,512
  1222b4:	e0bffc15 	stw	r2,-16(fp)
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {
  1222b8:	e0bffe17 	ldw	r2,-8(fp)
  1222bc:	10803017 	ldw	r2,192(r2)
  1222c0:	10800058 	cmpnei	r2,r2,1
  1222c4:	10002f1e 	bne	r2,zero,122384 <altera_onchip_flash_init+0x178>
  1222c8:	e0bff817 	ldw	r2,-32(fp)
  1222cc:	10800820 	cmpeqi	r2,r2,32
  1222d0:	10002c1e 	bne	r2,zero,122384 <altera_onchip_flash_init+0x178>

        region_info[number_of_regions].offset = flash->sector1_start_addr;
  1222d4:	e0bff717 	ldw	r2,-36(fp)
  1222d8:	1004913a 	slli	r2,r2,4
  1222dc:	e0fffd17 	ldw	r3,-12(fp)
  1222e0:	1885883a 	add	r2,r3,r2
  1222e4:	e0fffe17 	ldw	r3,-8(fp)
  1222e8:	18c03117 	ldw	r3,196(r3)
  1222ec:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector1_end_addr - flash->sector1_start_addr + 1;
  1222f0:	e0bff717 	ldw	r2,-36(fp)
  1222f4:	1004913a 	slli	r2,r2,4
  1222f8:	e0fffd17 	ldw	r3,-12(fp)
  1222fc:	1885883a 	add	r2,r3,r2
  122300:	e0fffe17 	ldw	r3,-8(fp)
  122304:	19003217 	ldw	r4,200(r3)
  122308:	e0fffe17 	ldw	r3,-8(fp)
  12230c:	18c03117 	ldw	r3,196(r3)
  122310:	20c7c83a 	sub	r3,r4,r3
  122314:	18c00044 	addi	r3,r3,1
  122318:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  12231c:	e0bff717 	ldw	r2,-36(fp)
  122320:	1004913a 	slli	r2,r2,4
  122324:	e0fffd17 	ldw	r3,-12(fp)
  122328:	18a1883a 	add	r16,r3,r2
  12232c:	e0fffe17 	ldw	r3,-8(fp)
  122330:	e0bff717 	ldw	r2,-36(fp)
  122334:	1004913a 	slli	r2,r2,4
  122338:	1885883a 	add	r2,r3,r2
  12233c:	10800e04 	addi	r2,r2,56
  122340:	10c00017 	ldw	r3,0(r2)
  122344:	e0bffe17 	ldw	r2,-8(fp)
  122348:	10803f17 	ldw	r2,252(r2)
  12234c:	100b883a 	mov	r5,r2
  122350:	1809883a 	mov	r4,r3
  122354:	01269380 	call	126938 <__divsi3>
  122358:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  12235c:	e0bff717 	ldw	r2,-36(fp)
  122360:	1004913a 	slli	r2,r2,4
  122364:	e0fffd17 	ldw	r3,-12(fp)
  122368:	1885883a 	add	r2,r3,r2
  12236c:	e0fffe17 	ldw	r3,-8(fp)
  122370:	18c03f17 	ldw	r3,252(r3)
  122374:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  122378:	e0bff717 	ldw	r2,-36(fp)
  12237c:	10800044 	addi	r2,r2,1
  122380:	e0bff715 	stw	r2,-36(fp)
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {
  122384:	e0bffe17 	ldw	r2,-8(fp)
  122388:	10803317 	ldw	r2,204(r2)
  12238c:	10800058 	cmpnei	r2,r2,1
  122390:	10002f1e 	bne	r2,zero,122450 <altera_onchip_flash_init+0x244>
  122394:	e0bff917 	ldw	r2,-28(fp)
  122398:	10801020 	cmpeqi	r2,r2,64
  12239c:	10002c1e 	bne	r2,zero,122450 <altera_onchip_flash_init+0x244>

        region_info[number_of_regions].offset = flash->sector2_start_addr;
  1223a0:	e0bff717 	ldw	r2,-36(fp)
  1223a4:	1004913a 	slli	r2,r2,4
  1223a8:	e0fffd17 	ldw	r3,-12(fp)
  1223ac:	1885883a 	add	r2,r3,r2
  1223b0:	e0fffe17 	ldw	r3,-8(fp)
  1223b4:	18c03417 	ldw	r3,208(r3)
  1223b8:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
  1223bc:	e0bff717 	ldw	r2,-36(fp)
  1223c0:	1004913a 	slli	r2,r2,4
  1223c4:	e0fffd17 	ldw	r3,-12(fp)
  1223c8:	1885883a 	add	r2,r3,r2
  1223cc:	e0fffe17 	ldw	r3,-8(fp)
  1223d0:	19003517 	ldw	r4,212(r3)
  1223d4:	e0fffe17 	ldw	r3,-8(fp)
  1223d8:	18c03417 	ldw	r3,208(r3)
  1223dc:	20c7c83a 	sub	r3,r4,r3
  1223e0:	18c00044 	addi	r3,r3,1
  1223e4:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  1223e8:	e0bff717 	ldw	r2,-36(fp)
  1223ec:	1004913a 	slli	r2,r2,4
  1223f0:	e0fffd17 	ldw	r3,-12(fp)
  1223f4:	18a1883a 	add	r16,r3,r2
  1223f8:	e0fffe17 	ldw	r3,-8(fp)
  1223fc:	e0bff717 	ldw	r2,-36(fp)
  122400:	1004913a 	slli	r2,r2,4
  122404:	1885883a 	add	r2,r3,r2
  122408:	10800e04 	addi	r2,r2,56
  12240c:	10c00017 	ldw	r3,0(r2)
  122410:	e0bffe17 	ldw	r2,-8(fp)
  122414:	10803f17 	ldw	r2,252(r2)
  122418:	100b883a 	mov	r5,r2
  12241c:	1809883a 	mov	r4,r3
  122420:	01269380 	call	126938 <__divsi3>
  122424:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  122428:	e0bff717 	ldw	r2,-36(fp)
  12242c:	1004913a 	slli	r2,r2,4
  122430:	e0fffd17 	ldw	r3,-12(fp)
  122434:	1885883a 	add	r2,r3,r2
  122438:	e0fffe17 	ldw	r3,-8(fp)
  12243c:	18c03f17 	ldw	r3,252(r3)
  122440:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  122444:	e0bff717 	ldw	r2,-36(fp)
  122448:	10800044 	addi	r2,r2,1
  12244c:	e0bff715 	stw	r2,-36(fp)
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {
  122450:	e0bffe17 	ldw	r2,-8(fp)
  122454:	10803617 	ldw	r2,216(r2)
  122458:	10800058 	cmpnei	r2,r2,1
  12245c:	10002f1e 	bne	r2,zero,12251c <altera_onchip_flash_init+0x310>
  122460:	e0bffa17 	ldw	r2,-24(fp)
  122464:	10802020 	cmpeqi	r2,r2,128
  122468:	10002c1e 	bne	r2,zero,12251c <altera_onchip_flash_init+0x310>

        region_info[number_of_regions].offset = flash->sector3_start_addr;
  12246c:	e0bff717 	ldw	r2,-36(fp)
  122470:	1004913a 	slli	r2,r2,4
  122474:	e0fffd17 	ldw	r3,-12(fp)
  122478:	1885883a 	add	r2,r3,r2
  12247c:	e0fffe17 	ldw	r3,-8(fp)
  122480:	18c03717 	ldw	r3,220(r3)
  122484:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
  122488:	e0bff717 	ldw	r2,-36(fp)
  12248c:	1004913a 	slli	r2,r2,4
  122490:	e0fffd17 	ldw	r3,-12(fp)
  122494:	1885883a 	add	r2,r3,r2
  122498:	e0fffe17 	ldw	r3,-8(fp)
  12249c:	19003817 	ldw	r4,224(r3)
  1224a0:	e0fffe17 	ldw	r3,-8(fp)
  1224a4:	18c03717 	ldw	r3,220(r3)
  1224a8:	20c7c83a 	sub	r3,r4,r3
  1224ac:	18c00044 	addi	r3,r3,1
  1224b0:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  1224b4:	e0bff717 	ldw	r2,-36(fp)
  1224b8:	1004913a 	slli	r2,r2,4
  1224bc:	e0fffd17 	ldw	r3,-12(fp)
  1224c0:	18a1883a 	add	r16,r3,r2
  1224c4:	e0fffe17 	ldw	r3,-8(fp)
  1224c8:	e0bff717 	ldw	r2,-36(fp)
  1224cc:	1004913a 	slli	r2,r2,4
  1224d0:	1885883a 	add	r2,r3,r2
  1224d4:	10800e04 	addi	r2,r2,56
  1224d8:	10c00017 	ldw	r3,0(r2)
  1224dc:	e0bffe17 	ldw	r2,-8(fp)
  1224e0:	10803f17 	ldw	r2,252(r2)
  1224e4:	100b883a 	mov	r5,r2
  1224e8:	1809883a 	mov	r4,r3
  1224ec:	01269380 	call	126938 <__divsi3>
  1224f0:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  1224f4:	e0bff717 	ldw	r2,-36(fp)
  1224f8:	1004913a 	slli	r2,r2,4
  1224fc:	e0fffd17 	ldw	r3,-12(fp)
  122500:	1885883a 	add	r2,r3,r2
  122504:	e0fffe17 	ldw	r3,-8(fp)
  122508:	18c03f17 	ldw	r3,252(r3)
  12250c:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  122510:	e0bff717 	ldw	r2,-36(fp)
  122514:	10800044 	addi	r2,r2,1
  122518:	e0bff715 	stw	r2,-36(fp)
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {
  12251c:	e0bffe17 	ldw	r2,-8(fp)
  122520:	10803917 	ldw	r2,228(r2)
  122524:	10800058 	cmpnei	r2,r2,1
  122528:	10002f1e 	bne	r2,zero,1225e8 <altera_onchip_flash_init+0x3dc>
  12252c:	e0bffb17 	ldw	r2,-20(fp)
  122530:	10804020 	cmpeqi	r2,r2,256
  122534:	10002c1e 	bne	r2,zero,1225e8 <altera_onchip_flash_init+0x3dc>

        region_info[number_of_regions].offset = flash->sector4_start_addr;
  122538:	e0bff717 	ldw	r2,-36(fp)
  12253c:	1004913a 	slli	r2,r2,4
  122540:	e0fffd17 	ldw	r3,-12(fp)
  122544:	1885883a 	add	r2,r3,r2
  122548:	e0fffe17 	ldw	r3,-8(fp)
  12254c:	18c03a17 	ldw	r3,232(r3)
  122550:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
  122554:	e0bff717 	ldw	r2,-36(fp)
  122558:	1004913a 	slli	r2,r2,4
  12255c:	e0fffd17 	ldw	r3,-12(fp)
  122560:	1885883a 	add	r2,r3,r2
  122564:	e0fffe17 	ldw	r3,-8(fp)
  122568:	19003b17 	ldw	r4,236(r3)
  12256c:	e0fffe17 	ldw	r3,-8(fp)
  122570:	18c03a17 	ldw	r3,232(r3)
  122574:	20c7c83a 	sub	r3,r4,r3
  122578:	18c00044 	addi	r3,r3,1
  12257c:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  122580:	e0bff717 	ldw	r2,-36(fp)
  122584:	1004913a 	slli	r2,r2,4
  122588:	e0fffd17 	ldw	r3,-12(fp)
  12258c:	18a1883a 	add	r16,r3,r2
  122590:	e0fffe17 	ldw	r3,-8(fp)
  122594:	e0bff717 	ldw	r2,-36(fp)
  122598:	1004913a 	slli	r2,r2,4
  12259c:	1885883a 	add	r2,r3,r2
  1225a0:	10800e04 	addi	r2,r2,56
  1225a4:	10c00017 	ldw	r3,0(r2)
  1225a8:	e0bffe17 	ldw	r2,-8(fp)
  1225ac:	10803f17 	ldw	r2,252(r2)
  1225b0:	100b883a 	mov	r5,r2
  1225b4:	1809883a 	mov	r4,r3
  1225b8:	01269380 	call	126938 <__divsi3>
  1225bc:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  1225c0:	e0bff717 	ldw	r2,-36(fp)
  1225c4:	1004913a 	slli	r2,r2,4
  1225c8:	e0fffd17 	ldw	r3,-12(fp)
  1225cc:	1885883a 	add	r2,r3,r2
  1225d0:	e0fffe17 	ldw	r3,-8(fp)
  1225d4:	18c03f17 	ldw	r3,252(r3)
  1225d8:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  1225dc:	e0bff717 	ldw	r2,-36(fp)
  1225e0:	10800044 	addi	r2,r2,1
  1225e4:	e0bff715 	stw	r2,-36(fp)
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {
  1225e8:	e0bffe17 	ldw	r2,-8(fp)
  1225ec:	10803c17 	ldw	r2,240(r2)
  1225f0:	10800058 	cmpnei	r2,r2,1
  1225f4:	10002f1e 	bne	r2,zero,1226b4 <altera_onchip_flash_init+0x4a8>
  1225f8:	e0bffc17 	ldw	r2,-16(fp)
  1225fc:	10808020 	cmpeqi	r2,r2,512
  122600:	10002c1e 	bne	r2,zero,1226b4 <altera_onchip_flash_init+0x4a8>

        region_info[number_of_regions].offset = flash->sector5_start_addr;
  122604:	e0bff717 	ldw	r2,-36(fp)
  122608:	1004913a 	slli	r2,r2,4
  12260c:	e0fffd17 	ldw	r3,-12(fp)
  122610:	1885883a 	add	r2,r3,r2
  122614:	e0fffe17 	ldw	r3,-8(fp)
  122618:	18c03d17 	ldw	r3,244(r3)
  12261c:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
  122620:	e0bff717 	ldw	r2,-36(fp)
  122624:	1004913a 	slli	r2,r2,4
  122628:	e0fffd17 	ldw	r3,-12(fp)
  12262c:	1885883a 	add	r2,r3,r2
  122630:	e0fffe17 	ldw	r3,-8(fp)
  122634:	19003e17 	ldw	r4,248(r3)
  122638:	e0fffe17 	ldw	r3,-8(fp)
  12263c:	18c03d17 	ldw	r3,244(r3)
  122640:	20c7c83a 	sub	r3,r4,r3
  122644:	18c00044 	addi	r3,r3,1
  122648:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  12264c:	e0bff717 	ldw	r2,-36(fp)
  122650:	1004913a 	slli	r2,r2,4
  122654:	e0fffd17 	ldw	r3,-12(fp)
  122658:	18a1883a 	add	r16,r3,r2
  12265c:	e0fffe17 	ldw	r3,-8(fp)
  122660:	e0bff717 	ldw	r2,-36(fp)
  122664:	1004913a 	slli	r2,r2,4
  122668:	1885883a 	add	r2,r3,r2
  12266c:	10800e04 	addi	r2,r2,56
  122670:	10c00017 	ldw	r3,0(r2)
  122674:	e0bffe17 	ldw	r2,-8(fp)
  122678:	10803f17 	ldw	r2,252(r2)
  12267c:	100b883a 	mov	r5,r2
  122680:	1809883a 	mov	r4,r3
  122684:	01269380 	call	126938 <__divsi3>
  122688:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  12268c:	e0bff717 	ldw	r2,-36(fp)
  122690:	1004913a 	slli	r2,r2,4
  122694:	e0fffd17 	ldw	r3,-12(fp)
  122698:	1885883a 	add	r2,r3,r2
  12269c:	e0fffe17 	ldw	r3,-8(fp)
  1226a0:	18c03f17 	ldw	r3,252(r3)
  1226a4:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  1226a8:	e0bff717 	ldw	r2,-36(fp)
  1226ac:	10800044 	addi	r2,r2,1
  1226b0:	e0bff715 	stw	r2,-36(fp)
    }

    /* Update number of regions. */
    flash->dev.number_of_regions = number_of_regions;
  1226b4:	e0bffe17 	ldw	r2,-8(fp)
  1226b8:	e0fff717 	ldw	r3,-36(fp)
  1226bc:	10c00c15 	stw	r3,48(r2)

    /*
    *  Register this device as a valid flash device type
    */
    alt_flash_device_register(&(flash->dev));
  1226c0:	e0bffe17 	ldw	r2,-8(fp)
  1226c4:	1009883a 	mov	r4,r2
  1226c8:	01219580 	call	121958 <alt_flash_device_register>
}
  1226cc:	0001883a 	nop
  1226d0:	e6ffff04 	addi	sp,fp,-4
  1226d4:	dfc00217 	ldw	ra,8(sp)
  1226d8:	df000117 	ldw	fp,4(sp)
  1226dc:	dc000017 	ldw	r16,0(sp)
  1226e0:	dec00304 	addi	sp,sp,12
  1226e4:	f800283a 	ret

001226e8 <alt_onchip_flash_poll_for_status_to_go_idle>:
**/
int alt_onchip_flash_poll_for_status_to_go_idle
(
    alt_onchip_flash_dev *flash
)
{
  1226e8:	defffa04 	addi	sp,sp,-24
  1226ec:	dfc00515 	stw	ra,20(sp)
  1226f0:	df000415 	stw	fp,16(sp)
  1226f4:	df000404 	addi	fp,sp,16
  1226f8:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
  1226fc:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  122700:	008002f4 	movhi	r2,11
  122704:	10ab9804 	addi	r2,r2,-20896
  122708:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  12270c:	008002f4 	movhi	r2,11
  122710:	10ab9804 	addi	r2,r2,-20896
  122714:	e0bffd15 	stw	r2,-12(fp)

    while (
  122718:	00000c06 	br	12274c <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
  12271c:	01000044 	movi	r4,1
  122720:	01229c40 	call	1229c4 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
  122724:	e0bffe17 	ldw	r2,-8(fp)
  122728:	10000826 	beq	r2,zero,12274c <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
            count_down--;
  12272c:	e0bffd17 	ldw	r2,-12(fp)
  122730:	10bfffc4 	addi	r2,r2,-1
  122734:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
  122738:	e0bffd17 	ldw	r2,-12(fp)
  12273c:	1000031e 	bne	r2,zero,12274c <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
  122740:	00bfe304 	movi	r2,-116
  122744:	e0bffc15 	stw	r2,-16(fp)
                break;
  122748:	00000506 	br	122760 <alt_onchip_flash_poll_for_status_to_go_idle+0x78>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
  12274c:	e0bfff17 	ldw	r2,-4(fp)
  122750:	10802f17 	ldw	r2,188(r2)
  122754:	10800037 	ldwio	r2,0(r2)
  122758:	108000cc 	andi	r2,r2,3
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
  12275c:	103fef1e 	bne	r2,zero,12271c <__alt_data_end+0xfffe2ffc>
                break;
            }
        }
    }

    return ret_code;
  122760:	e0bffc17 	ldw	r2,-16(fp)
}
  122764:	e037883a 	mov	sp,fp
  122768:	dfc00117 	ldw	ra,4(sp)
  12276c:	df000017 	ldw	fp,0(sp)
  122770:	dec00204 	addi	sp,sp,8
  122774:	f800283a 	ret

00122778 <alt_onchip_flash_poll_for_status_erase_passed>:
**/
int alt_onchip_flash_poll_for_status_erase_passed
(
    alt_onchip_flash_dev *flash
)
{
  122778:	defffa04 	addi	sp,sp,-24
  12277c:	dfc00515 	stw	ra,20(sp)
  122780:	df000415 	stw	fp,16(sp)
  122784:	df000404 	addi	fp,sp,16
  122788:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
  12278c:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  122790:	008002f4 	movhi	r2,11
  122794:	10ab9804 	addi	r2,r2,-20896
  122798:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  12279c:	008002f4 	movhi	r2,11
  1227a0:	10ab9804 	addi	r2,r2,-20896
  1227a4:	e0bffd15 	stw	r2,-12(fp)

    while (
  1227a8:	00000c06 	br	1227dc <alt_onchip_flash_poll_for_status_erase_passed+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_ERASE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_ERASE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
  1227ac:	01000044 	movi	r4,1
  1227b0:	01229c40 	call	1229c4 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
  1227b4:	e0bffe17 	ldw	r2,-8(fp)
  1227b8:	10000826 	beq	r2,zero,1227dc <alt_onchip_flash_poll_for_status_erase_passed+0x64>
            count_down--;
  1227bc:	e0bffd17 	ldw	r2,-12(fp)
  1227c0:	10bfffc4 	addi	r2,r2,-1
  1227c4:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
  1227c8:	e0bffd17 	ldw	r2,-12(fp)
  1227cc:	1000031e 	bne	r2,zero,1227dc <alt_onchip_flash_poll_for_status_erase_passed+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
  1227d0:	00bfe304 	movi	r2,-116
  1227d4:	e0bffc15 	stw	r2,-16(fp)
                break;
  1227d8:	00000506 	br	1227f0 <alt_onchip_flash_poll_for_status_erase_passed+0x78>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
  1227dc:	e0bfff17 	ldw	r2,-4(fp)
  1227e0:	10802f17 	ldw	r2,188(r2)
  1227e4:	10800037 	ldwio	r2,0(r2)
  1227e8:	1080040c 	andi	r2,r2,16
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
  1227ec:	103fef26 	beq	r2,zero,1227ac <__alt_data_end+0xfffe308c>
                break;
            }
        }
    }

    return ret_code;
  1227f0:	e0bffc17 	ldw	r2,-16(fp)
}
  1227f4:	e037883a 	mov	sp,fp
  1227f8:	dfc00117 	ldw	ra,4(sp)
  1227fc:	df000017 	ldw	fp,0(sp)
  122800:	dec00204 	addi	sp,sp,8
  122804:	f800283a 	ret

00122808 <alt_onchip_flash_poll_for_status_write_passed>:
**/
int alt_onchip_flash_poll_for_status_write_passed
(
    alt_onchip_flash_dev *flash
)
{
  122808:	defffa04 	addi	sp,sp,-24
  12280c:	dfc00515 	stw	ra,20(sp)
  122810:	df000415 	stw	fp,16(sp)
  122814:	df000404 	addi	fp,sp,16
  122818:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
  12281c:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  122820:	008002f4 	movhi	r2,11
  122824:	10ab9804 	addi	r2,r2,-20896
  122828:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  12282c:	008002f4 	movhi	r2,11
  122830:	10ab9804 	addi	r2,r2,-20896
  122834:	e0bffd15 	stw	r2,-12(fp)

    while (
  122838:	00000c06 	br	12286c <alt_onchip_flash_poll_for_status_write_passed+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_WRITE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_WRITE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
  12283c:	01000044 	movi	r4,1
  122840:	01229c40 	call	1229c4 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
  122844:	e0bffe17 	ldw	r2,-8(fp)
  122848:	10000826 	beq	r2,zero,12286c <alt_onchip_flash_poll_for_status_write_passed+0x64>
            count_down--;
  12284c:	e0bffd17 	ldw	r2,-12(fp)
  122850:	10bfffc4 	addi	r2,r2,-1
  122854:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
  122858:	e0bffd17 	ldw	r2,-12(fp)
  12285c:	1000031e 	bne	r2,zero,12286c <alt_onchip_flash_poll_for_status_write_passed+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
  122860:	00bfe304 	movi	r2,-116
  122864:	e0bffc15 	stw	r2,-16(fp)
                break;
  122868:	00000506 	br	122880 <alt_onchip_flash_poll_for_status_write_passed+0x78>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
  12286c:	e0bfff17 	ldw	r2,-4(fp)
  122870:	10802f17 	ldw	r2,188(r2)
  122874:	10800037 	ldwio	r2,0(r2)
  122878:	1080020c 	andi	r2,r2,8
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
  12287c:	103fef26 	beq	r2,zero,12283c <__alt_data_end+0xfffe311c>
                break;
            }
        }
    }

    return ret_code;
  122880:	e0bffc17 	ldw	r2,-16(fp)
}
  122884:	e037883a 	mov	sp,fp
  122888:	dfc00117 	ldw	ra,4(sp)
  12288c:	df000017 	ldw	fp,0(sp)
  122890:	dec00204 	addi	sp,sp,8
  122894:	f800283a 	ret

00122898 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  122898:	defff504 	addi	sp,sp,-44
  12289c:	df000a15 	stw	fp,40(sp)
  1228a0:	df000a04 	addi	fp,sp,40
  1228a4:	e13ffc15 	stw	r4,-16(fp)
  1228a8:	e17ffd15 	stw	r5,-12(fp)
  1228ac:	e1bffe15 	stw	r6,-8(fp)
  1228b0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  1228b4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  1228b8:	d0a73117 	ldw	r2,-25404(gp)
  
  if (alt_ticks_per_second ())
  1228bc:	10003c26 	beq	r2,zero,1229b0 <alt_alarm_start+0x118>
  {
    if (alarm)
  1228c0:	e0bffc17 	ldw	r2,-16(fp)
  1228c4:	10003826 	beq	r2,zero,1229a8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  1228c8:	e0bffc17 	ldw	r2,-16(fp)
  1228cc:	e0fffe17 	ldw	r3,-8(fp)
  1228d0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  1228d4:	e0bffc17 	ldw	r2,-16(fp)
  1228d8:	e0ffff17 	ldw	r3,-4(fp)
  1228dc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  1228e0:	0005303a 	rdctl	r2,status
  1228e4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1228e8:	e0fff917 	ldw	r3,-28(fp)
  1228ec:	00bfff84 	movi	r2,-2
  1228f0:	1884703a 	and	r2,r3,r2
  1228f4:	1001703a 	wrctl	status,r2
  
  return context;
  1228f8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  1228fc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  122900:	d0a73217 	ldw	r2,-25400(gp)
      
      current_nticks = alt_nticks();
  122904:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  122908:	e0fffd17 	ldw	r3,-12(fp)
  12290c:	e0bff617 	ldw	r2,-40(fp)
  122910:	1885883a 	add	r2,r3,r2
  122914:	10c00044 	addi	r3,r2,1
  122918:	e0bffc17 	ldw	r2,-16(fp)
  12291c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  122920:	e0bffc17 	ldw	r2,-16(fp)
  122924:	10c00217 	ldw	r3,8(r2)
  122928:	e0bff617 	ldw	r2,-40(fp)
  12292c:	1880042e 	bgeu	r3,r2,122940 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  122930:	e0bffc17 	ldw	r2,-16(fp)
  122934:	00c00044 	movi	r3,1
  122938:	10c00405 	stb	r3,16(r2)
  12293c:	00000206 	br	122948 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  122940:	e0bffc17 	ldw	r2,-16(fp)
  122944:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  122948:	e0bffc17 	ldw	r2,-16(fp)
  12294c:	d0e00b04 	addi	r3,gp,-32724
  122950:	e0fffa15 	stw	r3,-24(fp)
  122954:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  122958:	e0bffb17 	ldw	r2,-20(fp)
  12295c:	e0fffa17 	ldw	r3,-24(fp)
  122960:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  122964:	e0bffa17 	ldw	r2,-24(fp)
  122968:	10c00017 	ldw	r3,0(r2)
  12296c:	e0bffb17 	ldw	r2,-20(fp)
  122970:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  122974:	e0bffa17 	ldw	r2,-24(fp)
  122978:	10800017 	ldw	r2,0(r2)
  12297c:	e0fffb17 	ldw	r3,-20(fp)
  122980:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  122984:	e0bffa17 	ldw	r2,-24(fp)
  122988:	e0fffb17 	ldw	r3,-20(fp)
  12298c:	10c00015 	stw	r3,0(r2)
  122990:	e0bff817 	ldw	r2,-32(fp)
  122994:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  122998:	e0bff717 	ldw	r2,-36(fp)
  12299c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  1229a0:	0005883a 	mov	r2,zero
  1229a4:	00000306 	br	1229b4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  1229a8:	00bffa84 	movi	r2,-22
  1229ac:	00000106 	br	1229b4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  1229b0:	00bfde84 	movi	r2,-134
  }
}
  1229b4:	e037883a 	mov	sp,fp
  1229b8:	df000017 	ldw	fp,0(sp)
  1229bc:	dec00104 	addi	sp,sp,4
  1229c0:	f800283a 	ret

001229c4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  1229c4:	defffa04 	addi	sp,sp,-24
  1229c8:	dfc00515 	stw	ra,20(sp)
  1229cc:	df000415 	stw	fp,16(sp)
  1229d0:	df000404 	addi	fp,sp,16
  1229d4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
  1229d8:	00800244 	movi	r2,9
  1229dc:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  1229e0:	014003f4 	movhi	r5,15
  1229e4:	29509004 	addi	r5,r5,16960
  1229e8:	e13ffd17 	ldw	r4,-12(fp)
  1229ec:	0126aec0 	call	126aec <__mulsi3>
  1229f0:	100b883a 	mov	r5,r2
  1229f4:	0100bef4 	movhi	r4,763
  1229f8:	213c2004 	addi	r4,r4,-3968
  1229fc:	0126a300 	call	126a30 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  122a00:	100b883a 	mov	r5,r2
  122a04:	01200034 	movhi	r4,32768
  122a08:	213fffc4 	addi	r4,r4,-1
  122a0c:	0126a300 	call	126a30 <__udivsi3>
  122a10:	100b883a 	mov	r5,r2
  122a14:	e13fff17 	ldw	r4,-4(fp)
  122a18:	0126a300 	call	126a30 <__udivsi3>
  122a1c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  122a20:	e0bffe17 	ldw	r2,-8(fp)
  122a24:	10002a26 	beq	r2,zero,122ad0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  122a28:	e03ffc15 	stw	zero,-16(fp)
  122a2c:	00001706 	br	122a8c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  122a30:	00a00034 	movhi	r2,32768
  122a34:	10bfffc4 	addi	r2,r2,-1
  122a38:	10bfffc4 	addi	r2,r2,-1
  122a3c:	103ffe1e 	bne	r2,zero,122a38 <__alt_data_end+0xfffe3318>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  122a40:	014003f4 	movhi	r5,15
  122a44:	29509004 	addi	r5,r5,16960
  122a48:	e13ffd17 	ldw	r4,-12(fp)
  122a4c:	0126aec0 	call	126aec <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  122a50:	100b883a 	mov	r5,r2
  122a54:	0100bef4 	movhi	r4,763
  122a58:	213c2004 	addi	r4,r4,-3968
  122a5c:	0126a300 	call	126a30 <__udivsi3>
  122a60:	100b883a 	mov	r5,r2
  122a64:	01200034 	movhi	r4,32768
  122a68:	213fffc4 	addi	r4,r4,-1
  122a6c:	0126a300 	call	126a30 <__udivsi3>
  122a70:	1007883a 	mov	r3,r2
  122a74:	e0bfff17 	ldw	r2,-4(fp)
  122a78:	10c5c83a 	sub	r2,r2,r3
  122a7c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  122a80:	e0bffc17 	ldw	r2,-16(fp)
  122a84:	10800044 	addi	r2,r2,1
  122a88:	e0bffc15 	stw	r2,-16(fp)
  122a8c:	e0fffc17 	ldw	r3,-16(fp)
  122a90:	e0bffe17 	ldw	r2,-8(fp)
  122a94:	18bfe616 	blt	r3,r2,122a30 <__alt_data_end+0xfffe3310>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  122a98:	014003f4 	movhi	r5,15
  122a9c:	29509004 	addi	r5,r5,16960
  122aa0:	e13ffd17 	ldw	r4,-12(fp)
  122aa4:	0126aec0 	call	126aec <__mulsi3>
  122aa8:	100b883a 	mov	r5,r2
  122aac:	0100bef4 	movhi	r4,763
  122ab0:	213c2004 	addi	r4,r4,-3968
  122ab4:	0126a300 	call	126a30 <__udivsi3>
  122ab8:	e17fff17 	ldw	r5,-4(fp)
  122abc:	1009883a 	mov	r4,r2
  122ac0:	0126aec0 	call	126aec <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  122ac4:	10bfffc4 	addi	r2,r2,-1
  122ac8:	103ffe1e 	bne	r2,zero,122ac4 <__alt_data_end+0xfffe33a4>
  122acc:	00000d06 	br	122b04 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  122ad0:	014003f4 	movhi	r5,15
  122ad4:	29509004 	addi	r5,r5,16960
  122ad8:	e13ffd17 	ldw	r4,-12(fp)
  122adc:	0126aec0 	call	126aec <__mulsi3>
  122ae0:	100b883a 	mov	r5,r2
  122ae4:	0100bef4 	movhi	r4,763
  122ae8:	213c2004 	addi	r4,r4,-3968
  122aec:	0126a300 	call	126a30 <__udivsi3>
  122af0:	e17fff17 	ldw	r5,-4(fp)
  122af4:	1009883a 	mov	r4,r2
  122af8:	0126aec0 	call	126aec <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  122afc:	10bfffc4 	addi	r2,r2,-1
  122b00:	00bffe16 	blt	zero,r2,122afc <__alt_data_end+0xfffe33dc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  122b04:	0005883a 	mov	r2,zero
}
  122b08:	e037883a 	mov	sp,fp
  122b0c:	dfc00117 	ldw	ra,4(sp)
  122b10:	df000017 	ldw	fp,0(sp)
  122b14:	dec00204 	addi	sp,sp,8
  122b18:	f800283a 	ret

00122b1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  122b1c:	defffe04 	addi	sp,sp,-8
  122b20:	dfc00115 	stw	ra,4(sp)
  122b24:	df000015 	stw	fp,0(sp)
  122b28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  122b2c:	d0a00717 	ldw	r2,-32740(gp)
  122b30:	10000326 	beq	r2,zero,122b40 <alt_get_errno+0x24>
  122b34:	d0a00717 	ldw	r2,-32740(gp)
  122b38:	103ee83a 	callr	r2
  122b3c:	00000106 	br	122b44 <alt_get_errno+0x28>
  122b40:	d0a73404 	addi	r2,gp,-25392
}
  122b44:	e037883a 	mov	sp,fp
  122b48:	dfc00117 	ldw	ra,4(sp)
  122b4c:	df000017 	ldw	fp,0(sp)
  122b50:	dec00204 	addi	sp,sp,8
  122b54:	f800283a 	ret

00122b58 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  122b58:	defffb04 	addi	sp,sp,-20
  122b5c:	dfc00415 	stw	ra,16(sp)
  122b60:	df000315 	stw	fp,12(sp)
  122b64:	df000304 	addi	fp,sp,12
  122b68:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  122b6c:	e0bfff17 	ldw	r2,-4(fp)
  122b70:	10000816 	blt	r2,zero,122b94 <close+0x3c>
  122b74:	01400304 	movi	r5,12
  122b78:	e13fff17 	ldw	r4,-4(fp)
  122b7c:	0126aec0 	call	126aec <__mulsi3>
  122b80:	1007883a 	mov	r3,r2
  122b84:	008004f4 	movhi	r2,19
  122b88:	10a12b04 	addi	r2,r2,-31572
  122b8c:	1885883a 	add	r2,r3,r2
  122b90:	00000106 	br	122b98 <close+0x40>
  122b94:	0005883a 	mov	r2,zero
  122b98:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  122b9c:	e0bffd17 	ldw	r2,-12(fp)
  122ba0:	10001926 	beq	r2,zero,122c08 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  122ba4:	e0bffd17 	ldw	r2,-12(fp)
  122ba8:	10800017 	ldw	r2,0(r2)
  122bac:	10800417 	ldw	r2,16(r2)
  122bb0:	10000626 	beq	r2,zero,122bcc <close+0x74>
  122bb4:	e0bffd17 	ldw	r2,-12(fp)
  122bb8:	10800017 	ldw	r2,0(r2)
  122bbc:	10800417 	ldw	r2,16(r2)
  122bc0:	e13ffd17 	ldw	r4,-12(fp)
  122bc4:	103ee83a 	callr	r2
  122bc8:	00000106 	br	122bd0 <close+0x78>
  122bcc:	0005883a 	mov	r2,zero
  122bd0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  122bd4:	e13fff17 	ldw	r4,-4(fp)
  122bd8:	01234840 	call	123484 <alt_release_fd>
    if (rval < 0)
  122bdc:	e0bffe17 	ldw	r2,-8(fp)
  122be0:	1000070e 	bge	r2,zero,122c00 <close+0xa8>
    {
      ALT_ERRNO = -rval;
  122be4:	0122b1c0 	call	122b1c <alt_get_errno>
  122be8:	1007883a 	mov	r3,r2
  122bec:	e0bffe17 	ldw	r2,-8(fp)
  122bf0:	0085c83a 	sub	r2,zero,r2
  122bf4:	18800015 	stw	r2,0(r3)
      return -1;
  122bf8:	00bfffc4 	movi	r2,-1
  122bfc:	00000706 	br	122c1c <close+0xc4>
    }
    return 0;
  122c00:	0005883a 	mov	r2,zero
  122c04:	00000506 	br	122c1c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  122c08:	0122b1c0 	call	122b1c <alt_get_errno>
  122c0c:	1007883a 	mov	r3,r2
  122c10:	00801444 	movi	r2,81
  122c14:	18800015 	stw	r2,0(r3)
    return -1;
  122c18:	00bfffc4 	movi	r2,-1
  }
}
  122c1c:	e037883a 	mov	sp,fp
  122c20:	dfc00117 	ldw	ra,4(sp)
  122c24:	df000017 	ldw	fp,0(sp)
  122c28:	dec00204 	addi	sp,sp,8
  122c2c:	f800283a 	ret

00122c30 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
  122c30:	defffd04 	addi	sp,sp,-12
  122c34:	df000215 	stw	fp,8(sp)
  122c38:	df000204 	addi	fp,sp,8
  122c3c:	e13ffe15 	stw	r4,-8(fp)
  122c40:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  122c44:	0001883a 	nop
  122c48:	e037883a 	mov	sp,fp
  122c4c:	df000017 	ldw	fp,0(sp)
  122c50:	dec00104 	addi	sp,sp,4
  122c54:	f800283a 	ret

00122c58 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  122c58:	deffff04 	addi	sp,sp,-4
  122c5c:	df000015 	stw	fp,0(sp)
  122c60:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  122c64:	0001883a 	nop
  122c68:	e037883a 	mov	sp,fp
  122c6c:	df000017 	ldw	fp,0(sp)
  122c70:	dec00104 	addi	sp,sp,4
  122c74:	f800283a 	ret

00122c78 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  122c78:	defffc04 	addi	sp,sp,-16
  122c7c:	df000315 	stw	fp,12(sp)
  122c80:	df000304 	addi	fp,sp,12
  122c84:	e13ffd15 	stw	r4,-12(fp)
  122c88:	e17ffe15 	stw	r5,-8(fp)
  122c8c:	e1bfff15 	stw	r6,-4(fp)
  return len;
  122c90:	e0bfff17 	ldw	r2,-4(fp)
}
  122c94:	e037883a 	mov	sp,fp
  122c98:	df000017 	ldw	fp,0(sp)
  122c9c:	dec00104 	addi	sp,sp,4
  122ca0:	f800283a 	ret

00122ca4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  122ca4:	defffe04 	addi	sp,sp,-8
  122ca8:	dfc00115 	stw	ra,4(sp)
  122cac:	df000015 	stw	fp,0(sp)
  122cb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  122cb4:	d0a00717 	ldw	r2,-32740(gp)
  122cb8:	10000326 	beq	r2,zero,122cc8 <alt_get_errno+0x24>
  122cbc:	d0a00717 	ldw	r2,-32740(gp)
  122cc0:	103ee83a 	callr	r2
  122cc4:	00000106 	br	122ccc <alt_get_errno+0x28>
  122cc8:	d0a73404 	addi	r2,gp,-25392
}
  122ccc:	e037883a 	mov	sp,fp
  122cd0:	dfc00117 	ldw	ra,4(sp)
  122cd4:	df000017 	ldw	fp,0(sp)
  122cd8:	dec00204 	addi	sp,sp,8
  122cdc:	f800283a 	ret

00122ce0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  122ce0:	defffa04 	addi	sp,sp,-24
  122ce4:	dfc00515 	stw	ra,20(sp)
  122ce8:	df000415 	stw	fp,16(sp)
  122cec:	df000404 	addi	fp,sp,16
  122cf0:	e13ffe15 	stw	r4,-8(fp)
  122cf4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  122cf8:	e0bffe17 	ldw	r2,-8(fp)
  122cfc:	10000326 	beq	r2,zero,122d0c <alt_dev_llist_insert+0x2c>
  122d00:	e0bffe17 	ldw	r2,-8(fp)
  122d04:	10800217 	ldw	r2,8(r2)
  122d08:	1000061e 	bne	r2,zero,122d24 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  122d0c:	0122ca40 	call	122ca4 <alt_get_errno>
  122d10:	1007883a 	mov	r3,r2
  122d14:	00800584 	movi	r2,22
  122d18:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  122d1c:	00bffa84 	movi	r2,-22
  122d20:	00001306 	br	122d70 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  122d24:	e0bffe17 	ldw	r2,-8(fp)
  122d28:	e0ffff17 	ldw	r3,-4(fp)
  122d2c:	e0fffc15 	stw	r3,-16(fp)
  122d30:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  122d34:	e0bffd17 	ldw	r2,-12(fp)
  122d38:	e0fffc17 	ldw	r3,-16(fp)
  122d3c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  122d40:	e0bffc17 	ldw	r2,-16(fp)
  122d44:	10c00017 	ldw	r3,0(r2)
  122d48:	e0bffd17 	ldw	r2,-12(fp)
  122d4c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  122d50:	e0bffc17 	ldw	r2,-16(fp)
  122d54:	10800017 	ldw	r2,0(r2)
  122d58:	e0fffd17 	ldw	r3,-12(fp)
  122d5c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  122d60:	e0bffc17 	ldw	r2,-16(fp)
  122d64:	e0fffd17 	ldw	r3,-12(fp)
  122d68:	10c00015 	stw	r3,0(r2)

  return 0;  
  122d6c:	0005883a 	mov	r2,zero
}
  122d70:	e037883a 	mov	sp,fp
  122d74:	dfc00117 	ldw	ra,4(sp)
  122d78:	df000017 	ldw	fp,0(sp)
  122d7c:	dec00204 	addi	sp,sp,8
  122d80:	f800283a 	ret

00122d84 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  122d84:	defffd04 	addi	sp,sp,-12
  122d88:	dfc00215 	stw	ra,8(sp)
  122d8c:	df000115 	stw	fp,4(sp)
  122d90:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  122d94:	008004b4 	movhi	r2,18
  122d98:	109c6b04 	addi	r2,r2,29100
  122d9c:	e0bfff15 	stw	r2,-4(fp)
  122da0:	00000606 	br	122dbc <_do_ctors+0x38>
        (*ctor) (); 
  122da4:	e0bfff17 	ldw	r2,-4(fp)
  122da8:	10800017 	ldw	r2,0(r2)
  122dac:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  122db0:	e0bfff17 	ldw	r2,-4(fp)
  122db4:	10bfff04 	addi	r2,r2,-4
  122db8:	e0bfff15 	stw	r2,-4(fp)
  122dbc:	e0ffff17 	ldw	r3,-4(fp)
  122dc0:	008004b4 	movhi	r2,18
  122dc4:	109c6c04 	addi	r2,r2,29104
  122dc8:	18bff62e 	bgeu	r3,r2,122da4 <__alt_data_end+0xfffe3684>
        (*ctor) (); 
}
  122dcc:	0001883a 	nop
  122dd0:	e037883a 	mov	sp,fp
  122dd4:	dfc00117 	ldw	ra,4(sp)
  122dd8:	df000017 	ldw	fp,0(sp)
  122ddc:	dec00204 	addi	sp,sp,8
  122de0:	f800283a 	ret

00122de4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  122de4:	defffd04 	addi	sp,sp,-12
  122de8:	dfc00215 	stw	ra,8(sp)
  122dec:	df000115 	stw	fp,4(sp)
  122df0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  122df4:	008004b4 	movhi	r2,18
  122df8:	109c6b04 	addi	r2,r2,29100
  122dfc:	e0bfff15 	stw	r2,-4(fp)
  122e00:	00000606 	br	122e1c <_do_dtors+0x38>
        (*dtor) (); 
  122e04:	e0bfff17 	ldw	r2,-4(fp)
  122e08:	10800017 	ldw	r2,0(r2)
  122e0c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  122e10:	e0bfff17 	ldw	r2,-4(fp)
  122e14:	10bfff04 	addi	r2,r2,-4
  122e18:	e0bfff15 	stw	r2,-4(fp)
  122e1c:	e0ffff17 	ldw	r3,-4(fp)
  122e20:	008004b4 	movhi	r2,18
  122e24:	109c6c04 	addi	r2,r2,29104
  122e28:	18bff62e 	bgeu	r3,r2,122e04 <__alt_data_end+0xfffe36e4>
        (*dtor) (); 
}
  122e2c:	0001883a 	nop
  122e30:	e037883a 	mov	sp,fp
  122e34:	dfc00117 	ldw	ra,4(sp)
  122e38:	df000017 	ldw	fp,0(sp)
  122e3c:	dec00204 	addi	sp,sp,8
  122e40:	f800283a 	ret

00122e44 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
  122e44:	defffc04 	addi	sp,sp,-16
  122e48:	dfc00315 	stw	ra,12(sp)
  122e4c:	df000215 	stw	fp,8(sp)
  122e50:	df000204 	addi	fp,sp,8
  122e54:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
  122e58:	d1600804 	addi	r5,gp,-32736
  122e5c:	e13fff17 	ldw	r4,-4(fp)
  122e60:	01236d00 	call	1236d0 <alt_find_dev>
  122e64:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
  122e68:	e0bffe17 	ldw	r2,-8(fp)
  122e6c:	10000926 	beq	r2,zero,122e94 <alt_flash_open_dev+0x50>
  122e70:	e0bffe17 	ldw	r2,-8(fp)
  122e74:	10800317 	ldw	r2,12(r2)
  122e78:	10000626 	beq	r2,zero,122e94 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
  122e7c:	e0bffe17 	ldw	r2,-8(fp)
  122e80:	10800317 	ldw	r2,12(r2)
  122e84:	e17fff17 	ldw	r5,-4(fp)
  122e88:	e13ffe17 	ldw	r4,-8(fp)
  122e8c:	103ee83a 	callr	r2
  122e90:	00000106 	br	122e98 <alt_flash_open_dev+0x54>
  }

  return dev;
  122e94:	e0bffe17 	ldw	r2,-8(fp)
}
  122e98:	e037883a 	mov	sp,fp
  122e9c:	dfc00117 	ldw	ra,4(sp)
  122ea0:	df000017 	ldw	fp,0(sp)
  122ea4:	dec00204 	addi	sp,sp,8
  122ea8:	f800283a 	ret

00122eac <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
  122eac:	defffd04 	addi	sp,sp,-12
  122eb0:	dfc00215 	stw	ra,8(sp)
  122eb4:	df000115 	stw	fp,4(sp)
  122eb8:	df000104 	addi	fp,sp,4
  122ebc:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
  122ec0:	e0bfff17 	ldw	r2,-4(fp)
  122ec4:	10000826 	beq	r2,zero,122ee8 <alt_flash_close_dev+0x3c>
  122ec8:	e0bfff17 	ldw	r2,-4(fp)
  122ecc:	10800417 	ldw	r2,16(r2)
  122ed0:	10000526 	beq	r2,zero,122ee8 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
  122ed4:	e0bfff17 	ldw	r2,-4(fp)
  122ed8:	10800417 	ldw	r2,16(r2)
  122edc:	e13fff17 	ldw	r4,-4(fp)
  122ee0:	103ee83a 	callr	r2
  }
  return;
  122ee4:	0001883a 	nop
  122ee8:	0001883a 	nop
}
  122eec:	e037883a 	mov	sp,fp
  122ef0:	dfc00117 	ldw	ra,4(sp)
  122ef4:	df000017 	ldw	fp,0(sp)
  122ef8:	dec00204 	addi	sp,sp,8
  122efc:	f800283a 	ret

00122f00 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  122f00:	deffff04 	addi	sp,sp,-4
  122f04:	df000015 	stw	fp,0(sp)
  122f08:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  122f0c:	0001883a 	nop
  122f10:	e037883a 	mov	sp,fp
  122f14:	df000017 	ldw	fp,0(sp)
  122f18:	dec00104 	addi	sp,sp,4
  122f1c:	f800283a 	ret

00122f20 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  122f20:	defff804 	addi	sp,sp,-32
  122f24:	dfc00715 	stw	ra,28(sp)
  122f28:	df000615 	stw	fp,24(sp)
  122f2c:	dc000515 	stw	r16,20(sp)
  122f30:	df000604 	addi	fp,sp,24
  122f34:	e13ffb15 	stw	r4,-20(fp)
  122f38:	e17ffc15 	stw	r5,-16(fp)
  122f3c:	e1bffd15 	stw	r6,-12(fp)
  122f40:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
  122f44:	e1bffe17 	ldw	r6,-8(fp)
  122f48:	e17ffd17 	ldw	r5,-12(fp)
  122f4c:	e13ffc17 	ldw	r4,-16(fp)
  122f50:	01233280 	call	123328 <open>
  122f54:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
  122f58:	e0bffa17 	ldw	r2,-24(fp)
  122f5c:	10002216 	blt	r2,zero,122fe8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  122f60:	040004f4 	movhi	r16,19
  122f64:	84212b04 	addi	r16,r16,-31572
  122f68:	e0bffa17 	ldw	r2,-24(fp)
  122f6c:	01400304 	movi	r5,12
  122f70:	1009883a 	mov	r4,r2
  122f74:	0126aec0 	call	126aec <__mulsi3>
  122f78:	8085883a 	add	r2,r16,r2
  122f7c:	10c00017 	ldw	r3,0(r2)
  122f80:	e0bffb17 	ldw	r2,-20(fp)
  122f84:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  122f88:	040004f4 	movhi	r16,19
  122f8c:	84212b04 	addi	r16,r16,-31572
  122f90:	e0bffa17 	ldw	r2,-24(fp)
  122f94:	01400304 	movi	r5,12
  122f98:	1009883a 	mov	r4,r2
  122f9c:	0126aec0 	call	126aec <__mulsi3>
  122fa0:	8085883a 	add	r2,r16,r2
  122fa4:	10800104 	addi	r2,r2,4
  122fa8:	10c00017 	ldw	r3,0(r2)
  122fac:	e0bffb17 	ldw	r2,-20(fp)
  122fb0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  122fb4:	040004f4 	movhi	r16,19
  122fb8:	84212b04 	addi	r16,r16,-31572
  122fbc:	e0bffa17 	ldw	r2,-24(fp)
  122fc0:	01400304 	movi	r5,12
  122fc4:	1009883a 	mov	r4,r2
  122fc8:	0126aec0 	call	126aec <__mulsi3>
  122fcc:	8085883a 	add	r2,r16,r2
  122fd0:	10800204 	addi	r2,r2,8
  122fd4:	10c00017 	ldw	r3,0(r2)
  122fd8:	e0bffb17 	ldw	r2,-20(fp)
  122fdc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  122fe0:	e13ffa17 	ldw	r4,-24(fp)
  122fe4:	01234840 	call	123484 <alt_release_fd>
  }
} 
  122fe8:	0001883a 	nop
  122fec:	e6ffff04 	addi	sp,fp,-4
  122ff0:	dfc00217 	ldw	ra,8(sp)
  122ff4:	df000117 	ldw	fp,4(sp)
  122ff8:	dc000017 	ldw	r16,0(sp)
  122ffc:	dec00304 	addi	sp,sp,12
  123000:	f800283a 	ret

00123004 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  123004:	defffb04 	addi	sp,sp,-20
  123008:	dfc00415 	stw	ra,16(sp)
  12300c:	df000315 	stw	fp,12(sp)
  123010:	df000304 	addi	fp,sp,12
  123014:	e13ffd15 	stw	r4,-12(fp)
  123018:	e17ffe15 	stw	r5,-8(fp)
  12301c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  123020:	01c07fc4 	movi	r7,511
  123024:	01800044 	movi	r6,1
  123028:	e17ffd17 	ldw	r5,-12(fp)
  12302c:	010004f4 	movhi	r4,19
  123030:	21212e04 	addi	r4,r4,-31560
  123034:	0122f200 	call	122f20 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  123038:	01c07fc4 	movi	r7,511
  12303c:	000d883a 	mov	r6,zero
  123040:	e17ffe17 	ldw	r5,-8(fp)
  123044:	010004f4 	movhi	r4,19
  123048:	21212b04 	addi	r4,r4,-31572
  12304c:	0122f200 	call	122f20 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  123050:	01c07fc4 	movi	r7,511
  123054:	01800044 	movi	r6,1
  123058:	e17fff17 	ldw	r5,-4(fp)
  12305c:	010004f4 	movhi	r4,19
  123060:	21213104 	addi	r4,r4,-31548
  123064:	0122f200 	call	122f20 <alt_open_fd>
}  
  123068:	0001883a 	nop
  12306c:	e037883a 	mov	sp,fp
  123070:	dfc00117 	ldw	ra,4(sp)
  123074:	df000017 	ldw	fp,0(sp)
  123078:	dec00204 	addi	sp,sp,8
  12307c:	f800283a 	ret

00123080 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  123080:	defff004 	addi	sp,sp,-64
  123084:	df000f15 	stw	fp,60(sp)
  123088:	df000f04 	addi	fp,sp,60
  12308c:	e13ffd15 	stw	r4,-12(fp)
  123090:	e17ffe15 	stw	r5,-8(fp)
  123094:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  123098:	00bffa84 	movi	r2,-22
  12309c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  1230a0:	e0bffd17 	ldw	r2,-12(fp)
  1230a4:	10800828 	cmpgeui	r2,r2,32
  1230a8:	1000501e 	bne	r2,zero,1231ec <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  1230ac:	0005303a 	rdctl	r2,status
  1230b0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1230b4:	e0fff617 	ldw	r3,-40(fp)
  1230b8:	00bfff84 	movi	r2,-2
  1230bc:	1884703a 	and	r2,r3,r2
  1230c0:	1001703a 	wrctl	status,r2
  
  return context;
  1230c4:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  1230c8:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  1230cc:	008004f4 	movhi	r2,19
  1230d0:	10aad804 	addi	r2,r2,-21664
  1230d4:	e0fffd17 	ldw	r3,-12(fp)
  1230d8:	180690fa 	slli	r3,r3,3
  1230dc:	10c5883a 	add	r2,r2,r3
  1230e0:	e0ffff17 	ldw	r3,-4(fp)
  1230e4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  1230e8:	008004f4 	movhi	r2,19
  1230ec:	10aad804 	addi	r2,r2,-21664
  1230f0:	e0fffd17 	ldw	r3,-12(fp)
  1230f4:	180690fa 	slli	r3,r3,3
  1230f8:	10c5883a 	add	r2,r2,r3
  1230fc:	10800104 	addi	r2,r2,4
  123100:	e0fffe17 	ldw	r3,-8(fp)
  123104:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  123108:	e0bfff17 	ldw	r2,-4(fp)
  12310c:	10001926 	beq	r2,zero,123174 <alt_irq_register+0xf4>
  123110:	e0bffd17 	ldw	r2,-12(fp)
  123114:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  123118:	0005303a 	rdctl	r2,status
  12311c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  123120:	e0fff717 	ldw	r3,-36(fp)
  123124:	00bfff84 	movi	r2,-2
  123128:	1884703a 	and	r2,r3,r2
  12312c:	1001703a 	wrctl	status,r2
  
  return context;
  123130:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  123134:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  123138:	00c00044 	movi	r3,1
  12313c:	e0bff217 	ldw	r2,-56(fp)
  123140:	1884983a 	sll	r2,r3,r2
  123144:	1007883a 	mov	r3,r2
  123148:	d0a73017 	ldw	r2,-25408(gp)
  12314c:	1884b03a 	or	r2,r3,r2
  123150:	d0a73015 	stw	r2,-25408(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  123154:	d0a73017 	ldw	r2,-25408(gp)
  123158:	100170fa 	wrctl	ienable,r2
  12315c:	e0bff817 	ldw	r2,-32(fp)
  123160:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  123164:	e0bff917 	ldw	r2,-28(fp)
  123168:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  12316c:	0005883a 	mov	r2,zero
  123170:	00001906 	br	1231d8 <alt_irq_register+0x158>
  123174:	e0bffd17 	ldw	r2,-12(fp)
  123178:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  12317c:	0005303a 	rdctl	r2,status
  123180:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  123184:	e0fffa17 	ldw	r3,-24(fp)
  123188:	00bfff84 	movi	r2,-2
  12318c:	1884703a 	and	r2,r3,r2
  123190:	1001703a 	wrctl	status,r2
  
  return context;
  123194:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  123198:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  12319c:	00c00044 	movi	r3,1
  1231a0:	e0bff417 	ldw	r2,-48(fp)
  1231a4:	1884983a 	sll	r2,r3,r2
  1231a8:	0084303a 	nor	r2,zero,r2
  1231ac:	1007883a 	mov	r3,r2
  1231b0:	d0a73017 	ldw	r2,-25408(gp)
  1231b4:	1884703a 	and	r2,r3,r2
  1231b8:	d0a73015 	stw	r2,-25408(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  1231bc:	d0a73017 	ldw	r2,-25408(gp)
  1231c0:	100170fa 	wrctl	ienable,r2
  1231c4:	e0bffb17 	ldw	r2,-20(fp)
  1231c8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1231cc:	e0bffc17 	ldw	r2,-16(fp)
  1231d0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  1231d4:	0005883a 	mov	r2,zero
  1231d8:	e0bff115 	stw	r2,-60(fp)
  1231dc:	e0bff317 	ldw	r2,-52(fp)
  1231e0:	e0bff515 	stw	r2,-44(fp)
  1231e4:	e0bff517 	ldw	r2,-44(fp)
  1231e8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  1231ec:	e0bff117 	ldw	r2,-60(fp)
}
  1231f0:	e037883a 	mov	sp,fp
  1231f4:	df000017 	ldw	fp,0(sp)
  1231f8:	dec00104 	addi	sp,sp,4
  1231fc:	f800283a 	ret

00123200 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  123200:	defffe04 	addi	sp,sp,-8
  123204:	dfc00115 	stw	ra,4(sp)
  123208:	df000015 	stw	fp,0(sp)
  12320c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  123210:	d0a00717 	ldw	r2,-32740(gp)
  123214:	10000326 	beq	r2,zero,123224 <alt_get_errno+0x24>
  123218:	d0a00717 	ldw	r2,-32740(gp)
  12321c:	103ee83a 	callr	r2
  123220:	00000106 	br	123228 <alt_get_errno+0x28>
  123224:	d0a73404 	addi	r2,gp,-25392
}
  123228:	e037883a 	mov	sp,fp
  12322c:	dfc00117 	ldw	ra,4(sp)
  123230:	df000017 	ldw	fp,0(sp)
  123234:	dec00204 	addi	sp,sp,8
  123238:	f800283a 	ret

0012323c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  12323c:	defffb04 	addi	sp,sp,-20
  123240:	dfc00415 	stw	ra,16(sp)
  123244:	df000315 	stw	fp,12(sp)
  123248:	dc000215 	stw	r16,8(sp)
  12324c:	df000304 	addi	fp,sp,12
  123250:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  123254:	e0bffe17 	ldw	r2,-8(fp)
  123258:	10800217 	ldw	r2,8(r2)
  12325c:	10d00034 	orhi	r3,r2,16384
  123260:	e0bffe17 	ldw	r2,-8(fp)
  123264:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  123268:	e03ffd15 	stw	zero,-12(fp)
  12326c:	00002306 	br	1232fc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  123270:	040004f4 	movhi	r16,19
  123274:	84212b04 	addi	r16,r16,-31572
  123278:	e0bffd17 	ldw	r2,-12(fp)
  12327c:	01400304 	movi	r5,12
  123280:	1009883a 	mov	r4,r2
  123284:	0126aec0 	call	126aec <__mulsi3>
  123288:	8085883a 	add	r2,r16,r2
  12328c:	10c00017 	ldw	r3,0(r2)
  123290:	e0bffe17 	ldw	r2,-8(fp)
  123294:	10800017 	ldw	r2,0(r2)
  123298:	1880151e 	bne	r3,r2,1232f0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  12329c:	040004f4 	movhi	r16,19
  1232a0:	84212b04 	addi	r16,r16,-31572
  1232a4:	e0bffd17 	ldw	r2,-12(fp)
  1232a8:	01400304 	movi	r5,12
  1232ac:	1009883a 	mov	r4,r2
  1232b0:	0126aec0 	call	126aec <__mulsi3>
  1232b4:	8085883a 	add	r2,r16,r2
  1232b8:	10800204 	addi	r2,r2,8
  1232bc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  1232c0:	10000b0e 	bge	r2,zero,1232f0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  1232c4:	01400304 	movi	r5,12
  1232c8:	e13ffd17 	ldw	r4,-12(fp)
  1232cc:	0126aec0 	call	126aec <__mulsi3>
  1232d0:	1007883a 	mov	r3,r2
  1232d4:	008004f4 	movhi	r2,19
  1232d8:	10a12b04 	addi	r2,r2,-31572
  1232dc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  1232e0:	e0bffe17 	ldw	r2,-8(fp)
  1232e4:	18800226 	beq	r3,r2,1232f0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  1232e8:	00bffcc4 	movi	r2,-13
  1232ec:	00000806 	br	123310 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  1232f0:	e0bffd17 	ldw	r2,-12(fp)
  1232f4:	10800044 	addi	r2,r2,1
  1232f8:	e0bffd15 	stw	r2,-12(fp)
  1232fc:	d0a00617 	ldw	r2,-32744(gp)
  123300:	1007883a 	mov	r3,r2
  123304:	e0bffd17 	ldw	r2,-12(fp)
  123308:	18bfd92e 	bgeu	r3,r2,123270 <__alt_data_end+0xfffe3b50>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  12330c:	0005883a 	mov	r2,zero
}
  123310:	e6ffff04 	addi	sp,fp,-4
  123314:	dfc00217 	ldw	ra,8(sp)
  123318:	df000117 	ldw	fp,4(sp)
  12331c:	dc000017 	ldw	r16,0(sp)
  123320:	dec00304 	addi	sp,sp,12
  123324:	f800283a 	ret

00123328 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  123328:	defff604 	addi	sp,sp,-40
  12332c:	dfc00915 	stw	ra,36(sp)
  123330:	df000815 	stw	fp,32(sp)
  123334:	df000804 	addi	fp,sp,32
  123338:	e13ffd15 	stw	r4,-12(fp)
  12333c:	e17ffe15 	stw	r5,-8(fp)
  123340:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  123344:	00bfffc4 	movi	r2,-1
  123348:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  12334c:	00bffb44 	movi	r2,-19
  123350:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  123354:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  123358:	d1600404 	addi	r5,gp,-32752
  12335c:	e13ffd17 	ldw	r4,-12(fp)
  123360:	01236d00 	call	1236d0 <alt_find_dev>
  123364:	e0bff815 	stw	r2,-32(fp)
  123368:	e0bff817 	ldw	r2,-32(fp)
  12336c:	1000051e 	bne	r2,zero,123384 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  123370:	e13ffd17 	ldw	r4,-12(fp)
  123374:	01237600 	call	123760 <alt_find_file>
  123378:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  12337c:	00800044 	movi	r2,1
  123380:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  123384:	e0bff817 	ldw	r2,-32(fp)
  123388:	10002b26 	beq	r2,zero,123438 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
  12338c:	e13ff817 	ldw	r4,-32(fp)
  123390:	01238680 	call	123868 <alt_get_fd>
  123394:	e0bff915 	stw	r2,-28(fp)
  123398:	e0bff917 	ldw	r2,-28(fp)
  12339c:	1000030e 	bge	r2,zero,1233ac <open+0x84>
    {
      status = index;
  1233a0:	e0bff917 	ldw	r2,-28(fp)
  1233a4:	e0bffa15 	stw	r2,-24(fp)
  1233a8:	00002506 	br	123440 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
  1233ac:	01400304 	movi	r5,12
  1233b0:	e13ff917 	ldw	r4,-28(fp)
  1233b4:	0126aec0 	call	126aec <__mulsi3>
  1233b8:	1007883a 	mov	r3,r2
  1233bc:	008004f4 	movhi	r2,19
  1233c0:	10a12b04 	addi	r2,r2,-31572
  1233c4:	1885883a 	add	r2,r3,r2
  1233c8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  1233cc:	e0fffe17 	ldw	r3,-8(fp)
  1233d0:	00900034 	movhi	r2,16384
  1233d4:	10bfffc4 	addi	r2,r2,-1
  1233d8:	1886703a 	and	r3,r3,r2
  1233dc:	e0bffc17 	ldw	r2,-16(fp)
  1233e0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  1233e4:	e0bffb17 	ldw	r2,-20(fp)
  1233e8:	1000051e 	bne	r2,zero,123400 <open+0xd8>
  1233ec:	e13ffc17 	ldw	r4,-16(fp)
  1233f0:	012323c0 	call	12323c <alt_file_locked>
  1233f4:	e0bffa15 	stw	r2,-24(fp)
  1233f8:	e0bffa17 	ldw	r2,-24(fp)
  1233fc:	10001016 	blt	r2,zero,123440 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  123400:	e0bff817 	ldw	r2,-32(fp)
  123404:	10800317 	ldw	r2,12(r2)
  123408:	10000826 	beq	r2,zero,12342c <open+0x104>
  12340c:	e0bff817 	ldw	r2,-32(fp)
  123410:	10800317 	ldw	r2,12(r2)
  123414:	e1ffff17 	ldw	r7,-4(fp)
  123418:	e1bffe17 	ldw	r6,-8(fp)
  12341c:	e17ffd17 	ldw	r5,-12(fp)
  123420:	e13ffc17 	ldw	r4,-16(fp)
  123424:	103ee83a 	callr	r2
  123428:	00000106 	br	123430 <open+0x108>
  12342c:	0005883a 	mov	r2,zero
  123430:	e0bffa15 	stw	r2,-24(fp)
  123434:	00000206 	br	123440 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
  123438:	00bffb44 	movi	r2,-19
  12343c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  123440:	e0bffa17 	ldw	r2,-24(fp)
  123444:	1000090e 	bge	r2,zero,12346c <open+0x144>
  {
    alt_release_fd (index);  
  123448:	e13ff917 	ldw	r4,-28(fp)
  12344c:	01234840 	call	123484 <alt_release_fd>
    ALT_ERRNO = -status;
  123450:	01232000 	call	123200 <alt_get_errno>
  123454:	1007883a 	mov	r3,r2
  123458:	e0bffa17 	ldw	r2,-24(fp)
  12345c:	0085c83a 	sub	r2,zero,r2
  123460:	18800015 	stw	r2,0(r3)
    return -1;
  123464:	00bfffc4 	movi	r2,-1
  123468:	00000106 	br	123470 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
  12346c:	e0bff917 	ldw	r2,-28(fp)
}
  123470:	e037883a 	mov	sp,fp
  123474:	dfc00117 	ldw	ra,4(sp)
  123478:	df000017 	ldw	fp,0(sp)
  12347c:	dec00204 	addi	sp,sp,8
  123480:	f800283a 	ret

00123484 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  123484:	defffc04 	addi	sp,sp,-16
  123488:	dfc00315 	stw	ra,12(sp)
  12348c:	df000215 	stw	fp,8(sp)
  123490:	dc000115 	stw	r16,4(sp)
  123494:	df000204 	addi	fp,sp,8
  123498:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
  12349c:	e0bffe17 	ldw	r2,-8(fp)
  1234a0:	108000d0 	cmplti	r2,r2,3
  1234a4:	1000111e 	bne	r2,zero,1234ec <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  1234a8:	040004f4 	movhi	r16,19
  1234ac:	84212b04 	addi	r16,r16,-31572
  1234b0:	e0bffe17 	ldw	r2,-8(fp)
  1234b4:	01400304 	movi	r5,12
  1234b8:	1009883a 	mov	r4,r2
  1234bc:	0126aec0 	call	126aec <__mulsi3>
  1234c0:	8085883a 	add	r2,r16,r2
  1234c4:	10800204 	addi	r2,r2,8
  1234c8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  1234cc:	040004f4 	movhi	r16,19
  1234d0:	84212b04 	addi	r16,r16,-31572
  1234d4:	e0bffe17 	ldw	r2,-8(fp)
  1234d8:	01400304 	movi	r5,12
  1234dc:	1009883a 	mov	r4,r2
  1234e0:	0126aec0 	call	126aec <__mulsi3>
  1234e4:	8085883a 	add	r2,r16,r2
  1234e8:	10000015 	stw	zero,0(r2)
  }
}
  1234ec:	0001883a 	nop
  1234f0:	e6ffff04 	addi	sp,fp,-4
  1234f4:	dfc00217 	ldw	ra,8(sp)
  1234f8:	df000117 	ldw	fp,4(sp)
  1234fc:	dc000017 	ldw	r16,0(sp)
  123500:	dec00304 	addi	sp,sp,12
  123504:	f800283a 	ret

00123508 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  123508:	defffa04 	addi	sp,sp,-24
  12350c:	df000515 	stw	fp,20(sp)
  123510:	df000504 	addi	fp,sp,20
  123514:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  123518:	0005303a 	rdctl	r2,status
  12351c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  123520:	e0fffc17 	ldw	r3,-16(fp)
  123524:	00bfff84 	movi	r2,-2
  123528:	1884703a 	and	r2,r3,r2
  12352c:	1001703a 	wrctl	status,r2
  
  return context;
  123530:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  123534:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  123538:	e0bfff17 	ldw	r2,-4(fp)
  12353c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  123540:	e0bffd17 	ldw	r2,-12(fp)
  123544:	10800017 	ldw	r2,0(r2)
  123548:	e0fffd17 	ldw	r3,-12(fp)
  12354c:	18c00117 	ldw	r3,4(r3)
  123550:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  123554:	e0bffd17 	ldw	r2,-12(fp)
  123558:	10800117 	ldw	r2,4(r2)
  12355c:	e0fffd17 	ldw	r3,-12(fp)
  123560:	18c00017 	ldw	r3,0(r3)
  123564:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  123568:	e0bffd17 	ldw	r2,-12(fp)
  12356c:	e0fffd17 	ldw	r3,-12(fp)
  123570:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  123574:	e0bffd17 	ldw	r2,-12(fp)
  123578:	e0fffd17 	ldw	r3,-12(fp)
  12357c:	10c00015 	stw	r3,0(r2)
  123580:	e0bffb17 	ldw	r2,-20(fp)
  123584:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  123588:	e0bffe17 	ldw	r2,-8(fp)
  12358c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  123590:	0001883a 	nop
  123594:	e037883a 	mov	sp,fp
  123598:	df000017 	ldw	fp,0(sp)
  12359c:	dec00104 	addi	sp,sp,4
  1235a0:	f800283a 	ret

001235a4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  1235a4:	defffb04 	addi	sp,sp,-20
  1235a8:	dfc00415 	stw	ra,16(sp)
  1235ac:	df000315 	stw	fp,12(sp)
  1235b0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  1235b4:	d0a00b17 	ldw	r2,-32724(gp)
  1235b8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  1235bc:	d0a73217 	ldw	r2,-25400(gp)
  1235c0:	10800044 	addi	r2,r2,1
  1235c4:	d0a73215 	stw	r2,-25400(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  1235c8:	00002e06 	br	123684 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  1235cc:	e0bffd17 	ldw	r2,-12(fp)
  1235d0:	10800017 	ldw	r2,0(r2)
  1235d4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  1235d8:	e0bffd17 	ldw	r2,-12(fp)
  1235dc:	10800403 	ldbu	r2,16(r2)
  1235e0:	10803fcc 	andi	r2,r2,255
  1235e4:	10000426 	beq	r2,zero,1235f8 <alt_tick+0x54>
  1235e8:	d0a73217 	ldw	r2,-25400(gp)
  1235ec:	1000021e 	bne	r2,zero,1235f8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  1235f0:	e0bffd17 	ldw	r2,-12(fp)
  1235f4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  1235f8:	e0bffd17 	ldw	r2,-12(fp)
  1235fc:	10800217 	ldw	r2,8(r2)
  123600:	d0e73217 	ldw	r3,-25400(gp)
  123604:	18801d36 	bltu	r3,r2,12367c <alt_tick+0xd8>
  123608:	e0bffd17 	ldw	r2,-12(fp)
  12360c:	10800403 	ldbu	r2,16(r2)
  123610:	10803fcc 	andi	r2,r2,255
  123614:	1000191e 	bne	r2,zero,12367c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  123618:	e0bffd17 	ldw	r2,-12(fp)
  12361c:	10800317 	ldw	r2,12(r2)
  123620:	e0fffd17 	ldw	r3,-12(fp)
  123624:	18c00517 	ldw	r3,20(r3)
  123628:	1809883a 	mov	r4,r3
  12362c:	103ee83a 	callr	r2
  123630:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  123634:	e0bfff17 	ldw	r2,-4(fp)
  123638:	1000031e 	bne	r2,zero,123648 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  12363c:	e13ffd17 	ldw	r4,-12(fp)
  123640:	01235080 	call	123508 <alt_alarm_stop>
  123644:	00000d06 	br	12367c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  123648:	e0bffd17 	ldw	r2,-12(fp)
  12364c:	10c00217 	ldw	r3,8(r2)
  123650:	e0bfff17 	ldw	r2,-4(fp)
  123654:	1887883a 	add	r3,r3,r2
  123658:	e0bffd17 	ldw	r2,-12(fp)
  12365c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  123660:	e0bffd17 	ldw	r2,-12(fp)
  123664:	10c00217 	ldw	r3,8(r2)
  123668:	d0a73217 	ldw	r2,-25400(gp)
  12366c:	1880032e 	bgeu	r3,r2,12367c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  123670:	e0bffd17 	ldw	r2,-12(fp)
  123674:	00c00044 	movi	r3,1
  123678:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  12367c:	e0bffe17 	ldw	r2,-8(fp)
  123680:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  123684:	e0fffd17 	ldw	r3,-12(fp)
  123688:	d0a00b04 	addi	r2,gp,-32724
  12368c:	18bfcf1e 	bne	r3,r2,1235cc <__alt_data_end+0xfffe3eac>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  123690:	0001883a 	nop
}
  123694:	0001883a 	nop
  123698:	e037883a 	mov	sp,fp
  12369c:	dfc00117 	ldw	ra,4(sp)
  1236a0:	df000017 	ldw	fp,0(sp)
  1236a4:	dec00204 	addi	sp,sp,8
  1236a8:	f800283a 	ret

001236ac <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  1236ac:	deffff04 	addi	sp,sp,-4
  1236b0:	df000015 	stw	fp,0(sp)
  1236b4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  1236b8:	000170fa 	wrctl	ienable,zero
}
  1236bc:	0001883a 	nop
  1236c0:	e037883a 	mov	sp,fp
  1236c4:	df000017 	ldw	fp,0(sp)
  1236c8:	dec00104 	addi	sp,sp,4
  1236cc:	f800283a 	ret

001236d0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  1236d0:	defffa04 	addi	sp,sp,-24
  1236d4:	dfc00515 	stw	ra,20(sp)
  1236d8:	df000415 	stw	fp,16(sp)
  1236dc:	df000404 	addi	fp,sp,16
  1236e0:	e13ffe15 	stw	r4,-8(fp)
  1236e4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  1236e8:	e0bfff17 	ldw	r2,-4(fp)
  1236ec:	10800017 	ldw	r2,0(r2)
  1236f0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  1236f4:	e13ffe17 	ldw	r4,-8(fp)
  1236f8:	01251580 	call	125158 <strlen>
  1236fc:	10800044 	addi	r2,r2,1
  123700:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  123704:	00000d06 	br	12373c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  123708:	e0bffc17 	ldw	r2,-16(fp)
  12370c:	10800217 	ldw	r2,8(r2)
  123710:	e0fffd17 	ldw	r3,-12(fp)
  123714:	180d883a 	mov	r6,r3
  123718:	e17ffe17 	ldw	r5,-8(fp)
  12371c:	1009883a 	mov	r4,r2
  123720:	01248800 	call	124880 <memcmp>
  123724:	1000021e 	bne	r2,zero,123730 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  123728:	e0bffc17 	ldw	r2,-16(fp)
  12372c:	00000706 	br	12374c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  123730:	e0bffc17 	ldw	r2,-16(fp)
  123734:	10800017 	ldw	r2,0(r2)
  123738:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  12373c:	e0fffc17 	ldw	r3,-16(fp)
  123740:	e0bfff17 	ldw	r2,-4(fp)
  123744:	18bff01e 	bne	r3,r2,123708 <__alt_data_end+0xfffe3fe8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  123748:	0005883a 	mov	r2,zero
}
  12374c:	e037883a 	mov	sp,fp
  123750:	dfc00117 	ldw	ra,4(sp)
  123754:	df000017 	ldw	fp,0(sp)
  123758:	dec00204 	addi	sp,sp,8
  12375c:	f800283a 	ret

00123760 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  123760:	defffb04 	addi	sp,sp,-20
  123764:	dfc00415 	stw	ra,16(sp)
  123768:	df000315 	stw	fp,12(sp)
  12376c:	df000304 	addi	fp,sp,12
  123770:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  123774:	d0a00217 	ldw	r2,-32760(gp)
  123778:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  12377c:	00003106 	br	123844 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  123780:	e0bffd17 	ldw	r2,-12(fp)
  123784:	10800217 	ldw	r2,8(r2)
  123788:	1009883a 	mov	r4,r2
  12378c:	01251580 	call	125158 <strlen>
  123790:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  123794:	e0bffd17 	ldw	r2,-12(fp)
  123798:	10c00217 	ldw	r3,8(r2)
  12379c:	e0bffe17 	ldw	r2,-8(fp)
  1237a0:	10bfffc4 	addi	r2,r2,-1
  1237a4:	1885883a 	add	r2,r3,r2
  1237a8:	10800003 	ldbu	r2,0(r2)
  1237ac:	10803fcc 	andi	r2,r2,255
  1237b0:	1080201c 	xori	r2,r2,128
  1237b4:	10bfe004 	addi	r2,r2,-128
  1237b8:	10800bd8 	cmpnei	r2,r2,47
  1237bc:	1000031e 	bne	r2,zero,1237cc <alt_find_file+0x6c>
    {
      len -= 1;
  1237c0:	e0bffe17 	ldw	r2,-8(fp)
  1237c4:	10bfffc4 	addi	r2,r2,-1
  1237c8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  1237cc:	e0bffe17 	ldw	r2,-8(fp)
  1237d0:	e0ffff17 	ldw	r3,-4(fp)
  1237d4:	1885883a 	add	r2,r3,r2
  1237d8:	10800003 	ldbu	r2,0(r2)
  1237dc:	10803fcc 	andi	r2,r2,255
  1237e0:	1080201c 	xori	r2,r2,128
  1237e4:	10bfe004 	addi	r2,r2,-128
  1237e8:	10800be0 	cmpeqi	r2,r2,47
  1237ec:	1000081e 	bne	r2,zero,123810 <alt_find_file+0xb0>
  1237f0:	e0bffe17 	ldw	r2,-8(fp)
  1237f4:	e0ffff17 	ldw	r3,-4(fp)
  1237f8:	1885883a 	add	r2,r3,r2
  1237fc:	10800003 	ldbu	r2,0(r2)
  123800:	10803fcc 	andi	r2,r2,255
  123804:	1080201c 	xori	r2,r2,128
  123808:	10bfe004 	addi	r2,r2,-128
  12380c:	10000a1e 	bne	r2,zero,123838 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  123810:	e0bffd17 	ldw	r2,-12(fp)
  123814:	10800217 	ldw	r2,8(r2)
  123818:	e0fffe17 	ldw	r3,-8(fp)
  12381c:	180d883a 	mov	r6,r3
  123820:	e17fff17 	ldw	r5,-4(fp)
  123824:	1009883a 	mov	r4,r2
  123828:	01248800 	call	124880 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  12382c:	1000021e 	bne	r2,zero,123838 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  123830:	e0bffd17 	ldw	r2,-12(fp)
  123834:	00000706 	br	123854 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  123838:	e0bffd17 	ldw	r2,-12(fp)
  12383c:	10800017 	ldw	r2,0(r2)
  123840:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  123844:	e0fffd17 	ldw	r3,-12(fp)
  123848:	d0a00204 	addi	r2,gp,-32760
  12384c:	18bfcc1e 	bne	r3,r2,123780 <__alt_data_end+0xfffe4060>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  123850:	0005883a 	mov	r2,zero
}
  123854:	e037883a 	mov	sp,fp
  123858:	dfc00117 	ldw	ra,4(sp)
  12385c:	df000017 	ldw	fp,0(sp)
  123860:	dec00204 	addi	sp,sp,8
  123864:	f800283a 	ret

00123868 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  123868:	defffa04 	addi	sp,sp,-24
  12386c:	dfc00515 	stw	ra,20(sp)
  123870:	df000415 	stw	fp,16(sp)
  123874:	dc000315 	stw	r16,12(sp)
  123878:	df000404 	addi	fp,sp,16
  12387c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
  123880:	00bffa04 	movi	r2,-24
  123884:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  123888:	e03ffc15 	stw	zero,-16(fp)
  12388c:	00001d06 	br	123904 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
  123890:	040004f4 	movhi	r16,19
  123894:	84212b04 	addi	r16,r16,-31572
  123898:	e0bffc17 	ldw	r2,-16(fp)
  12389c:	01400304 	movi	r5,12
  1238a0:	1009883a 	mov	r4,r2
  1238a4:	0126aec0 	call	126aec <__mulsi3>
  1238a8:	8085883a 	add	r2,r16,r2
  1238ac:	10800017 	ldw	r2,0(r2)
  1238b0:	1000111e 	bne	r2,zero,1238f8 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
  1238b4:	040004f4 	movhi	r16,19
  1238b8:	84212b04 	addi	r16,r16,-31572
  1238bc:	e0bffc17 	ldw	r2,-16(fp)
  1238c0:	01400304 	movi	r5,12
  1238c4:	1009883a 	mov	r4,r2
  1238c8:	0126aec0 	call	126aec <__mulsi3>
  1238cc:	8085883a 	add	r2,r16,r2
  1238d0:	e0fffe17 	ldw	r3,-8(fp)
  1238d4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  1238d8:	d0e00617 	ldw	r3,-32744(gp)
  1238dc:	e0bffc17 	ldw	r2,-16(fp)
  1238e0:	1880020e 	bge	r3,r2,1238ec <alt_get_fd+0x84>
      {
        alt_max_fd = i;
  1238e4:	e0bffc17 	ldw	r2,-16(fp)
  1238e8:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
  1238ec:	e0bffc17 	ldw	r2,-16(fp)
  1238f0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  1238f4:	00000606 	br	123910 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  1238f8:	e0bffc17 	ldw	r2,-16(fp)
  1238fc:	10800044 	addi	r2,r2,1
  123900:	e0bffc15 	stw	r2,-16(fp)
  123904:	e0bffc17 	ldw	r2,-16(fp)
  123908:	10800810 	cmplti	r2,r2,32
  12390c:	103fe01e 	bne	r2,zero,123890 <__alt_data_end+0xfffe4170>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  123910:	e0bffd17 	ldw	r2,-12(fp)
}
  123914:	e6ffff04 	addi	sp,fp,-4
  123918:	dfc00217 	ldw	ra,8(sp)
  12391c:	df000117 	ldw	fp,4(sp)
  123920:	dc000017 	ldw	r16,0(sp)
  123924:	dec00304 	addi	sp,sp,12
  123928:	f800283a 	ret

0012392c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  12392c:	defffe04 	addi	sp,sp,-8
  123930:	df000115 	stw	fp,4(sp)
  123934:	df000104 	addi	fp,sp,4
  123938:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  12393c:	e0bfff17 	ldw	r2,-4(fp)
  123940:	10bffe84 	addi	r2,r2,-6
  123944:	10c00428 	cmpgeui	r3,r2,16
  123948:	18001a1e 	bne	r3,zero,1239b4 <alt_exception_cause_generated_bad_addr+0x88>
  12394c:	100690ba 	slli	r3,r2,2
  123950:	008004b4 	movhi	r2,18
  123954:	108e5904 	addi	r2,r2,14692
  123958:	1885883a 	add	r2,r3,r2
  12395c:	10800017 	ldw	r2,0(r2)
  123960:	1000683a 	jmp	r2
  123964:	001239a4 	muli	zero,zero,18662
  123968:	001239a4 	muli	zero,zero,18662
  12396c:	001239b4 	movhi	zero,18662
  123970:	001239b4 	movhi	zero,18662
  123974:	001239b4 	movhi	zero,18662
  123978:	001239a4 	muli	zero,zero,18662
  12397c:	001239ac 	andhi	zero,zero,18662
  123980:	001239b4 	movhi	zero,18662
  123984:	001239a4 	muli	zero,zero,18662
  123988:	001239a4 	muli	zero,zero,18662
  12398c:	001239b4 	movhi	zero,18662
  123990:	001239a4 	muli	zero,zero,18662
  123994:	001239ac 	andhi	zero,zero,18662
  123998:	001239b4 	movhi	zero,18662
  12399c:	001239b4 	movhi	zero,18662
  1239a0:	001239a4 	muli	zero,zero,18662
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  1239a4:	00800044 	movi	r2,1
  1239a8:	00000306 	br	1239b8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  1239ac:	0005883a 	mov	r2,zero
  1239b0:	00000106 	br	1239b8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  1239b4:	0005883a 	mov	r2,zero
  }
}
  1239b8:	e037883a 	mov	sp,fp
  1239bc:	df000017 	ldw	fp,0(sp)
  1239c0:	dec00104 	addi	sp,sp,4
  1239c4:	f800283a 	ret

001239c8 <atexit>:
  1239c8:	200b883a 	mov	r5,r4
  1239cc:	000f883a 	mov	r7,zero
  1239d0:	000d883a 	mov	r6,zero
  1239d4:	0009883a 	mov	r4,zero
  1239d8:	01253441 	jmpi	125344 <__register_exitproc>

001239dc <exit>:
  1239dc:	defffe04 	addi	sp,sp,-8
  1239e0:	000b883a 	mov	r5,zero
  1239e4:	dc000015 	stw	r16,0(sp)
  1239e8:	dfc00115 	stw	ra,4(sp)
  1239ec:	2021883a 	mov	r16,r4
  1239f0:	012545c0 	call	12545c <__call_exitprocs>
  1239f4:	008004f4 	movhi	r2,19
  1239f8:	10a3a304 	addi	r2,r2,-29044
  1239fc:	11000017 	ldw	r4,0(r2)
  123a00:	20800f17 	ldw	r2,60(r4)
  123a04:	10000126 	beq	r2,zero,123a0c <exit+0x30>
  123a08:	103ee83a 	callr	r2
  123a0c:	8009883a 	mov	r4,r16
  123a10:	0126b140 	call	126b14 <_exit>

00123a14 <_fputs_r>:
  123a14:	defff804 	addi	sp,sp,-32
  123a18:	dc400615 	stw	r17,24(sp)
  123a1c:	2023883a 	mov	r17,r4
  123a20:	2809883a 	mov	r4,r5
  123a24:	dc000515 	stw	r16,20(sp)
  123a28:	dfc00715 	stw	ra,28(sp)
  123a2c:	3021883a 	mov	r16,r6
  123a30:	d9400315 	stw	r5,12(sp)
  123a34:	01251580 	call	125158 <strlen>
  123a38:	d8800215 	stw	r2,8(sp)
  123a3c:	d8800415 	stw	r2,16(sp)
  123a40:	d8800304 	addi	r2,sp,12
  123a44:	d8800015 	stw	r2,0(sp)
  123a48:	00800044 	movi	r2,1
  123a4c:	d8800115 	stw	r2,4(sp)
  123a50:	88000226 	beq	r17,zero,123a5c <_fputs_r+0x48>
  123a54:	88800e17 	ldw	r2,56(r17)
  123a58:	10001226 	beq	r2,zero,123aa4 <_fputs_r+0x90>
  123a5c:	8080030b 	ldhu	r2,12(r16)
  123a60:	10c8000c 	andi	r3,r2,8192
  123a64:	1800061e 	bne	r3,zero,123a80 <_fputs_r+0x6c>
  123a68:	81001917 	ldw	r4,100(r16)
  123a6c:	00f7ffc4 	movi	r3,-8193
  123a70:	10880014 	ori	r2,r2,8192
  123a74:	20c6703a 	and	r3,r4,r3
  123a78:	8080030d 	sth	r2,12(r16)
  123a7c:	80c01915 	stw	r3,100(r16)
  123a80:	d80d883a 	mov	r6,sp
  123a84:	800b883a 	mov	r5,r16
  123a88:	8809883a 	mov	r4,r17
  123a8c:	0123ac80 	call	123ac8 <__sfvwrite_r>
  123a90:	dfc00717 	ldw	ra,28(sp)
  123a94:	dc400617 	ldw	r17,24(sp)
  123a98:	dc000517 	ldw	r16,20(sp)
  123a9c:	dec00804 	addi	sp,sp,32
  123aa0:	f800283a 	ret
  123aa4:	8809883a 	mov	r4,r17
  123aa8:	0125be40 	call	125be4 <__sinit>
  123aac:	003feb06 	br	123a5c <__alt_data_end+0xfffe433c>

00123ab0 <fputs>:
  123ab0:	008004f4 	movhi	r2,19
  123ab4:	10a3a404 	addi	r2,r2,-29040
  123ab8:	280d883a 	mov	r6,r5
  123abc:	200b883a 	mov	r5,r4
  123ac0:	11000017 	ldw	r4,0(r2)
  123ac4:	0123a141 	jmpi	123a14 <_fputs_r>

00123ac8 <__sfvwrite_r>:
  123ac8:	30800217 	ldw	r2,8(r6)
  123acc:	10006726 	beq	r2,zero,123c6c <__sfvwrite_r+0x1a4>
  123ad0:	28c0030b 	ldhu	r3,12(r5)
  123ad4:	defff404 	addi	sp,sp,-48
  123ad8:	dd400715 	stw	r21,28(sp)
  123adc:	dd000615 	stw	r20,24(sp)
  123ae0:	dc000215 	stw	r16,8(sp)
  123ae4:	dfc00b15 	stw	ra,44(sp)
  123ae8:	df000a15 	stw	fp,40(sp)
  123aec:	ddc00915 	stw	r23,36(sp)
  123af0:	dd800815 	stw	r22,32(sp)
  123af4:	dcc00515 	stw	r19,20(sp)
  123af8:	dc800415 	stw	r18,16(sp)
  123afc:	dc400315 	stw	r17,12(sp)
  123b00:	1880020c 	andi	r2,r3,8
  123b04:	2821883a 	mov	r16,r5
  123b08:	202b883a 	mov	r21,r4
  123b0c:	3029883a 	mov	r20,r6
  123b10:	10002726 	beq	r2,zero,123bb0 <__sfvwrite_r+0xe8>
  123b14:	28800417 	ldw	r2,16(r5)
  123b18:	10002526 	beq	r2,zero,123bb0 <__sfvwrite_r+0xe8>
  123b1c:	1880008c 	andi	r2,r3,2
  123b20:	a4400017 	ldw	r17,0(r20)
  123b24:	10002a26 	beq	r2,zero,123bd0 <__sfvwrite_r+0x108>
  123b28:	05a00034 	movhi	r22,32768
  123b2c:	0027883a 	mov	r19,zero
  123b30:	0025883a 	mov	r18,zero
  123b34:	b5bf0004 	addi	r22,r22,-1024
  123b38:	980d883a 	mov	r6,r19
  123b3c:	a809883a 	mov	r4,r21
  123b40:	90004626 	beq	r18,zero,123c5c <__sfvwrite_r+0x194>
  123b44:	900f883a 	mov	r7,r18
  123b48:	b480022e 	bgeu	r22,r18,123b54 <__sfvwrite_r+0x8c>
  123b4c:	01e00034 	movhi	r7,32768
  123b50:	39ff0004 	addi	r7,r7,-1024
  123b54:	80800917 	ldw	r2,36(r16)
  123b58:	81400717 	ldw	r5,28(r16)
  123b5c:	103ee83a 	callr	r2
  123b60:	00805a0e 	bge	zero,r2,123ccc <__sfvwrite_r+0x204>
  123b64:	a0c00217 	ldw	r3,8(r20)
  123b68:	98a7883a 	add	r19,r19,r2
  123b6c:	90a5c83a 	sub	r18,r18,r2
  123b70:	1885c83a 	sub	r2,r3,r2
  123b74:	a0800215 	stw	r2,8(r20)
  123b78:	103fef1e 	bne	r2,zero,123b38 <__alt_data_end+0xfffe4418>
  123b7c:	0005883a 	mov	r2,zero
  123b80:	dfc00b17 	ldw	ra,44(sp)
  123b84:	df000a17 	ldw	fp,40(sp)
  123b88:	ddc00917 	ldw	r23,36(sp)
  123b8c:	dd800817 	ldw	r22,32(sp)
  123b90:	dd400717 	ldw	r21,28(sp)
  123b94:	dd000617 	ldw	r20,24(sp)
  123b98:	dcc00517 	ldw	r19,20(sp)
  123b9c:	dc800417 	ldw	r18,16(sp)
  123ba0:	dc400317 	ldw	r17,12(sp)
  123ba4:	dc000217 	ldw	r16,8(sp)
  123ba8:	dec00c04 	addi	sp,sp,48
  123bac:	f800283a 	ret
  123bb0:	800b883a 	mov	r5,r16
  123bb4:	a809883a 	mov	r4,r21
  123bb8:	01251f00 	call	1251f0 <__swsetup_r>
  123bbc:	1000ee1e 	bne	r2,zero,123f78 <__sfvwrite_r+0x4b0>
  123bc0:	80c0030b 	ldhu	r3,12(r16)
  123bc4:	a4400017 	ldw	r17,0(r20)
  123bc8:	1880008c 	andi	r2,r3,2
  123bcc:	103fd61e 	bne	r2,zero,123b28 <__alt_data_end+0xfffe4408>
  123bd0:	1880004c 	andi	r2,r3,1
  123bd4:	1000421e 	bne	r2,zero,123ce0 <__sfvwrite_r+0x218>
  123bd8:	0039883a 	mov	fp,zero
  123bdc:	0025883a 	mov	r18,zero
  123be0:	90001a26 	beq	r18,zero,123c4c <__sfvwrite_r+0x184>
  123be4:	1880800c 	andi	r2,r3,512
  123be8:	84c00217 	ldw	r19,8(r16)
  123bec:	10002126 	beq	r2,zero,123c74 <__sfvwrite_r+0x1ac>
  123bf0:	982f883a 	mov	r23,r19
  123bf4:	94c09636 	bltu	r18,r19,123e50 <__sfvwrite_r+0x388>
  123bf8:	1881200c 	andi	r2,r3,1152
  123bfc:	1000a11e 	bne	r2,zero,123e84 <__sfvwrite_r+0x3bc>
  123c00:	81000017 	ldw	r4,0(r16)
  123c04:	b80d883a 	mov	r6,r23
  123c08:	e00b883a 	mov	r5,fp
  123c0c:	0124a440 	call	124a44 <memmove>
  123c10:	80c00217 	ldw	r3,8(r16)
  123c14:	81000017 	ldw	r4,0(r16)
  123c18:	9005883a 	mov	r2,r18
  123c1c:	1ce7c83a 	sub	r19,r3,r19
  123c20:	25cf883a 	add	r7,r4,r23
  123c24:	84c00215 	stw	r19,8(r16)
  123c28:	81c00015 	stw	r7,0(r16)
  123c2c:	a0c00217 	ldw	r3,8(r20)
  123c30:	e0b9883a 	add	fp,fp,r2
  123c34:	90a5c83a 	sub	r18,r18,r2
  123c38:	18a7c83a 	sub	r19,r3,r2
  123c3c:	a4c00215 	stw	r19,8(r20)
  123c40:	983fce26 	beq	r19,zero,123b7c <__alt_data_end+0xfffe445c>
  123c44:	80c0030b 	ldhu	r3,12(r16)
  123c48:	903fe61e 	bne	r18,zero,123be4 <__alt_data_end+0xfffe44c4>
  123c4c:	8f000017 	ldw	fp,0(r17)
  123c50:	8c800117 	ldw	r18,4(r17)
  123c54:	8c400204 	addi	r17,r17,8
  123c58:	003fe106 	br	123be0 <__alt_data_end+0xfffe44c0>
  123c5c:	8cc00017 	ldw	r19,0(r17)
  123c60:	8c800117 	ldw	r18,4(r17)
  123c64:	8c400204 	addi	r17,r17,8
  123c68:	003fb306 	br	123b38 <__alt_data_end+0xfffe4418>
  123c6c:	0005883a 	mov	r2,zero
  123c70:	f800283a 	ret
  123c74:	81000017 	ldw	r4,0(r16)
  123c78:	80800417 	ldw	r2,16(r16)
  123c7c:	11005a36 	bltu	r2,r4,123de8 <__sfvwrite_r+0x320>
  123c80:	85c00517 	ldw	r23,20(r16)
  123c84:	95c05836 	bltu	r18,r23,123de8 <__sfvwrite_r+0x320>
  123c88:	00a00034 	movhi	r2,32768
  123c8c:	10bfffc4 	addi	r2,r2,-1
  123c90:	9009883a 	mov	r4,r18
  123c94:	1480012e 	bgeu	r2,r18,123c9c <__sfvwrite_r+0x1d4>
  123c98:	1009883a 	mov	r4,r2
  123c9c:	b80b883a 	mov	r5,r23
  123ca0:	01269380 	call	126938 <__divsi3>
  123ca4:	b80b883a 	mov	r5,r23
  123ca8:	1009883a 	mov	r4,r2
  123cac:	0126aec0 	call	126aec <__mulsi3>
  123cb0:	81400717 	ldw	r5,28(r16)
  123cb4:	80c00917 	ldw	r3,36(r16)
  123cb8:	100f883a 	mov	r7,r2
  123cbc:	e00d883a 	mov	r6,fp
  123cc0:	a809883a 	mov	r4,r21
  123cc4:	183ee83a 	callr	r3
  123cc8:	00bfd816 	blt	zero,r2,123c2c <__alt_data_end+0xfffe450c>
  123ccc:	8080030b 	ldhu	r2,12(r16)
  123cd0:	10801014 	ori	r2,r2,64
  123cd4:	8080030d 	sth	r2,12(r16)
  123cd8:	00bfffc4 	movi	r2,-1
  123cdc:	003fa806 	br	123b80 <__alt_data_end+0xfffe4460>
  123ce0:	0027883a 	mov	r19,zero
  123ce4:	0011883a 	mov	r8,zero
  123ce8:	0039883a 	mov	fp,zero
  123cec:	0025883a 	mov	r18,zero
  123cf0:	90001f26 	beq	r18,zero,123d70 <__sfvwrite_r+0x2a8>
  123cf4:	40005a26 	beq	r8,zero,123e60 <__sfvwrite_r+0x398>
  123cf8:	982d883a 	mov	r22,r19
  123cfc:	94c0012e 	bgeu	r18,r19,123d04 <__sfvwrite_r+0x23c>
  123d00:	902d883a 	mov	r22,r18
  123d04:	81000017 	ldw	r4,0(r16)
  123d08:	80800417 	ldw	r2,16(r16)
  123d0c:	b02f883a 	mov	r23,r22
  123d10:	81c00517 	ldw	r7,20(r16)
  123d14:	1100032e 	bgeu	r2,r4,123d24 <__sfvwrite_r+0x25c>
  123d18:	80c00217 	ldw	r3,8(r16)
  123d1c:	38c7883a 	add	r3,r7,r3
  123d20:	1d801816 	blt	r3,r22,123d84 <__sfvwrite_r+0x2bc>
  123d24:	b1c03e16 	blt	r22,r7,123e20 <__sfvwrite_r+0x358>
  123d28:	80800917 	ldw	r2,36(r16)
  123d2c:	81400717 	ldw	r5,28(r16)
  123d30:	e00d883a 	mov	r6,fp
  123d34:	da000115 	stw	r8,4(sp)
  123d38:	a809883a 	mov	r4,r21
  123d3c:	103ee83a 	callr	r2
  123d40:	102f883a 	mov	r23,r2
  123d44:	da000117 	ldw	r8,4(sp)
  123d48:	00bfe00e 	bge	zero,r2,123ccc <__alt_data_end+0xfffe45ac>
  123d4c:	9de7c83a 	sub	r19,r19,r23
  123d50:	98001f26 	beq	r19,zero,123dd0 <__sfvwrite_r+0x308>
  123d54:	a0800217 	ldw	r2,8(r20)
  123d58:	e5f9883a 	add	fp,fp,r23
  123d5c:	95e5c83a 	sub	r18,r18,r23
  123d60:	15efc83a 	sub	r23,r2,r23
  123d64:	a5c00215 	stw	r23,8(r20)
  123d68:	b83f8426 	beq	r23,zero,123b7c <__alt_data_end+0xfffe445c>
  123d6c:	903fe11e 	bne	r18,zero,123cf4 <__alt_data_end+0xfffe45d4>
  123d70:	8f000017 	ldw	fp,0(r17)
  123d74:	8c800117 	ldw	r18,4(r17)
  123d78:	0011883a 	mov	r8,zero
  123d7c:	8c400204 	addi	r17,r17,8
  123d80:	003fdb06 	br	123cf0 <__alt_data_end+0xfffe45d0>
  123d84:	180d883a 	mov	r6,r3
  123d88:	e00b883a 	mov	r5,fp
  123d8c:	da000115 	stw	r8,4(sp)
  123d90:	d8c00015 	stw	r3,0(sp)
  123d94:	0124a440 	call	124a44 <memmove>
  123d98:	d8c00017 	ldw	r3,0(sp)
  123d9c:	80800017 	ldw	r2,0(r16)
  123da0:	800b883a 	mov	r5,r16
  123da4:	a809883a 	mov	r4,r21
  123da8:	10c5883a 	add	r2,r2,r3
  123dac:	80800015 	stw	r2,0(r16)
  123db0:	d8c00015 	stw	r3,0(sp)
  123db4:	01257f80 	call	1257f8 <_fflush_r>
  123db8:	d8c00017 	ldw	r3,0(sp)
  123dbc:	da000117 	ldw	r8,4(sp)
  123dc0:	103fc21e 	bne	r2,zero,123ccc <__alt_data_end+0xfffe45ac>
  123dc4:	182f883a 	mov	r23,r3
  123dc8:	9de7c83a 	sub	r19,r19,r23
  123dcc:	983fe11e 	bne	r19,zero,123d54 <__alt_data_end+0xfffe4634>
  123dd0:	800b883a 	mov	r5,r16
  123dd4:	a809883a 	mov	r4,r21
  123dd8:	01257f80 	call	1257f8 <_fflush_r>
  123ddc:	103fbb1e 	bne	r2,zero,123ccc <__alt_data_end+0xfffe45ac>
  123de0:	0011883a 	mov	r8,zero
  123de4:	003fdb06 	br	123d54 <__alt_data_end+0xfffe4634>
  123de8:	94c0012e 	bgeu	r18,r19,123df0 <__sfvwrite_r+0x328>
  123dec:	9027883a 	mov	r19,r18
  123df0:	980d883a 	mov	r6,r19
  123df4:	e00b883a 	mov	r5,fp
  123df8:	0124a440 	call	124a44 <memmove>
  123dfc:	80800217 	ldw	r2,8(r16)
  123e00:	80c00017 	ldw	r3,0(r16)
  123e04:	14c5c83a 	sub	r2,r2,r19
  123e08:	1cc7883a 	add	r3,r3,r19
  123e0c:	80800215 	stw	r2,8(r16)
  123e10:	80c00015 	stw	r3,0(r16)
  123e14:	10004326 	beq	r2,zero,123f24 <__sfvwrite_r+0x45c>
  123e18:	9805883a 	mov	r2,r19
  123e1c:	003f8306 	br	123c2c <__alt_data_end+0xfffe450c>
  123e20:	b00d883a 	mov	r6,r22
  123e24:	e00b883a 	mov	r5,fp
  123e28:	da000115 	stw	r8,4(sp)
  123e2c:	0124a440 	call	124a44 <memmove>
  123e30:	80800217 	ldw	r2,8(r16)
  123e34:	80c00017 	ldw	r3,0(r16)
  123e38:	da000117 	ldw	r8,4(sp)
  123e3c:	1585c83a 	sub	r2,r2,r22
  123e40:	1dad883a 	add	r22,r3,r22
  123e44:	80800215 	stw	r2,8(r16)
  123e48:	85800015 	stw	r22,0(r16)
  123e4c:	003fbf06 	br	123d4c <__alt_data_end+0xfffe462c>
  123e50:	81000017 	ldw	r4,0(r16)
  123e54:	9027883a 	mov	r19,r18
  123e58:	902f883a 	mov	r23,r18
  123e5c:	003f6906 	br	123c04 <__alt_data_end+0xfffe44e4>
  123e60:	900d883a 	mov	r6,r18
  123e64:	01400284 	movi	r5,10
  123e68:	e009883a 	mov	r4,fp
  123e6c:	012479c0 	call	12479c <memchr>
  123e70:	10003e26 	beq	r2,zero,123f6c <__sfvwrite_r+0x4a4>
  123e74:	10800044 	addi	r2,r2,1
  123e78:	1727c83a 	sub	r19,r2,fp
  123e7c:	02000044 	movi	r8,1
  123e80:	003f9d06 	br	123cf8 <__alt_data_end+0xfffe45d8>
  123e84:	80800517 	ldw	r2,20(r16)
  123e88:	81400417 	ldw	r5,16(r16)
  123e8c:	81c00017 	ldw	r7,0(r16)
  123e90:	10a7883a 	add	r19,r2,r2
  123e94:	9885883a 	add	r2,r19,r2
  123e98:	1026d7fa 	srli	r19,r2,31
  123e9c:	396dc83a 	sub	r22,r7,r5
  123ea0:	b1000044 	addi	r4,r22,1
  123ea4:	9885883a 	add	r2,r19,r2
  123ea8:	1027d07a 	srai	r19,r2,1
  123eac:	2485883a 	add	r2,r4,r18
  123eb0:	980d883a 	mov	r6,r19
  123eb4:	9880022e 	bgeu	r19,r2,123ec0 <__sfvwrite_r+0x3f8>
  123eb8:	1027883a 	mov	r19,r2
  123ebc:	100d883a 	mov	r6,r2
  123ec0:	18c1000c 	andi	r3,r3,1024
  123ec4:	18001c26 	beq	r3,zero,123f38 <__sfvwrite_r+0x470>
  123ec8:	300b883a 	mov	r5,r6
  123ecc:	a809883a 	mov	r4,r21
  123ed0:	0123f900 	call	123f90 <_malloc_r>
  123ed4:	102f883a 	mov	r23,r2
  123ed8:	10002926 	beq	r2,zero,123f80 <__sfvwrite_r+0x4b8>
  123edc:	81400417 	ldw	r5,16(r16)
  123ee0:	b00d883a 	mov	r6,r22
  123ee4:	1009883a 	mov	r4,r2
  123ee8:	01248fc0 	call	1248fc <memcpy>
  123eec:	8080030b 	ldhu	r2,12(r16)
  123ef0:	00fedfc4 	movi	r3,-1153
  123ef4:	10c4703a 	and	r2,r2,r3
  123ef8:	10802014 	ori	r2,r2,128
  123efc:	8080030d 	sth	r2,12(r16)
  123f00:	bd89883a 	add	r4,r23,r22
  123f04:	9d8fc83a 	sub	r7,r19,r22
  123f08:	85c00415 	stw	r23,16(r16)
  123f0c:	84c00515 	stw	r19,20(r16)
  123f10:	81000015 	stw	r4,0(r16)
  123f14:	9027883a 	mov	r19,r18
  123f18:	81c00215 	stw	r7,8(r16)
  123f1c:	902f883a 	mov	r23,r18
  123f20:	003f3806 	br	123c04 <__alt_data_end+0xfffe44e4>
  123f24:	800b883a 	mov	r5,r16
  123f28:	a809883a 	mov	r4,r21
  123f2c:	01257f80 	call	1257f8 <_fflush_r>
  123f30:	103fb926 	beq	r2,zero,123e18 <__alt_data_end+0xfffe46f8>
  123f34:	003f6506 	br	123ccc <__alt_data_end+0xfffe45ac>
  123f38:	a809883a 	mov	r4,r21
  123f3c:	0124ba00 	call	124ba0 <_realloc_r>
  123f40:	102f883a 	mov	r23,r2
  123f44:	103fee1e 	bne	r2,zero,123f00 <__alt_data_end+0xfffe47e0>
  123f48:	81400417 	ldw	r5,16(r16)
  123f4c:	a809883a 	mov	r4,r21
  123f50:	0125d580 	call	125d58 <_free_r>
  123f54:	8080030b 	ldhu	r2,12(r16)
  123f58:	00ffdfc4 	movi	r3,-129
  123f5c:	1884703a 	and	r2,r3,r2
  123f60:	00c00304 	movi	r3,12
  123f64:	a8c00015 	stw	r3,0(r21)
  123f68:	003f5906 	br	123cd0 <__alt_data_end+0xfffe45b0>
  123f6c:	94c00044 	addi	r19,r18,1
  123f70:	02000044 	movi	r8,1
  123f74:	003f6006 	br	123cf8 <__alt_data_end+0xfffe45d8>
  123f78:	00bfffc4 	movi	r2,-1
  123f7c:	003f0006 	br	123b80 <__alt_data_end+0xfffe4460>
  123f80:	00800304 	movi	r2,12
  123f84:	a8800015 	stw	r2,0(r21)
  123f88:	8080030b 	ldhu	r2,12(r16)
  123f8c:	003f5006 	br	123cd0 <__alt_data_end+0xfffe45b0>

00123f90 <_malloc_r>:
  123f90:	defff504 	addi	sp,sp,-44
  123f94:	dc800315 	stw	r18,12(sp)
  123f98:	dfc00a15 	stw	ra,40(sp)
  123f9c:	df000915 	stw	fp,36(sp)
  123fa0:	ddc00815 	stw	r23,32(sp)
  123fa4:	dd800715 	stw	r22,28(sp)
  123fa8:	dd400615 	stw	r21,24(sp)
  123fac:	dd000515 	stw	r20,20(sp)
  123fb0:	dcc00415 	stw	r19,16(sp)
  123fb4:	dc400215 	stw	r17,8(sp)
  123fb8:	dc000115 	stw	r16,4(sp)
  123fbc:	288002c4 	addi	r2,r5,11
  123fc0:	00c00584 	movi	r3,22
  123fc4:	2025883a 	mov	r18,r4
  123fc8:	18807f2e 	bgeu	r3,r2,1241c8 <_malloc_r+0x238>
  123fcc:	047ffe04 	movi	r17,-8
  123fd0:	1462703a 	and	r17,r2,r17
  123fd4:	8800a316 	blt	r17,zero,124264 <_malloc_r+0x2d4>
  123fd8:	8940a236 	bltu	r17,r5,124264 <_malloc_r+0x2d4>
  123fdc:	0126e3c0 	call	126e3c <__malloc_lock>
  123fe0:	00807dc4 	movi	r2,503
  123fe4:	1441e92e 	bgeu	r2,r17,12478c <_malloc_r+0x7fc>
  123fe8:	8804d27a 	srli	r2,r17,9
  123fec:	1000a126 	beq	r2,zero,124274 <_malloc_r+0x2e4>
  123ff0:	00c00104 	movi	r3,4
  123ff4:	18811e36 	bltu	r3,r2,124470 <_malloc_r+0x4e0>
  123ff8:	8804d1ba 	srli	r2,r17,6
  123ffc:	12000e44 	addi	r8,r2,57
  124000:	11c00e04 	addi	r7,r2,56
  124004:	4209883a 	add	r4,r8,r8
  124008:	04c004f4 	movhi	r19,19
  12400c:	2109883a 	add	r4,r4,r4
  124010:	9ce29404 	addi	r19,r19,-30128
  124014:	2109883a 	add	r4,r4,r4
  124018:	9909883a 	add	r4,r19,r4
  12401c:	24000117 	ldw	r16,4(r4)
  124020:	213ffe04 	addi	r4,r4,-8
  124024:	24009726 	beq	r4,r16,124284 <_malloc_r+0x2f4>
  124028:	80800117 	ldw	r2,4(r16)
  12402c:	01bfff04 	movi	r6,-4
  124030:	014003c4 	movi	r5,15
  124034:	1184703a 	and	r2,r2,r6
  124038:	1447c83a 	sub	r3,r2,r17
  12403c:	28c00716 	blt	r5,r3,12405c <_malloc_r+0xcc>
  124040:	1800920e 	bge	r3,zero,12428c <_malloc_r+0x2fc>
  124044:	84000317 	ldw	r16,12(r16)
  124048:	24008e26 	beq	r4,r16,124284 <_malloc_r+0x2f4>
  12404c:	80800117 	ldw	r2,4(r16)
  124050:	1184703a 	and	r2,r2,r6
  124054:	1447c83a 	sub	r3,r2,r17
  124058:	28fff90e 	bge	r5,r3,124040 <__alt_data_end+0xfffe4920>
  12405c:	3809883a 	mov	r4,r7
  124060:	018004f4 	movhi	r6,19
  124064:	9c000417 	ldw	r16,16(r19)
  124068:	31a29404 	addi	r6,r6,-30128
  12406c:	32000204 	addi	r8,r6,8
  124070:	82013426 	beq	r16,r8,124544 <_malloc_r+0x5b4>
  124074:	80c00117 	ldw	r3,4(r16)
  124078:	00bfff04 	movi	r2,-4
  12407c:	188e703a 	and	r7,r3,r2
  124080:	3c45c83a 	sub	r2,r7,r17
  124084:	00c003c4 	movi	r3,15
  124088:	18811f16 	blt	r3,r2,124508 <_malloc_r+0x578>
  12408c:	32000515 	stw	r8,20(r6)
  124090:	32000415 	stw	r8,16(r6)
  124094:	10007f0e 	bge	r2,zero,124294 <_malloc_r+0x304>
  124098:	00807fc4 	movi	r2,511
  12409c:	11c0fd36 	bltu	r2,r7,124494 <_malloc_r+0x504>
  1240a0:	3806d0fa 	srli	r3,r7,3
  1240a4:	01c00044 	movi	r7,1
  1240a8:	30800117 	ldw	r2,4(r6)
  1240ac:	19400044 	addi	r5,r3,1
  1240b0:	294b883a 	add	r5,r5,r5
  1240b4:	1807d0ba 	srai	r3,r3,2
  1240b8:	294b883a 	add	r5,r5,r5
  1240bc:	294b883a 	add	r5,r5,r5
  1240c0:	298b883a 	add	r5,r5,r6
  1240c4:	38c6983a 	sll	r3,r7,r3
  1240c8:	29c00017 	ldw	r7,0(r5)
  1240cc:	2a7ffe04 	addi	r9,r5,-8
  1240d0:	1886b03a 	or	r3,r3,r2
  1240d4:	82400315 	stw	r9,12(r16)
  1240d8:	81c00215 	stw	r7,8(r16)
  1240dc:	30c00115 	stw	r3,4(r6)
  1240e0:	2c000015 	stw	r16,0(r5)
  1240e4:	3c000315 	stw	r16,12(r7)
  1240e8:	2005d0ba 	srai	r2,r4,2
  1240ec:	01400044 	movi	r5,1
  1240f0:	288a983a 	sll	r5,r5,r2
  1240f4:	19406f36 	bltu	r3,r5,1242b4 <_malloc_r+0x324>
  1240f8:	28c4703a 	and	r2,r5,r3
  1240fc:	10000a1e 	bne	r2,zero,124128 <_malloc_r+0x198>
  124100:	00bfff04 	movi	r2,-4
  124104:	294b883a 	add	r5,r5,r5
  124108:	2088703a 	and	r4,r4,r2
  12410c:	28c4703a 	and	r2,r5,r3
  124110:	21000104 	addi	r4,r4,4
  124114:	1000041e 	bne	r2,zero,124128 <_malloc_r+0x198>
  124118:	294b883a 	add	r5,r5,r5
  12411c:	28c4703a 	and	r2,r5,r3
  124120:	21000104 	addi	r4,r4,4
  124124:	103ffc26 	beq	r2,zero,124118 <__alt_data_end+0xfffe49f8>
  124128:	02bfff04 	movi	r10,-4
  12412c:	024003c4 	movi	r9,15
  124130:	21800044 	addi	r6,r4,1
  124134:	318d883a 	add	r6,r6,r6
  124138:	318d883a 	add	r6,r6,r6
  12413c:	318d883a 	add	r6,r6,r6
  124140:	998d883a 	add	r6,r19,r6
  124144:	333ffe04 	addi	r12,r6,-8
  124148:	2017883a 	mov	r11,r4
  12414c:	31800104 	addi	r6,r6,4
  124150:	34000017 	ldw	r16,0(r6)
  124154:	31fffd04 	addi	r7,r6,-12
  124158:	81c0041e 	bne	r16,r7,12416c <_malloc_r+0x1dc>
  12415c:	0000fb06 	br	12454c <_malloc_r+0x5bc>
  124160:	1801030e 	bge	r3,zero,124570 <_malloc_r+0x5e0>
  124164:	84000317 	ldw	r16,12(r16)
  124168:	81c0f826 	beq	r16,r7,12454c <_malloc_r+0x5bc>
  12416c:	80800117 	ldw	r2,4(r16)
  124170:	1284703a 	and	r2,r2,r10
  124174:	1447c83a 	sub	r3,r2,r17
  124178:	48fff90e 	bge	r9,r3,124160 <__alt_data_end+0xfffe4a40>
  12417c:	80800317 	ldw	r2,12(r16)
  124180:	81000217 	ldw	r4,8(r16)
  124184:	89400054 	ori	r5,r17,1
  124188:	81400115 	stw	r5,4(r16)
  12418c:	20800315 	stw	r2,12(r4)
  124190:	11000215 	stw	r4,8(r2)
  124194:	8463883a 	add	r17,r16,r17
  124198:	9c400515 	stw	r17,20(r19)
  12419c:	9c400415 	stw	r17,16(r19)
  1241a0:	18800054 	ori	r2,r3,1
  1241a4:	88800115 	stw	r2,4(r17)
  1241a8:	8a000315 	stw	r8,12(r17)
  1241ac:	8a000215 	stw	r8,8(r17)
  1241b0:	88e3883a 	add	r17,r17,r3
  1241b4:	88c00015 	stw	r3,0(r17)
  1241b8:	9009883a 	mov	r4,r18
  1241bc:	0126e600 	call	126e60 <__malloc_unlock>
  1241c0:	80800204 	addi	r2,r16,8
  1241c4:	00001b06 	br	124234 <_malloc_r+0x2a4>
  1241c8:	04400404 	movi	r17,16
  1241cc:	89402536 	bltu	r17,r5,124264 <_malloc_r+0x2d4>
  1241d0:	0126e3c0 	call	126e3c <__malloc_lock>
  1241d4:	00800184 	movi	r2,6
  1241d8:	01000084 	movi	r4,2
  1241dc:	04c004f4 	movhi	r19,19
  1241e0:	1085883a 	add	r2,r2,r2
  1241e4:	9ce29404 	addi	r19,r19,-30128
  1241e8:	1085883a 	add	r2,r2,r2
  1241ec:	9885883a 	add	r2,r19,r2
  1241f0:	14000117 	ldw	r16,4(r2)
  1241f4:	10fffe04 	addi	r3,r2,-8
  1241f8:	80c0d926 	beq	r16,r3,124560 <_malloc_r+0x5d0>
  1241fc:	80c00117 	ldw	r3,4(r16)
  124200:	81000317 	ldw	r4,12(r16)
  124204:	00bfff04 	movi	r2,-4
  124208:	1884703a 	and	r2,r3,r2
  12420c:	81400217 	ldw	r5,8(r16)
  124210:	8085883a 	add	r2,r16,r2
  124214:	10c00117 	ldw	r3,4(r2)
  124218:	29000315 	stw	r4,12(r5)
  12421c:	21400215 	stw	r5,8(r4)
  124220:	18c00054 	ori	r3,r3,1
  124224:	10c00115 	stw	r3,4(r2)
  124228:	9009883a 	mov	r4,r18
  12422c:	0126e600 	call	126e60 <__malloc_unlock>
  124230:	80800204 	addi	r2,r16,8
  124234:	dfc00a17 	ldw	ra,40(sp)
  124238:	df000917 	ldw	fp,36(sp)
  12423c:	ddc00817 	ldw	r23,32(sp)
  124240:	dd800717 	ldw	r22,28(sp)
  124244:	dd400617 	ldw	r21,24(sp)
  124248:	dd000517 	ldw	r20,20(sp)
  12424c:	dcc00417 	ldw	r19,16(sp)
  124250:	dc800317 	ldw	r18,12(sp)
  124254:	dc400217 	ldw	r17,8(sp)
  124258:	dc000117 	ldw	r16,4(sp)
  12425c:	dec00b04 	addi	sp,sp,44
  124260:	f800283a 	ret
  124264:	00800304 	movi	r2,12
  124268:	90800015 	stw	r2,0(r18)
  12426c:	0005883a 	mov	r2,zero
  124270:	003ff006 	br	124234 <__alt_data_end+0xfffe4b14>
  124274:	01002004 	movi	r4,128
  124278:	02001004 	movi	r8,64
  12427c:	01c00fc4 	movi	r7,63
  124280:	003f6106 	br	124008 <__alt_data_end+0xfffe48e8>
  124284:	4009883a 	mov	r4,r8
  124288:	003f7506 	br	124060 <__alt_data_end+0xfffe4940>
  12428c:	81000317 	ldw	r4,12(r16)
  124290:	003fde06 	br	12420c <__alt_data_end+0xfffe4aec>
  124294:	81c5883a 	add	r2,r16,r7
  124298:	11400117 	ldw	r5,4(r2)
  12429c:	9009883a 	mov	r4,r18
  1242a0:	29400054 	ori	r5,r5,1
  1242a4:	11400115 	stw	r5,4(r2)
  1242a8:	0126e600 	call	126e60 <__malloc_unlock>
  1242ac:	80800204 	addi	r2,r16,8
  1242b0:	003fe006 	br	124234 <__alt_data_end+0xfffe4b14>
  1242b4:	9c000217 	ldw	r16,8(r19)
  1242b8:	00bfff04 	movi	r2,-4
  1242bc:	85800117 	ldw	r22,4(r16)
  1242c0:	b0ac703a 	and	r22,r22,r2
  1242c4:	b4400336 	bltu	r22,r17,1242d4 <_malloc_r+0x344>
  1242c8:	b445c83a 	sub	r2,r22,r17
  1242cc:	00c003c4 	movi	r3,15
  1242d0:	18805d16 	blt	r3,r2,124448 <_malloc_r+0x4b8>
  1242d4:	05c004f4 	movhi	r23,19
  1242d8:	008004f4 	movhi	r2,19
  1242dc:	10aacd04 	addi	r2,r2,-21708
  1242e0:	bde3a504 	addi	r23,r23,-29036
  1242e4:	15400017 	ldw	r21,0(r2)
  1242e8:	b8c00017 	ldw	r3,0(r23)
  1242ec:	00bfffc4 	movi	r2,-1
  1242f0:	858d883a 	add	r6,r16,r22
  1242f4:	8d6b883a 	add	r21,r17,r21
  1242f8:	1880ea26 	beq	r3,r2,1246a4 <_malloc_r+0x714>
  1242fc:	ad4403c4 	addi	r21,r21,4111
  124300:	00bc0004 	movi	r2,-4096
  124304:	a8aa703a 	and	r21,r21,r2
  124308:	a80b883a 	mov	r5,r21
  12430c:	9009883a 	mov	r4,r18
  124310:	d9800015 	stw	r6,0(sp)
  124314:	01251040 	call	125104 <_sbrk_r>
  124318:	1029883a 	mov	r20,r2
  12431c:	00bfffc4 	movi	r2,-1
  124320:	d9800017 	ldw	r6,0(sp)
  124324:	a080e826 	beq	r20,r2,1246c8 <_malloc_r+0x738>
  124328:	a180a636 	bltu	r20,r6,1245c4 <_malloc_r+0x634>
  12432c:	070004f4 	movhi	fp,19
  124330:	e72ace04 	addi	fp,fp,-21704
  124334:	e0800017 	ldw	r2,0(fp)
  124338:	a887883a 	add	r3,r21,r2
  12433c:	e0c00015 	stw	r3,0(fp)
  124340:	3500e626 	beq	r6,r20,1246dc <_malloc_r+0x74c>
  124344:	b9000017 	ldw	r4,0(r23)
  124348:	00bfffc4 	movi	r2,-1
  12434c:	2080ee26 	beq	r4,r2,124708 <_malloc_r+0x778>
  124350:	a185c83a 	sub	r2,r20,r6
  124354:	10c5883a 	add	r2,r2,r3
  124358:	e0800015 	stw	r2,0(fp)
  12435c:	a0c001cc 	andi	r3,r20,7
  124360:	1800bc26 	beq	r3,zero,124654 <_malloc_r+0x6c4>
  124364:	a0e9c83a 	sub	r20,r20,r3
  124368:	00840204 	movi	r2,4104
  12436c:	a5000204 	addi	r20,r20,8
  124370:	10c7c83a 	sub	r3,r2,r3
  124374:	a545883a 	add	r2,r20,r21
  124378:	1083ffcc 	andi	r2,r2,4095
  12437c:	18abc83a 	sub	r21,r3,r2
  124380:	a80b883a 	mov	r5,r21
  124384:	9009883a 	mov	r4,r18
  124388:	01251040 	call	125104 <_sbrk_r>
  12438c:	00ffffc4 	movi	r3,-1
  124390:	10c0e126 	beq	r2,r3,124718 <_malloc_r+0x788>
  124394:	1505c83a 	sub	r2,r2,r20
  124398:	1545883a 	add	r2,r2,r21
  12439c:	10800054 	ori	r2,r2,1
  1243a0:	e0c00017 	ldw	r3,0(fp)
  1243a4:	9d000215 	stw	r20,8(r19)
  1243a8:	a0800115 	stw	r2,4(r20)
  1243ac:	a8c7883a 	add	r3,r21,r3
  1243b0:	e0c00015 	stw	r3,0(fp)
  1243b4:	84c00e26 	beq	r16,r19,1243f0 <_malloc_r+0x460>
  1243b8:	018003c4 	movi	r6,15
  1243bc:	3580a72e 	bgeu	r6,r22,12465c <_malloc_r+0x6cc>
  1243c0:	81400117 	ldw	r5,4(r16)
  1243c4:	013ffe04 	movi	r4,-8
  1243c8:	b0bffd04 	addi	r2,r22,-12
  1243cc:	1104703a 	and	r2,r2,r4
  1243d0:	2900004c 	andi	r4,r5,1
  1243d4:	2088b03a 	or	r4,r4,r2
  1243d8:	81000115 	stw	r4,4(r16)
  1243dc:	01400144 	movi	r5,5
  1243e0:	8089883a 	add	r4,r16,r2
  1243e4:	21400115 	stw	r5,4(r4)
  1243e8:	21400215 	stw	r5,8(r4)
  1243ec:	3080cd36 	bltu	r6,r2,124724 <_malloc_r+0x794>
  1243f0:	008004f4 	movhi	r2,19
  1243f4:	10aacc04 	addi	r2,r2,-21712
  1243f8:	11000017 	ldw	r4,0(r2)
  1243fc:	20c0012e 	bgeu	r4,r3,124404 <_malloc_r+0x474>
  124400:	10c00015 	stw	r3,0(r2)
  124404:	008004f4 	movhi	r2,19
  124408:	10aacb04 	addi	r2,r2,-21716
  12440c:	11000017 	ldw	r4,0(r2)
  124410:	9c000217 	ldw	r16,8(r19)
  124414:	20c0012e 	bgeu	r4,r3,12441c <_malloc_r+0x48c>
  124418:	10c00015 	stw	r3,0(r2)
  12441c:	80c00117 	ldw	r3,4(r16)
  124420:	00bfff04 	movi	r2,-4
  124424:	1886703a 	and	r3,r3,r2
  124428:	1c45c83a 	sub	r2,r3,r17
  12442c:	1c400236 	bltu	r3,r17,124438 <_malloc_r+0x4a8>
  124430:	00c003c4 	movi	r3,15
  124434:	18800416 	blt	r3,r2,124448 <_malloc_r+0x4b8>
  124438:	9009883a 	mov	r4,r18
  12443c:	0126e600 	call	126e60 <__malloc_unlock>
  124440:	0005883a 	mov	r2,zero
  124444:	003f7b06 	br	124234 <__alt_data_end+0xfffe4b14>
  124448:	88c00054 	ori	r3,r17,1
  12444c:	80c00115 	stw	r3,4(r16)
  124450:	8463883a 	add	r17,r16,r17
  124454:	10800054 	ori	r2,r2,1
  124458:	9c400215 	stw	r17,8(r19)
  12445c:	88800115 	stw	r2,4(r17)
  124460:	9009883a 	mov	r4,r18
  124464:	0126e600 	call	126e60 <__malloc_unlock>
  124468:	80800204 	addi	r2,r16,8
  12446c:	003f7106 	br	124234 <__alt_data_end+0xfffe4b14>
  124470:	00c00504 	movi	r3,20
  124474:	18804a2e 	bgeu	r3,r2,1245a0 <_malloc_r+0x610>
  124478:	00c01504 	movi	r3,84
  12447c:	18806e36 	bltu	r3,r2,124638 <_malloc_r+0x6a8>
  124480:	8804d33a 	srli	r2,r17,12
  124484:	12001bc4 	addi	r8,r2,111
  124488:	11c01b84 	addi	r7,r2,110
  12448c:	4209883a 	add	r4,r8,r8
  124490:	003edd06 	br	124008 <__alt_data_end+0xfffe48e8>
  124494:	3804d27a 	srli	r2,r7,9
  124498:	00c00104 	movi	r3,4
  12449c:	1880442e 	bgeu	r3,r2,1245b0 <_malloc_r+0x620>
  1244a0:	00c00504 	movi	r3,20
  1244a4:	18808136 	bltu	r3,r2,1246ac <_malloc_r+0x71c>
  1244a8:	11401704 	addi	r5,r2,92
  1244ac:	10c016c4 	addi	r3,r2,91
  1244b0:	294b883a 	add	r5,r5,r5
  1244b4:	294b883a 	add	r5,r5,r5
  1244b8:	294b883a 	add	r5,r5,r5
  1244bc:	994b883a 	add	r5,r19,r5
  1244c0:	28800017 	ldw	r2,0(r5)
  1244c4:	018004f4 	movhi	r6,19
  1244c8:	297ffe04 	addi	r5,r5,-8
  1244cc:	31a29404 	addi	r6,r6,-30128
  1244d0:	28806526 	beq	r5,r2,124668 <_malloc_r+0x6d8>
  1244d4:	01bfff04 	movi	r6,-4
  1244d8:	10c00117 	ldw	r3,4(r2)
  1244dc:	1986703a 	and	r3,r3,r6
  1244e0:	38c0022e 	bgeu	r7,r3,1244ec <_malloc_r+0x55c>
  1244e4:	10800217 	ldw	r2,8(r2)
  1244e8:	28bffb1e 	bne	r5,r2,1244d8 <__alt_data_end+0xfffe4db8>
  1244ec:	11400317 	ldw	r5,12(r2)
  1244f0:	98c00117 	ldw	r3,4(r19)
  1244f4:	81400315 	stw	r5,12(r16)
  1244f8:	80800215 	stw	r2,8(r16)
  1244fc:	2c000215 	stw	r16,8(r5)
  124500:	14000315 	stw	r16,12(r2)
  124504:	003ef806 	br	1240e8 <__alt_data_end+0xfffe49c8>
  124508:	88c00054 	ori	r3,r17,1
  12450c:	80c00115 	stw	r3,4(r16)
  124510:	8463883a 	add	r17,r16,r17
  124514:	34400515 	stw	r17,20(r6)
  124518:	34400415 	stw	r17,16(r6)
  12451c:	10c00054 	ori	r3,r2,1
  124520:	8a000315 	stw	r8,12(r17)
  124524:	8a000215 	stw	r8,8(r17)
  124528:	88c00115 	stw	r3,4(r17)
  12452c:	88a3883a 	add	r17,r17,r2
  124530:	88800015 	stw	r2,0(r17)
  124534:	9009883a 	mov	r4,r18
  124538:	0126e600 	call	126e60 <__malloc_unlock>
  12453c:	80800204 	addi	r2,r16,8
  124540:	003f3c06 	br	124234 <__alt_data_end+0xfffe4b14>
  124544:	30c00117 	ldw	r3,4(r6)
  124548:	003ee706 	br	1240e8 <__alt_data_end+0xfffe49c8>
  12454c:	5ac00044 	addi	r11,r11,1
  124550:	588000cc 	andi	r2,r11,3
  124554:	31800204 	addi	r6,r6,8
  124558:	103efd1e 	bne	r2,zero,124150 <__alt_data_end+0xfffe4a30>
  12455c:	00002406 	br	1245f0 <_malloc_r+0x660>
  124560:	14000317 	ldw	r16,12(r2)
  124564:	143f251e 	bne	r2,r16,1241fc <__alt_data_end+0xfffe4adc>
  124568:	21000084 	addi	r4,r4,2
  12456c:	003ebc06 	br	124060 <__alt_data_end+0xfffe4940>
  124570:	8085883a 	add	r2,r16,r2
  124574:	10c00117 	ldw	r3,4(r2)
  124578:	81000317 	ldw	r4,12(r16)
  12457c:	81400217 	ldw	r5,8(r16)
  124580:	18c00054 	ori	r3,r3,1
  124584:	10c00115 	stw	r3,4(r2)
  124588:	29000315 	stw	r4,12(r5)
  12458c:	21400215 	stw	r5,8(r4)
  124590:	9009883a 	mov	r4,r18
  124594:	0126e600 	call	126e60 <__malloc_unlock>
  124598:	80800204 	addi	r2,r16,8
  12459c:	003f2506 	br	124234 <__alt_data_end+0xfffe4b14>
  1245a0:	12001704 	addi	r8,r2,92
  1245a4:	11c016c4 	addi	r7,r2,91
  1245a8:	4209883a 	add	r4,r8,r8
  1245ac:	003e9606 	br	124008 <__alt_data_end+0xfffe48e8>
  1245b0:	3804d1ba 	srli	r2,r7,6
  1245b4:	11400e44 	addi	r5,r2,57
  1245b8:	10c00e04 	addi	r3,r2,56
  1245bc:	294b883a 	add	r5,r5,r5
  1245c0:	003fbc06 	br	1244b4 <__alt_data_end+0xfffe4d94>
  1245c4:	84ff5926 	beq	r16,r19,12432c <__alt_data_end+0xfffe4c0c>
  1245c8:	008004f4 	movhi	r2,19
  1245cc:	10a29404 	addi	r2,r2,-30128
  1245d0:	14000217 	ldw	r16,8(r2)
  1245d4:	00bfff04 	movi	r2,-4
  1245d8:	80c00117 	ldw	r3,4(r16)
  1245dc:	1886703a 	and	r3,r3,r2
  1245e0:	003f9106 	br	124428 <__alt_data_end+0xfffe4d08>
  1245e4:	60800217 	ldw	r2,8(r12)
  1245e8:	213fffc4 	addi	r4,r4,-1
  1245ec:	1300651e 	bne	r2,r12,124784 <_malloc_r+0x7f4>
  1245f0:	208000cc 	andi	r2,r4,3
  1245f4:	633ffe04 	addi	r12,r12,-8
  1245f8:	103ffa1e 	bne	r2,zero,1245e4 <__alt_data_end+0xfffe4ec4>
  1245fc:	98800117 	ldw	r2,4(r19)
  124600:	0146303a 	nor	r3,zero,r5
  124604:	1884703a 	and	r2,r3,r2
  124608:	98800115 	stw	r2,4(r19)
  12460c:	294b883a 	add	r5,r5,r5
  124610:	117f2836 	bltu	r2,r5,1242b4 <__alt_data_end+0xfffe4b94>
  124614:	283f2726 	beq	r5,zero,1242b4 <__alt_data_end+0xfffe4b94>
  124618:	2886703a 	and	r3,r5,r2
  12461c:	5809883a 	mov	r4,r11
  124620:	183ec31e 	bne	r3,zero,124130 <__alt_data_end+0xfffe4a10>
  124624:	294b883a 	add	r5,r5,r5
  124628:	2886703a 	and	r3,r5,r2
  12462c:	21000104 	addi	r4,r4,4
  124630:	183ffc26 	beq	r3,zero,124624 <__alt_data_end+0xfffe4f04>
  124634:	003ebe06 	br	124130 <__alt_data_end+0xfffe4a10>
  124638:	00c05504 	movi	r3,340
  12463c:	18801236 	bltu	r3,r2,124688 <_malloc_r+0x6f8>
  124640:	8804d3fa 	srli	r2,r17,15
  124644:	12001e04 	addi	r8,r2,120
  124648:	11c01dc4 	addi	r7,r2,119
  12464c:	4209883a 	add	r4,r8,r8
  124650:	003e6d06 	br	124008 <__alt_data_end+0xfffe48e8>
  124654:	00c40004 	movi	r3,4096
  124658:	003f4606 	br	124374 <__alt_data_end+0xfffe4c54>
  12465c:	00800044 	movi	r2,1
  124660:	a0800115 	stw	r2,4(r20)
  124664:	003f7406 	br	124438 <__alt_data_end+0xfffe4d18>
  124668:	1805d0ba 	srai	r2,r3,2
  12466c:	01c00044 	movi	r7,1
  124670:	30c00117 	ldw	r3,4(r6)
  124674:	388e983a 	sll	r7,r7,r2
  124678:	2805883a 	mov	r2,r5
  12467c:	38c6b03a 	or	r3,r7,r3
  124680:	30c00115 	stw	r3,4(r6)
  124684:	003f9b06 	br	1244f4 <__alt_data_end+0xfffe4dd4>
  124688:	00c15504 	movi	r3,1364
  12468c:	18801a36 	bltu	r3,r2,1246f8 <_malloc_r+0x768>
  124690:	8804d4ba 	srli	r2,r17,18
  124694:	12001f44 	addi	r8,r2,125
  124698:	11c01f04 	addi	r7,r2,124
  12469c:	4209883a 	add	r4,r8,r8
  1246a0:	003e5906 	br	124008 <__alt_data_end+0xfffe48e8>
  1246a4:	ad400404 	addi	r21,r21,16
  1246a8:	003f1706 	br	124308 <__alt_data_end+0xfffe4be8>
  1246ac:	00c01504 	movi	r3,84
  1246b0:	18802336 	bltu	r3,r2,124740 <_malloc_r+0x7b0>
  1246b4:	3804d33a 	srli	r2,r7,12
  1246b8:	11401bc4 	addi	r5,r2,111
  1246bc:	10c01b84 	addi	r3,r2,110
  1246c0:	294b883a 	add	r5,r5,r5
  1246c4:	003f7b06 	br	1244b4 <__alt_data_end+0xfffe4d94>
  1246c8:	9c000217 	ldw	r16,8(r19)
  1246cc:	00bfff04 	movi	r2,-4
  1246d0:	80c00117 	ldw	r3,4(r16)
  1246d4:	1886703a 	and	r3,r3,r2
  1246d8:	003f5306 	br	124428 <__alt_data_end+0xfffe4d08>
  1246dc:	3083ffcc 	andi	r2,r6,4095
  1246e0:	103f181e 	bne	r2,zero,124344 <__alt_data_end+0xfffe4c24>
  1246e4:	99000217 	ldw	r4,8(r19)
  1246e8:	b545883a 	add	r2,r22,r21
  1246ec:	10800054 	ori	r2,r2,1
  1246f0:	20800115 	stw	r2,4(r4)
  1246f4:	003f3e06 	br	1243f0 <__alt_data_end+0xfffe4cd0>
  1246f8:	01003f84 	movi	r4,254
  1246fc:	02001fc4 	movi	r8,127
  124700:	01c01f84 	movi	r7,126
  124704:	003e4006 	br	124008 <__alt_data_end+0xfffe48e8>
  124708:	008004f4 	movhi	r2,19
  12470c:	10a3a504 	addi	r2,r2,-29036
  124710:	15000015 	stw	r20,0(r2)
  124714:	003f1106 	br	12435c <__alt_data_end+0xfffe4c3c>
  124718:	00800044 	movi	r2,1
  12471c:	002b883a 	mov	r21,zero
  124720:	003f1f06 	br	1243a0 <__alt_data_end+0xfffe4c80>
  124724:	81400204 	addi	r5,r16,8
  124728:	9009883a 	mov	r4,r18
  12472c:	0125d580 	call	125d58 <_free_r>
  124730:	008004f4 	movhi	r2,19
  124734:	10aace04 	addi	r2,r2,-21704
  124738:	10c00017 	ldw	r3,0(r2)
  12473c:	003f2c06 	br	1243f0 <__alt_data_end+0xfffe4cd0>
  124740:	00c05504 	movi	r3,340
  124744:	18800536 	bltu	r3,r2,12475c <_malloc_r+0x7cc>
  124748:	3804d3fa 	srli	r2,r7,15
  12474c:	11401e04 	addi	r5,r2,120
  124750:	10c01dc4 	addi	r3,r2,119
  124754:	294b883a 	add	r5,r5,r5
  124758:	003f5606 	br	1244b4 <__alt_data_end+0xfffe4d94>
  12475c:	00c15504 	movi	r3,1364
  124760:	18800536 	bltu	r3,r2,124778 <_malloc_r+0x7e8>
  124764:	3804d4ba 	srli	r2,r7,18
  124768:	11401f44 	addi	r5,r2,125
  12476c:	10c01f04 	addi	r3,r2,124
  124770:	294b883a 	add	r5,r5,r5
  124774:	003f4f06 	br	1244b4 <__alt_data_end+0xfffe4d94>
  124778:	01403f84 	movi	r5,254
  12477c:	00c01f84 	movi	r3,126
  124780:	003f4c06 	br	1244b4 <__alt_data_end+0xfffe4d94>
  124784:	98800117 	ldw	r2,4(r19)
  124788:	003fa006 	br	12460c <__alt_data_end+0xfffe4eec>
  12478c:	8808d0fa 	srli	r4,r17,3
  124790:	20800044 	addi	r2,r4,1
  124794:	1085883a 	add	r2,r2,r2
  124798:	003e9006 	br	1241dc <__alt_data_end+0xfffe4abc>

0012479c <memchr>:
  12479c:	208000cc 	andi	r2,r4,3
  1247a0:	280f883a 	mov	r7,r5
  1247a4:	10003426 	beq	r2,zero,124878 <memchr+0xdc>
  1247a8:	30bfffc4 	addi	r2,r6,-1
  1247ac:	30001a26 	beq	r6,zero,124818 <memchr+0x7c>
  1247b0:	20c00003 	ldbu	r3,0(r4)
  1247b4:	29803fcc 	andi	r6,r5,255
  1247b8:	30c0051e 	bne	r6,r3,1247d0 <memchr+0x34>
  1247bc:	00001806 	br	124820 <memchr+0x84>
  1247c0:	10001526 	beq	r2,zero,124818 <memchr+0x7c>
  1247c4:	20c00003 	ldbu	r3,0(r4)
  1247c8:	10bfffc4 	addi	r2,r2,-1
  1247cc:	30c01426 	beq	r6,r3,124820 <memchr+0x84>
  1247d0:	21000044 	addi	r4,r4,1
  1247d4:	20c000cc 	andi	r3,r4,3
  1247d8:	183ff91e 	bne	r3,zero,1247c0 <__alt_data_end+0xfffe50a0>
  1247dc:	020000c4 	movi	r8,3
  1247e0:	40801136 	bltu	r8,r2,124828 <memchr+0x8c>
  1247e4:	10000c26 	beq	r2,zero,124818 <memchr+0x7c>
  1247e8:	20c00003 	ldbu	r3,0(r4)
  1247ec:	29403fcc 	andi	r5,r5,255
  1247f0:	28c00b26 	beq	r5,r3,124820 <memchr+0x84>
  1247f4:	20c00044 	addi	r3,r4,1
  1247f8:	39803fcc 	andi	r6,r7,255
  1247fc:	2089883a 	add	r4,r4,r2
  124800:	00000306 	br	124810 <memchr+0x74>
  124804:	18c00044 	addi	r3,r3,1
  124808:	197fffc3 	ldbu	r5,-1(r3)
  12480c:	31400526 	beq	r6,r5,124824 <memchr+0x88>
  124810:	1805883a 	mov	r2,r3
  124814:	20fffb1e 	bne	r4,r3,124804 <__alt_data_end+0xfffe50e4>
  124818:	0005883a 	mov	r2,zero
  12481c:	f800283a 	ret
  124820:	2005883a 	mov	r2,r4
  124824:	f800283a 	ret
  124828:	28c03fcc 	andi	r3,r5,255
  12482c:	1812923a 	slli	r9,r3,8
  124830:	02ffbff4 	movhi	r11,65279
  124834:	02a02074 	movhi	r10,32897
  124838:	48d2b03a 	or	r9,r9,r3
  12483c:	4806943a 	slli	r3,r9,16
  124840:	5affbfc4 	addi	r11,r11,-257
  124844:	52a02004 	addi	r10,r10,-32640
  124848:	48d2b03a 	or	r9,r9,r3
  12484c:	20c00017 	ldw	r3,0(r4)
  124850:	48c6f03a 	xor	r3,r9,r3
  124854:	1acd883a 	add	r6,r3,r11
  124858:	00c6303a 	nor	r3,zero,r3
  12485c:	30c6703a 	and	r3,r6,r3
  124860:	1a86703a 	and	r3,r3,r10
  124864:	183fe01e 	bne	r3,zero,1247e8 <__alt_data_end+0xfffe50c8>
  124868:	10bfff04 	addi	r2,r2,-4
  12486c:	21000104 	addi	r4,r4,4
  124870:	40bff636 	bltu	r8,r2,12484c <__alt_data_end+0xfffe512c>
  124874:	003fdb06 	br	1247e4 <__alt_data_end+0xfffe50c4>
  124878:	3005883a 	mov	r2,r6
  12487c:	003fd706 	br	1247dc <__alt_data_end+0xfffe50bc>

00124880 <memcmp>:
  124880:	01c000c4 	movi	r7,3
  124884:	3980192e 	bgeu	r7,r6,1248ec <memcmp+0x6c>
  124888:	2144b03a 	or	r2,r4,r5
  12488c:	11c4703a 	and	r2,r2,r7
  124890:	10000f26 	beq	r2,zero,1248d0 <memcmp+0x50>
  124894:	20800003 	ldbu	r2,0(r4)
  124898:	28c00003 	ldbu	r3,0(r5)
  12489c:	10c0151e 	bne	r2,r3,1248f4 <memcmp+0x74>
  1248a0:	31bfff84 	addi	r6,r6,-2
  1248a4:	01ffffc4 	movi	r7,-1
  1248a8:	00000406 	br	1248bc <memcmp+0x3c>
  1248ac:	20800003 	ldbu	r2,0(r4)
  1248b0:	28c00003 	ldbu	r3,0(r5)
  1248b4:	31bfffc4 	addi	r6,r6,-1
  1248b8:	10c00e1e 	bne	r2,r3,1248f4 <memcmp+0x74>
  1248bc:	21000044 	addi	r4,r4,1
  1248c0:	29400044 	addi	r5,r5,1
  1248c4:	31fff91e 	bne	r6,r7,1248ac <__alt_data_end+0xfffe518c>
  1248c8:	0005883a 	mov	r2,zero
  1248cc:	f800283a 	ret
  1248d0:	20c00017 	ldw	r3,0(r4)
  1248d4:	28800017 	ldw	r2,0(r5)
  1248d8:	18bfee1e 	bne	r3,r2,124894 <__alt_data_end+0xfffe5174>
  1248dc:	31bfff04 	addi	r6,r6,-4
  1248e0:	21000104 	addi	r4,r4,4
  1248e4:	29400104 	addi	r5,r5,4
  1248e8:	39bff936 	bltu	r7,r6,1248d0 <__alt_data_end+0xfffe51b0>
  1248ec:	303fe91e 	bne	r6,zero,124894 <__alt_data_end+0xfffe5174>
  1248f0:	003ff506 	br	1248c8 <__alt_data_end+0xfffe51a8>
  1248f4:	10c5c83a 	sub	r2,r2,r3
  1248f8:	f800283a 	ret

001248fc <memcpy>:
  1248fc:	defffd04 	addi	sp,sp,-12
  124900:	dfc00215 	stw	ra,8(sp)
  124904:	dc400115 	stw	r17,4(sp)
  124908:	dc000015 	stw	r16,0(sp)
  12490c:	00c003c4 	movi	r3,15
  124910:	2005883a 	mov	r2,r4
  124914:	1980452e 	bgeu	r3,r6,124a2c <memcpy+0x130>
  124918:	2906b03a 	or	r3,r5,r4
  12491c:	18c000cc 	andi	r3,r3,3
  124920:	1800441e 	bne	r3,zero,124a34 <memcpy+0x138>
  124924:	347ffc04 	addi	r17,r6,-16
  124928:	8822d13a 	srli	r17,r17,4
  12492c:	28c00104 	addi	r3,r5,4
  124930:	23400104 	addi	r13,r4,4
  124934:	8820913a 	slli	r16,r17,4
  124938:	2b000204 	addi	r12,r5,8
  12493c:	22c00204 	addi	r11,r4,8
  124940:	84000504 	addi	r16,r16,20
  124944:	2a800304 	addi	r10,r5,12
  124948:	22400304 	addi	r9,r4,12
  12494c:	2c21883a 	add	r16,r5,r16
  124950:	2811883a 	mov	r8,r5
  124954:	200f883a 	mov	r7,r4
  124958:	41000017 	ldw	r4,0(r8)
  12495c:	1fc00017 	ldw	ra,0(r3)
  124960:	63c00017 	ldw	r15,0(r12)
  124964:	39000015 	stw	r4,0(r7)
  124968:	53800017 	ldw	r14,0(r10)
  12496c:	6fc00015 	stw	ra,0(r13)
  124970:	5bc00015 	stw	r15,0(r11)
  124974:	4b800015 	stw	r14,0(r9)
  124978:	18c00404 	addi	r3,r3,16
  12497c:	39c00404 	addi	r7,r7,16
  124980:	42000404 	addi	r8,r8,16
  124984:	6b400404 	addi	r13,r13,16
  124988:	63000404 	addi	r12,r12,16
  12498c:	5ac00404 	addi	r11,r11,16
  124990:	52800404 	addi	r10,r10,16
  124994:	4a400404 	addi	r9,r9,16
  124998:	1c3fef1e 	bne	r3,r16,124958 <__alt_data_end+0xfffe5238>
  12499c:	89c00044 	addi	r7,r17,1
  1249a0:	380e913a 	slli	r7,r7,4
  1249a4:	310003cc 	andi	r4,r6,15
  1249a8:	02c000c4 	movi	r11,3
  1249ac:	11c7883a 	add	r3,r2,r7
  1249b0:	29cb883a 	add	r5,r5,r7
  1249b4:	5900212e 	bgeu	r11,r4,124a3c <memcpy+0x140>
  1249b8:	1813883a 	mov	r9,r3
  1249bc:	2811883a 	mov	r8,r5
  1249c0:	200f883a 	mov	r7,r4
  1249c4:	42800017 	ldw	r10,0(r8)
  1249c8:	4a400104 	addi	r9,r9,4
  1249cc:	39ffff04 	addi	r7,r7,-4
  1249d0:	4abfff15 	stw	r10,-4(r9)
  1249d4:	42000104 	addi	r8,r8,4
  1249d8:	59fffa36 	bltu	r11,r7,1249c4 <__alt_data_end+0xfffe52a4>
  1249dc:	213fff04 	addi	r4,r4,-4
  1249e0:	2008d0ba 	srli	r4,r4,2
  1249e4:	318000cc 	andi	r6,r6,3
  1249e8:	21000044 	addi	r4,r4,1
  1249ec:	2109883a 	add	r4,r4,r4
  1249f0:	2109883a 	add	r4,r4,r4
  1249f4:	1907883a 	add	r3,r3,r4
  1249f8:	290b883a 	add	r5,r5,r4
  1249fc:	30000626 	beq	r6,zero,124a18 <memcpy+0x11c>
  124a00:	198d883a 	add	r6,r3,r6
  124a04:	29c00003 	ldbu	r7,0(r5)
  124a08:	18c00044 	addi	r3,r3,1
  124a0c:	29400044 	addi	r5,r5,1
  124a10:	19ffffc5 	stb	r7,-1(r3)
  124a14:	19bffb1e 	bne	r3,r6,124a04 <__alt_data_end+0xfffe52e4>
  124a18:	dfc00217 	ldw	ra,8(sp)
  124a1c:	dc400117 	ldw	r17,4(sp)
  124a20:	dc000017 	ldw	r16,0(sp)
  124a24:	dec00304 	addi	sp,sp,12
  124a28:	f800283a 	ret
  124a2c:	2007883a 	mov	r3,r4
  124a30:	003ff206 	br	1249fc <__alt_data_end+0xfffe52dc>
  124a34:	2007883a 	mov	r3,r4
  124a38:	003ff106 	br	124a00 <__alt_data_end+0xfffe52e0>
  124a3c:	200d883a 	mov	r6,r4
  124a40:	003fee06 	br	1249fc <__alt_data_end+0xfffe52dc>

00124a44 <memmove>:
  124a44:	2005883a 	mov	r2,r4
  124a48:	29000b2e 	bgeu	r5,r4,124a78 <memmove+0x34>
  124a4c:	298f883a 	add	r7,r5,r6
  124a50:	21c0092e 	bgeu	r4,r7,124a78 <memmove+0x34>
  124a54:	2187883a 	add	r3,r4,r6
  124a58:	198bc83a 	sub	r5,r3,r6
  124a5c:	30004826 	beq	r6,zero,124b80 <memmove+0x13c>
  124a60:	39ffffc4 	addi	r7,r7,-1
  124a64:	39000003 	ldbu	r4,0(r7)
  124a68:	18ffffc4 	addi	r3,r3,-1
  124a6c:	19000005 	stb	r4,0(r3)
  124a70:	28fffb1e 	bne	r5,r3,124a60 <__alt_data_end+0xfffe5340>
  124a74:	f800283a 	ret
  124a78:	00c003c4 	movi	r3,15
  124a7c:	1980412e 	bgeu	r3,r6,124b84 <memmove+0x140>
  124a80:	2886b03a 	or	r3,r5,r2
  124a84:	18c000cc 	andi	r3,r3,3
  124a88:	1800401e 	bne	r3,zero,124b8c <memmove+0x148>
  124a8c:	33fffc04 	addi	r15,r6,-16
  124a90:	781ed13a 	srli	r15,r15,4
  124a94:	28c00104 	addi	r3,r5,4
  124a98:	13400104 	addi	r13,r2,4
  124a9c:	781c913a 	slli	r14,r15,4
  124aa0:	2b000204 	addi	r12,r5,8
  124aa4:	12c00204 	addi	r11,r2,8
  124aa8:	73800504 	addi	r14,r14,20
  124aac:	2a800304 	addi	r10,r5,12
  124ab0:	12400304 	addi	r9,r2,12
  124ab4:	2b9d883a 	add	r14,r5,r14
  124ab8:	2811883a 	mov	r8,r5
  124abc:	100f883a 	mov	r7,r2
  124ac0:	41000017 	ldw	r4,0(r8)
  124ac4:	39c00404 	addi	r7,r7,16
  124ac8:	18c00404 	addi	r3,r3,16
  124acc:	393ffc15 	stw	r4,-16(r7)
  124ad0:	193ffc17 	ldw	r4,-16(r3)
  124ad4:	6b400404 	addi	r13,r13,16
  124ad8:	5ac00404 	addi	r11,r11,16
  124adc:	693ffc15 	stw	r4,-16(r13)
  124ae0:	61000017 	ldw	r4,0(r12)
  124ae4:	4a400404 	addi	r9,r9,16
  124ae8:	42000404 	addi	r8,r8,16
  124aec:	593ffc15 	stw	r4,-16(r11)
  124af0:	51000017 	ldw	r4,0(r10)
  124af4:	63000404 	addi	r12,r12,16
  124af8:	52800404 	addi	r10,r10,16
  124afc:	493ffc15 	stw	r4,-16(r9)
  124b00:	1bbfef1e 	bne	r3,r14,124ac0 <__alt_data_end+0xfffe53a0>
  124b04:	79000044 	addi	r4,r15,1
  124b08:	2008913a 	slli	r4,r4,4
  124b0c:	328003cc 	andi	r10,r6,15
  124b10:	02c000c4 	movi	r11,3
  124b14:	1107883a 	add	r3,r2,r4
  124b18:	290b883a 	add	r5,r5,r4
  124b1c:	5a801e2e 	bgeu	r11,r10,124b98 <memmove+0x154>
  124b20:	1813883a 	mov	r9,r3
  124b24:	2811883a 	mov	r8,r5
  124b28:	500f883a 	mov	r7,r10
  124b2c:	41000017 	ldw	r4,0(r8)
  124b30:	4a400104 	addi	r9,r9,4
  124b34:	39ffff04 	addi	r7,r7,-4
  124b38:	493fff15 	stw	r4,-4(r9)
  124b3c:	42000104 	addi	r8,r8,4
  124b40:	59fffa36 	bltu	r11,r7,124b2c <__alt_data_end+0xfffe540c>
  124b44:	513fff04 	addi	r4,r10,-4
  124b48:	2008d0ba 	srli	r4,r4,2
  124b4c:	318000cc 	andi	r6,r6,3
  124b50:	21000044 	addi	r4,r4,1
  124b54:	2109883a 	add	r4,r4,r4
  124b58:	2109883a 	add	r4,r4,r4
  124b5c:	1907883a 	add	r3,r3,r4
  124b60:	290b883a 	add	r5,r5,r4
  124b64:	30000b26 	beq	r6,zero,124b94 <memmove+0x150>
  124b68:	198d883a 	add	r6,r3,r6
  124b6c:	29c00003 	ldbu	r7,0(r5)
  124b70:	18c00044 	addi	r3,r3,1
  124b74:	29400044 	addi	r5,r5,1
  124b78:	19ffffc5 	stb	r7,-1(r3)
  124b7c:	19bffb1e 	bne	r3,r6,124b6c <__alt_data_end+0xfffe544c>
  124b80:	f800283a 	ret
  124b84:	1007883a 	mov	r3,r2
  124b88:	003ff606 	br	124b64 <__alt_data_end+0xfffe5444>
  124b8c:	1007883a 	mov	r3,r2
  124b90:	003ff506 	br	124b68 <__alt_data_end+0xfffe5448>
  124b94:	f800283a 	ret
  124b98:	500d883a 	mov	r6,r10
  124b9c:	003ff106 	br	124b64 <__alt_data_end+0xfffe5444>

00124ba0 <_realloc_r>:
  124ba0:	defff604 	addi	sp,sp,-40
  124ba4:	dc800215 	stw	r18,8(sp)
  124ba8:	dfc00915 	stw	ra,36(sp)
  124bac:	df000815 	stw	fp,32(sp)
  124bb0:	ddc00715 	stw	r23,28(sp)
  124bb4:	dd800615 	stw	r22,24(sp)
  124bb8:	dd400515 	stw	r21,20(sp)
  124bbc:	dd000415 	stw	r20,16(sp)
  124bc0:	dcc00315 	stw	r19,12(sp)
  124bc4:	dc400115 	stw	r17,4(sp)
  124bc8:	dc000015 	stw	r16,0(sp)
  124bcc:	3025883a 	mov	r18,r6
  124bd0:	2800b726 	beq	r5,zero,124eb0 <_realloc_r+0x310>
  124bd4:	282b883a 	mov	r21,r5
  124bd8:	2029883a 	mov	r20,r4
  124bdc:	0126e3c0 	call	126e3c <__malloc_lock>
  124be0:	a8bfff17 	ldw	r2,-4(r21)
  124be4:	043fff04 	movi	r16,-4
  124be8:	90c002c4 	addi	r3,r18,11
  124bec:	01000584 	movi	r4,22
  124bf0:	acfffe04 	addi	r19,r21,-8
  124bf4:	1420703a 	and	r16,r2,r16
  124bf8:	20c0332e 	bgeu	r4,r3,124cc8 <_realloc_r+0x128>
  124bfc:	047ffe04 	movi	r17,-8
  124c00:	1c62703a 	and	r17,r3,r17
  124c04:	8807883a 	mov	r3,r17
  124c08:	88005816 	blt	r17,zero,124d6c <_realloc_r+0x1cc>
  124c0c:	8c805736 	bltu	r17,r18,124d6c <_realloc_r+0x1cc>
  124c10:	80c0300e 	bge	r16,r3,124cd4 <_realloc_r+0x134>
  124c14:	070004f4 	movhi	fp,19
  124c18:	e7229404 	addi	fp,fp,-30128
  124c1c:	e1c00217 	ldw	r7,8(fp)
  124c20:	9c09883a 	add	r4,r19,r16
  124c24:	22000117 	ldw	r8,4(r4)
  124c28:	21c06326 	beq	r4,r7,124db8 <_realloc_r+0x218>
  124c2c:	017fff84 	movi	r5,-2
  124c30:	414a703a 	and	r5,r8,r5
  124c34:	214b883a 	add	r5,r4,r5
  124c38:	29800117 	ldw	r6,4(r5)
  124c3c:	3180004c 	andi	r6,r6,1
  124c40:	30003f26 	beq	r6,zero,124d40 <_realloc_r+0x1a0>
  124c44:	1080004c 	andi	r2,r2,1
  124c48:	10008326 	beq	r2,zero,124e58 <_realloc_r+0x2b8>
  124c4c:	900b883a 	mov	r5,r18
  124c50:	a009883a 	mov	r4,r20
  124c54:	0123f900 	call	123f90 <_malloc_r>
  124c58:	1025883a 	mov	r18,r2
  124c5c:	10011e26 	beq	r2,zero,1250d8 <_realloc_r+0x538>
  124c60:	a93fff17 	ldw	r4,-4(r21)
  124c64:	10fffe04 	addi	r3,r2,-8
  124c68:	00bfff84 	movi	r2,-2
  124c6c:	2084703a 	and	r2,r4,r2
  124c70:	9885883a 	add	r2,r19,r2
  124c74:	1880ee26 	beq	r3,r2,125030 <_realloc_r+0x490>
  124c78:	81bfff04 	addi	r6,r16,-4
  124c7c:	00800904 	movi	r2,36
  124c80:	1180b836 	bltu	r2,r6,124f64 <_realloc_r+0x3c4>
  124c84:	00c004c4 	movi	r3,19
  124c88:	19809636 	bltu	r3,r6,124ee4 <_realloc_r+0x344>
  124c8c:	9005883a 	mov	r2,r18
  124c90:	a807883a 	mov	r3,r21
  124c94:	19000017 	ldw	r4,0(r3)
  124c98:	11000015 	stw	r4,0(r2)
  124c9c:	19000117 	ldw	r4,4(r3)
  124ca0:	11000115 	stw	r4,4(r2)
  124ca4:	18c00217 	ldw	r3,8(r3)
  124ca8:	10c00215 	stw	r3,8(r2)
  124cac:	a80b883a 	mov	r5,r21
  124cb0:	a009883a 	mov	r4,r20
  124cb4:	0125d580 	call	125d58 <_free_r>
  124cb8:	a009883a 	mov	r4,r20
  124cbc:	0126e600 	call	126e60 <__malloc_unlock>
  124cc0:	9005883a 	mov	r2,r18
  124cc4:	00001206 	br	124d10 <_realloc_r+0x170>
  124cc8:	00c00404 	movi	r3,16
  124ccc:	1823883a 	mov	r17,r3
  124cd0:	003fce06 	br	124c0c <__alt_data_end+0xfffe54ec>
  124cd4:	a825883a 	mov	r18,r21
  124cd8:	8445c83a 	sub	r2,r16,r17
  124cdc:	00c003c4 	movi	r3,15
  124ce0:	18802636 	bltu	r3,r2,124d7c <_realloc_r+0x1dc>
  124ce4:	99800117 	ldw	r6,4(r19)
  124ce8:	9c07883a 	add	r3,r19,r16
  124cec:	3180004c 	andi	r6,r6,1
  124cf0:	3420b03a 	or	r16,r6,r16
  124cf4:	9c000115 	stw	r16,4(r19)
  124cf8:	18800117 	ldw	r2,4(r3)
  124cfc:	10800054 	ori	r2,r2,1
  124d00:	18800115 	stw	r2,4(r3)
  124d04:	a009883a 	mov	r4,r20
  124d08:	0126e600 	call	126e60 <__malloc_unlock>
  124d0c:	9005883a 	mov	r2,r18
  124d10:	dfc00917 	ldw	ra,36(sp)
  124d14:	df000817 	ldw	fp,32(sp)
  124d18:	ddc00717 	ldw	r23,28(sp)
  124d1c:	dd800617 	ldw	r22,24(sp)
  124d20:	dd400517 	ldw	r21,20(sp)
  124d24:	dd000417 	ldw	r20,16(sp)
  124d28:	dcc00317 	ldw	r19,12(sp)
  124d2c:	dc800217 	ldw	r18,8(sp)
  124d30:	dc400117 	ldw	r17,4(sp)
  124d34:	dc000017 	ldw	r16,0(sp)
  124d38:	dec00a04 	addi	sp,sp,40
  124d3c:	f800283a 	ret
  124d40:	017fff04 	movi	r5,-4
  124d44:	414a703a 	and	r5,r8,r5
  124d48:	814d883a 	add	r6,r16,r5
  124d4c:	30c01f16 	blt	r6,r3,124dcc <_realloc_r+0x22c>
  124d50:	20800317 	ldw	r2,12(r4)
  124d54:	20c00217 	ldw	r3,8(r4)
  124d58:	a825883a 	mov	r18,r21
  124d5c:	3021883a 	mov	r16,r6
  124d60:	18800315 	stw	r2,12(r3)
  124d64:	10c00215 	stw	r3,8(r2)
  124d68:	003fdb06 	br	124cd8 <__alt_data_end+0xfffe55b8>
  124d6c:	00800304 	movi	r2,12
  124d70:	a0800015 	stw	r2,0(r20)
  124d74:	0005883a 	mov	r2,zero
  124d78:	003fe506 	br	124d10 <__alt_data_end+0xfffe55f0>
  124d7c:	98c00117 	ldw	r3,4(r19)
  124d80:	9c4b883a 	add	r5,r19,r17
  124d84:	11000054 	ori	r4,r2,1
  124d88:	18c0004c 	andi	r3,r3,1
  124d8c:	1c62b03a 	or	r17,r3,r17
  124d90:	9c400115 	stw	r17,4(r19)
  124d94:	29000115 	stw	r4,4(r5)
  124d98:	2885883a 	add	r2,r5,r2
  124d9c:	10c00117 	ldw	r3,4(r2)
  124da0:	29400204 	addi	r5,r5,8
  124da4:	a009883a 	mov	r4,r20
  124da8:	18c00054 	ori	r3,r3,1
  124dac:	10c00115 	stw	r3,4(r2)
  124db0:	0125d580 	call	125d58 <_free_r>
  124db4:	003fd306 	br	124d04 <__alt_data_end+0xfffe55e4>
  124db8:	017fff04 	movi	r5,-4
  124dbc:	414a703a 	and	r5,r8,r5
  124dc0:	89800404 	addi	r6,r17,16
  124dc4:	8151883a 	add	r8,r16,r5
  124dc8:	4180590e 	bge	r8,r6,124f30 <_realloc_r+0x390>
  124dcc:	1080004c 	andi	r2,r2,1
  124dd0:	103f9e1e 	bne	r2,zero,124c4c <__alt_data_end+0xfffe552c>
  124dd4:	adbffe17 	ldw	r22,-8(r21)
  124dd8:	00bfff04 	movi	r2,-4
  124ddc:	9dadc83a 	sub	r22,r19,r22
  124de0:	b1800117 	ldw	r6,4(r22)
  124de4:	3084703a 	and	r2,r6,r2
  124de8:	20002026 	beq	r4,zero,124e6c <_realloc_r+0x2cc>
  124dec:	80af883a 	add	r23,r16,r2
  124df0:	b96f883a 	add	r23,r23,r5
  124df4:	21c05f26 	beq	r4,r7,124f74 <_realloc_r+0x3d4>
  124df8:	b8c01c16 	blt	r23,r3,124e6c <_realloc_r+0x2cc>
  124dfc:	20800317 	ldw	r2,12(r4)
  124e00:	20c00217 	ldw	r3,8(r4)
  124e04:	81bfff04 	addi	r6,r16,-4
  124e08:	01000904 	movi	r4,36
  124e0c:	18800315 	stw	r2,12(r3)
  124e10:	10c00215 	stw	r3,8(r2)
  124e14:	b0c00217 	ldw	r3,8(r22)
  124e18:	b0800317 	ldw	r2,12(r22)
  124e1c:	b4800204 	addi	r18,r22,8
  124e20:	18800315 	stw	r2,12(r3)
  124e24:	10c00215 	stw	r3,8(r2)
  124e28:	21801b36 	bltu	r4,r6,124e98 <_realloc_r+0x2f8>
  124e2c:	008004c4 	movi	r2,19
  124e30:	1180352e 	bgeu	r2,r6,124f08 <_realloc_r+0x368>
  124e34:	a8800017 	ldw	r2,0(r21)
  124e38:	b0800215 	stw	r2,8(r22)
  124e3c:	a8800117 	ldw	r2,4(r21)
  124e40:	b0800315 	stw	r2,12(r22)
  124e44:	008006c4 	movi	r2,27
  124e48:	11807f36 	bltu	r2,r6,125048 <_realloc_r+0x4a8>
  124e4c:	b0800404 	addi	r2,r22,16
  124e50:	ad400204 	addi	r21,r21,8
  124e54:	00002d06 	br	124f0c <_realloc_r+0x36c>
  124e58:	adbffe17 	ldw	r22,-8(r21)
  124e5c:	00bfff04 	movi	r2,-4
  124e60:	9dadc83a 	sub	r22,r19,r22
  124e64:	b1000117 	ldw	r4,4(r22)
  124e68:	2084703a 	and	r2,r4,r2
  124e6c:	b03f7726 	beq	r22,zero,124c4c <__alt_data_end+0xfffe552c>
  124e70:	80af883a 	add	r23,r16,r2
  124e74:	b8ff7516 	blt	r23,r3,124c4c <__alt_data_end+0xfffe552c>
  124e78:	b0800317 	ldw	r2,12(r22)
  124e7c:	b0c00217 	ldw	r3,8(r22)
  124e80:	81bfff04 	addi	r6,r16,-4
  124e84:	01000904 	movi	r4,36
  124e88:	18800315 	stw	r2,12(r3)
  124e8c:	10c00215 	stw	r3,8(r2)
  124e90:	b4800204 	addi	r18,r22,8
  124e94:	21bfe52e 	bgeu	r4,r6,124e2c <__alt_data_end+0xfffe570c>
  124e98:	a80b883a 	mov	r5,r21
  124e9c:	9009883a 	mov	r4,r18
  124ea0:	0124a440 	call	124a44 <memmove>
  124ea4:	b821883a 	mov	r16,r23
  124ea8:	b027883a 	mov	r19,r22
  124eac:	003f8a06 	br	124cd8 <__alt_data_end+0xfffe55b8>
  124eb0:	300b883a 	mov	r5,r6
  124eb4:	dfc00917 	ldw	ra,36(sp)
  124eb8:	df000817 	ldw	fp,32(sp)
  124ebc:	ddc00717 	ldw	r23,28(sp)
  124ec0:	dd800617 	ldw	r22,24(sp)
  124ec4:	dd400517 	ldw	r21,20(sp)
  124ec8:	dd000417 	ldw	r20,16(sp)
  124ecc:	dcc00317 	ldw	r19,12(sp)
  124ed0:	dc800217 	ldw	r18,8(sp)
  124ed4:	dc400117 	ldw	r17,4(sp)
  124ed8:	dc000017 	ldw	r16,0(sp)
  124edc:	dec00a04 	addi	sp,sp,40
  124ee0:	0123f901 	jmpi	123f90 <_malloc_r>
  124ee4:	a8c00017 	ldw	r3,0(r21)
  124ee8:	90c00015 	stw	r3,0(r18)
  124eec:	a8c00117 	ldw	r3,4(r21)
  124ef0:	90c00115 	stw	r3,4(r18)
  124ef4:	00c006c4 	movi	r3,27
  124ef8:	19804536 	bltu	r3,r6,125010 <_realloc_r+0x470>
  124efc:	90800204 	addi	r2,r18,8
  124f00:	a8c00204 	addi	r3,r21,8
  124f04:	003f6306 	br	124c94 <__alt_data_end+0xfffe5574>
  124f08:	9005883a 	mov	r2,r18
  124f0c:	a8c00017 	ldw	r3,0(r21)
  124f10:	b821883a 	mov	r16,r23
  124f14:	b027883a 	mov	r19,r22
  124f18:	10c00015 	stw	r3,0(r2)
  124f1c:	a8c00117 	ldw	r3,4(r21)
  124f20:	10c00115 	stw	r3,4(r2)
  124f24:	a8c00217 	ldw	r3,8(r21)
  124f28:	10c00215 	stw	r3,8(r2)
  124f2c:	003f6a06 	br	124cd8 <__alt_data_end+0xfffe55b8>
  124f30:	9c67883a 	add	r19,r19,r17
  124f34:	4445c83a 	sub	r2,r8,r17
  124f38:	e4c00215 	stw	r19,8(fp)
  124f3c:	10800054 	ori	r2,r2,1
  124f40:	98800115 	stw	r2,4(r19)
  124f44:	a8bfff17 	ldw	r2,-4(r21)
  124f48:	a009883a 	mov	r4,r20
  124f4c:	1080004c 	andi	r2,r2,1
  124f50:	1462b03a 	or	r17,r2,r17
  124f54:	ac7fff15 	stw	r17,-4(r21)
  124f58:	0126e600 	call	126e60 <__malloc_unlock>
  124f5c:	a805883a 	mov	r2,r21
  124f60:	003f6b06 	br	124d10 <__alt_data_end+0xfffe55f0>
  124f64:	a80b883a 	mov	r5,r21
  124f68:	9009883a 	mov	r4,r18
  124f6c:	0124a440 	call	124a44 <memmove>
  124f70:	003f4e06 	br	124cac <__alt_data_end+0xfffe558c>
  124f74:	89000404 	addi	r4,r17,16
  124f78:	b93fbc16 	blt	r23,r4,124e6c <__alt_data_end+0xfffe574c>
  124f7c:	b0800317 	ldw	r2,12(r22)
  124f80:	b0c00217 	ldw	r3,8(r22)
  124f84:	81bfff04 	addi	r6,r16,-4
  124f88:	01000904 	movi	r4,36
  124f8c:	18800315 	stw	r2,12(r3)
  124f90:	10c00215 	stw	r3,8(r2)
  124f94:	b4800204 	addi	r18,r22,8
  124f98:	21804336 	bltu	r4,r6,1250a8 <_realloc_r+0x508>
  124f9c:	008004c4 	movi	r2,19
  124fa0:	11803f2e 	bgeu	r2,r6,1250a0 <_realloc_r+0x500>
  124fa4:	a8800017 	ldw	r2,0(r21)
  124fa8:	b0800215 	stw	r2,8(r22)
  124fac:	a8800117 	ldw	r2,4(r21)
  124fb0:	b0800315 	stw	r2,12(r22)
  124fb4:	008006c4 	movi	r2,27
  124fb8:	11803f36 	bltu	r2,r6,1250b8 <_realloc_r+0x518>
  124fbc:	b0800404 	addi	r2,r22,16
  124fc0:	ad400204 	addi	r21,r21,8
  124fc4:	a8c00017 	ldw	r3,0(r21)
  124fc8:	10c00015 	stw	r3,0(r2)
  124fcc:	a8c00117 	ldw	r3,4(r21)
  124fd0:	10c00115 	stw	r3,4(r2)
  124fd4:	a8c00217 	ldw	r3,8(r21)
  124fd8:	10c00215 	stw	r3,8(r2)
  124fdc:	b447883a 	add	r3,r22,r17
  124fe0:	bc45c83a 	sub	r2,r23,r17
  124fe4:	e0c00215 	stw	r3,8(fp)
  124fe8:	10800054 	ori	r2,r2,1
  124fec:	18800115 	stw	r2,4(r3)
  124ff0:	b0800117 	ldw	r2,4(r22)
  124ff4:	a009883a 	mov	r4,r20
  124ff8:	1080004c 	andi	r2,r2,1
  124ffc:	1462b03a 	or	r17,r2,r17
  125000:	b4400115 	stw	r17,4(r22)
  125004:	0126e600 	call	126e60 <__malloc_unlock>
  125008:	9005883a 	mov	r2,r18
  12500c:	003f4006 	br	124d10 <__alt_data_end+0xfffe55f0>
  125010:	a8c00217 	ldw	r3,8(r21)
  125014:	90c00215 	stw	r3,8(r18)
  125018:	a8c00317 	ldw	r3,12(r21)
  12501c:	90c00315 	stw	r3,12(r18)
  125020:	30801126 	beq	r6,r2,125068 <_realloc_r+0x4c8>
  125024:	90800404 	addi	r2,r18,16
  125028:	a8c00404 	addi	r3,r21,16
  12502c:	003f1906 	br	124c94 <__alt_data_end+0xfffe5574>
  125030:	90ffff17 	ldw	r3,-4(r18)
  125034:	00bfff04 	movi	r2,-4
  125038:	a825883a 	mov	r18,r21
  12503c:	1884703a 	and	r2,r3,r2
  125040:	80a1883a 	add	r16,r16,r2
  125044:	003f2406 	br	124cd8 <__alt_data_end+0xfffe55b8>
  125048:	a8800217 	ldw	r2,8(r21)
  12504c:	b0800415 	stw	r2,16(r22)
  125050:	a8800317 	ldw	r2,12(r21)
  125054:	b0800515 	stw	r2,20(r22)
  125058:	31000a26 	beq	r6,r4,125084 <_realloc_r+0x4e4>
  12505c:	b0800604 	addi	r2,r22,24
  125060:	ad400404 	addi	r21,r21,16
  125064:	003fa906 	br	124f0c <__alt_data_end+0xfffe57ec>
  125068:	a9000417 	ldw	r4,16(r21)
  12506c:	90800604 	addi	r2,r18,24
  125070:	a8c00604 	addi	r3,r21,24
  125074:	91000415 	stw	r4,16(r18)
  125078:	a9000517 	ldw	r4,20(r21)
  12507c:	91000515 	stw	r4,20(r18)
  125080:	003f0406 	br	124c94 <__alt_data_end+0xfffe5574>
  125084:	a8c00417 	ldw	r3,16(r21)
  125088:	ad400604 	addi	r21,r21,24
  12508c:	b0800804 	addi	r2,r22,32
  125090:	b0c00615 	stw	r3,24(r22)
  125094:	a8ffff17 	ldw	r3,-4(r21)
  125098:	b0c00715 	stw	r3,28(r22)
  12509c:	003f9b06 	br	124f0c <__alt_data_end+0xfffe57ec>
  1250a0:	9005883a 	mov	r2,r18
  1250a4:	003fc706 	br	124fc4 <__alt_data_end+0xfffe58a4>
  1250a8:	a80b883a 	mov	r5,r21
  1250ac:	9009883a 	mov	r4,r18
  1250b0:	0124a440 	call	124a44 <memmove>
  1250b4:	003fc906 	br	124fdc <__alt_data_end+0xfffe58bc>
  1250b8:	a8800217 	ldw	r2,8(r21)
  1250bc:	b0800415 	stw	r2,16(r22)
  1250c0:	a8800317 	ldw	r2,12(r21)
  1250c4:	b0800515 	stw	r2,20(r22)
  1250c8:	31000726 	beq	r6,r4,1250e8 <_realloc_r+0x548>
  1250cc:	b0800604 	addi	r2,r22,24
  1250d0:	ad400404 	addi	r21,r21,16
  1250d4:	003fbb06 	br	124fc4 <__alt_data_end+0xfffe58a4>
  1250d8:	a009883a 	mov	r4,r20
  1250dc:	0126e600 	call	126e60 <__malloc_unlock>
  1250e0:	0005883a 	mov	r2,zero
  1250e4:	003f0a06 	br	124d10 <__alt_data_end+0xfffe55f0>
  1250e8:	a8c00417 	ldw	r3,16(r21)
  1250ec:	ad400604 	addi	r21,r21,24
  1250f0:	b0800804 	addi	r2,r22,32
  1250f4:	b0c00615 	stw	r3,24(r22)
  1250f8:	a8ffff17 	ldw	r3,-4(r21)
  1250fc:	b0c00715 	stw	r3,28(r22)
  125100:	003fb006 	br	124fc4 <__alt_data_end+0xfffe58a4>

00125104 <_sbrk_r>:
  125104:	defffd04 	addi	sp,sp,-12
  125108:	dc000015 	stw	r16,0(sp)
  12510c:	040004f4 	movhi	r16,19
  125110:	dc400115 	stw	r17,4(sp)
  125114:	842aca04 	addi	r16,r16,-21720
  125118:	2023883a 	mov	r17,r4
  12511c:	2809883a 	mov	r4,r5
  125120:	dfc00215 	stw	ra,8(sp)
  125124:	80000015 	stw	zero,0(r16)
  125128:	0126fc40 	call	126fc4 <sbrk>
  12512c:	00ffffc4 	movi	r3,-1
  125130:	10c00526 	beq	r2,r3,125148 <_sbrk_r+0x44>
  125134:	dfc00217 	ldw	ra,8(sp)
  125138:	dc400117 	ldw	r17,4(sp)
  12513c:	dc000017 	ldw	r16,0(sp)
  125140:	dec00304 	addi	sp,sp,12
  125144:	f800283a 	ret
  125148:	80c00017 	ldw	r3,0(r16)
  12514c:	183ff926 	beq	r3,zero,125134 <__alt_data_end+0xfffe5a14>
  125150:	88c00015 	stw	r3,0(r17)
  125154:	003ff706 	br	125134 <__alt_data_end+0xfffe5a14>

00125158 <strlen>:
  125158:	208000cc 	andi	r2,r4,3
  12515c:	10002026 	beq	r2,zero,1251e0 <strlen+0x88>
  125160:	20800007 	ldb	r2,0(r4)
  125164:	10002026 	beq	r2,zero,1251e8 <strlen+0x90>
  125168:	2005883a 	mov	r2,r4
  12516c:	00000206 	br	125178 <strlen+0x20>
  125170:	10c00007 	ldb	r3,0(r2)
  125174:	18001826 	beq	r3,zero,1251d8 <strlen+0x80>
  125178:	10800044 	addi	r2,r2,1
  12517c:	10c000cc 	andi	r3,r2,3
  125180:	183ffb1e 	bne	r3,zero,125170 <__alt_data_end+0xfffe5a50>
  125184:	10c00017 	ldw	r3,0(r2)
  125188:	01ffbff4 	movhi	r7,65279
  12518c:	39ffbfc4 	addi	r7,r7,-257
  125190:	00ca303a 	nor	r5,zero,r3
  125194:	01a02074 	movhi	r6,32897
  125198:	19c7883a 	add	r3,r3,r7
  12519c:	31a02004 	addi	r6,r6,-32640
  1251a0:	1946703a 	and	r3,r3,r5
  1251a4:	1986703a 	and	r3,r3,r6
  1251a8:	1800091e 	bne	r3,zero,1251d0 <strlen+0x78>
  1251ac:	10800104 	addi	r2,r2,4
  1251b0:	10c00017 	ldw	r3,0(r2)
  1251b4:	19cb883a 	add	r5,r3,r7
  1251b8:	00c6303a 	nor	r3,zero,r3
  1251bc:	28c6703a 	and	r3,r5,r3
  1251c0:	1986703a 	and	r3,r3,r6
  1251c4:	183ff926 	beq	r3,zero,1251ac <__alt_data_end+0xfffe5a8c>
  1251c8:	00000106 	br	1251d0 <strlen+0x78>
  1251cc:	10800044 	addi	r2,r2,1
  1251d0:	10c00007 	ldb	r3,0(r2)
  1251d4:	183ffd1e 	bne	r3,zero,1251cc <__alt_data_end+0xfffe5aac>
  1251d8:	1105c83a 	sub	r2,r2,r4
  1251dc:	f800283a 	ret
  1251e0:	2005883a 	mov	r2,r4
  1251e4:	003fe706 	br	125184 <__alt_data_end+0xfffe5a64>
  1251e8:	0005883a 	mov	r2,zero
  1251ec:	f800283a 	ret

001251f0 <__swsetup_r>:
  1251f0:	008004f4 	movhi	r2,19
  1251f4:	defffd04 	addi	sp,sp,-12
  1251f8:	10a3a404 	addi	r2,r2,-29040
  1251fc:	dc400115 	stw	r17,4(sp)
  125200:	2023883a 	mov	r17,r4
  125204:	11000017 	ldw	r4,0(r2)
  125208:	dc000015 	stw	r16,0(sp)
  12520c:	dfc00215 	stw	ra,8(sp)
  125210:	2821883a 	mov	r16,r5
  125214:	20000226 	beq	r4,zero,125220 <__swsetup_r+0x30>
  125218:	20800e17 	ldw	r2,56(r4)
  12521c:	10003126 	beq	r2,zero,1252e4 <__swsetup_r+0xf4>
  125220:	8080030b 	ldhu	r2,12(r16)
  125224:	10c0020c 	andi	r3,r2,8
  125228:	1009883a 	mov	r4,r2
  12522c:	18000f26 	beq	r3,zero,12526c <__swsetup_r+0x7c>
  125230:	80c00417 	ldw	r3,16(r16)
  125234:	18001526 	beq	r3,zero,12528c <__swsetup_r+0x9c>
  125238:	1100004c 	andi	r4,r2,1
  12523c:	20001c1e 	bne	r4,zero,1252b0 <__swsetup_r+0xc0>
  125240:	1080008c 	andi	r2,r2,2
  125244:	1000291e 	bne	r2,zero,1252ec <__swsetup_r+0xfc>
  125248:	80800517 	ldw	r2,20(r16)
  12524c:	80800215 	stw	r2,8(r16)
  125250:	18001c26 	beq	r3,zero,1252c4 <__swsetup_r+0xd4>
  125254:	0005883a 	mov	r2,zero
  125258:	dfc00217 	ldw	ra,8(sp)
  12525c:	dc400117 	ldw	r17,4(sp)
  125260:	dc000017 	ldw	r16,0(sp)
  125264:	dec00304 	addi	sp,sp,12
  125268:	f800283a 	ret
  12526c:	2080040c 	andi	r2,r4,16
  125270:	10002e26 	beq	r2,zero,12532c <__swsetup_r+0x13c>
  125274:	2080010c 	andi	r2,r4,4
  125278:	10001e1e 	bne	r2,zero,1252f4 <__swsetup_r+0x104>
  12527c:	80c00417 	ldw	r3,16(r16)
  125280:	20800214 	ori	r2,r4,8
  125284:	8080030d 	sth	r2,12(r16)
  125288:	183feb1e 	bne	r3,zero,125238 <__alt_data_end+0xfffe5b18>
  12528c:	1100a00c 	andi	r4,r2,640
  125290:	01408004 	movi	r5,512
  125294:	217fe826 	beq	r4,r5,125238 <__alt_data_end+0xfffe5b18>
  125298:	800b883a 	mov	r5,r16
  12529c:	8809883a 	mov	r4,r17
  1252a0:	01261f00 	call	1261f0 <__smakebuf_r>
  1252a4:	8080030b 	ldhu	r2,12(r16)
  1252a8:	80c00417 	ldw	r3,16(r16)
  1252ac:	003fe206 	br	125238 <__alt_data_end+0xfffe5b18>
  1252b0:	80800517 	ldw	r2,20(r16)
  1252b4:	80000215 	stw	zero,8(r16)
  1252b8:	0085c83a 	sub	r2,zero,r2
  1252bc:	80800615 	stw	r2,24(r16)
  1252c0:	183fe41e 	bne	r3,zero,125254 <__alt_data_end+0xfffe5b34>
  1252c4:	80c0030b 	ldhu	r3,12(r16)
  1252c8:	0005883a 	mov	r2,zero
  1252cc:	1900200c 	andi	r4,r3,128
  1252d0:	203fe126 	beq	r4,zero,125258 <__alt_data_end+0xfffe5b38>
  1252d4:	18c01014 	ori	r3,r3,64
  1252d8:	80c0030d 	sth	r3,12(r16)
  1252dc:	00bfffc4 	movi	r2,-1
  1252e0:	003fdd06 	br	125258 <__alt_data_end+0xfffe5b38>
  1252e4:	0125be40 	call	125be4 <__sinit>
  1252e8:	003fcd06 	br	125220 <__alt_data_end+0xfffe5b00>
  1252ec:	0005883a 	mov	r2,zero
  1252f0:	003fd606 	br	12524c <__alt_data_end+0xfffe5b2c>
  1252f4:	81400c17 	ldw	r5,48(r16)
  1252f8:	28000626 	beq	r5,zero,125314 <__swsetup_r+0x124>
  1252fc:	80801004 	addi	r2,r16,64
  125300:	28800326 	beq	r5,r2,125310 <__swsetup_r+0x120>
  125304:	8809883a 	mov	r4,r17
  125308:	0125d580 	call	125d58 <_free_r>
  12530c:	8100030b 	ldhu	r4,12(r16)
  125310:	80000c15 	stw	zero,48(r16)
  125314:	80c00417 	ldw	r3,16(r16)
  125318:	00bff6c4 	movi	r2,-37
  12531c:	1108703a 	and	r4,r2,r4
  125320:	80000115 	stw	zero,4(r16)
  125324:	80c00015 	stw	r3,0(r16)
  125328:	003fd506 	br	125280 <__alt_data_end+0xfffe5b60>
  12532c:	00800244 	movi	r2,9
  125330:	88800015 	stw	r2,0(r17)
  125334:	20801014 	ori	r2,r4,64
  125338:	8080030d 	sth	r2,12(r16)
  12533c:	00bfffc4 	movi	r2,-1
  125340:	003fc506 	br	125258 <__alt_data_end+0xfffe5b38>

00125344 <__register_exitproc>:
  125344:	defffa04 	addi	sp,sp,-24
  125348:	dc000315 	stw	r16,12(sp)
  12534c:	040004f4 	movhi	r16,19
  125350:	8423a304 	addi	r16,r16,-29044
  125354:	80c00017 	ldw	r3,0(r16)
  125358:	dc400415 	stw	r17,16(sp)
  12535c:	dfc00515 	stw	ra,20(sp)
  125360:	18805217 	ldw	r2,328(r3)
  125364:	2023883a 	mov	r17,r4
  125368:	10003726 	beq	r2,zero,125448 <__register_exitproc+0x104>
  12536c:	10c00117 	ldw	r3,4(r2)
  125370:	010007c4 	movi	r4,31
  125374:	20c00e16 	blt	r4,r3,1253b0 <__register_exitproc+0x6c>
  125378:	1a000044 	addi	r8,r3,1
  12537c:	8800221e 	bne	r17,zero,125408 <__register_exitproc+0xc4>
  125380:	18c00084 	addi	r3,r3,2
  125384:	18c7883a 	add	r3,r3,r3
  125388:	18c7883a 	add	r3,r3,r3
  12538c:	12000115 	stw	r8,4(r2)
  125390:	10c7883a 	add	r3,r2,r3
  125394:	19400015 	stw	r5,0(r3)
  125398:	0005883a 	mov	r2,zero
  12539c:	dfc00517 	ldw	ra,20(sp)
  1253a0:	dc400417 	ldw	r17,16(sp)
  1253a4:	dc000317 	ldw	r16,12(sp)
  1253a8:	dec00604 	addi	sp,sp,24
  1253ac:	f800283a 	ret
  1253b0:	00800034 	movhi	r2,0
  1253b4:	10800004 	addi	r2,r2,0
  1253b8:	10002626 	beq	r2,zero,125454 <__register_exitproc+0x110>
  1253bc:	01006404 	movi	r4,400
  1253c0:	d9400015 	stw	r5,0(sp)
  1253c4:	d9800115 	stw	r6,4(sp)
  1253c8:	d9c00215 	stw	r7,8(sp)
  1253cc:	00000000 	call	0 <__alt_mem_onchip_flash_data-0x80000>
  1253d0:	d9400017 	ldw	r5,0(sp)
  1253d4:	d9800117 	ldw	r6,4(sp)
  1253d8:	d9c00217 	ldw	r7,8(sp)
  1253dc:	10001d26 	beq	r2,zero,125454 <__register_exitproc+0x110>
  1253e0:	81000017 	ldw	r4,0(r16)
  1253e4:	10000115 	stw	zero,4(r2)
  1253e8:	02000044 	movi	r8,1
  1253ec:	22405217 	ldw	r9,328(r4)
  1253f0:	0007883a 	mov	r3,zero
  1253f4:	12400015 	stw	r9,0(r2)
  1253f8:	20805215 	stw	r2,328(r4)
  1253fc:	10006215 	stw	zero,392(r2)
  125400:	10006315 	stw	zero,396(r2)
  125404:	883fde26 	beq	r17,zero,125380 <__alt_data_end+0xfffe5c60>
  125408:	18c9883a 	add	r4,r3,r3
  12540c:	2109883a 	add	r4,r4,r4
  125410:	1109883a 	add	r4,r2,r4
  125414:	21802215 	stw	r6,136(r4)
  125418:	01800044 	movi	r6,1
  12541c:	12406217 	ldw	r9,392(r2)
  125420:	30cc983a 	sll	r6,r6,r3
  125424:	4992b03a 	or	r9,r9,r6
  125428:	12406215 	stw	r9,392(r2)
  12542c:	21c04215 	stw	r7,264(r4)
  125430:	01000084 	movi	r4,2
  125434:	893fd21e 	bne	r17,r4,125380 <__alt_data_end+0xfffe5c60>
  125438:	11006317 	ldw	r4,396(r2)
  12543c:	218cb03a 	or	r6,r4,r6
  125440:	11806315 	stw	r6,396(r2)
  125444:	003fce06 	br	125380 <__alt_data_end+0xfffe5c60>
  125448:	18805304 	addi	r2,r3,332
  12544c:	18805215 	stw	r2,328(r3)
  125450:	003fc606 	br	12536c <__alt_data_end+0xfffe5c4c>
  125454:	00bfffc4 	movi	r2,-1
  125458:	003fd006 	br	12539c <__alt_data_end+0xfffe5c7c>

0012545c <__call_exitprocs>:
  12545c:	defff504 	addi	sp,sp,-44
  125460:	df000915 	stw	fp,36(sp)
  125464:	dd400615 	stw	r21,24(sp)
  125468:	dc800315 	stw	r18,12(sp)
  12546c:	dfc00a15 	stw	ra,40(sp)
  125470:	ddc00815 	stw	r23,32(sp)
  125474:	dd800715 	stw	r22,28(sp)
  125478:	dd000515 	stw	r20,20(sp)
  12547c:	dcc00415 	stw	r19,16(sp)
  125480:	dc400215 	stw	r17,8(sp)
  125484:	dc000115 	stw	r16,4(sp)
  125488:	d9000015 	stw	r4,0(sp)
  12548c:	2839883a 	mov	fp,r5
  125490:	04800044 	movi	r18,1
  125494:	057fffc4 	movi	r21,-1
  125498:	008004f4 	movhi	r2,19
  12549c:	10a3a304 	addi	r2,r2,-29044
  1254a0:	12000017 	ldw	r8,0(r2)
  1254a4:	45005217 	ldw	r20,328(r8)
  1254a8:	44c05204 	addi	r19,r8,328
  1254ac:	a0001c26 	beq	r20,zero,125520 <__call_exitprocs+0xc4>
  1254b0:	a0800117 	ldw	r2,4(r20)
  1254b4:	15ffffc4 	addi	r23,r2,-1
  1254b8:	b8000d16 	blt	r23,zero,1254f0 <__call_exitprocs+0x94>
  1254bc:	14000044 	addi	r16,r2,1
  1254c0:	8421883a 	add	r16,r16,r16
  1254c4:	8421883a 	add	r16,r16,r16
  1254c8:	84402004 	addi	r17,r16,128
  1254cc:	a463883a 	add	r17,r20,r17
  1254d0:	a421883a 	add	r16,r20,r16
  1254d4:	e0001e26 	beq	fp,zero,125550 <__call_exitprocs+0xf4>
  1254d8:	80804017 	ldw	r2,256(r16)
  1254dc:	e0801c26 	beq	fp,r2,125550 <__call_exitprocs+0xf4>
  1254e0:	bdffffc4 	addi	r23,r23,-1
  1254e4:	843fff04 	addi	r16,r16,-4
  1254e8:	8c7fff04 	addi	r17,r17,-4
  1254ec:	bd7ff91e 	bne	r23,r21,1254d4 <__alt_data_end+0xfffe5db4>
  1254f0:	00800034 	movhi	r2,0
  1254f4:	10800004 	addi	r2,r2,0
  1254f8:	10000926 	beq	r2,zero,125520 <__call_exitprocs+0xc4>
  1254fc:	a0800117 	ldw	r2,4(r20)
  125500:	1000301e 	bne	r2,zero,1255c4 <__call_exitprocs+0x168>
  125504:	a0800017 	ldw	r2,0(r20)
  125508:	10003226 	beq	r2,zero,1255d4 <__call_exitprocs+0x178>
  12550c:	a009883a 	mov	r4,r20
  125510:	98800015 	stw	r2,0(r19)
  125514:	00000000 	call	0 <__alt_mem_onchip_flash_data-0x80000>
  125518:	9d000017 	ldw	r20,0(r19)
  12551c:	a03fe41e 	bne	r20,zero,1254b0 <__alt_data_end+0xfffe5d90>
  125520:	dfc00a17 	ldw	ra,40(sp)
  125524:	df000917 	ldw	fp,36(sp)
  125528:	ddc00817 	ldw	r23,32(sp)
  12552c:	dd800717 	ldw	r22,28(sp)
  125530:	dd400617 	ldw	r21,24(sp)
  125534:	dd000517 	ldw	r20,20(sp)
  125538:	dcc00417 	ldw	r19,16(sp)
  12553c:	dc800317 	ldw	r18,12(sp)
  125540:	dc400217 	ldw	r17,8(sp)
  125544:	dc000117 	ldw	r16,4(sp)
  125548:	dec00b04 	addi	sp,sp,44
  12554c:	f800283a 	ret
  125550:	a0800117 	ldw	r2,4(r20)
  125554:	80c00017 	ldw	r3,0(r16)
  125558:	10bfffc4 	addi	r2,r2,-1
  12555c:	15c01426 	beq	r2,r23,1255b0 <__call_exitprocs+0x154>
  125560:	80000015 	stw	zero,0(r16)
  125564:	183fde26 	beq	r3,zero,1254e0 <__alt_data_end+0xfffe5dc0>
  125568:	95c8983a 	sll	r4,r18,r23
  12556c:	a0806217 	ldw	r2,392(r20)
  125570:	a5800117 	ldw	r22,4(r20)
  125574:	2084703a 	and	r2,r4,r2
  125578:	10000b26 	beq	r2,zero,1255a8 <__call_exitprocs+0x14c>
  12557c:	a0806317 	ldw	r2,396(r20)
  125580:	2088703a 	and	r4,r4,r2
  125584:	20000c1e 	bne	r4,zero,1255b8 <__call_exitprocs+0x15c>
  125588:	89400017 	ldw	r5,0(r17)
  12558c:	d9000017 	ldw	r4,0(sp)
  125590:	183ee83a 	callr	r3
  125594:	a0800117 	ldw	r2,4(r20)
  125598:	15bfbf1e 	bne	r2,r22,125498 <__alt_data_end+0xfffe5d78>
  12559c:	98800017 	ldw	r2,0(r19)
  1255a0:	153fcf26 	beq	r2,r20,1254e0 <__alt_data_end+0xfffe5dc0>
  1255a4:	003fbc06 	br	125498 <__alt_data_end+0xfffe5d78>
  1255a8:	183ee83a 	callr	r3
  1255ac:	003ff906 	br	125594 <__alt_data_end+0xfffe5e74>
  1255b0:	a5c00115 	stw	r23,4(r20)
  1255b4:	003feb06 	br	125564 <__alt_data_end+0xfffe5e44>
  1255b8:	89000017 	ldw	r4,0(r17)
  1255bc:	183ee83a 	callr	r3
  1255c0:	003ff406 	br	125594 <__alt_data_end+0xfffe5e74>
  1255c4:	a0800017 	ldw	r2,0(r20)
  1255c8:	a027883a 	mov	r19,r20
  1255cc:	1029883a 	mov	r20,r2
  1255d0:	003fb606 	br	1254ac <__alt_data_end+0xfffe5d8c>
  1255d4:	0005883a 	mov	r2,zero
  1255d8:	003ffb06 	br	1255c8 <__alt_data_end+0xfffe5ea8>

001255dc <__sflush_r>:
  1255dc:	2880030b 	ldhu	r2,12(r5)
  1255e0:	defffb04 	addi	sp,sp,-20
  1255e4:	dcc00315 	stw	r19,12(sp)
  1255e8:	dc400115 	stw	r17,4(sp)
  1255ec:	dfc00415 	stw	ra,16(sp)
  1255f0:	dc800215 	stw	r18,8(sp)
  1255f4:	dc000015 	stw	r16,0(sp)
  1255f8:	10c0020c 	andi	r3,r2,8
  1255fc:	2823883a 	mov	r17,r5
  125600:	2027883a 	mov	r19,r4
  125604:	1800311e 	bne	r3,zero,1256cc <__sflush_r+0xf0>
  125608:	28c00117 	ldw	r3,4(r5)
  12560c:	10820014 	ori	r2,r2,2048
  125610:	2880030d 	sth	r2,12(r5)
  125614:	00c04b0e 	bge	zero,r3,125744 <__sflush_r+0x168>
  125618:	8a000a17 	ldw	r8,40(r17)
  12561c:	40002326 	beq	r8,zero,1256ac <__sflush_r+0xd0>
  125620:	9c000017 	ldw	r16,0(r19)
  125624:	10c4000c 	andi	r3,r2,4096
  125628:	98000015 	stw	zero,0(r19)
  12562c:	18004826 	beq	r3,zero,125750 <__sflush_r+0x174>
  125630:	89801417 	ldw	r6,80(r17)
  125634:	10c0010c 	andi	r3,r2,4
  125638:	18000626 	beq	r3,zero,125654 <__sflush_r+0x78>
  12563c:	88c00117 	ldw	r3,4(r17)
  125640:	88800c17 	ldw	r2,48(r17)
  125644:	30cdc83a 	sub	r6,r6,r3
  125648:	10000226 	beq	r2,zero,125654 <__sflush_r+0x78>
  12564c:	88800f17 	ldw	r2,60(r17)
  125650:	308dc83a 	sub	r6,r6,r2
  125654:	89400717 	ldw	r5,28(r17)
  125658:	000f883a 	mov	r7,zero
  12565c:	9809883a 	mov	r4,r19
  125660:	403ee83a 	callr	r8
  125664:	00ffffc4 	movi	r3,-1
  125668:	10c04426 	beq	r2,r3,12577c <__sflush_r+0x1a0>
  12566c:	88c0030b 	ldhu	r3,12(r17)
  125670:	89000417 	ldw	r4,16(r17)
  125674:	88000115 	stw	zero,4(r17)
  125678:	197dffcc 	andi	r5,r3,63487
  12567c:	8940030d 	sth	r5,12(r17)
  125680:	89000015 	stw	r4,0(r17)
  125684:	18c4000c 	andi	r3,r3,4096
  125688:	18002c1e 	bne	r3,zero,12573c <__sflush_r+0x160>
  12568c:	89400c17 	ldw	r5,48(r17)
  125690:	9c000015 	stw	r16,0(r19)
  125694:	28000526 	beq	r5,zero,1256ac <__sflush_r+0xd0>
  125698:	88801004 	addi	r2,r17,64
  12569c:	28800226 	beq	r5,r2,1256a8 <__sflush_r+0xcc>
  1256a0:	9809883a 	mov	r4,r19
  1256a4:	0125d580 	call	125d58 <_free_r>
  1256a8:	88000c15 	stw	zero,48(r17)
  1256ac:	0005883a 	mov	r2,zero
  1256b0:	dfc00417 	ldw	ra,16(sp)
  1256b4:	dcc00317 	ldw	r19,12(sp)
  1256b8:	dc800217 	ldw	r18,8(sp)
  1256bc:	dc400117 	ldw	r17,4(sp)
  1256c0:	dc000017 	ldw	r16,0(sp)
  1256c4:	dec00504 	addi	sp,sp,20
  1256c8:	f800283a 	ret
  1256cc:	2c800417 	ldw	r18,16(r5)
  1256d0:	903ff626 	beq	r18,zero,1256ac <__alt_data_end+0xfffe5f8c>
  1256d4:	2c000017 	ldw	r16,0(r5)
  1256d8:	108000cc 	andi	r2,r2,3
  1256dc:	2c800015 	stw	r18,0(r5)
  1256e0:	84a1c83a 	sub	r16,r16,r18
  1256e4:	1000131e 	bne	r2,zero,125734 <__sflush_r+0x158>
  1256e8:	28800517 	ldw	r2,20(r5)
  1256ec:	88800215 	stw	r2,8(r17)
  1256f0:	04000316 	blt	zero,r16,125700 <__sflush_r+0x124>
  1256f4:	003fed06 	br	1256ac <__alt_data_end+0xfffe5f8c>
  1256f8:	90a5883a 	add	r18,r18,r2
  1256fc:	043feb0e 	bge	zero,r16,1256ac <__alt_data_end+0xfffe5f8c>
  125700:	88800917 	ldw	r2,36(r17)
  125704:	89400717 	ldw	r5,28(r17)
  125708:	800f883a 	mov	r7,r16
  12570c:	900d883a 	mov	r6,r18
  125710:	9809883a 	mov	r4,r19
  125714:	103ee83a 	callr	r2
  125718:	80a1c83a 	sub	r16,r16,r2
  12571c:	00bff616 	blt	zero,r2,1256f8 <__alt_data_end+0xfffe5fd8>
  125720:	88c0030b 	ldhu	r3,12(r17)
  125724:	00bfffc4 	movi	r2,-1
  125728:	18c01014 	ori	r3,r3,64
  12572c:	88c0030d 	sth	r3,12(r17)
  125730:	003fdf06 	br	1256b0 <__alt_data_end+0xfffe5f90>
  125734:	0005883a 	mov	r2,zero
  125738:	003fec06 	br	1256ec <__alt_data_end+0xfffe5fcc>
  12573c:	88801415 	stw	r2,80(r17)
  125740:	003fd206 	br	12568c <__alt_data_end+0xfffe5f6c>
  125744:	28c00f17 	ldw	r3,60(r5)
  125748:	00ffb316 	blt	zero,r3,125618 <__alt_data_end+0xfffe5ef8>
  12574c:	003fd706 	br	1256ac <__alt_data_end+0xfffe5f8c>
  125750:	89400717 	ldw	r5,28(r17)
  125754:	000d883a 	mov	r6,zero
  125758:	01c00044 	movi	r7,1
  12575c:	9809883a 	mov	r4,r19
  125760:	403ee83a 	callr	r8
  125764:	100d883a 	mov	r6,r2
  125768:	00bfffc4 	movi	r2,-1
  12576c:	30801426 	beq	r6,r2,1257c0 <__sflush_r+0x1e4>
  125770:	8880030b 	ldhu	r2,12(r17)
  125774:	8a000a17 	ldw	r8,40(r17)
  125778:	003fae06 	br	125634 <__alt_data_end+0xfffe5f14>
  12577c:	98c00017 	ldw	r3,0(r19)
  125780:	183fba26 	beq	r3,zero,12566c <__alt_data_end+0xfffe5f4c>
  125784:	01000744 	movi	r4,29
  125788:	19000626 	beq	r3,r4,1257a4 <__sflush_r+0x1c8>
  12578c:	01000584 	movi	r4,22
  125790:	19000426 	beq	r3,r4,1257a4 <__sflush_r+0x1c8>
  125794:	88c0030b 	ldhu	r3,12(r17)
  125798:	18c01014 	ori	r3,r3,64
  12579c:	88c0030d 	sth	r3,12(r17)
  1257a0:	003fc306 	br	1256b0 <__alt_data_end+0xfffe5f90>
  1257a4:	8880030b 	ldhu	r2,12(r17)
  1257a8:	88c00417 	ldw	r3,16(r17)
  1257ac:	88000115 	stw	zero,4(r17)
  1257b0:	10bdffcc 	andi	r2,r2,63487
  1257b4:	8880030d 	sth	r2,12(r17)
  1257b8:	88c00015 	stw	r3,0(r17)
  1257bc:	003fb306 	br	12568c <__alt_data_end+0xfffe5f6c>
  1257c0:	98800017 	ldw	r2,0(r19)
  1257c4:	103fea26 	beq	r2,zero,125770 <__alt_data_end+0xfffe6050>
  1257c8:	00c00744 	movi	r3,29
  1257cc:	10c00226 	beq	r2,r3,1257d8 <__sflush_r+0x1fc>
  1257d0:	00c00584 	movi	r3,22
  1257d4:	10c0031e 	bne	r2,r3,1257e4 <__sflush_r+0x208>
  1257d8:	9c000015 	stw	r16,0(r19)
  1257dc:	0005883a 	mov	r2,zero
  1257e0:	003fb306 	br	1256b0 <__alt_data_end+0xfffe5f90>
  1257e4:	88c0030b 	ldhu	r3,12(r17)
  1257e8:	3005883a 	mov	r2,r6
  1257ec:	18c01014 	ori	r3,r3,64
  1257f0:	88c0030d 	sth	r3,12(r17)
  1257f4:	003fae06 	br	1256b0 <__alt_data_end+0xfffe5f90>

001257f8 <_fflush_r>:
  1257f8:	defffd04 	addi	sp,sp,-12
  1257fc:	dc000115 	stw	r16,4(sp)
  125800:	dfc00215 	stw	ra,8(sp)
  125804:	2021883a 	mov	r16,r4
  125808:	20000226 	beq	r4,zero,125814 <_fflush_r+0x1c>
  12580c:	20800e17 	ldw	r2,56(r4)
  125810:	10000c26 	beq	r2,zero,125844 <_fflush_r+0x4c>
  125814:	2880030f 	ldh	r2,12(r5)
  125818:	1000051e 	bne	r2,zero,125830 <_fflush_r+0x38>
  12581c:	0005883a 	mov	r2,zero
  125820:	dfc00217 	ldw	ra,8(sp)
  125824:	dc000117 	ldw	r16,4(sp)
  125828:	dec00304 	addi	sp,sp,12
  12582c:	f800283a 	ret
  125830:	8009883a 	mov	r4,r16
  125834:	dfc00217 	ldw	ra,8(sp)
  125838:	dc000117 	ldw	r16,4(sp)
  12583c:	dec00304 	addi	sp,sp,12
  125840:	01255dc1 	jmpi	1255dc <__sflush_r>
  125844:	d9400015 	stw	r5,0(sp)
  125848:	0125be40 	call	125be4 <__sinit>
  12584c:	d9400017 	ldw	r5,0(sp)
  125850:	003ff006 	br	125814 <__alt_data_end+0xfffe60f4>

00125854 <fflush>:
  125854:	20000526 	beq	r4,zero,12586c <fflush+0x18>
  125858:	008004f4 	movhi	r2,19
  12585c:	10a3a404 	addi	r2,r2,-29040
  125860:	200b883a 	mov	r5,r4
  125864:	11000017 	ldw	r4,0(r2)
  125868:	01257f81 	jmpi	1257f8 <_fflush_r>
  12586c:	008004f4 	movhi	r2,19
  125870:	10a3a304 	addi	r2,r2,-29044
  125874:	11000017 	ldw	r4,0(r2)
  125878:	014004b4 	movhi	r5,18
  12587c:	2955fe04 	addi	r5,r5,22520
  125880:	012612c1 	jmpi	12612c <_fwalk_reent>

00125884 <__fp_unlock>:
  125884:	0005883a 	mov	r2,zero
  125888:	f800283a 	ret

0012588c <_cleanup_r>:
  12588c:	014004b4 	movhi	r5,18
  125890:	2959b104 	addi	r5,r5,26308
  125894:	012612c1 	jmpi	12612c <_fwalk_reent>

00125898 <__sinit.part.1>:
  125898:	defff704 	addi	sp,sp,-36
  12589c:	00c004b4 	movhi	r3,18
  1258a0:	dfc00815 	stw	ra,32(sp)
  1258a4:	ddc00715 	stw	r23,28(sp)
  1258a8:	dd800615 	stw	r22,24(sp)
  1258ac:	dd400515 	stw	r21,20(sp)
  1258b0:	dd000415 	stw	r20,16(sp)
  1258b4:	dcc00315 	stw	r19,12(sp)
  1258b8:	dc800215 	stw	r18,8(sp)
  1258bc:	dc400115 	stw	r17,4(sp)
  1258c0:	dc000015 	stw	r16,0(sp)
  1258c4:	18d62304 	addi	r3,r3,22668
  1258c8:	24000117 	ldw	r16,4(r4)
  1258cc:	20c00f15 	stw	r3,60(r4)
  1258d0:	2080bb04 	addi	r2,r4,748
  1258d4:	00c000c4 	movi	r3,3
  1258d8:	20c0b915 	stw	r3,740(r4)
  1258dc:	2080ba15 	stw	r2,744(r4)
  1258e0:	2000b815 	stw	zero,736(r4)
  1258e4:	05c00204 	movi	r23,8
  1258e8:	00800104 	movi	r2,4
  1258ec:	2025883a 	mov	r18,r4
  1258f0:	b80d883a 	mov	r6,r23
  1258f4:	81001704 	addi	r4,r16,92
  1258f8:	000b883a 	mov	r5,zero
  1258fc:	80000015 	stw	zero,0(r16)
  125900:	80000115 	stw	zero,4(r16)
  125904:	80000215 	stw	zero,8(r16)
  125908:	8080030d 	sth	r2,12(r16)
  12590c:	80001915 	stw	zero,100(r16)
  125910:	8000038d 	sth	zero,14(r16)
  125914:	80000415 	stw	zero,16(r16)
  125918:	80000515 	stw	zero,20(r16)
  12591c:	80000615 	stw	zero,24(r16)
  125920:	01263ac0 	call	1263ac <memset>
  125924:	058004b4 	movhi	r22,18
  125928:	94400217 	ldw	r17,8(r18)
  12592c:	054004b4 	movhi	r21,18
  125930:	050004b4 	movhi	r20,18
  125934:	04c004b4 	movhi	r19,18
  125938:	b5993504 	addi	r22,r22,25812
  12593c:	ad594c04 	addi	r21,r21,25904
  125940:	a5196b04 	addi	r20,r20,26028
  125944:	9cd98204 	addi	r19,r19,26120
  125948:	85800815 	stw	r22,32(r16)
  12594c:	85400915 	stw	r21,36(r16)
  125950:	85000a15 	stw	r20,40(r16)
  125954:	84c00b15 	stw	r19,44(r16)
  125958:	84000715 	stw	r16,28(r16)
  12595c:	00800284 	movi	r2,10
  125960:	8880030d 	sth	r2,12(r17)
  125964:	00800044 	movi	r2,1
  125968:	b80d883a 	mov	r6,r23
  12596c:	89001704 	addi	r4,r17,92
  125970:	000b883a 	mov	r5,zero
  125974:	88000015 	stw	zero,0(r17)
  125978:	88000115 	stw	zero,4(r17)
  12597c:	88000215 	stw	zero,8(r17)
  125980:	88001915 	stw	zero,100(r17)
  125984:	8880038d 	sth	r2,14(r17)
  125988:	88000415 	stw	zero,16(r17)
  12598c:	88000515 	stw	zero,20(r17)
  125990:	88000615 	stw	zero,24(r17)
  125994:	01263ac0 	call	1263ac <memset>
  125998:	94000317 	ldw	r16,12(r18)
  12599c:	00800484 	movi	r2,18
  1259a0:	8c400715 	stw	r17,28(r17)
  1259a4:	8d800815 	stw	r22,32(r17)
  1259a8:	8d400915 	stw	r21,36(r17)
  1259ac:	8d000a15 	stw	r20,40(r17)
  1259b0:	8cc00b15 	stw	r19,44(r17)
  1259b4:	8080030d 	sth	r2,12(r16)
  1259b8:	00800084 	movi	r2,2
  1259bc:	80000015 	stw	zero,0(r16)
  1259c0:	80000115 	stw	zero,4(r16)
  1259c4:	80000215 	stw	zero,8(r16)
  1259c8:	80001915 	stw	zero,100(r16)
  1259cc:	8080038d 	sth	r2,14(r16)
  1259d0:	80000415 	stw	zero,16(r16)
  1259d4:	80000515 	stw	zero,20(r16)
  1259d8:	80000615 	stw	zero,24(r16)
  1259dc:	b80d883a 	mov	r6,r23
  1259e0:	000b883a 	mov	r5,zero
  1259e4:	81001704 	addi	r4,r16,92
  1259e8:	01263ac0 	call	1263ac <memset>
  1259ec:	00800044 	movi	r2,1
  1259f0:	84000715 	stw	r16,28(r16)
  1259f4:	85800815 	stw	r22,32(r16)
  1259f8:	85400915 	stw	r21,36(r16)
  1259fc:	85000a15 	stw	r20,40(r16)
  125a00:	84c00b15 	stw	r19,44(r16)
  125a04:	90800e15 	stw	r2,56(r18)
  125a08:	dfc00817 	ldw	ra,32(sp)
  125a0c:	ddc00717 	ldw	r23,28(sp)
  125a10:	dd800617 	ldw	r22,24(sp)
  125a14:	dd400517 	ldw	r21,20(sp)
  125a18:	dd000417 	ldw	r20,16(sp)
  125a1c:	dcc00317 	ldw	r19,12(sp)
  125a20:	dc800217 	ldw	r18,8(sp)
  125a24:	dc400117 	ldw	r17,4(sp)
  125a28:	dc000017 	ldw	r16,0(sp)
  125a2c:	dec00904 	addi	sp,sp,36
  125a30:	f800283a 	ret

00125a34 <__fp_lock>:
  125a34:	0005883a 	mov	r2,zero
  125a38:	f800283a 	ret

00125a3c <__sfmoreglue>:
  125a3c:	defffc04 	addi	sp,sp,-16
  125a40:	dc800215 	stw	r18,8(sp)
  125a44:	2825883a 	mov	r18,r5
  125a48:	dc000015 	stw	r16,0(sp)
  125a4c:	01401a04 	movi	r5,104
  125a50:	2021883a 	mov	r16,r4
  125a54:	913fffc4 	addi	r4,r18,-1
  125a58:	dfc00315 	stw	ra,12(sp)
  125a5c:	dc400115 	stw	r17,4(sp)
  125a60:	0126aec0 	call	126aec <__mulsi3>
  125a64:	8009883a 	mov	r4,r16
  125a68:	11401d04 	addi	r5,r2,116
  125a6c:	1023883a 	mov	r17,r2
  125a70:	0123f900 	call	123f90 <_malloc_r>
  125a74:	1021883a 	mov	r16,r2
  125a78:	10000726 	beq	r2,zero,125a98 <__sfmoreglue+0x5c>
  125a7c:	11000304 	addi	r4,r2,12
  125a80:	10000015 	stw	zero,0(r2)
  125a84:	14800115 	stw	r18,4(r2)
  125a88:	11000215 	stw	r4,8(r2)
  125a8c:	89801a04 	addi	r6,r17,104
  125a90:	000b883a 	mov	r5,zero
  125a94:	01263ac0 	call	1263ac <memset>
  125a98:	8005883a 	mov	r2,r16
  125a9c:	dfc00317 	ldw	ra,12(sp)
  125aa0:	dc800217 	ldw	r18,8(sp)
  125aa4:	dc400117 	ldw	r17,4(sp)
  125aa8:	dc000017 	ldw	r16,0(sp)
  125aac:	dec00404 	addi	sp,sp,16
  125ab0:	f800283a 	ret

00125ab4 <__sfp>:
  125ab4:	defffb04 	addi	sp,sp,-20
  125ab8:	dc000015 	stw	r16,0(sp)
  125abc:	040004f4 	movhi	r16,19
  125ac0:	8423a304 	addi	r16,r16,-29044
  125ac4:	dcc00315 	stw	r19,12(sp)
  125ac8:	2027883a 	mov	r19,r4
  125acc:	81000017 	ldw	r4,0(r16)
  125ad0:	dfc00415 	stw	ra,16(sp)
  125ad4:	dc800215 	stw	r18,8(sp)
  125ad8:	20800e17 	ldw	r2,56(r4)
  125adc:	dc400115 	stw	r17,4(sp)
  125ae0:	1000021e 	bne	r2,zero,125aec <__sfp+0x38>
  125ae4:	01258980 	call	125898 <__sinit.part.1>
  125ae8:	81000017 	ldw	r4,0(r16)
  125aec:	2480b804 	addi	r18,r4,736
  125af0:	047fffc4 	movi	r17,-1
  125af4:	91000117 	ldw	r4,4(r18)
  125af8:	94000217 	ldw	r16,8(r18)
  125afc:	213fffc4 	addi	r4,r4,-1
  125b00:	20000a16 	blt	r4,zero,125b2c <__sfp+0x78>
  125b04:	8080030f 	ldh	r2,12(r16)
  125b08:	10000c26 	beq	r2,zero,125b3c <__sfp+0x88>
  125b0c:	80c01d04 	addi	r3,r16,116
  125b10:	00000206 	br	125b1c <__sfp+0x68>
  125b14:	18bfe60f 	ldh	r2,-104(r3)
  125b18:	10000826 	beq	r2,zero,125b3c <__sfp+0x88>
  125b1c:	213fffc4 	addi	r4,r4,-1
  125b20:	1c3ffd04 	addi	r16,r3,-12
  125b24:	18c01a04 	addi	r3,r3,104
  125b28:	247ffa1e 	bne	r4,r17,125b14 <__alt_data_end+0xfffe63f4>
  125b2c:	90800017 	ldw	r2,0(r18)
  125b30:	10001d26 	beq	r2,zero,125ba8 <__sfp+0xf4>
  125b34:	1025883a 	mov	r18,r2
  125b38:	003fee06 	br	125af4 <__alt_data_end+0xfffe63d4>
  125b3c:	00bfffc4 	movi	r2,-1
  125b40:	8080038d 	sth	r2,14(r16)
  125b44:	00800044 	movi	r2,1
  125b48:	8080030d 	sth	r2,12(r16)
  125b4c:	80001915 	stw	zero,100(r16)
  125b50:	80000015 	stw	zero,0(r16)
  125b54:	80000215 	stw	zero,8(r16)
  125b58:	80000115 	stw	zero,4(r16)
  125b5c:	80000415 	stw	zero,16(r16)
  125b60:	80000515 	stw	zero,20(r16)
  125b64:	80000615 	stw	zero,24(r16)
  125b68:	01800204 	movi	r6,8
  125b6c:	000b883a 	mov	r5,zero
  125b70:	81001704 	addi	r4,r16,92
  125b74:	01263ac0 	call	1263ac <memset>
  125b78:	8005883a 	mov	r2,r16
  125b7c:	80000c15 	stw	zero,48(r16)
  125b80:	80000d15 	stw	zero,52(r16)
  125b84:	80001115 	stw	zero,68(r16)
  125b88:	80001215 	stw	zero,72(r16)
  125b8c:	dfc00417 	ldw	ra,16(sp)
  125b90:	dcc00317 	ldw	r19,12(sp)
  125b94:	dc800217 	ldw	r18,8(sp)
  125b98:	dc400117 	ldw	r17,4(sp)
  125b9c:	dc000017 	ldw	r16,0(sp)
  125ba0:	dec00504 	addi	sp,sp,20
  125ba4:	f800283a 	ret
  125ba8:	01400104 	movi	r5,4
  125bac:	9809883a 	mov	r4,r19
  125bb0:	0125a3c0 	call	125a3c <__sfmoreglue>
  125bb4:	90800015 	stw	r2,0(r18)
  125bb8:	103fde1e 	bne	r2,zero,125b34 <__alt_data_end+0xfffe6414>
  125bbc:	00800304 	movi	r2,12
  125bc0:	98800015 	stw	r2,0(r19)
  125bc4:	0005883a 	mov	r2,zero
  125bc8:	003ff006 	br	125b8c <__alt_data_end+0xfffe646c>

00125bcc <_cleanup>:
  125bcc:	008004f4 	movhi	r2,19
  125bd0:	10a3a304 	addi	r2,r2,-29044
  125bd4:	11000017 	ldw	r4,0(r2)
  125bd8:	014004b4 	movhi	r5,18
  125bdc:	2959b104 	addi	r5,r5,26308
  125be0:	012612c1 	jmpi	12612c <_fwalk_reent>

00125be4 <__sinit>:
  125be4:	20800e17 	ldw	r2,56(r4)
  125be8:	10000126 	beq	r2,zero,125bf0 <__sinit+0xc>
  125bec:	f800283a 	ret
  125bf0:	01258981 	jmpi	125898 <__sinit.part.1>

00125bf4 <__sfp_lock_acquire>:
  125bf4:	f800283a 	ret

00125bf8 <__sfp_lock_release>:
  125bf8:	f800283a 	ret

00125bfc <__sinit_lock_acquire>:
  125bfc:	f800283a 	ret

00125c00 <__sinit_lock_release>:
  125c00:	f800283a 	ret

00125c04 <__fp_lock_all>:
  125c04:	008004f4 	movhi	r2,19
  125c08:	10a3a404 	addi	r2,r2,-29040
  125c0c:	11000017 	ldw	r4,0(r2)
  125c10:	014004b4 	movhi	r5,18
  125c14:	29568d04 	addi	r5,r5,23092
  125c18:	01260681 	jmpi	126068 <_fwalk>

00125c1c <__fp_unlock_all>:
  125c1c:	008004f4 	movhi	r2,19
  125c20:	10a3a404 	addi	r2,r2,-29040
  125c24:	11000017 	ldw	r4,0(r2)
  125c28:	014004b4 	movhi	r5,18
  125c2c:	29562104 	addi	r5,r5,22660
  125c30:	01260681 	jmpi	126068 <_fwalk>

00125c34 <_malloc_trim_r>:
  125c34:	defffb04 	addi	sp,sp,-20
  125c38:	dcc00315 	stw	r19,12(sp)
  125c3c:	04c004f4 	movhi	r19,19
  125c40:	dc800215 	stw	r18,8(sp)
  125c44:	dc400115 	stw	r17,4(sp)
  125c48:	dc000015 	stw	r16,0(sp)
  125c4c:	dfc00415 	stw	ra,16(sp)
  125c50:	2821883a 	mov	r16,r5
  125c54:	9ce29404 	addi	r19,r19,-30128
  125c58:	2025883a 	mov	r18,r4
  125c5c:	0126e3c0 	call	126e3c <__malloc_lock>
  125c60:	98800217 	ldw	r2,8(r19)
  125c64:	14400117 	ldw	r17,4(r2)
  125c68:	00bfff04 	movi	r2,-4
  125c6c:	88a2703a 	and	r17,r17,r2
  125c70:	8c21c83a 	sub	r16,r17,r16
  125c74:	8403fbc4 	addi	r16,r16,4079
  125c78:	8020d33a 	srli	r16,r16,12
  125c7c:	0083ffc4 	movi	r2,4095
  125c80:	843fffc4 	addi	r16,r16,-1
  125c84:	8020933a 	slli	r16,r16,12
  125c88:	1400060e 	bge	r2,r16,125ca4 <_malloc_trim_r+0x70>
  125c8c:	000b883a 	mov	r5,zero
  125c90:	9009883a 	mov	r4,r18
  125c94:	01251040 	call	125104 <_sbrk_r>
  125c98:	98c00217 	ldw	r3,8(r19)
  125c9c:	1c47883a 	add	r3,r3,r17
  125ca0:	10c00a26 	beq	r2,r3,125ccc <_malloc_trim_r+0x98>
  125ca4:	9009883a 	mov	r4,r18
  125ca8:	0126e600 	call	126e60 <__malloc_unlock>
  125cac:	0005883a 	mov	r2,zero
  125cb0:	dfc00417 	ldw	ra,16(sp)
  125cb4:	dcc00317 	ldw	r19,12(sp)
  125cb8:	dc800217 	ldw	r18,8(sp)
  125cbc:	dc400117 	ldw	r17,4(sp)
  125cc0:	dc000017 	ldw	r16,0(sp)
  125cc4:	dec00504 	addi	sp,sp,20
  125cc8:	f800283a 	ret
  125ccc:	040bc83a 	sub	r5,zero,r16
  125cd0:	9009883a 	mov	r4,r18
  125cd4:	01251040 	call	125104 <_sbrk_r>
  125cd8:	00ffffc4 	movi	r3,-1
  125cdc:	10c00d26 	beq	r2,r3,125d14 <_malloc_trim_r+0xe0>
  125ce0:	00c004f4 	movhi	r3,19
  125ce4:	18eace04 	addi	r3,r3,-21704
  125ce8:	18800017 	ldw	r2,0(r3)
  125cec:	99000217 	ldw	r4,8(r19)
  125cf0:	8c23c83a 	sub	r17,r17,r16
  125cf4:	8c400054 	ori	r17,r17,1
  125cf8:	1421c83a 	sub	r16,r2,r16
  125cfc:	24400115 	stw	r17,4(r4)
  125d00:	9009883a 	mov	r4,r18
  125d04:	1c000015 	stw	r16,0(r3)
  125d08:	0126e600 	call	126e60 <__malloc_unlock>
  125d0c:	00800044 	movi	r2,1
  125d10:	003fe706 	br	125cb0 <__alt_data_end+0xfffe6590>
  125d14:	000b883a 	mov	r5,zero
  125d18:	9009883a 	mov	r4,r18
  125d1c:	01251040 	call	125104 <_sbrk_r>
  125d20:	99000217 	ldw	r4,8(r19)
  125d24:	014003c4 	movi	r5,15
  125d28:	1107c83a 	sub	r3,r2,r4
  125d2c:	28ffdd0e 	bge	r5,r3,125ca4 <__alt_data_end+0xfffe6584>
  125d30:	014004f4 	movhi	r5,19
  125d34:	2963a504 	addi	r5,r5,-29036
  125d38:	29400017 	ldw	r5,0(r5)
  125d3c:	18c00054 	ori	r3,r3,1
  125d40:	20c00115 	stw	r3,4(r4)
  125d44:	00c004f4 	movhi	r3,19
  125d48:	1145c83a 	sub	r2,r2,r5
  125d4c:	18eace04 	addi	r3,r3,-21704
  125d50:	18800015 	stw	r2,0(r3)
  125d54:	003fd306 	br	125ca4 <__alt_data_end+0xfffe6584>

00125d58 <_free_r>:
  125d58:	28004126 	beq	r5,zero,125e60 <_free_r+0x108>
  125d5c:	defffd04 	addi	sp,sp,-12
  125d60:	dc400115 	stw	r17,4(sp)
  125d64:	dc000015 	stw	r16,0(sp)
  125d68:	2023883a 	mov	r17,r4
  125d6c:	2821883a 	mov	r16,r5
  125d70:	dfc00215 	stw	ra,8(sp)
  125d74:	0126e3c0 	call	126e3c <__malloc_lock>
  125d78:	81ffff17 	ldw	r7,-4(r16)
  125d7c:	00bfff84 	movi	r2,-2
  125d80:	010004f4 	movhi	r4,19
  125d84:	81bffe04 	addi	r6,r16,-8
  125d88:	3884703a 	and	r2,r7,r2
  125d8c:	21229404 	addi	r4,r4,-30128
  125d90:	308b883a 	add	r5,r6,r2
  125d94:	2a400117 	ldw	r9,4(r5)
  125d98:	22000217 	ldw	r8,8(r4)
  125d9c:	00ffff04 	movi	r3,-4
  125da0:	48c6703a 	and	r3,r9,r3
  125da4:	2a005726 	beq	r5,r8,125f04 <_free_r+0x1ac>
  125da8:	28c00115 	stw	r3,4(r5)
  125dac:	39c0004c 	andi	r7,r7,1
  125db0:	3800091e 	bne	r7,zero,125dd8 <_free_r+0x80>
  125db4:	823ffe17 	ldw	r8,-8(r16)
  125db8:	22400204 	addi	r9,r4,8
  125dbc:	320dc83a 	sub	r6,r6,r8
  125dc0:	31c00217 	ldw	r7,8(r6)
  125dc4:	1205883a 	add	r2,r2,r8
  125dc8:	3a406526 	beq	r7,r9,125f60 <_free_r+0x208>
  125dcc:	32000317 	ldw	r8,12(r6)
  125dd0:	3a000315 	stw	r8,12(r7)
  125dd4:	41c00215 	stw	r7,8(r8)
  125dd8:	28cf883a 	add	r7,r5,r3
  125ddc:	39c00117 	ldw	r7,4(r7)
  125de0:	39c0004c 	andi	r7,r7,1
  125de4:	38003a26 	beq	r7,zero,125ed0 <_free_r+0x178>
  125de8:	10c00054 	ori	r3,r2,1
  125dec:	30c00115 	stw	r3,4(r6)
  125df0:	3087883a 	add	r3,r6,r2
  125df4:	18800015 	stw	r2,0(r3)
  125df8:	00c07fc4 	movi	r3,511
  125dfc:	18801936 	bltu	r3,r2,125e64 <_free_r+0x10c>
  125e00:	1004d0fa 	srli	r2,r2,3
  125e04:	01c00044 	movi	r7,1
  125e08:	21400117 	ldw	r5,4(r4)
  125e0c:	10c00044 	addi	r3,r2,1
  125e10:	18c7883a 	add	r3,r3,r3
  125e14:	1005d0ba 	srai	r2,r2,2
  125e18:	18c7883a 	add	r3,r3,r3
  125e1c:	18c7883a 	add	r3,r3,r3
  125e20:	1907883a 	add	r3,r3,r4
  125e24:	3884983a 	sll	r2,r7,r2
  125e28:	19c00017 	ldw	r7,0(r3)
  125e2c:	1a3ffe04 	addi	r8,r3,-8
  125e30:	1144b03a 	or	r2,r2,r5
  125e34:	32000315 	stw	r8,12(r6)
  125e38:	31c00215 	stw	r7,8(r6)
  125e3c:	20800115 	stw	r2,4(r4)
  125e40:	19800015 	stw	r6,0(r3)
  125e44:	39800315 	stw	r6,12(r7)
  125e48:	8809883a 	mov	r4,r17
  125e4c:	dfc00217 	ldw	ra,8(sp)
  125e50:	dc400117 	ldw	r17,4(sp)
  125e54:	dc000017 	ldw	r16,0(sp)
  125e58:	dec00304 	addi	sp,sp,12
  125e5c:	0126e601 	jmpi	126e60 <__malloc_unlock>
  125e60:	f800283a 	ret
  125e64:	100ad27a 	srli	r5,r2,9
  125e68:	00c00104 	movi	r3,4
  125e6c:	19404a36 	bltu	r3,r5,125f98 <_free_r+0x240>
  125e70:	100ad1ba 	srli	r5,r2,6
  125e74:	28c00e44 	addi	r3,r5,57
  125e78:	18c7883a 	add	r3,r3,r3
  125e7c:	29400e04 	addi	r5,r5,56
  125e80:	18c7883a 	add	r3,r3,r3
  125e84:	18c7883a 	add	r3,r3,r3
  125e88:	1909883a 	add	r4,r3,r4
  125e8c:	20c00017 	ldw	r3,0(r4)
  125e90:	01c004f4 	movhi	r7,19
  125e94:	213ffe04 	addi	r4,r4,-8
  125e98:	39e29404 	addi	r7,r7,-30128
  125e9c:	20c04426 	beq	r4,r3,125fb0 <_free_r+0x258>
  125ea0:	01ffff04 	movi	r7,-4
  125ea4:	19400117 	ldw	r5,4(r3)
  125ea8:	29ca703a 	and	r5,r5,r7
  125eac:	1140022e 	bgeu	r2,r5,125eb8 <_free_r+0x160>
  125eb0:	18c00217 	ldw	r3,8(r3)
  125eb4:	20fffb1e 	bne	r4,r3,125ea4 <__alt_data_end+0xfffe6784>
  125eb8:	19000317 	ldw	r4,12(r3)
  125ebc:	31000315 	stw	r4,12(r6)
  125ec0:	30c00215 	stw	r3,8(r6)
  125ec4:	21800215 	stw	r6,8(r4)
  125ec8:	19800315 	stw	r6,12(r3)
  125ecc:	003fde06 	br	125e48 <__alt_data_end+0xfffe6728>
  125ed0:	29c00217 	ldw	r7,8(r5)
  125ed4:	10c5883a 	add	r2,r2,r3
  125ed8:	00c004f4 	movhi	r3,19
  125edc:	18e29604 	addi	r3,r3,-30120
  125ee0:	38c03b26 	beq	r7,r3,125fd0 <_free_r+0x278>
  125ee4:	2a000317 	ldw	r8,12(r5)
  125ee8:	11400054 	ori	r5,r2,1
  125eec:	3087883a 	add	r3,r6,r2
  125ef0:	3a000315 	stw	r8,12(r7)
  125ef4:	41c00215 	stw	r7,8(r8)
  125ef8:	31400115 	stw	r5,4(r6)
  125efc:	18800015 	stw	r2,0(r3)
  125f00:	003fbd06 	br	125df8 <__alt_data_end+0xfffe66d8>
  125f04:	39c0004c 	andi	r7,r7,1
  125f08:	10c5883a 	add	r2,r2,r3
  125f0c:	3800071e 	bne	r7,zero,125f2c <_free_r+0x1d4>
  125f10:	81fffe17 	ldw	r7,-8(r16)
  125f14:	31cdc83a 	sub	r6,r6,r7
  125f18:	30c00317 	ldw	r3,12(r6)
  125f1c:	31400217 	ldw	r5,8(r6)
  125f20:	11c5883a 	add	r2,r2,r7
  125f24:	28c00315 	stw	r3,12(r5)
  125f28:	19400215 	stw	r5,8(r3)
  125f2c:	10c00054 	ori	r3,r2,1
  125f30:	30c00115 	stw	r3,4(r6)
  125f34:	00c004f4 	movhi	r3,19
  125f38:	18e3a604 	addi	r3,r3,-29032
  125f3c:	18c00017 	ldw	r3,0(r3)
  125f40:	21800215 	stw	r6,8(r4)
  125f44:	10ffc036 	bltu	r2,r3,125e48 <__alt_data_end+0xfffe6728>
  125f48:	008004f4 	movhi	r2,19
  125f4c:	10aacd04 	addi	r2,r2,-21708
  125f50:	11400017 	ldw	r5,0(r2)
  125f54:	8809883a 	mov	r4,r17
  125f58:	0125c340 	call	125c34 <_malloc_trim_r>
  125f5c:	003fba06 	br	125e48 <__alt_data_end+0xfffe6728>
  125f60:	28c9883a 	add	r4,r5,r3
  125f64:	21000117 	ldw	r4,4(r4)
  125f68:	2100004c 	andi	r4,r4,1
  125f6c:	2000391e 	bne	r4,zero,126054 <_free_r+0x2fc>
  125f70:	29c00217 	ldw	r7,8(r5)
  125f74:	29000317 	ldw	r4,12(r5)
  125f78:	1885883a 	add	r2,r3,r2
  125f7c:	10c00054 	ori	r3,r2,1
  125f80:	39000315 	stw	r4,12(r7)
  125f84:	21c00215 	stw	r7,8(r4)
  125f88:	30c00115 	stw	r3,4(r6)
  125f8c:	308d883a 	add	r6,r6,r2
  125f90:	30800015 	stw	r2,0(r6)
  125f94:	003fac06 	br	125e48 <__alt_data_end+0xfffe6728>
  125f98:	00c00504 	movi	r3,20
  125f9c:	19401536 	bltu	r3,r5,125ff4 <_free_r+0x29c>
  125fa0:	28c01704 	addi	r3,r5,92
  125fa4:	18c7883a 	add	r3,r3,r3
  125fa8:	294016c4 	addi	r5,r5,91
  125fac:	003fb406 	br	125e80 <__alt_data_end+0xfffe6760>
  125fb0:	280bd0ba 	srai	r5,r5,2
  125fb4:	00c00044 	movi	r3,1
  125fb8:	38800117 	ldw	r2,4(r7)
  125fbc:	194a983a 	sll	r5,r3,r5
  125fc0:	2007883a 	mov	r3,r4
  125fc4:	2884b03a 	or	r2,r5,r2
  125fc8:	38800115 	stw	r2,4(r7)
  125fcc:	003fbb06 	br	125ebc <__alt_data_end+0xfffe679c>
  125fd0:	21800515 	stw	r6,20(r4)
  125fd4:	21800415 	stw	r6,16(r4)
  125fd8:	10c00054 	ori	r3,r2,1
  125fdc:	31c00315 	stw	r7,12(r6)
  125fe0:	31c00215 	stw	r7,8(r6)
  125fe4:	30c00115 	stw	r3,4(r6)
  125fe8:	308d883a 	add	r6,r6,r2
  125fec:	30800015 	stw	r2,0(r6)
  125ff0:	003f9506 	br	125e48 <__alt_data_end+0xfffe6728>
  125ff4:	00c01504 	movi	r3,84
  125ff8:	19400536 	bltu	r3,r5,126010 <_free_r+0x2b8>
  125ffc:	100ad33a 	srli	r5,r2,12
  126000:	28c01bc4 	addi	r3,r5,111
  126004:	18c7883a 	add	r3,r3,r3
  126008:	29401b84 	addi	r5,r5,110
  12600c:	003f9c06 	br	125e80 <__alt_data_end+0xfffe6760>
  126010:	00c05504 	movi	r3,340
  126014:	19400536 	bltu	r3,r5,12602c <_free_r+0x2d4>
  126018:	100ad3fa 	srli	r5,r2,15
  12601c:	28c01e04 	addi	r3,r5,120
  126020:	18c7883a 	add	r3,r3,r3
  126024:	29401dc4 	addi	r5,r5,119
  126028:	003f9506 	br	125e80 <__alt_data_end+0xfffe6760>
  12602c:	00c15504 	movi	r3,1364
  126030:	19400536 	bltu	r3,r5,126048 <_free_r+0x2f0>
  126034:	100ad4ba 	srli	r5,r2,18
  126038:	28c01f44 	addi	r3,r5,125
  12603c:	18c7883a 	add	r3,r3,r3
  126040:	29401f04 	addi	r5,r5,124
  126044:	003f8e06 	br	125e80 <__alt_data_end+0xfffe6760>
  126048:	00c03f84 	movi	r3,254
  12604c:	01401f84 	movi	r5,126
  126050:	003f8b06 	br	125e80 <__alt_data_end+0xfffe6760>
  126054:	10c00054 	ori	r3,r2,1
  126058:	30c00115 	stw	r3,4(r6)
  12605c:	308d883a 	add	r6,r6,r2
  126060:	30800015 	stw	r2,0(r6)
  126064:	003f7806 	br	125e48 <__alt_data_end+0xfffe6728>

00126068 <_fwalk>:
  126068:	defff704 	addi	sp,sp,-36
  12606c:	dd000415 	stw	r20,16(sp)
  126070:	dfc00815 	stw	ra,32(sp)
  126074:	ddc00715 	stw	r23,28(sp)
  126078:	dd800615 	stw	r22,24(sp)
  12607c:	dd400515 	stw	r21,20(sp)
  126080:	dcc00315 	stw	r19,12(sp)
  126084:	dc800215 	stw	r18,8(sp)
  126088:	dc400115 	stw	r17,4(sp)
  12608c:	dc000015 	stw	r16,0(sp)
  126090:	2500b804 	addi	r20,r4,736
  126094:	a0002326 	beq	r20,zero,126124 <_fwalk+0xbc>
  126098:	282b883a 	mov	r21,r5
  12609c:	002f883a 	mov	r23,zero
  1260a0:	05800044 	movi	r22,1
  1260a4:	04ffffc4 	movi	r19,-1
  1260a8:	a4400117 	ldw	r17,4(r20)
  1260ac:	a4800217 	ldw	r18,8(r20)
  1260b0:	8c7fffc4 	addi	r17,r17,-1
  1260b4:	88000d16 	blt	r17,zero,1260ec <_fwalk+0x84>
  1260b8:	94000304 	addi	r16,r18,12
  1260bc:	94800384 	addi	r18,r18,14
  1260c0:	8080000b 	ldhu	r2,0(r16)
  1260c4:	8c7fffc4 	addi	r17,r17,-1
  1260c8:	813ffd04 	addi	r4,r16,-12
  1260cc:	b080042e 	bgeu	r22,r2,1260e0 <_fwalk+0x78>
  1260d0:	9080000f 	ldh	r2,0(r18)
  1260d4:	14c00226 	beq	r2,r19,1260e0 <_fwalk+0x78>
  1260d8:	a83ee83a 	callr	r21
  1260dc:	b8aeb03a 	or	r23,r23,r2
  1260e0:	84001a04 	addi	r16,r16,104
  1260e4:	94801a04 	addi	r18,r18,104
  1260e8:	8cfff51e 	bne	r17,r19,1260c0 <__alt_data_end+0xfffe69a0>
  1260ec:	a5000017 	ldw	r20,0(r20)
  1260f0:	a03fed1e 	bne	r20,zero,1260a8 <__alt_data_end+0xfffe6988>
  1260f4:	b805883a 	mov	r2,r23
  1260f8:	dfc00817 	ldw	ra,32(sp)
  1260fc:	ddc00717 	ldw	r23,28(sp)
  126100:	dd800617 	ldw	r22,24(sp)
  126104:	dd400517 	ldw	r21,20(sp)
  126108:	dd000417 	ldw	r20,16(sp)
  12610c:	dcc00317 	ldw	r19,12(sp)
  126110:	dc800217 	ldw	r18,8(sp)
  126114:	dc400117 	ldw	r17,4(sp)
  126118:	dc000017 	ldw	r16,0(sp)
  12611c:	dec00904 	addi	sp,sp,36
  126120:	f800283a 	ret
  126124:	002f883a 	mov	r23,zero
  126128:	003ff206 	br	1260f4 <__alt_data_end+0xfffe69d4>

0012612c <_fwalk_reent>:
  12612c:	defff704 	addi	sp,sp,-36
  126130:	dd000415 	stw	r20,16(sp)
  126134:	dfc00815 	stw	ra,32(sp)
  126138:	ddc00715 	stw	r23,28(sp)
  12613c:	dd800615 	stw	r22,24(sp)
  126140:	dd400515 	stw	r21,20(sp)
  126144:	dcc00315 	stw	r19,12(sp)
  126148:	dc800215 	stw	r18,8(sp)
  12614c:	dc400115 	stw	r17,4(sp)
  126150:	dc000015 	stw	r16,0(sp)
  126154:	2500b804 	addi	r20,r4,736
  126158:	a0002326 	beq	r20,zero,1261e8 <_fwalk_reent+0xbc>
  12615c:	282b883a 	mov	r21,r5
  126160:	2027883a 	mov	r19,r4
  126164:	002f883a 	mov	r23,zero
  126168:	05800044 	movi	r22,1
  12616c:	04bfffc4 	movi	r18,-1
  126170:	a4400117 	ldw	r17,4(r20)
  126174:	a4000217 	ldw	r16,8(r20)
  126178:	8c7fffc4 	addi	r17,r17,-1
  12617c:	88000c16 	blt	r17,zero,1261b0 <_fwalk_reent+0x84>
  126180:	84000304 	addi	r16,r16,12
  126184:	8080000b 	ldhu	r2,0(r16)
  126188:	8c7fffc4 	addi	r17,r17,-1
  12618c:	817ffd04 	addi	r5,r16,-12
  126190:	b080052e 	bgeu	r22,r2,1261a8 <_fwalk_reent+0x7c>
  126194:	8080008f 	ldh	r2,2(r16)
  126198:	9809883a 	mov	r4,r19
  12619c:	14800226 	beq	r2,r18,1261a8 <_fwalk_reent+0x7c>
  1261a0:	a83ee83a 	callr	r21
  1261a4:	b8aeb03a 	or	r23,r23,r2
  1261a8:	84001a04 	addi	r16,r16,104
  1261ac:	8cbff51e 	bne	r17,r18,126184 <__alt_data_end+0xfffe6a64>
  1261b0:	a5000017 	ldw	r20,0(r20)
  1261b4:	a03fee1e 	bne	r20,zero,126170 <__alt_data_end+0xfffe6a50>
  1261b8:	b805883a 	mov	r2,r23
  1261bc:	dfc00817 	ldw	ra,32(sp)
  1261c0:	ddc00717 	ldw	r23,28(sp)
  1261c4:	dd800617 	ldw	r22,24(sp)
  1261c8:	dd400517 	ldw	r21,20(sp)
  1261cc:	dd000417 	ldw	r20,16(sp)
  1261d0:	dcc00317 	ldw	r19,12(sp)
  1261d4:	dc800217 	ldw	r18,8(sp)
  1261d8:	dc400117 	ldw	r17,4(sp)
  1261dc:	dc000017 	ldw	r16,0(sp)
  1261e0:	dec00904 	addi	sp,sp,36
  1261e4:	f800283a 	ret
  1261e8:	002f883a 	mov	r23,zero
  1261ec:	003ff206 	br	1261b8 <__alt_data_end+0xfffe6a98>

001261f0 <__smakebuf_r>:
  1261f0:	2880030b 	ldhu	r2,12(r5)
  1261f4:	10c0008c 	andi	r3,r2,2
  1261f8:	1800411e 	bne	r3,zero,126300 <__smakebuf_r+0x110>
  1261fc:	deffec04 	addi	sp,sp,-80
  126200:	dc000f15 	stw	r16,60(sp)
  126204:	2821883a 	mov	r16,r5
  126208:	2940038f 	ldh	r5,14(r5)
  12620c:	dc401015 	stw	r17,64(sp)
  126210:	dfc01315 	stw	ra,76(sp)
  126214:	dcc01215 	stw	r19,72(sp)
  126218:	dc801115 	stw	r18,68(sp)
  12621c:	2023883a 	mov	r17,r4
  126220:	28001c16 	blt	r5,zero,126294 <__smakebuf_r+0xa4>
  126224:	d80d883a 	mov	r6,sp
  126228:	01267c80 	call	1267c8 <_fstat_r>
  12622c:	10001816 	blt	r2,zero,126290 <__smakebuf_r+0xa0>
  126230:	d8800117 	ldw	r2,4(sp)
  126234:	00e00014 	movui	r3,32768
  126238:	10bc000c 	andi	r2,r2,61440
  12623c:	14c80020 	cmpeqi	r19,r2,8192
  126240:	10c03726 	beq	r2,r3,126320 <__smakebuf_r+0x130>
  126244:	80c0030b 	ldhu	r3,12(r16)
  126248:	18c20014 	ori	r3,r3,2048
  12624c:	80c0030d 	sth	r3,12(r16)
  126250:	00c80004 	movi	r3,8192
  126254:	10c0521e 	bne	r2,r3,1263a0 <__smakebuf_r+0x1b0>
  126258:	8140038f 	ldh	r5,14(r16)
  12625c:	8809883a 	mov	r4,r17
  126260:	01268240 	call	126824 <_isatty_r>
  126264:	10004c26 	beq	r2,zero,126398 <__smakebuf_r+0x1a8>
  126268:	8080030b 	ldhu	r2,12(r16)
  12626c:	80c010c4 	addi	r3,r16,67
  126270:	80c00015 	stw	r3,0(r16)
  126274:	10800054 	ori	r2,r2,1
  126278:	8080030d 	sth	r2,12(r16)
  12627c:	00800044 	movi	r2,1
  126280:	80c00415 	stw	r3,16(r16)
  126284:	80800515 	stw	r2,20(r16)
  126288:	04810004 	movi	r18,1024
  12628c:	00000706 	br	1262ac <__smakebuf_r+0xbc>
  126290:	8080030b 	ldhu	r2,12(r16)
  126294:	10c0200c 	andi	r3,r2,128
  126298:	18001f1e 	bne	r3,zero,126318 <__smakebuf_r+0x128>
  12629c:	04810004 	movi	r18,1024
  1262a0:	10820014 	ori	r2,r2,2048
  1262a4:	8080030d 	sth	r2,12(r16)
  1262a8:	0027883a 	mov	r19,zero
  1262ac:	900b883a 	mov	r5,r18
  1262b0:	8809883a 	mov	r4,r17
  1262b4:	0123f900 	call	123f90 <_malloc_r>
  1262b8:	10002c26 	beq	r2,zero,12636c <__smakebuf_r+0x17c>
  1262bc:	80c0030b 	ldhu	r3,12(r16)
  1262c0:	010004b4 	movhi	r4,18
  1262c4:	21162304 	addi	r4,r4,22668
  1262c8:	89000f15 	stw	r4,60(r17)
  1262cc:	18c02014 	ori	r3,r3,128
  1262d0:	80c0030d 	sth	r3,12(r16)
  1262d4:	80800015 	stw	r2,0(r16)
  1262d8:	80800415 	stw	r2,16(r16)
  1262dc:	84800515 	stw	r18,20(r16)
  1262e0:	98001a1e 	bne	r19,zero,12634c <__smakebuf_r+0x15c>
  1262e4:	dfc01317 	ldw	ra,76(sp)
  1262e8:	dcc01217 	ldw	r19,72(sp)
  1262ec:	dc801117 	ldw	r18,68(sp)
  1262f0:	dc401017 	ldw	r17,64(sp)
  1262f4:	dc000f17 	ldw	r16,60(sp)
  1262f8:	dec01404 	addi	sp,sp,80
  1262fc:	f800283a 	ret
  126300:	288010c4 	addi	r2,r5,67
  126304:	28800015 	stw	r2,0(r5)
  126308:	28800415 	stw	r2,16(r5)
  12630c:	00800044 	movi	r2,1
  126310:	28800515 	stw	r2,20(r5)
  126314:	f800283a 	ret
  126318:	04801004 	movi	r18,64
  12631c:	003fe006 	br	1262a0 <__alt_data_end+0xfffe6b80>
  126320:	81000a17 	ldw	r4,40(r16)
  126324:	00c004b4 	movhi	r3,18
  126328:	18d96b04 	addi	r3,r3,26028
  12632c:	20ffc51e 	bne	r4,r3,126244 <__alt_data_end+0xfffe6b24>
  126330:	8080030b 	ldhu	r2,12(r16)
  126334:	04810004 	movi	r18,1024
  126338:	84801315 	stw	r18,76(r16)
  12633c:	1484b03a 	or	r2,r2,r18
  126340:	8080030d 	sth	r2,12(r16)
  126344:	0027883a 	mov	r19,zero
  126348:	003fd806 	br	1262ac <__alt_data_end+0xfffe6b8c>
  12634c:	8140038f 	ldh	r5,14(r16)
  126350:	8809883a 	mov	r4,r17
  126354:	01268240 	call	126824 <_isatty_r>
  126358:	103fe226 	beq	r2,zero,1262e4 <__alt_data_end+0xfffe6bc4>
  12635c:	8080030b 	ldhu	r2,12(r16)
  126360:	10800054 	ori	r2,r2,1
  126364:	8080030d 	sth	r2,12(r16)
  126368:	003fde06 	br	1262e4 <__alt_data_end+0xfffe6bc4>
  12636c:	8080030b 	ldhu	r2,12(r16)
  126370:	10c0800c 	andi	r3,r2,512
  126374:	183fdb1e 	bne	r3,zero,1262e4 <__alt_data_end+0xfffe6bc4>
  126378:	10800094 	ori	r2,r2,2
  12637c:	80c010c4 	addi	r3,r16,67
  126380:	8080030d 	sth	r2,12(r16)
  126384:	00800044 	movi	r2,1
  126388:	80c00015 	stw	r3,0(r16)
  12638c:	80c00415 	stw	r3,16(r16)
  126390:	80800515 	stw	r2,20(r16)
  126394:	003fd306 	br	1262e4 <__alt_data_end+0xfffe6bc4>
  126398:	04810004 	movi	r18,1024
  12639c:	003fc306 	br	1262ac <__alt_data_end+0xfffe6b8c>
  1263a0:	0027883a 	mov	r19,zero
  1263a4:	04810004 	movi	r18,1024
  1263a8:	003fc006 	br	1262ac <__alt_data_end+0xfffe6b8c>

001263ac <memset>:
  1263ac:	20c000cc 	andi	r3,r4,3
  1263b0:	2005883a 	mov	r2,r4
  1263b4:	18004426 	beq	r3,zero,1264c8 <memset+0x11c>
  1263b8:	31ffffc4 	addi	r7,r6,-1
  1263bc:	30004026 	beq	r6,zero,1264c0 <memset+0x114>
  1263c0:	2813883a 	mov	r9,r5
  1263c4:	200d883a 	mov	r6,r4
  1263c8:	2007883a 	mov	r3,r4
  1263cc:	00000406 	br	1263e0 <memset+0x34>
  1263d0:	3a3fffc4 	addi	r8,r7,-1
  1263d4:	31800044 	addi	r6,r6,1
  1263d8:	38003926 	beq	r7,zero,1264c0 <memset+0x114>
  1263dc:	400f883a 	mov	r7,r8
  1263e0:	18c00044 	addi	r3,r3,1
  1263e4:	32400005 	stb	r9,0(r6)
  1263e8:	1a0000cc 	andi	r8,r3,3
  1263ec:	403ff81e 	bne	r8,zero,1263d0 <__alt_data_end+0xfffe6cb0>
  1263f0:	010000c4 	movi	r4,3
  1263f4:	21c02d2e 	bgeu	r4,r7,1264ac <memset+0x100>
  1263f8:	29003fcc 	andi	r4,r5,255
  1263fc:	200c923a 	slli	r6,r4,8
  126400:	3108b03a 	or	r4,r6,r4
  126404:	200c943a 	slli	r6,r4,16
  126408:	218cb03a 	or	r6,r4,r6
  12640c:	010003c4 	movi	r4,15
  126410:	21c0182e 	bgeu	r4,r7,126474 <memset+0xc8>
  126414:	3b3ffc04 	addi	r12,r7,-16
  126418:	6018d13a 	srli	r12,r12,4
  12641c:	1a000104 	addi	r8,r3,4
  126420:	1ac00204 	addi	r11,r3,8
  126424:	6008913a 	slli	r4,r12,4
  126428:	1a800304 	addi	r10,r3,12
  12642c:	1813883a 	mov	r9,r3
  126430:	21000504 	addi	r4,r4,20
  126434:	1909883a 	add	r4,r3,r4
  126438:	49800015 	stw	r6,0(r9)
  12643c:	41800015 	stw	r6,0(r8)
  126440:	59800015 	stw	r6,0(r11)
  126444:	51800015 	stw	r6,0(r10)
  126448:	42000404 	addi	r8,r8,16
  12644c:	4a400404 	addi	r9,r9,16
  126450:	5ac00404 	addi	r11,r11,16
  126454:	52800404 	addi	r10,r10,16
  126458:	413ff71e 	bne	r8,r4,126438 <__alt_data_end+0xfffe6d18>
  12645c:	63000044 	addi	r12,r12,1
  126460:	6018913a 	slli	r12,r12,4
  126464:	39c003cc 	andi	r7,r7,15
  126468:	010000c4 	movi	r4,3
  12646c:	1b07883a 	add	r3,r3,r12
  126470:	21c00e2e 	bgeu	r4,r7,1264ac <memset+0x100>
  126474:	1813883a 	mov	r9,r3
  126478:	3811883a 	mov	r8,r7
  12647c:	010000c4 	movi	r4,3
  126480:	49800015 	stw	r6,0(r9)
  126484:	423fff04 	addi	r8,r8,-4
  126488:	4a400104 	addi	r9,r9,4
  12648c:	223ffc36 	bltu	r4,r8,126480 <__alt_data_end+0xfffe6d60>
  126490:	393fff04 	addi	r4,r7,-4
  126494:	2008d0ba 	srli	r4,r4,2
  126498:	39c000cc 	andi	r7,r7,3
  12649c:	21000044 	addi	r4,r4,1
  1264a0:	2109883a 	add	r4,r4,r4
  1264a4:	2109883a 	add	r4,r4,r4
  1264a8:	1907883a 	add	r3,r3,r4
  1264ac:	38000526 	beq	r7,zero,1264c4 <memset+0x118>
  1264b0:	19cf883a 	add	r7,r3,r7
  1264b4:	19400005 	stb	r5,0(r3)
  1264b8:	18c00044 	addi	r3,r3,1
  1264bc:	38fffd1e 	bne	r7,r3,1264b4 <__alt_data_end+0xfffe6d94>
  1264c0:	f800283a 	ret
  1264c4:	f800283a 	ret
  1264c8:	2007883a 	mov	r3,r4
  1264cc:	300f883a 	mov	r7,r6
  1264d0:	003fc706 	br	1263f0 <__alt_data_end+0xfffe6cd0>

001264d4 <__sread>:
  1264d4:	defffe04 	addi	sp,sp,-8
  1264d8:	dc000015 	stw	r16,0(sp)
  1264dc:	2821883a 	mov	r16,r5
  1264e0:	2940038f 	ldh	r5,14(r5)
  1264e4:	dfc00115 	stw	ra,4(sp)
  1264e8:	01268d80 	call	1268d8 <_read_r>
  1264ec:	10000716 	blt	r2,zero,12650c <__sread+0x38>
  1264f0:	80c01417 	ldw	r3,80(r16)
  1264f4:	1887883a 	add	r3,r3,r2
  1264f8:	80c01415 	stw	r3,80(r16)
  1264fc:	dfc00117 	ldw	ra,4(sp)
  126500:	dc000017 	ldw	r16,0(sp)
  126504:	dec00204 	addi	sp,sp,8
  126508:	f800283a 	ret
  12650c:	80c0030b 	ldhu	r3,12(r16)
  126510:	18fbffcc 	andi	r3,r3,61439
  126514:	80c0030d 	sth	r3,12(r16)
  126518:	dfc00117 	ldw	ra,4(sp)
  12651c:	dc000017 	ldw	r16,0(sp)
  126520:	dec00204 	addi	sp,sp,8
  126524:	f800283a 	ret

00126528 <__seofread>:
  126528:	0005883a 	mov	r2,zero
  12652c:	f800283a 	ret

00126530 <__swrite>:
  126530:	2880030b 	ldhu	r2,12(r5)
  126534:	defffb04 	addi	sp,sp,-20
  126538:	dcc00315 	stw	r19,12(sp)
  12653c:	dc800215 	stw	r18,8(sp)
  126540:	dc400115 	stw	r17,4(sp)
  126544:	dc000015 	stw	r16,0(sp)
  126548:	dfc00415 	stw	ra,16(sp)
  12654c:	10c0400c 	andi	r3,r2,256
  126550:	2821883a 	mov	r16,r5
  126554:	2023883a 	mov	r17,r4
  126558:	3025883a 	mov	r18,r6
  12655c:	3827883a 	mov	r19,r7
  126560:	18000526 	beq	r3,zero,126578 <__swrite+0x48>
  126564:	2940038f 	ldh	r5,14(r5)
  126568:	01c00084 	movi	r7,2
  12656c:	000d883a 	mov	r6,zero
  126570:	01268780 	call	126878 <_lseek_r>
  126574:	8080030b 	ldhu	r2,12(r16)
  126578:	8140038f 	ldh	r5,14(r16)
  12657c:	10bbffcc 	andi	r2,r2,61439
  126580:	980f883a 	mov	r7,r19
  126584:	900d883a 	mov	r6,r18
  126588:	8809883a 	mov	r4,r17
  12658c:	8080030d 	sth	r2,12(r16)
  126590:	dfc00417 	ldw	ra,16(sp)
  126594:	dcc00317 	ldw	r19,12(sp)
  126598:	dc800217 	ldw	r18,8(sp)
  12659c:	dc400117 	ldw	r17,4(sp)
  1265a0:	dc000017 	ldw	r16,0(sp)
  1265a4:	dec00504 	addi	sp,sp,20
  1265a8:	01266101 	jmpi	126610 <_write_r>

001265ac <__sseek>:
  1265ac:	defffe04 	addi	sp,sp,-8
  1265b0:	dc000015 	stw	r16,0(sp)
  1265b4:	2821883a 	mov	r16,r5
  1265b8:	2940038f 	ldh	r5,14(r5)
  1265bc:	dfc00115 	stw	ra,4(sp)
  1265c0:	01268780 	call	126878 <_lseek_r>
  1265c4:	00ffffc4 	movi	r3,-1
  1265c8:	10c00826 	beq	r2,r3,1265ec <__sseek+0x40>
  1265cc:	80c0030b 	ldhu	r3,12(r16)
  1265d0:	80801415 	stw	r2,80(r16)
  1265d4:	18c40014 	ori	r3,r3,4096
  1265d8:	80c0030d 	sth	r3,12(r16)
  1265dc:	dfc00117 	ldw	ra,4(sp)
  1265e0:	dc000017 	ldw	r16,0(sp)
  1265e4:	dec00204 	addi	sp,sp,8
  1265e8:	f800283a 	ret
  1265ec:	80c0030b 	ldhu	r3,12(r16)
  1265f0:	18fbffcc 	andi	r3,r3,61439
  1265f4:	80c0030d 	sth	r3,12(r16)
  1265f8:	dfc00117 	ldw	ra,4(sp)
  1265fc:	dc000017 	ldw	r16,0(sp)
  126600:	dec00204 	addi	sp,sp,8
  126604:	f800283a 	ret

00126608 <__sclose>:
  126608:	2940038f 	ldh	r5,14(r5)
  12660c:	01266701 	jmpi	126670 <_close_r>

00126610 <_write_r>:
  126610:	defffd04 	addi	sp,sp,-12
  126614:	2805883a 	mov	r2,r5
  126618:	dc000015 	stw	r16,0(sp)
  12661c:	040004f4 	movhi	r16,19
  126620:	dc400115 	stw	r17,4(sp)
  126624:	300b883a 	mov	r5,r6
  126628:	842aca04 	addi	r16,r16,-21720
  12662c:	2023883a 	mov	r17,r4
  126630:	380d883a 	mov	r6,r7
  126634:	1009883a 	mov	r4,r2
  126638:	dfc00215 	stw	ra,8(sp)
  12663c:	80000015 	stw	zero,0(r16)
  126640:	01270b00 	call	1270b0 <write>
  126644:	00ffffc4 	movi	r3,-1
  126648:	10c00526 	beq	r2,r3,126660 <_write_r+0x50>
  12664c:	dfc00217 	ldw	ra,8(sp)
  126650:	dc400117 	ldw	r17,4(sp)
  126654:	dc000017 	ldw	r16,0(sp)
  126658:	dec00304 	addi	sp,sp,12
  12665c:	f800283a 	ret
  126660:	80c00017 	ldw	r3,0(r16)
  126664:	183ff926 	beq	r3,zero,12664c <__alt_data_end+0xfffe6f2c>
  126668:	88c00015 	stw	r3,0(r17)
  12666c:	003ff706 	br	12664c <__alt_data_end+0xfffe6f2c>

00126670 <_close_r>:
  126670:	defffd04 	addi	sp,sp,-12
  126674:	dc000015 	stw	r16,0(sp)
  126678:	040004f4 	movhi	r16,19
  12667c:	dc400115 	stw	r17,4(sp)
  126680:	842aca04 	addi	r16,r16,-21720
  126684:	2023883a 	mov	r17,r4
  126688:	2809883a 	mov	r4,r5
  12668c:	dfc00215 	stw	ra,8(sp)
  126690:	80000015 	stw	zero,0(r16)
  126694:	0122b580 	call	122b58 <close>
  126698:	00ffffc4 	movi	r3,-1
  12669c:	10c00526 	beq	r2,r3,1266b4 <_close_r+0x44>
  1266a0:	dfc00217 	ldw	ra,8(sp)
  1266a4:	dc400117 	ldw	r17,4(sp)
  1266a8:	dc000017 	ldw	r16,0(sp)
  1266ac:	dec00304 	addi	sp,sp,12
  1266b0:	f800283a 	ret
  1266b4:	80c00017 	ldw	r3,0(r16)
  1266b8:	183ff926 	beq	r3,zero,1266a0 <__alt_data_end+0xfffe6f80>
  1266bc:	88c00015 	stw	r3,0(r17)
  1266c0:	003ff706 	br	1266a0 <__alt_data_end+0xfffe6f80>

001266c4 <_fclose_r>:
  1266c4:	28003926 	beq	r5,zero,1267ac <_fclose_r+0xe8>
  1266c8:	defffc04 	addi	sp,sp,-16
  1266cc:	dc400115 	stw	r17,4(sp)
  1266d0:	dc000015 	stw	r16,0(sp)
  1266d4:	dfc00315 	stw	ra,12(sp)
  1266d8:	dc800215 	stw	r18,8(sp)
  1266dc:	2023883a 	mov	r17,r4
  1266e0:	2821883a 	mov	r16,r5
  1266e4:	20000226 	beq	r4,zero,1266f0 <_fclose_r+0x2c>
  1266e8:	20800e17 	ldw	r2,56(r4)
  1266ec:	10002726 	beq	r2,zero,12678c <_fclose_r+0xc8>
  1266f0:	8080030f 	ldh	r2,12(r16)
  1266f4:	1000071e 	bne	r2,zero,126714 <_fclose_r+0x50>
  1266f8:	0005883a 	mov	r2,zero
  1266fc:	dfc00317 	ldw	ra,12(sp)
  126700:	dc800217 	ldw	r18,8(sp)
  126704:	dc400117 	ldw	r17,4(sp)
  126708:	dc000017 	ldw	r16,0(sp)
  12670c:	dec00404 	addi	sp,sp,16
  126710:	f800283a 	ret
  126714:	800b883a 	mov	r5,r16
  126718:	8809883a 	mov	r4,r17
  12671c:	01255dc0 	call	1255dc <__sflush_r>
  126720:	1025883a 	mov	r18,r2
  126724:	80800b17 	ldw	r2,44(r16)
  126728:	10000426 	beq	r2,zero,12673c <_fclose_r+0x78>
  12672c:	81400717 	ldw	r5,28(r16)
  126730:	8809883a 	mov	r4,r17
  126734:	103ee83a 	callr	r2
  126738:	10001616 	blt	r2,zero,126794 <_fclose_r+0xd0>
  12673c:	8080030b 	ldhu	r2,12(r16)
  126740:	1080200c 	andi	r2,r2,128
  126744:	1000151e 	bne	r2,zero,12679c <_fclose_r+0xd8>
  126748:	81400c17 	ldw	r5,48(r16)
  12674c:	28000526 	beq	r5,zero,126764 <_fclose_r+0xa0>
  126750:	80801004 	addi	r2,r16,64
  126754:	28800226 	beq	r5,r2,126760 <_fclose_r+0x9c>
  126758:	8809883a 	mov	r4,r17
  12675c:	0125d580 	call	125d58 <_free_r>
  126760:	80000c15 	stw	zero,48(r16)
  126764:	81401117 	ldw	r5,68(r16)
  126768:	28000326 	beq	r5,zero,126778 <_fclose_r+0xb4>
  12676c:	8809883a 	mov	r4,r17
  126770:	0125d580 	call	125d58 <_free_r>
  126774:	80001115 	stw	zero,68(r16)
  126778:	0125bf40 	call	125bf4 <__sfp_lock_acquire>
  12677c:	8000030d 	sth	zero,12(r16)
  126780:	0125bf80 	call	125bf8 <__sfp_lock_release>
  126784:	9005883a 	mov	r2,r18
  126788:	003fdc06 	br	1266fc <__alt_data_end+0xfffe6fdc>
  12678c:	0125be40 	call	125be4 <__sinit>
  126790:	003fd706 	br	1266f0 <__alt_data_end+0xfffe6fd0>
  126794:	04bfffc4 	movi	r18,-1
  126798:	003fe806 	br	12673c <__alt_data_end+0xfffe701c>
  12679c:	81400417 	ldw	r5,16(r16)
  1267a0:	8809883a 	mov	r4,r17
  1267a4:	0125d580 	call	125d58 <_free_r>
  1267a8:	003fe706 	br	126748 <__alt_data_end+0xfffe7028>
  1267ac:	0005883a 	mov	r2,zero
  1267b0:	f800283a 	ret

001267b4 <fclose>:
  1267b4:	008004f4 	movhi	r2,19
  1267b8:	10a3a404 	addi	r2,r2,-29040
  1267bc:	200b883a 	mov	r5,r4
  1267c0:	11000017 	ldw	r4,0(r2)
  1267c4:	01266c41 	jmpi	1266c4 <_fclose_r>

001267c8 <_fstat_r>:
  1267c8:	defffd04 	addi	sp,sp,-12
  1267cc:	2805883a 	mov	r2,r5
  1267d0:	dc000015 	stw	r16,0(sp)
  1267d4:	040004f4 	movhi	r16,19
  1267d8:	dc400115 	stw	r17,4(sp)
  1267dc:	842aca04 	addi	r16,r16,-21720
  1267e0:	2023883a 	mov	r17,r4
  1267e4:	300b883a 	mov	r5,r6
  1267e8:	1009883a 	mov	r4,r2
  1267ec:	dfc00215 	stw	ra,8(sp)
  1267f0:	80000015 	stw	zero,0(r16)
  1267f4:	0126b840 	call	126b84 <fstat>
  1267f8:	00ffffc4 	movi	r3,-1
  1267fc:	10c00526 	beq	r2,r3,126814 <_fstat_r+0x4c>
  126800:	dfc00217 	ldw	ra,8(sp)
  126804:	dc400117 	ldw	r17,4(sp)
  126808:	dc000017 	ldw	r16,0(sp)
  12680c:	dec00304 	addi	sp,sp,12
  126810:	f800283a 	ret
  126814:	80c00017 	ldw	r3,0(r16)
  126818:	183ff926 	beq	r3,zero,126800 <__alt_data_end+0xfffe70e0>
  12681c:	88c00015 	stw	r3,0(r17)
  126820:	003ff706 	br	126800 <__alt_data_end+0xfffe70e0>

00126824 <_isatty_r>:
  126824:	defffd04 	addi	sp,sp,-12
  126828:	dc000015 	stw	r16,0(sp)
  12682c:	040004f4 	movhi	r16,19
  126830:	dc400115 	stw	r17,4(sp)
  126834:	842aca04 	addi	r16,r16,-21720
  126838:	2023883a 	mov	r17,r4
  12683c:	2809883a 	mov	r4,r5
  126840:	dfc00215 	stw	ra,8(sp)
  126844:	80000015 	stw	zero,0(r16)
  126848:	0126c780 	call	126c78 <isatty>
  12684c:	00ffffc4 	movi	r3,-1
  126850:	10c00526 	beq	r2,r3,126868 <_isatty_r+0x44>
  126854:	dfc00217 	ldw	ra,8(sp)
  126858:	dc400117 	ldw	r17,4(sp)
  12685c:	dc000017 	ldw	r16,0(sp)
  126860:	dec00304 	addi	sp,sp,12
  126864:	f800283a 	ret
  126868:	80c00017 	ldw	r3,0(r16)
  12686c:	183ff926 	beq	r3,zero,126854 <__alt_data_end+0xfffe7134>
  126870:	88c00015 	stw	r3,0(r17)
  126874:	003ff706 	br	126854 <__alt_data_end+0xfffe7134>

00126878 <_lseek_r>:
  126878:	defffd04 	addi	sp,sp,-12
  12687c:	2805883a 	mov	r2,r5
  126880:	dc000015 	stw	r16,0(sp)
  126884:	040004f4 	movhi	r16,19
  126888:	dc400115 	stw	r17,4(sp)
  12688c:	300b883a 	mov	r5,r6
  126890:	842aca04 	addi	r16,r16,-21720
  126894:	2023883a 	mov	r17,r4
  126898:	380d883a 	mov	r6,r7
  12689c:	1009883a 	mov	r4,r2
  1268a0:	dfc00215 	stw	ra,8(sp)
  1268a4:	80000015 	stw	zero,0(r16)
  1268a8:	0126d600 	call	126d60 <lseek>
  1268ac:	00ffffc4 	movi	r3,-1
  1268b0:	10c00526 	beq	r2,r3,1268c8 <_lseek_r+0x50>
  1268b4:	dfc00217 	ldw	ra,8(sp)
  1268b8:	dc400117 	ldw	r17,4(sp)
  1268bc:	dc000017 	ldw	r16,0(sp)
  1268c0:	dec00304 	addi	sp,sp,12
  1268c4:	f800283a 	ret
  1268c8:	80c00017 	ldw	r3,0(r16)
  1268cc:	183ff926 	beq	r3,zero,1268b4 <__alt_data_end+0xfffe7194>
  1268d0:	88c00015 	stw	r3,0(r17)
  1268d4:	003ff706 	br	1268b4 <__alt_data_end+0xfffe7194>

001268d8 <_read_r>:
  1268d8:	defffd04 	addi	sp,sp,-12
  1268dc:	2805883a 	mov	r2,r5
  1268e0:	dc000015 	stw	r16,0(sp)
  1268e4:	040004f4 	movhi	r16,19
  1268e8:	dc400115 	stw	r17,4(sp)
  1268ec:	300b883a 	mov	r5,r6
  1268f0:	842aca04 	addi	r16,r16,-21720
  1268f4:	2023883a 	mov	r17,r4
  1268f8:	380d883a 	mov	r6,r7
  1268fc:	1009883a 	mov	r4,r2
  126900:	dfc00215 	stw	ra,8(sp)
  126904:	80000015 	stw	zero,0(r16)
  126908:	0126ec00 	call	126ec0 <read>
  12690c:	00ffffc4 	movi	r3,-1
  126910:	10c00526 	beq	r2,r3,126928 <_read_r+0x50>
  126914:	dfc00217 	ldw	ra,8(sp)
  126918:	dc400117 	ldw	r17,4(sp)
  12691c:	dc000017 	ldw	r16,0(sp)
  126920:	dec00304 	addi	sp,sp,12
  126924:	f800283a 	ret
  126928:	80c00017 	ldw	r3,0(r16)
  12692c:	183ff926 	beq	r3,zero,126914 <__alt_data_end+0xfffe71f4>
  126930:	88c00015 	stw	r3,0(r17)
  126934:	003ff706 	br	126914 <__alt_data_end+0xfffe71f4>

00126938 <__divsi3>:
  126938:	20001b16 	blt	r4,zero,1269a8 <__divsi3+0x70>
  12693c:	000f883a 	mov	r7,zero
  126940:	28001616 	blt	r5,zero,12699c <__divsi3+0x64>
  126944:	200d883a 	mov	r6,r4
  126948:	29001a2e 	bgeu	r5,r4,1269b4 <__divsi3+0x7c>
  12694c:	00800804 	movi	r2,32
  126950:	00c00044 	movi	r3,1
  126954:	00000106 	br	12695c <__divsi3+0x24>
  126958:	10000d26 	beq	r2,zero,126990 <__divsi3+0x58>
  12695c:	294b883a 	add	r5,r5,r5
  126960:	10bfffc4 	addi	r2,r2,-1
  126964:	18c7883a 	add	r3,r3,r3
  126968:	293ffb36 	bltu	r5,r4,126958 <__alt_data_end+0xfffe7238>
  12696c:	0005883a 	mov	r2,zero
  126970:	18000726 	beq	r3,zero,126990 <__divsi3+0x58>
  126974:	0005883a 	mov	r2,zero
  126978:	31400236 	bltu	r6,r5,126984 <__divsi3+0x4c>
  12697c:	314dc83a 	sub	r6,r6,r5
  126980:	10c4b03a 	or	r2,r2,r3
  126984:	1806d07a 	srli	r3,r3,1
  126988:	280ad07a 	srli	r5,r5,1
  12698c:	183ffa1e 	bne	r3,zero,126978 <__alt_data_end+0xfffe7258>
  126990:	38000126 	beq	r7,zero,126998 <__divsi3+0x60>
  126994:	0085c83a 	sub	r2,zero,r2
  126998:	f800283a 	ret
  12699c:	014bc83a 	sub	r5,zero,r5
  1269a0:	39c0005c 	xori	r7,r7,1
  1269a4:	003fe706 	br	126944 <__alt_data_end+0xfffe7224>
  1269a8:	0109c83a 	sub	r4,zero,r4
  1269ac:	01c00044 	movi	r7,1
  1269b0:	003fe306 	br	126940 <__alt_data_end+0xfffe7220>
  1269b4:	00c00044 	movi	r3,1
  1269b8:	003fee06 	br	126974 <__alt_data_end+0xfffe7254>

001269bc <__modsi3>:
  1269bc:	20001716 	blt	r4,zero,126a1c <__modsi3+0x60>
  1269c0:	000f883a 	mov	r7,zero
  1269c4:	2005883a 	mov	r2,r4
  1269c8:	28001216 	blt	r5,zero,126a14 <__modsi3+0x58>
  1269cc:	2900162e 	bgeu	r5,r4,126a28 <__modsi3+0x6c>
  1269d0:	01800804 	movi	r6,32
  1269d4:	00c00044 	movi	r3,1
  1269d8:	00000106 	br	1269e0 <__modsi3+0x24>
  1269dc:	30000a26 	beq	r6,zero,126a08 <__modsi3+0x4c>
  1269e0:	294b883a 	add	r5,r5,r5
  1269e4:	31bfffc4 	addi	r6,r6,-1
  1269e8:	18c7883a 	add	r3,r3,r3
  1269ec:	293ffb36 	bltu	r5,r4,1269dc <__alt_data_end+0xfffe72bc>
  1269f0:	18000526 	beq	r3,zero,126a08 <__modsi3+0x4c>
  1269f4:	1806d07a 	srli	r3,r3,1
  1269f8:	11400136 	bltu	r2,r5,126a00 <__modsi3+0x44>
  1269fc:	1145c83a 	sub	r2,r2,r5
  126a00:	280ad07a 	srli	r5,r5,1
  126a04:	183ffb1e 	bne	r3,zero,1269f4 <__alt_data_end+0xfffe72d4>
  126a08:	38000126 	beq	r7,zero,126a10 <__modsi3+0x54>
  126a0c:	0085c83a 	sub	r2,zero,r2
  126a10:	f800283a 	ret
  126a14:	014bc83a 	sub	r5,zero,r5
  126a18:	003fec06 	br	1269cc <__alt_data_end+0xfffe72ac>
  126a1c:	0109c83a 	sub	r4,zero,r4
  126a20:	01c00044 	movi	r7,1
  126a24:	003fe706 	br	1269c4 <__alt_data_end+0xfffe72a4>
  126a28:	00c00044 	movi	r3,1
  126a2c:	003ff106 	br	1269f4 <__alt_data_end+0xfffe72d4>

00126a30 <__udivsi3>:
  126a30:	200d883a 	mov	r6,r4
  126a34:	2900152e 	bgeu	r5,r4,126a8c <__udivsi3+0x5c>
  126a38:	28001416 	blt	r5,zero,126a8c <__udivsi3+0x5c>
  126a3c:	00800804 	movi	r2,32
  126a40:	00c00044 	movi	r3,1
  126a44:	00000206 	br	126a50 <__udivsi3+0x20>
  126a48:	10000e26 	beq	r2,zero,126a84 <__udivsi3+0x54>
  126a4c:	28000516 	blt	r5,zero,126a64 <__udivsi3+0x34>
  126a50:	294b883a 	add	r5,r5,r5
  126a54:	10bfffc4 	addi	r2,r2,-1
  126a58:	18c7883a 	add	r3,r3,r3
  126a5c:	293ffa36 	bltu	r5,r4,126a48 <__alt_data_end+0xfffe7328>
  126a60:	18000826 	beq	r3,zero,126a84 <__udivsi3+0x54>
  126a64:	0005883a 	mov	r2,zero
  126a68:	31400236 	bltu	r6,r5,126a74 <__udivsi3+0x44>
  126a6c:	314dc83a 	sub	r6,r6,r5
  126a70:	10c4b03a 	or	r2,r2,r3
  126a74:	1806d07a 	srli	r3,r3,1
  126a78:	280ad07a 	srli	r5,r5,1
  126a7c:	183ffa1e 	bne	r3,zero,126a68 <__alt_data_end+0xfffe7348>
  126a80:	f800283a 	ret
  126a84:	0005883a 	mov	r2,zero
  126a88:	f800283a 	ret
  126a8c:	00c00044 	movi	r3,1
  126a90:	003ff406 	br	126a64 <__alt_data_end+0xfffe7344>

00126a94 <__umodsi3>:
  126a94:	2005883a 	mov	r2,r4
  126a98:	2900122e 	bgeu	r5,r4,126ae4 <__umodsi3+0x50>
  126a9c:	28001116 	blt	r5,zero,126ae4 <__umodsi3+0x50>
  126aa0:	01800804 	movi	r6,32
  126aa4:	00c00044 	movi	r3,1
  126aa8:	00000206 	br	126ab4 <__umodsi3+0x20>
  126aac:	30000c26 	beq	r6,zero,126ae0 <__umodsi3+0x4c>
  126ab0:	28000516 	blt	r5,zero,126ac8 <__umodsi3+0x34>
  126ab4:	294b883a 	add	r5,r5,r5
  126ab8:	31bfffc4 	addi	r6,r6,-1
  126abc:	18c7883a 	add	r3,r3,r3
  126ac0:	293ffa36 	bltu	r5,r4,126aac <__alt_data_end+0xfffe738c>
  126ac4:	18000626 	beq	r3,zero,126ae0 <__umodsi3+0x4c>
  126ac8:	1806d07a 	srli	r3,r3,1
  126acc:	11400136 	bltu	r2,r5,126ad4 <__umodsi3+0x40>
  126ad0:	1145c83a 	sub	r2,r2,r5
  126ad4:	280ad07a 	srli	r5,r5,1
  126ad8:	183ffb1e 	bne	r3,zero,126ac8 <__alt_data_end+0xfffe73a8>
  126adc:	f800283a 	ret
  126ae0:	f800283a 	ret
  126ae4:	00c00044 	movi	r3,1
  126ae8:	003ff706 	br	126ac8 <__alt_data_end+0xfffe73a8>

00126aec <__mulsi3>:
  126aec:	0005883a 	mov	r2,zero
  126af0:	20000726 	beq	r4,zero,126b10 <__mulsi3+0x24>
  126af4:	20c0004c 	andi	r3,r4,1
  126af8:	2008d07a 	srli	r4,r4,1
  126afc:	18000126 	beq	r3,zero,126b04 <__mulsi3+0x18>
  126b00:	1145883a 	add	r2,r2,r5
  126b04:	294b883a 	add	r5,r5,r5
  126b08:	203ffa1e 	bne	r4,zero,126af4 <__alt_data_end+0xfffe73d4>
  126b0c:	f800283a 	ret
  126b10:	f800283a 	ret

00126b14 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  126b14:	defffd04 	addi	sp,sp,-12
  126b18:	df000215 	stw	fp,8(sp)
  126b1c:	df000204 	addi	fp,sp,8
  126b20:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  126b24:	0001883a 	nop
  126b28:	e0bfff17 	ldw	r2,-4(fp)
  126b2c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  126b30:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  126b34:	10000226 	beq	r2,zero,126b40 <_exit+0x2c>
    ALT_SIM_FAIL();
  126b38:	002af070 	cmpltui	zero,zero,43969
  126b3c:	00000106 	br	126b44 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  126b40:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  126b44:	003fff06 	br	126b44 <__alt_data_end+0xfffe7424>

00126b48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  126b48:	defffe04 	addi	sp,sp,-8
  126b4c:	dfc00115 	stw	ra,4(sp)
  126b50:	df000015 	stw	fp,0(sp)
  126b54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  126b58:	d0a00717 	ldw	r2,-32740(gp)
  126b5c:	10000326 	beq	r2,zero,126b6c <alt_get_errno+0x24>
  126b60:	d0a00717 	ldw	r2,-32740(gp)
  126b64:	103ee83a 	callr	r2
  126b68:	00000106 	br	126b70 <alt_get_errno+0x28>
  126b6c:	d0a73404 	addi	r2,gp,-25392
}
  126b70:	e037883a 	mov	sp,fp
  126b74:	dfc00117 	ldw	ra,4(sp)
  126b78:	df000017 	ldw	fp,0(sp)
  126b7c:	dec00204 	addi	sp,sp,8
  126b80:	f800283a 	ret

00126b84 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  126b84:	defffb04 	addi	sp,sp,-20
  126b88:	dfc00415 	stw	ra,16(sp)
  126b8c:	df000315 	stw	fp,12(sp)
  126b90:	df000304 	addi	fp,sp,12
  126b94:	e13ffe15 	stw	r4,-8(fp)
  126b98:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  126b9c:	e0bffe17 	ldw	r2,-8(fp)
  126ba0:	10000816 	blt	r2,zero,126bc4 <fstat+0x40>
  126ba4:	01400304 	movi	r5,12
  126ba8:	e13ffe17 	ldw	r4,-8(fp)
  126bac:	0126aec0 	call	126aec <__mulsi3>
  126bb0:	1007883a 	mov	r3,r2
  126bb4:	008004f4 	movhi	r2,19
  126bb8:	10a12b04 	addi	r2,r2,-31572
  126bbc:	1885883a 	add	r2,r3,r2
  126bc0:	00000106 	br	126bc8 <fstat+0x44>
  126bc4:	0005883a 	mov	r2,zero
  126bc8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  126bcc:	e0bffd17 	ldw	r2,-12(fp)
  126bd0:	10001026 	beq	r2,zero,126c14 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  126bd4:	e0bffd17 	ldw	r2,-12(fp)
  126bd8:	10800017 	ldw	r2,0(r2)
  126bdc:	10800817 	ldw	r2,32(r2)
  126be0:	10000726 	beq	r2,zero,126c00 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
  126be4:	e0bffd17 	ldw	r2,-12(fp)
  126be8:	10800017 	ldw	r2,0(r2)
  126bec:	10800817 	ldw	r2,32(r2)
  126bf0:	e17fff17 	ldw	r5,-4(fp)
  126bf4:	e13ffd17 	ldw	r4,-12(fp)
  126bf8:	103ee83a 	callr	r2
  126bfc:	00000a06 	br	126c28 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  126c00:	e0bfff17 	ldw	r2,-4(fp)
  126c04:	00c80004 	movi	r3,8192
  126c08:	10c00115 	stw	r3,4(r2)
      return 0;
  126c0c:	0005883a 	mov	r2,zero
  126c10:	00000506 	br	126c28 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  126c14:	0126b480 	call	126b48 <alt_get_errno>
  126c18:	1007883a 	mov	r3,r2
  126c1c:	00801444 	movi	r2,81
  126c20:	18800015 	stw	r2,0(r3)
    return -1;
  126c24:	00bfffc4 	movi	r2,-1
  }
}
  126c28:	e037883a 	mov	sp,fp
  126c2c:	dfc00117 	ldw	ra,4(sp)
  126c30:	df000017 	ldw	fp,0(sp)
  126c34:	dec00204 	addi	sp,sp,8
  126c38:	f800283a 	ret

00126c3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  126c3c:	defffe04 	addi	sp,sp,-8
  126c40:	dfc00115 	stw	ra,4(sp)
  126c44:	df000015 	stw	fp,0(sp)
  126c48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  126c4c:	d0a00717 	ldw	r2,-32740(gp)
  126c50:	10000326 	beq	r2,zero,126c60 <alt_get_errno+0x24>
  126c54:	d0a00717 	ldw	r2,-32740(gp)
  126c58:	103ee83a 	callr	r2
  126c5c:	00000106 	br	126c64 <alt_get_errno+0x28>
  126c60:	d0a73404 	addi	r2,gp,-25392
}
  126c64:	e037883a 	mov	sp,fp
  126c68:	dfc00117 	ldw	ra,4(sp)
  126c6c:	df000017 	ldw	fp,0(sp)
  126c70:	dec00204 	addi	sp,sp,8
  126c74:	f800283a 	ret

00126c78 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  126c78:	deffed04 	addi	sp,sp,-76
  126c7c:	dfc01215 	stw	ra,72(sp)
  126c80:	df001115 	stw	fp,68(sp)
  126c84:	df001104 	addi	fp,sp,68
  126c88:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  126c8c:	e0bfff17 	ldw	r2,-4(fp)
  126c90:	10000816 	blt	r2,zero,126cb4 <isatty+0x3c>
  126c94:	01400304 	movi	r5,12
  126c98:	e13fff17 	ldw	r4,-4(fp)
  126c9c:	0126aec0 	call	126aec <__mulsi3>
  126ca0:	1007883a 	mov	r3,r2
  126ca4:	008004f4 	movhi	r2,19
  126ca8:	10a12b04 	addi	r2,r2,-31572
  126cac:	1885883a 	add	r2,r3,r2
  126cb0:	00000106 	br	126cb8 <isatty+0x40>
  126cb4:	0005883a 	mov	r2,zero
  126cb8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  126cbc:	e0bfef17 	ldw	r2,-68(fp)
  126cc0:	10000e26 	beq	r2,zero,126cfc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  126cc4:	e0bfef17 	ldw	r2,-68(fp)
  126cc8:	10800017 	ldw	r2,0(r2)
  126ccc:	10800817 	ldw	r2,32(r2)
  126cd0:	1000021e 	bne	r2,zero,126cdc <isatty+0x64>
    {
      return 1;
  126cd4:	00800044 	movi	r2,1
  126cd8:	00000d06 	br	126d10 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  126cdc:	e0bff004 	addi	r2,fp,-64
  126ce0:	100b883a 	mov	r5,r2
  126ce4:	e13fff17 	ldw	r4,-4(fp)
  126ce8:	0126b840 	call	126b84 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  126cec:	e0bff117 	ldw	r2,-60(fp)
  126cf0:	10880020 	cmpeqi	r2,r2,8192
  126cf4:	10803fcc 	andi	r2,r2,255
  126cf8:	00000506 	br	126d10 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  126cfc:	0126c3c0 	call	126c3c <alt_get_errno>
  126d00:	1007883a 	mov	r3,r2
  126d04:	00801444 	movi	r2,81
  126d08:	18800015 	stw	r2,0(r3)
    return 0;
  126d0c:	0005883a 	mov	r2,zero
  }
}
  126d10:	e037883a 	mov	sp,fp
  126d14:	dfc00117 	ldw	ra,4(sp)
  126d18:	df000017 	ldw	fp,0(sp)
  126d1c:	dec00204 	addi	sp,sp,8
  126d20:	f800283a 	ret

00126d24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  126d24:	defffe04 	addi	sp,sp,-8
  126d28:	dfc00115 	stw	ra,4(sp)
  126d2c:	df000015 	stw	fp,0(sp)
  126d30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  126d34:	d0a00717 	ldw	r2,-32740(gp)
  126d38:	10000326 	beq	r2,zero,126d48 <alt_get_errno+0x24>
  126d3c:	d0a00717 	ldw	r2,-32740(gp)
  126d40:	103ee83a 	callr	r2
  126d44:	00000106 	br	126d4c <alt_get_errno+0x28>
  126d48:	d0a73404 	addi	r2,gp,-25392
}
  126d4c:	e037883a 	mov	sp,fp
  126d50:	dfc00117 	ldw	ra,4(sp)
  126d54:	df000017 	ldw	fp,0(sp)
  126d58:	dec00204 	addi	sp,sp,8
  126d5c:	f800283a 	ret

00126d60 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  126d60:	defff904 	addi	sp,sp,-28
  126d64:	dfc00615 	stw	ra,24(sp)
  126d68:	df000515 	stw	fp,20(sp)
  126d6c:	df000504 	addi	fp,sp,20
  126d70:	e13ffd15 	stw	r4,-12(fp)
  126d74:	e17ffe15 	stw	r5,-8(fp)
  126d78:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  126d7c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  126d80:	e0bffd17 	ldw	r2,-12(fp)
  126d84:	10000816 	blt	r2,zero,126da8 <lseek+0x48>
  126d88:	01400304 	movi	r5,12
  126d8c:	e13ffd17 	ldw	r4,-12(fp)
  126d90:	0126aec0 	call	126aec <__mulsi3>
  126d94:	1007883a 	mov	r3,r2
  126d98:	008004f4 	movhi	r2,19
  126d9c:	10a12b04 	addi	r2,r2,-31572
  126da0:	1885883a 	add	r2,r3,r2
  126da4:	00000106 	br	126dac <lseek+0x4c>
  126da8:	0005883a 	mov	r2,zero
  126dac:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  126db0:	e0bffc17 	ldw	r2,-16(fp)
  126db4:	10001026 	beq	r2,zero,126df8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  126db8:	e0bffc17 	ldw	r2,-16(fp)
  126dbc:	10800017 	ldw	r2,0(r2)
  126dc0:	10800717 	ldw	r2,28(r2)
  126dc4:	10000926 	beq	r2,zero,126dec <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  126dc8:	e0bffc17 	ldw	r2,-16(fp)
  126dcc:	10800017 	ldw	r2,0(r2)
  126dd0:	10800717 	ldw	r2,28(r2)
  126dd4:	e1bfff17 	ldw	r6,-4(fp)
  126dd8:	e17ffe17 	ldw	r5,-8(fp)
  126ddc:	e13ffc17 	ldw	r4,-16(fp)
  126de0:	103ee83a 	callr	r2
  126de4:	e0bffb15 	stw	r2,-20(fp)
  126de8:	00000506 	br	126e00 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  126dec:	00bfde84 	movi	r2,-134
  126df0:	e0bffb15 	stw	r2,-20(fp)
  126df4:	00000206 	br	126e00 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
  126df8:	00bfebc4 	movi	r2,-81
  126dfc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  126e00:	e0bffb17 	ldw	r2,-20(fp)
  126e04:	1000070e 	bge	r2,zero,126e24 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
  126e08:	0126d240 	call	126d24 <alt_get_errno>
  126e0c:	1007883a 	mov	r3,r2
  126e10:	e0bffb17 	ldw	r2,-20(fp)
  126e14:	0085c83a 	sub	r2,zero,r2
  126e18:	18800015 	stw	r2,0(r3)
    rc = -1;
  126e1c:	00bfffc4 	movi	r2,-1
  126e20:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  126e24:	e0bffb17 	ldw	r2,-20(fp)
}
  126e28:	e037883a 	mov	sp,fp
  126e2c:	dfc00117 	ldw	ra,4(sp)
  126e30:	df000017 	ldw	fp,0(sp)
  126e34:	dec00204 	addi	sp,sp,8
  126e38:	f800283a 	ret

00126e3c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  126e3c:	defffe04 	addi	sp,sp,-8
  126e40:	df000115 	stw	fp,4(sp)
  126e44:	df000104 	addi	fp,sp,4
  126e48:	e13fff15 	stw	r4,-4(fp)
}
  126e4c:	0001883a 	nop
  126e50:	e037883a 	mov	sp,fp
  126e54:	df000017 	ldw	fp,0(sp)
  126e58:	dec00104 	addi	sp,sp,4
  126e5c:	f800283a 	ret

00126e60 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  126e60:	defffe04 	addi	sp,sp,-8
  126e64:	df000115 	stw	fp,4(sp)
  126e68:	df000104 	addi	fp,sp,4
  126e6c:	e13fff15 	stw	r4,-4(fp)
}
  126e70:	0001883a 	nop
  126e74:	e037883a 	mov	sp,fp
  126e78:	df000017 	ldw	fp,0(sp)
  126e7c:	dec00104 	addi	sp,sp,4
  126e80:	f800283a 	ret

00126e84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  126e84:	defffe04 	addi	sp,sp,-8
  126e88:	dfc00115 	stw	ra,4(sp)
  126e8c:	df000015 	stw	fp,0(sp)
  126e90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  126e94:	d0a00717 	ldw	r2,-32740(gp)
  126e98:	10000326 	beq	r2,zero,126ea8 <alt_get_errno+0x24>
  126e9c:	d0a00717 	ldw	r2,-32740(gp)
  126ea0:	103ee83a 	callr	r2
  126ea4:	00000106 	br	126eac <alt_get_errno+0x28>
  126ea8:	d0a73404 	addi	r2,gp,-25392
}
  126eac:	e037883a 	mov	sp,fp
  126eb0:	dfc00117 	ldw	ra,4(sp)
  126eb4:	df000017 	ldw	fp,0(sp)
  126eb8:	dec00204 	addi	sp,sp,8
  126ebc:	f800283a 	ret

00126ec0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  126ec0:	defff904 	addi	sp,sp,-28
  126ec4:	dfc00615 	stw	ra,24(sp)
  126ec8:	df000515 	stw	fp,20(sp)
  126ecc:	df000504 	addi	fp,sp,20
  126ed0:	e13ffd15 	stw	r4,-12(fp)
  126ed4:	e17ffe15 	stw	r5,-8(fp)
  126ed8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  126edc:	e0bffd17 	ldw	r2,-12(fp)
  126ee0:	10000816 	blt	r2,zero,126f04 <read+0x44>
  126ee4:	01400304 	movi	r5,12
  126ee8:	e13ffd17 	ldw	r4,-12(fp)
  126eec:	0126aec0 	call	126aec <__mulsi3>
  126ef0:	1007883a 	mov	r3,r2
  126ef4:	008004f4 	movhi	r2,19
  126ef8:	10a12b04 	addi	r2,r2,-31572
  126efc:	1885883a 	add	r2,r3,r2
  126f00:	00000106 	br	126f08 <read+0x48>
  126f04:	0005883a 	mov	r2,zero
  126f08:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  126f0c:	e0bffb17 	ldw	r2,-20(fp)
  126f10:	10002226 	beq	r2,zero,126f9c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  126f14:	e0bffb17 	ldw	r2,-20(fp)
  126f18:	10800217 	ldw	r2,8(r2)
  126f1c:	108000cc 	andi	r2,r2,3
  126f20:	10800060 	cmpeqi	r2,r2,1
  126f24:	1000181e 	bne	r2,zero,126f88 <read+0xc8>
        (fd->dev->read))
  126f28:	e0bffb17 	ldw	r2,-20(fp)
  126f2c:	10800017 	ldw	r2,0(r2)
  126f30:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  126f34:	10001426 	beq	r2,zero,126f88 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  126f38:	e0bffb17 	ldw	r2,-20(fp)
  126f3c:	10800017 	ldw	r2,0(r2)
  126f40:	10800517 	ldw	r2,20(r2)
  126f44:	e0ffff17 	ldw	r3,-4(fp)
  126f48:	180d883a 	mov	r6,r3
  126f4c:	e17ffe17 	ldw	r5,-8(fp)
  126f50:	e13ffb17 	ldw	r4,-20(fp)
  126f54:	103ee83a 	callr	r2
  126f58:	e0bffc15 	stw	r2,-16(fp)
  126f5c:	e0bffc17 	ldw	r2,-16(fp)
  126f60:	1000070e 	bge	r2,zero,126f80 <read+0xc0>
        {
          ALT_ERRNO = -rval;
  126f64:	0126e840 	call	126e84 <alt_get_errno>
  126f68:	1007883a 	mov	r3,r2
  126f6c:	e0bffc17 	ldw	r2,-16(fp)
  126f70:	0085c83a 	sub	r2,zero,r2
  126f74:	18800015 	stw	r2,0(r3)
          return -1;
  126f78:	00bfffc4 	movi	r2,-1
  126f7c:	00000c06 	br	126fb0 <read+0xf0>
        }
        return rval;
  126f80:	e0bffc17 	ldw	r2,-16(fp)
  126f84:	00000a06 	br	126fb0 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
  126f88:	0126e840 	call	126e84 <alt_get_errno>
  126f8c:	1007883a 	mov	r3,r2
  126f90:	00800344 	movi	r2,13
  126f94:	18800015 	stw	r2,0(r3)
  126f98:	00000406 	br	126fac <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  126f9c:	0126e840 	call	126e84 <alt_get_errno>
  126fa0:	1007883a 	mov	r3,r2
  126fa4:	00801444 	movi	r2,81
  126fa8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  126fac:	00bfffc4 	movi	r2,-1
}
  126fb0:	e037883a 	mov	sp,fp
  126fb4:	dfc00117 	ldw	ra,4(sp)
  126fb8:	df000017 	ldw	fp,0(sp)
  126fbc:	dec00204 	addi	sp,sp,8
  126fc0:	f800283a 	ret

00126fc4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  126fc4:	defff904 	addi	sp,sp,-28
  126fc8:	df000615 	stw	fp,24(sp)
  126fcc:	df000604 	addi	fp,sp,24
  126fd0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  126fd4:	0005303a 	rdctl	r2,status
  126fd8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  126fdc:	e0fffe17 	ldw	r3,-8(fp)
  126fe0:	00bfff84 	movi	r2,-2
  126fe4:	1884703a 	and	r2,r3,r2
  126fe8:	1001703a 	wrctl	status,r2
  
  return context;
  126fec:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  126ff0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  126ff4:	d0a01117 	ldw	r2,-32700(gp)
  126ff8:	10c000c4 	addi	r3,r2,3
  126ffc:	00bfff04 	movi	r2,-4
  127000:	1884703a 	and	r2,r3,r2
  127004:	d0a01115 	stw	r2,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  127008:	d0e01117 	ldw	r3,-32700(gp)
  12700c:	e0bfff17 	ldw	r2,-4(fp)
  127010:	1887883a 	add	r3,r3,r2
  127014:	00800534 	movhi	r2,20
  127018:	10bdc804 	addi	r2,r2,-2272
  12701c:	10c0062e 	bgeu	r2,r3,127038 <sbrk+0x74>
  127020:	e0bffb17 	ldw	r2,-20(fp)
  127024:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  127028:	e0bffa17 	ldw	r2,-24(fp)
  12702c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  127030:	00bfffc4 	movi	r2,-1
  127034:	00000b06 	br	127064 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  127038:	d0a01117 	ldw	r2,-32700(gp)
  12703c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  127040:	d0e01117 	ldw	r3,-32700(gp)
  127044:	e0bfff17 	ldw	r2,-4(fp)
  127048:	1885883a 	add	r2,r3,r2
  12704c:	d0a01115 	stw	r2,-32700(gp)
  127050:	e0bffb17 	ldw	r2,-20(fp)
  127054:	e0bffc15 	stw	r2,-16(fp)
  127058:	e0bffc17 	ldw	r2,-16(fp)
  12705c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  127060:	e0bffd17 	ldw	r2,-12(fp)
} 
  127064:	e037883a 	mov	sp,fp
  127068:	df000017 	ldw	fp,0(sp)
  12706c:	dec00104 	addi	sp,sp,4
  127070:	f800283a 	ret

00127074 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  127074:	defffe04 	addi	sp,sp,-8
  127078:	dfc00115 	stw	ra,4(sp)
  12707c:	df000015 	stw	fp,0(sp)
  127080:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  127084:	d0a00717 	ldw	r2,-32740(gp)
  127088:	10000326 	beq	r2,zero,127098 <alt_get_errno+0x24>
  12708c:	d0a00717 	ldw	r2,-32740(gp)
  127090:	103ee83a 	callr	r2
  127094:	00000106 	br	12709c <alt_get_errno+0x28>
  127098:	d0a73404 	addi	r2,gp,-25392
}
  12709c:	e037883a 	mov	sp,fp
  1270a0:	dfc00117 	ldw	ra,4(sp)
  1270a4:	df000017 	ldw	fp,0(sp)
  1270a8:	dec00204 	addi	sp,sp,8
  1270ac:	f800283a 	ret

001270b0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  1270b0:	defff904 	addi	sp,sp,-28
  1270b4:	dfc00615 	stw	ra,24(sp)
  1270b8:	df000515 	stw	fp,20(sp)
  1270bc:	df000504 	addi	fp,sp,20
  1270c0:	e13ffd15 	stw	r4,-12(fp)
  1270c4:	e17ffe15 	stw	r5,-8(fp)
  1270c8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  1270cc:	e0bffd17 	ldw	r2,-12(fp)
  1270d0:	10000816 	blt	r2,zero,1270f4 <write+0x44>
  1270d4:	01400304 	movi	r5,12
  1270d8:	e13ffd17 	ldw	r4,-12(fp)
  1270dc:	0126aec0 	call	126aec <__mulsi3>
  1270e0:	1007883a 	mov	r3,r2
  1270e4:	008004f4 	movhi	r2,19
  1270e8:	10a12b04 	addi	r2,r2,-31572
  1270ec:	1885883a 	add	r2,r3,r2
  1270f0:	00000106 	br	1270f8 <write+0x48>
  1270f4:	0005883a 	mov	r2,zero
  1270f8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  1270fc:	e0bffb17 	ldw	r2,-20(fp)
  127100:	10002126 	beq	r2,zero,127188 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  127104:	e0bffb17 	ldw	r2,-20(fp)
  127108:	10800217 	ldw	r2,8(r2)
  12710c:	108000cc 	andi	r2,r2,3
  127110:	10001826 	beq	r2,zero,127174 <write+0xc4>
  127114:	e0bffb17 	ldw	r2,-20(fp)
  127118:	10800017 	ldw	r2,0(r2)
  12711c:	10800617 	ldw	r2,24(r2)
  127120:	10001426 	beq	r2,zero,127174 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  127124:	e0bffb17 	ldw	r2,-20(fp)
  127128:	10800017 	ldw	r2,0(r2)
  12712c:	10800617 	ldw	r2,24(r2)
  127130:	e0ffff17 	ldw	r3,-4(fp)
  127134:	180d883a 	mov	r6,r3
  127138:	e17ffe17 	ldw	r5,-8(fp)
  12713c:	e13ffb17 	ldw	r4,-20(fp)
  127140:	103ee83a 	callr	r2
  127144:	e0bffc15 	stw	r2,-16(fp)
  127148:	e0bffc17 	ldw	r2,-16(fp)
  12714c:	1000070e 	bge	r2,zero,12716c <write+0xbc>
      {
        ALT_ERRNO = -rval;
  127150:	01270740 	call	127074 <alt_get_errno>
  127154:	1007883a 	mov	r3,r2
  127158:	e0bffc17 	ldw	r2,-16(fp)
  12715c:	0085c83a 	sub	r2,zero,r2
  127160:	18800015 	stw	r2,0(r3)
        return -1;
  127164:	00bfffc4 	movi	r2,-1
  127168:	00000c06 	br	12719c <write+0xec>
      }
      return rval;
  12716c:	e0bffc17 	ldw	r2,-16(fp)
  127170:	00000a06 	br	12719c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
  127174:	01270740 	call	127074 <alt_get_errno>
  127178:	1007883a 	mov	r3,r2
  12717c:	00800344 	movi	r2,13
  127180:	18800015 	stw	r2,0(r3)
  127184:	00000406 	br	127198 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  127188:	01270740 	call	127074 <alt_get_errno>
  12718c:	1007883a 	mov	r3,r2
  127190:	00801444 	movi	r2,81
  127194:	18800015 	stw	r2,0(r3)
  }
  return -1;
  127198:	00bfffc4 	movi	r2,-1
}
  12719c:	e037883a 	mov	sp,fp
  1271a0:	dfc00117 	ldw	ra,4(sp)
  1271a4:	df000017 	ldw	fp,0(sp)
  1271a8:	dec00204 	addi	sp,sp,8
  1271ac:	f800283a 	ret
